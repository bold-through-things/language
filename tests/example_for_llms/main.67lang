note this file here is intended as a crash course into the 67lang
	syntax and semantics. it leverages a correlational approach,
	showcasing the very familiar JS and its translation into our
	language.



local name
	string "Alice"

local age
	int 25

note we prefer snake_case.
local is_active
	true

a print
	a name
	an age
	an is_active

note the above is roughly equivalent to following JS
	
	let name = "Alice";
	const age = 25;
	var isActive = true;
	console.log(name, age, isActive);



fn greet
	param person
	note this, a bug in the compiler. TODO!
	param dummy_param
do
	return
		a concat
			string "Hello, "
			a person

a print
	a greet
		string "Alice"
		false

note the above is roughly equivalent to following JS

	function greet(person, dummy_param) {
		return "Hello, " + person;
	}
	console.log("Alice", false);



local numbers
	list
		int 1
		int 2
		int 3
		int 4
		int 5

a numbers push
	int 6

a print
	a numbers 0
	
a print
	a numbers #
		where # is
			a sub
				a numbers length
				int 1

note the above is roughly equivalent to following JS
	
	let numbers = [1, 2, 3, 4, 5];
	numbers.push(6);
	console.log(numbers[0]);
	console.log(numbers[numbers.length - 1]);



local user
	note no inline entries yet. TODO!
	dict

note we must populate the dict manually for now
a user name
	string "Bob"

a user age
	int 30

a user city
	string "New York"

a print
	a user

note the above is roughly equivalent to following JS
	
	let user = {
		name: "Bob",
		age: 30,
		city: "New York"
	};
	
	console.log(user);



if
	a nondesc
		int 18
		an age
then
	a print
		string "Adult"
else
	a print
		string "Minor"

note the above is roughly equivalent to following JS

	if (age >= 18) {
		console.log("Adult");
	} else {
		console.log("Minor");
	}



for number in
	a numbers
do
	a print
		a number

note the above is roughly equivalent to following JS
	
	for (let number of numbers) {
		console.log(number);
	}



note these things aren't supported (yet?)

	// Simple loop
	for (let i = 0; i < 3; i++) {
		console.log(i);
	}

	// Arrow functions and array methods
	const evenNumbers = numbers.filter(n => n % 2 === 0);
	const doubled = numbers.map(n => n * 2);
	const sum = numbers.reduce((acc, n) => acc + n, 0);

	// Object destructuring
	const {name: userName, age: userAge} = user;

	// Template literals
	const message = `User ${userName} is ${userAge} years old`;

	// Default parameters and rest operator
	function createUser(name, age = 18, ...hobbies) {
		return {
			name,
			age,
			hobbies
		};
	}

	// Promises and async operations
	function fetchData(url) {
		return new Promise((resolve, reject) => {
			setTimeout(() => {
				if (url) {
					resolve(`Data from ${url}`);
				} else {
					reject(new Error("No URL provided"));
				}
			}, 1000);
		});
	}

	// Async/await
	async function getData() {
		try {
			const data = await fetchData("https://api.example.com");
			return data;
		} catch (error) {
			console.error("Error:", error.message);
			return null;
		}
	}

	// Classes with inheritance
	class Animal {
		constructor(name) {
			this.name = name;
		}
		
		speak() {
			return `${this.name} makes a sound`;
		}
	}

	class Dog extends Animal {
		constructor(name, breed) {
			super(name);
			this.breed = breed;
		}
		
		speak() {
			return `${this.name} barks`;
		}
		
		static getBestFriend() {
			return "Human";
		}
	}

	// Closures and higher-order functions
	function createCounter() {
		let count = 0;
		return function() {
			return ++count;
		};
	}

	const counter = createCounter();

	// Function composition
	const pipe = (...fns) => (value) => fns.reduce((acc, fn) => fn(acc), value);
	const addOne = x => x + 1;
	const multiplyByTwo = x => x * 2;
	const square = x => x * x;

	const complexOperation = pipe(addOne, multiplyByTwo, square);

	// Proxies for meta-programming
	const observableObject = new Proxy({}, {
		set(target, property, value) {
			console.log(`Setting ${property} to ${value}`);
			target[property] = value;
			return true;
		},
		get(target, property) {
			console.log(`Getting ${property}`);
			return target[property];
		}
	});

	// Generators
	function* fibonacci(limit) {
		let a = 0, b = 1;
		while (a < limit) {
			yield a;
			[a, b] = [b, a + b];
		}
	}

	// Symbol usage for private-like properties
	const _private = Symbol('private');
	class SecureClass {
		constructor(value) {
			this[_private] = value;
		}
		
		getValue() {
			return this[_private];
		}
	}

	// Advanced async patterns - concurrent execution
	async function processMultipleRequests(urls) {
		const promises = urls.map(url => fetchData(url));
		const results = await Promise.allSettled(promises);
		
		return results.map((result, index) => ({
			url: urls[index],
			status: result.status,
			data: result.status === 'fulfilled' ? result.value : null,
			error: result.status === 'rejected' ? result.reason.message : null
		}));
	}

	// WeakMap for memory-efficient associations
	const privateData = new WeakMap();
	class DataContainer {
		constructor(data) {
			privateData.set(this, data);
		}
		
		getData() {
			return privateData.get(this);
		}
	}

	// Custom error handling
	class ValidationError extends Error {
		constructor(message, field) {
			super(message);
			this.name = 'ValidationError';
			this.field = field;
		}
	}

	// Decorator pattern (experimental)
	function measureTime(target, propertyKey, descriptor) {
		const originalMethod = descriptor.value;
		descriptor.value = function(...args) {
			const start = performance.now();
			const result = originalMethod.apply(this, args);
			const end = performance.now();
			console.log(`${propertyKey} took ${end - start} milliseconds`);
			return result;
		};
		return descriptor;
	}

	// Usage examples
	const dog = new Dog("Rex", "Golden Retriever");
	const fibSeq = [...fibonacci(100)];
	observableObject.test = "value";
	const result = complexOperation(5); // ((5 + 1) * 2)^2 = 144
