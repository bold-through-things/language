note IMPORTANT: This is a living document!
	future editors should treat this test differently than typical autotests.
	if you change the code here, simply update the expected output to match.
	this documentation is meant to be freely creative and engaging, not constrained
	by existing test expectations. write the best tutorial possible, then make
	the tests match the output, not the other way around.

note welcome to 67lang: the language that gets shit done!
	forget everything you know about programming languages. 67lang isn't trying to be
	academic, clever, or revolutionary. it exists for one purpose: getting actual work
	done without the ceremony, confusion, and cognitive overhead that plagues other languages.
	
	this isn't just documentation - it's executable proof that programming can be
	intuitive, readable, and genuinely enjoyable. every single line in this file
	both teaches AND tests the language. by the time you're done reading, you'll
	understand why 67lang exists and why your next project should probably use it.
	
	ready? let's build something together.

note === DATA: the building blocks that actually matter ===
	most languages overcomplicate data types. 67lang gives you exactly what you need:
	numbers, text, true/false, collections. that's it. no inheritance hierarchies,
	no confusing type parameters, no academic nonsense. just the tools that solve
	real problems.

note numbers: because math is inevitable
	when you need a number, you just declare one. no int32 vs int64 anxiety.
	no weird casting ceremonies. just numbers that work.

local age
	int 23

local pi_ish
	float 3.14159

note text: strings that don't hate you
	the single biggest source of frustration in programming? escaping quotes in strings.
	67lang solves this forever with flexible delimiters. watch this magic:

local basic_text
	string "hello world"

local text_with_quotes  
	string !she said "hello there"!

local different_delimiter
	string |even pipes work as delimiters|

local fancy_delimiter
	string ~anything can be a delimiter~

note see what happened? the FIRST character becomes your delimiter. need quotes
	inside your string? just pick literally any other character as your delimiter.
	no more backslash hell. no more parsing headaches. just strings that work.

print 
	a basic_text

print
	a text_with_quotes

note multiline text: respect for actual human needs
	sometimes you need more than one line. instead of terrible concatenation
	or weird template syntax, 67lang just lets you write what you mean:

local poem
	string
		roses are red
		violets are blue  
		67lang is simple
		and powerful too

print
	a poem

note truth values: boolean logic without philosophy
	true is true. false is false. computers should be this simple:

local is_awesome
	true

local is_complicated  
	false

print
	string "67lang is awesome:"
	a is_awesome
	
print
	string "67lang is complicated:"
	a is_complicated

note === VARIABLES: explicit access that eliminates confusion ===
	here's where 67lang gets radical. in most languages, when you see a name,
	you have to guess: "is this a function? a variable? a constant? who knows!"
	
	67lang fixes this forever. when you want a variable's value, you ASK for it.
	explicitly. clearly. no ambiguity. no confusion.

local username
	string "alice"

local user_age
	int 25

note the magic words: 'a', 'an', 'access'
	these make variable access crystal clear. when you read code,
	you IMMEDIATELY know what's happening:

local greeting
	concat
		string "hello there, "
		a username
		string "! you are "
		a user_age
		string " years old."

print
	a greeting

note this eliminates an entire class of bugs and confusion
	never again will you stare at code wondering "wait, is this calling
	a function or reading a variable?" the syntax tells you exactly what's happening.

note === DECISIONS: conditionals that read like english ===
	making decisions is fundamental to programming. 67lang makes it feel natural:

if
	eq
		a user_age
		int 25
then
	print
		string "you're exactly 25!"
else
	print
		string "you're not 25"

note see how readable that is? if this equals that, then do this, else do that.
	no weird punctuation. no obscure operators. just english-like logic.

note === ITERATION: loops that guide your thinking ===
	repeating actions is another programming fundamental. 67lang makes the
	structure obvious and guides you toward correct thinking:

local favorite_numbers
	list
		int 7
		int 42  
		int 100

for number in
	a favorite_numbers
do
	print
		string "i like the number:"
		a number

note that 'do' keyword isn't just decoration - it's a contract
	"for each item in this collection, DO these actions"
	the language structure guides you toward writing correct, readable loops.

note === COLLECTIONS: data structures that cooperate ===
	storing and organizing data shouldn't require a computer science degree.
	67lang gives you dictionaries and lists that just work:

local person
	dict

note the 'where' syntax: english-like data manipulation
	instead of ugly bracket notation and confusing syntax, you describe
	what you're doing in plain english:

a person key
	where key is
		string "name"
	string "bob"

a person key
	where key is
		string "profession"
	string "software developer"

a person key
	where key is
		string "favorite_number"
	int 42

note getting data back uses the same clear, readable pattern:

print
	string "name:"
	a person key
		where key is
			string "name"

print
	string "profession:"
	a person key
		where key is
			string "profession"

print  
	string "favorite number:"
	a person key
		where key is
			string "favorite_number"

note === TEXT PROCESSING: string manipulation that doesn't suck ===
	real programs process text constantly. 67lang treats strings as first-class
	citizens with powerful, intuitive operations:

local sentence
	string "the quick brown fox jumps"

note splitting text: as straightforward as it should be

local words  
	a sentence split
		string " "

print
	string "words:"
	a words

note joining them back: equally simple

local rejoined
	a words join
		string "-"

print
	string "rejoined:"
	a rejoined

note regex support: when you need serious text processing power

local messy_input
	string "word1    word2       word3"

local clean_words
	a messy_input split
		regex /\s+/

print
	string "clean words:"
	a clean_words

note method chaining: beautiful pipelines that actually make sense
	here's where 67lang shines. watch this elegant transformation:

local word
	string "programming"

local sorted_letters
	a word split sort join
		where split takes
			string ""
		where join takes
			string ""

print
	string "sorted letters:"
	a sorted_letters

note the 'where X takes Y' syntax eliminates ambiguity
	you never have to guess which argument goes where. method chaining
	becomes readable, maintainable, and genuinely pleasant to use.

note === BUILT-IN FUNCTIONS: operations with names that make sense ===
	67lang's built-in functions have descriptive names instead of cryptic symbols.
	revolutionary concept: code that reads like english!

note comparisons: testing equality and order naturally

print
	string "are 5 and 5 equal?"
	eq
		int 5
		int 5

print
	string "is 3 less than 5?"
	asc
		int 3
		int 5

note arithmetic: math operations without ceremony

print
	string "10 plus 5:"
	add
		int 10
		int 5

print  
	string "10 mod 3:"
	mod
		int 10
		int 3

note logical operations: boolean logic in plain english

print
	string "all conditions true (true AND false):"
	all
		true
		false

print
	string "any condition true (true OR false):"
	any
		true  
		false

print
	string "none of these are true (NOT false):"
	none
		false

note these names make code self-documenting
	'all' means every condition must be true
	'any' means at least one condition must be true  
	'none' means no conditions should be true
	your code becomes immediately readable to anyone!

note === TYPE SAFETY: optional protection when you want it ===
	sometimes you want the compiler to watch your back and catch type errors.
	sometimes you just want to get stuff done quickly. 67lang lets you choose:

local safe_number
	type int
	int 999

local safe_text
	type str
	string "type-checked string"

note accessing typed variables works exactly the same way:

local another_safe_number
	type int
	a safe_number

print
	string "safe number:"
	a safe_number

print
	string "safe text:"
	a safe_text

print
	string "copied number:"
	a another_safe_number

note type checking catches mistakes when you want it to:
	the following lines demonstrate compile-time errors that help you avoid bugs

must_compile_error FIELD_TYPE_MISMATCH=+1
	local broken_assignment
		type str
		a safe_number

note syntax errors are caught too:
	forgetting the 'do' in a loop is a common mistake

must_compile_error EXPECTED_DO_AFTER=+1  
	for item in
		a favorite_numbers
	print
		string "this won't work!"

note === THE PHILOSOPHY: why 67lang exists ===
	67lang was born from frustration with languages that prioritize academic
	theory over human needs. every feature exists to solve real problems:
	
	→ semantic indentation guides thinking and eliminates syntax noise
	→ explicit variable access eliminates confusion and bugs  
	→ flexible string delimiters solve quote-escaping hell forever
	→ natural language control flow makes code readable to humans
	→ optional type checking lets you choose safety vs speed as needed
	→ minimal syntax means fast parsing and easy tooling
	
	the entire compiler is under 100 lines of Python, proving that powerful
	languages don't need complex implementations. 67lang compiles to readable
	JavaScript that runs everywhere: browsers, Deno, Node (with shims).
	
	this isn't about being clever or revolutionary. it's about removing friction
	from the act of programming. when the language gets out of your way,
	you can focus on solving actual problems instead of fighting syntax.

note === THE REALITY: what you just experienced ===
	every line of this file was executed as you read it. this documentation
	IS the test suite. this tutorial IS the specification. when features change,
	the documentation changes automatically - because they're the same thing.
	
	welcome to a language that respects your time, your intelligence, and your
	need to get real work done. welcome to 67lang.

note the approximate JS this compiles to:
	let age = 23;
	let pi_ish = 3.14159;
	let basic_text = "hello world";
	let text_with_quotes = 'she said "hello there"';
	let poem = "roses are red\nviolets are blue\n67lang is simple\nand powerful too";
	let is_awesome = true;
	let is_complicated = false;
	console.log(basic_text);
	console.log(text_with_quotes);
	// ... and so on, readable and straightforward