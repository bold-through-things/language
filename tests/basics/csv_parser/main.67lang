note the task given
	Read a newline-separated list of strings (simulate lines of a CSV file).
	Assume the first line is a comma-separated list of headers.
	Parse each subsequent line into a “row object” (i.e. a map from header → value).
	Store all rows in a list, and then:
	Print each row’s "name" field (or whatever is in column 0, if you don’t want to special-case).
	Count how many rows have "age" > 30, assuming one of the columns is age.

local lines
	a stdin
	# okay i am seeing a reason to stop treating builtins as special, or at the very least to expose them in the scope object

access lines
	a lines split
		string "\n"

local i
	int 0
local header
	list
local rows
	list
for line in
	access lines
do
	if
		a eq
			access i
			int 0
	then
		a header
			a line split
				string ","
	else
		local zipped_data
			access zip
				a header
				a line split
					string ","
		
		local row
			dict
		
		for kv in
			a zipped_data
		do
			a row key
				where key is
					a kv 0
				a kv 1
		
		a rows push
			a row
	
	access i
		a add
			access i
			int 1

for row in
	a rows
do
	a print
		a row name

local age_over_30
	int 0
for row in
	a rows
do
	if
		note TODO - the test case should probably strain this asc
			on what happens if age is 30
		a asc
			a row age
			int 30
	then
		access age_over_30
			a add
				access age_over_30
				int 1

a print
	access age_over_30