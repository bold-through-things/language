local lines
	do stdin

local lines
	do split the lines
		string "\n"

local modules
	dict
for line in
	get lines
do
	local module
		dict

	local kv
		do split the line
			string ":"
			int 2

	do # the kv
		int 0
	then do trim as id
	do # the module
		string "id"
		get id
	
	do # the kv
		int 1
	then do trim
	then do split as deps
		regex /\s+/
	do # the module
		string "deps"
		get deps
	
	# TODO - this ought to be a macro.
	do # the kv
		int 1
	if
		do eq
			then do trim
			string ""
	then
		do # the module
			string "deps"
			list
	
	note now that is is honestly phenomenal. we are now thankfully 
		about to nuke it.
	do # the modules
		do # the module
			string "id"
		get module

# print
	string "modules"
	get modules

# TODO - support set initializers
# TODO - support a  way to convert a dict keys to a set cleanly
# (old code removed)

type DAG_unroller is heap_entry
	has dep_loops
		type list
	has build_order
		type list
	has modules
		type dict

fn visit
	param unroller_in
	param module
	# chain of dependencies currently being inspected - used to detect loops
	param chain
do
	local unroller
		note needed temporarily while param doesn't support typing
		type DAG_unroller
		get unroller_in
	
	local chain
		note needed temporarily while param doesn't support typing
		type list
		get chain
	
	if 
		do # the module
			string "visited"
	then
		return
	do # the module
		string "visited"
		true

	# TODO - this shouldn't be using slice. we need a dedicated copy command
	local next_chain
		do slice the chain
	do push the next_chain
		do # the module
			string "id"

	for dep_id in
		do # the module
			string "deps"
	do
		if
			exists
				get dep_id
				inside
					get next_chain
		then
			local dep_loop
				list
			do push the dep_loop
				get dep_id
			do slice the next_chain
			for chain_dep_id in
				then do reverse
			do
				do push the dep_loop
					get chain_dep_id
				if
					do eq
						get chain_dep_id
						get dep_id
				then
					break

			do reverse the dep_loop

			do push
				get dep_loops from unroller
				do join the dep_loop
					string " â†’ "
		else
			do visit
				get unroller
				do #
					get modules from unroller
					get dep_id
				get next_chain

	do push
		get build_order from unroller
		do # the module
			string "id"

local unroller
	type DAG_unroller
	do DAG_unroller
		list
		list
		get modules

for module in
	get values from modules
do
	do visit
		get unroller
		get module
		list

get unroller
if
	do nondesc
		int 1
		then chain dep_loops length
then
	do print
		do concat
			string "ERROR: there are dependency loops.\n"
			then chain dep_loops join
				string "\n"
else
	do print
		then chain build_order join
			string "\n"
