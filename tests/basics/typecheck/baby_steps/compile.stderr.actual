[
  {
    "recoverable": false,
    "line": 25,
    "char": 0,
    "content": "local test",
    "error": "failed to assert: field demands int but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 30,
    "char": 0,
    "content": "local test_str",
    "error": "failed to assert: field demands str but is given None",
    "error_type": "MISSING_TYPE"
  },
  {
    "recoverable": false,
    "line": 34,
    "char": 0,
    "content": "local test_int",
    "error": "failed to assert: field demands int but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 38,
    "char": 0,
    "content": "67lang:call test_int",
    "error": "failed to assert: could not find a matching overload for test_int with arguments [\"str\"]",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "convention": "LocalAccessCall",
        "fn": "_0x13_test_int",
        "demands": [],
        "returns": {
          "name": "int",
          "type_params": [],
          "fields": []
        }
      },
      {
        "convention": "LocalAccessCall",
        "fn": "_0x13_test_int",
        "demands": [
          {
            "name": "int",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "int",
          "type_params": [],
          "fields": []
        }
      }
    ]
  },
  {
    "recoverable": false,
    "line": 42,
    "char": 0,
    "content": "67lang:call test_str",
    "error": "failed to assert: could not find a matching overload for test_str with arguments [#<PrimitiveType:0x7f179dadf660 @name=\"int\">]",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "convention": "LocalAccessCall",
        "fn": "_0x10_test_str",
        "demands": [],
        "returns": "str"
      },
      {
        "convention": "LocalAccessCall",
        "fn": "_0x10_test_str",
        "demands": [
          "str"
        ],
        "returns": "str"
      }
    ]
  },
  {
    "recoverable": false,
    "line": 45,
    "char": 0,
    "content": "local test_bool",
    "error": "failed to assert: field demands bool but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 50,
    "char": 0,
    "content": "67lang:call test_bool",
    "error": "failed to assert: could not find a matching overload for test_bool with arguments [#<PrimitiveType:0x7f179dadf3c0 @name=\"str\">]",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "convention": "LocalAccessCall",
        "fn": "_0x1c_test_bool",
        "demands": [],
        "returns": {
          "name": "bool",
          "type_params": [],
          "fields": []
        }
      },
      {
        "convention": "LocalAccessCall",
        "fn": "_0x1c_test_bool",
        "demands": [
          {
            "name": "bool",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "bool",
          "type_params": [],
          "fields": []
        }
      }
    ]
  },
  {
    "recoverable": false,
    "line": 53,
    "char": 0,
    "content": "67lang:call split",
    "error": "failed to assert: could not find a matching overload for split with arguments [#<PrimitiveType:0x7f179dadf3a0 @name=\"bool\">]",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "convention": "FieldCall",
        "field": "split",
        "demands": [
          "SymbolConstructor"
        ],
        "returns": "uniquesymbol"
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "regex",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "regex",
            "type_params": [],
            "fields": []
          },
          {
            "name": "float",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "str",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "float",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      }
    ]
  },
  {
    "recoverable": false,
    "line": 56,
    "char": 0,
    "content": "67lang:call split",
    "error": "failed to assert: could not find a matching overload for split with arguments [#<ComplexType:0x7f179aeab660 @name=\"list\", @type_params=[#<PrimitiveType:0x7f179dadf3c0 @name=\"str\">], @fields=[]>]",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "convention": "FieldCall",
        "field": "split",
        "demands": [
          "SymbolConstructor"
        ],
        "returns": "uniquesymbol"
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "regex",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "regex",
            "type_params": [],
            "fields": []
          },
          {
            "name": "float",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "str",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "str",
            "type_params": [],
            "fields": []
          },
          {
            "name": "float",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      }
    ]
  },
  {
    "recoverable": false,
    "line": 56,
    "char": 0,
    "content": "67lang:call split",
    "error": "failed to assert: multiple equally specific overloads match for split with arguments [\"*\"]",
    "error_type": "AMBIGUOUS_OVERLOAD",
    "matching_overloads": [
      {
        "convention": "FieldCall",
        "field": "split",
        "demands": [
          "SymbolConstructor"
        ],
        "returns": "uniquesymbol"
      },
      {
        "convention": "PrototypeCall",
        "constructor": "String",
        "fn": "split",
        "demands": [
          {
            "name": "str",
            "type_params": [],
            "fields": []
          }
        ],
        "returns": {
          "name": "list",
          "type_params": [
            {
              "name": "str",
              "type_params": [],
              "fields": []
            }
          ],
          "fields": []
        }
      }
    ]
  }
]
