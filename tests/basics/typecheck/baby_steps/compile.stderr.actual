[
  {
    "recoverable": false,
    "line": 25,
    "char": 0,
    "content": "local test",
    "error": "failed to assert: field demands int but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 30,
    "char": 0,
    "content": "local test_str",
    "error": "failed to assert: field demands str but is given None",
    "error_type": "MISSING_TYPE"
  },
  {
    "recoverable": false,
    "line": 34,
    "char": 0,
    "content": "local test_int",
    "error": "failed to assert: field demands int but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 38,
    "char": 0,
    "content": "67lang:call test_int",
    "error": "failed to assert: argument 1 demands int and is given str",
    "error_type": "ARGUMENT_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 42,
    "char": 0,
    "content": "67lang:call test_str",
    "error": "failed to assert: argument 1 demands str and is given int",
    "error_type": "ARGUMENT_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 45,
    "char": 0,
    "content": "local test_bool",
    "error": "failed to assert: field demands bool but is given str",
    "error_type": "FIELD_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 49,
    "char": 0,
    "content": "67lang:call test_bool",
    "error": "failed to assert: argument 1 demands bool and is given str",
    "error_type": "ARGUMENT_TYPE_MISMATCH"
  },
  {
    "recoverable": false,
    "line": 52,
    "char": 0,
    "content": "67lang:call split",
    "error": "failed to assert: could not find a matching overload for split with arguments ['bool']",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "str"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "regex"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "str",
          "int"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "regex",
          "int"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      }
    ]
  },
  {
    "recoverable": false,
    "line": 54,
    "char": 0,
    "content": "67lang:call split",
    "error": "failed to assert: could not find a matching overload for split with arguments ['list']",
    "error_type": "NO_MATCHING_OVERLOAD",
    "visible_overloads": [
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "str"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "regex"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "str",
          "int"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      },
      {
        "constructor": "String",
        "fn": "split",
        "demands": [
          "str",
          "regex",
          "int"
        ],
        "returns": "list",
        "convention": "PrototypeCall"
      }
    ]
  }
]
