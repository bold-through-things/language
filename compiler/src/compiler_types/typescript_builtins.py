# This file is automatically generated. Do not edit directly.
from pipeline.builtin_calls import PrototypeCall, DirectCall, NewCall, FieldCall

typescript_calls = {
    "$": [
        FieldCall(field='$', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$&": [
        FieldCall(field='$&', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$&', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$+": [
        FieldCall(field='$+', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$+', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$1": [
        FieldCall(field='$1', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$1', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$2": [
        FieldCall(field='$2', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$2', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$3": [
        FieldCall(field='$3', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$3', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$4": [
        FieldCall(field='$4', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$4', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$5": [
        FieldCall(field='$5', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$5', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$6": [
        FieldCall(field='$6', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$6', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$7": [
        FieldCall(field='$7', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$7', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$8": [
        FieldCall(field='$8', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$8', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$9": [
        FieldCall(field='$9', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$9', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$_": [
        FieldCall(field='$_', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$_', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "$`": [
        FieldCall(field='$`', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='$`', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "0": [
        FieldCall(field='0', demands=['RegExpMatchArray'], returns='str'),
        FieldCall(field='0', demands=['RegExpMatchArray', 'str'], returns='None'),
        FieldCall(field='0', demands=['RegExpExecArray'], returns='str'),
        FieldCall(field='0', demands=['RegExpExecArray', 'str'], returns='None'),
    ],
    "ABORT_ERR": [
        FieldCall(field='ABORT_ERR', demands=['DOMException'], returns='20'),
    ],
    "ACTIVE_ATTRIBUTES": [
        FieldCall(field='ACTIVE_ATTRIBUTES', demands=['WebGLRenderingContextBase'], returns='0x8B89'),
    ],
    "ACTIVE_TEXTURE": [
        FieldCall(field='ACTIVE_TEXTURE', demands=['WebGLRenderingContextBase'], returns='0x84E0'),
    ],
    "ACTIVE_UNIFORMS": [
        FieldCall(field='ACTIVE_UNIFORMS', demands=['WebGLRenderingContextBase'], returns='0x8B86'),
    ],
    "ACTIVE_UNIFORM_BLOCKS": [
        FieldCall(field='ACTIVE_UNIFORM_BLOCKS', demands=['WebGL2RenderingContextBase'], returns='0x8A36'),
    ],
    "ALIASED_LINE_WIDTH_RANGE": [
        FieldCall(field='ALIASED_LINE_WIDTH_RANGE', demands=['WebGLRenderingContextBase'], returns='0x846E'),
    ],
    "ALIASED_POINT_SIZE_RANGE": [
        FieldCall(field='ALIASED_POINT_SIZE_RANGE', demands=['WebGLRenderingContextBase'], returns='0x846D'),
    ],
    "ALPHA": [
        FieldCall(field='ALPHA', demands=['WebGLRenderingContextBase'], returns='0x1906'),
    ],
    "ALPHA_BITS": [
        FieldCall(field='ALPHA_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D55'),
    ],
    "ALREADY_SIGNALED": [
        FieldCall(field='ALREADY_SIGNALED', demands=['WebGL2RenderingContextBase'], returns='0x911A'),
    ],
    "ALWAYS": [
        FieldCall(field='ALWAYS', demands=['WebGLRenderingContextBase'], returns='0x0207'),
    ],
    "ANY_SAMPLES_PASSED": [
        FieldCall(field='ANY_SAMPLES_PASSED', demands=['WebGL2RenderingContextBase'], returns='0x8C2F'),
    ],
    "ANY_SAMPLES_PASSED_CONSERVATIVE": [
        FieldCall(field='ANY_SAMPLES_PASSED_CONSERVATIVE', demands=['WebGL2RenderingContextBase'], returns='0x8D6A'),
    ],
    "ANY_TYPE": [
        FieldCall(field='ANY_TYPE', demands=['XPathResult'], returns='0'),
    ],
    "ANY_UNORDERED_NODE_TYPE": [
        FieldCall(field='ANY_UNORDERED_NODE_TYPE', demands=['XPathResult'], returns='8'),
    ],
    "ARRAY_BUFFER": [
        FieldCall(field='ARRAY_BUFFER', demands=['WebGLRenderingContextBase'], returns='0x8892'),
    ],
    "ARRAY_BUFFER_BINDING": [
        FieldCall(field='ARRAY_BUFFER_BINDING', demands=['WebGLRenderingContextBase'], returns='0x8894'),
    ],
    "ATTACHED_SHADERS": [
        FieldCall(field='ATTACHED_SHADERS', demands=['WebGLRenderingContextBase'], returns='0x8B85'),
    ],
    "ATTRIBUTE_NODE": [
        FieldCall(field='ATTRIBUTE_NODE', demands=['Node'], returns='2'),
    ],
    "AT_TARGET": [
        FieldCall(field='AT_TARGET', demands=['Event'], returns='2'),
    ],
    "AbortController": [
        NewCall(constructor='AbortController', demands=[], returns='AbortController'),
    ],
    "AbortSignal": [
        NewCall(constructor='AbortSignal', demands=[], returns='AbortSignal'),
        NewCall(constructor='AbortSignal', demands=[], returns='never'),
    ],
    "AbstractRange": [
        NewCall(constructor='AbstractRange', demands=[], returns='AbstractRange'),
    ],
    "AddSearchProvider": [
        PrototypeCall(constructor='External', fn='AddSearchProvider', demands=['External'], returns='None'),
    ],
    "AnalyserNode": [
        NewCall(constructor='AnalyserNode', demands=['BaseAudioContext'], returns='AnalyserNode'),
        NewCall(constructor='AnalyserNode', demands=['BaseAudioContext', 'AnalyserOptions'], returns='AnalyserNode'),
    ],
    "Animation": [
        NewCall(constructor='Animation', demands=[], returns='Animation'),
        NewCall(constructor='Animation', demands=['AnimationEffect'], returns='Animation'),
        NewCall(constructor='Animation', demands=['AnimationEffect', 'AnimationTimeline'], returns='Animation'),
    ],
    "AnimationEffect": [
        NewCall(constructor='AnimationEffect', demands=[], returns='AnimationEffect'),
    ],
    "AnimationEvent": [
        NewCall(constructor='AnimationEvent', demands=['str'], returns='AnimationEvent'),
        NewCall(constructor='AnimationEvent', demands=['str', 'AnimationEventInit'], returns='AnimationEvent'),
    ],
    "AnimationPlaybackEvent": [
        NewCall(constructor='AnimationPlaybackEvent', demands=['str'], returns='AnimationPlaybackEvent'),
        NewCall(constructor='AnimationPlaybackEvent', demands=['str', 'AnimationPlaybackEventInit'], returns='AnimationPlaybackEvent'),
    ],
    "AnimationTimeline": [
        NewCall(constructor='AnimationTimeline', demands=[], returns='AnimationTimeline'),
    ],
    "ArrayBuffer": [
        FieldCall(field='ArrayBuffer', demands=['ArrayBufferTypes'], returns='ArrayBuffer'),
        FieldCall(field='ArrayBuffer', demands=['ArrayBufferTypes', 'ArrayBuffer'], returns='None'),
    ],
    "AtEndOfLine": [
        FieldCall(field='AtEndOfLine', demands=['TextStreamReader'], returns='bool'),
        FieldCall(field='AtEndOfLine', demands=['TextStreamReader', 'bool'], returns='None'),
    ],
    "AtEndOfStream": [
        FieldCall(field='AtEndOfStream', demands=['TextStreamReader'], returns='bool'),
        FieldCall(field='AtEndOfStream', demands=['TextStreamReader', 'bool'], returns='None'),
    ],
    "Attr": [
        NewCall(constructor='Attr', demands=[], returns='Attr'),
    ],
    "Audio": [
        NewCall(constructor='Audio', demands=[], returns='HTMLAudioElement'),
        NewCall(constructor='Audio', demands=['str'], returns='HTMLAudioElement'),
    ],
    "AudioBuffer": [
        NewCall(constructor='AudioBuffer', demands=['AudioBufferOptions'], returns='AudioBuffer'),
    ],
    "AudioBufferSourceNode": [
        NewCall(constructor='AudioBufferSourceNode', demands=['BaseAudioContext'], returns='AudioBufferSourceNode'),
        NewCall(constructor='AudioBufferSourceNode', demands=['BaseAudioContext', 'AudioBufferSourceOptions'], returns='AudioBufferSourceNode'),
    ],
    "AudioContext": [
        NewCall(constructor='AudioContext', demands=[], returns='AudioContext'),
        NewCall(constructor='AudioContext', demands=['AudioContextOptions'], returns='AudioContext'),
    ],
    "AudioData": [
        NewCall(constructor='AudioData', demands=['AudioDataInit'], returns='AudioData'),
    ],
    "AudioDecoder": [
        NewCall(constructor='AudioDecoder', demands=['AudioDecoderInit'], returns='AudioDecoder'),
    ],
    "AudioDestinationNode": [
        NewCall(constructor='AudioDestinationNode', demands=[], returns='AudioDestinationNode'),
    ],
    "AudioEncoder": [
        NewCall(constructor='AudioEncoder', demands=['AudioEncoderInit'], returns='AudioEncoder'),
    ],
    "AudioListener": [
        NewCall(constructor='AudioListener', demands=[], returns='AudioListener'),
    ],
    "AudioNode": [
        NewCall(constructor='AudioNode', demands=[], returns='AudioNode'),
    ],
    "AudioParam": [
        NewCall(constructor='AudioParam', demands=[], returns='AudioParam'),
    ],
    "AudioParamMap": [
        NewCall(constructor='AudioParamMap', demands=[], returns='AudioParamMap'),
    ],
    "AudioProcessingEvent": [
        NewCall(constructor='AudioProcessingEvent', demands=['str', 'AudioProcessingEventInit'], returns='AudioProcessingEvent'),
    ],
    "AudioScheduledSourceNode": [
        NewCall(constructor='AudioScheduledSourceNode', demands=[], returns='AudioScheduledSourceNode'),
    ],
    "AudioWorklet": [
        NewCall(constructor='AudioWorklet', demands=[], returns='AudioWorklet'),
    ],
    "AudioWorkletNode": [
        NewCall(constructor='AudioWorkletNode', demands=['BaseAudioContext', 'str'], returns='AudioWorkletNode'),
        NewCall(constructor='AudioWorkletNode', demands=['BaseAudioContext', 'str', 'AudioWorkletNodeOptions'], returns='AudioWorkletNode'),
    ],
    "AuthenticatorAssertionResponse": [
        NewCall(constructor='AuthenticatorAssertionResponse', demands=[], returns='AuthenticatorAssertionResponse'),
    ],
    "AuthenticatorAttestationResponse": [
        NewCall(constructor='AuthenticatorAttestationResponse', demands=[], returns='AuthenticatorAttestationResponse'),
    ],
    "AuthenticatorResponse": [
        NewCall(constructor='AuthenticatorResponse', demands=[], returns='AuthenticatorResponse'),
    ],
    "BACK": [
        FieldCall(field='BACK', demands=['WebGLRenderingContextBase'], returns='0x0405'),
    ],
    "BLEND": [
        FieldCall(field='BLEND', demands=['WebGLRenderingContextBase'], returns='0x0BE2'),
    ],
    "BLEND_COLOR": [
        FieldCall(field='BLEND_COLOR', demands=['WebGLRenderingContextBase'], returns='0x8005'),
    ],
    "BLEND_DST_ALPHA": [
        FieldCall(field='BLEND_DST_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x80CA'),
    ],
    "BLEND_DST_RGB": [
        FieldCall(field='BLEND_DST_RGB', demands=['WebGLRenderingContextBase'], returns='0x80C8'),
    ],
    "BLEND_EQUATION": [
        FieldCall(field='BLEND_EQUATION', demands=['WebGLRenderingContextBase'], returns='0x8009'),
    ],
    "BLEND_EQUATION_ALPHA": [
        FieldCall(field='BLEND_EQUATION_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x883D'),
    ],
    "BLEND_EQUATION_RGB": [
        FieldCall(field='BLEND_EQUATION_RGB', demands=['WebGLRenderingContextBase'], returns='0x8009'),
    ],
    "BLEND_SRC_ALPHA": [
        FieldCall(field='BLEND_SRC_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x80CB'),
    ],
    "BLEND_SRC_RGB": [
        FieldCall(field='BLEND_SRC_RGB', demands=['WebGLRenderingContextBase'], returns='0x80C9'),
    ],
    "BLUE_BITS": [
        FieldCall(field='BLUE_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D54'),
    ],
    "BOOL": [
        FieldCall(field='BOOL', demands=['WebGLRenderingContextBase'], returns='0x8B56'),
    ],
    "BOOLEAN_TYPE": [
        FieldCall(field='BOOLEAN_TYPE', demands=['XPathResult'], returns='3'),
    ],
    "BOOL_VEC2": [
        FieldCall(field='BOOL_VEC2', demands=['WebGLRenderingContextBase'], returns='0x8B57'),
    ],
    "BOOL_VEC3": [
        FieldCall(field='BOOL_VEC3', demands=['WebGLRenderingContextBase'], returns='0x8B58'),
    ],
    "BOOL_VEC4": [
        FieldCall(field='BOOL_VEC4', demands=['WebGLRenderingContextBase'], returns='0x8B59'),
    ],
    "BROWSER_DEFAULT_WEBGL": [
        FieldCall(field='BROWSER_DEFAULT_WEBGL', demands=['WebGLRenderingContextBase'], returns='0x9244'),
    ],
    "BUBBLING_PHASE": [
        FieldCall(field='BUBBLING_PHASE', demands=['Event'], returns='3'),
    ],
    "BUFFER_SIZE": [
        FieldCall(field='BUFFER_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8764'),
    ],
    "BUFFER_USAGE": [
        FieldCall(field='BUFFER_USAGE', demands=['WebGLRenderingContextBase'], returns='0x8765'),
    ],
    "BYTE": [
        FieldCall(field='BYTE', demands=['WebGLRenderingContextBase'], returns='0x1400'),
    ],
    "BYTES_PER_ELEMENT": [
        FieldCall(field='BYTES_PER_ELEMENT', demands=['BigInt64Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['BigInt64ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['BigUint64Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['BigUint64ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int8Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int8ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint8Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint8ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint8ClampedArray'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint8ClampedArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int16Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int16ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint16Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint16ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int32Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Int32ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint32Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Uint32ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float32Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float32ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float64Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float64ArrayConstructor'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float16Array'], returns='float'),
        FieldCall(field='BYTES_PER_ELEMENT', demands=['Float16ArrayConstructor'], returns='float'),
    ],
    "BarProp": [
        NewCall(constructor='BarProp', demands=[], returns='BarProp'),
    ],
    "BaseAudioContext": [
        NewCall(constructor='BaseAudioContext', demands=[], returns='BaseAudioContext'),
    ],
    "BeforeUnloadEvent": [
        NewCall(constructor='BeforeUnloadEvent', demands=[], returns='BeforeUnloadEvent'),
    ],
    "BiquadFilterNode": [
        NewCall(constructor='BiquadFilterNode', demands=['BaseAudioContext'], returns='BiquadFilterNode'),
        NewCall(constructor='BiquadFilterNode', demands=['BaseAudioContext', 'BiquadFilterOptions'], returns='BiquadFilterNode'),
    ],
    "Blob": [
        NewCall(constructor='Blob', demands=[], returns='Blob'),
        NewCall(constructor='Blob', demands=['list'], returns='Blob'),
        NewCall(constructor='Blob', demands=['list', 'BlobPropertyBag'], returns='Blob'),
    ],
    "BlobEvent": [
        NewCall(constructor='BlobEvent', demands=['str', 'BlobEventInit'], returns='BlobEvent'),
    ],
    "BroadcastChannel": [
        NewCall(constructor='BroadcastChannel', demands=['str'], returns='BroadcastChannel'),
    ],
    "ByteLengthQueuingStrategy": [
        NewCall(constructor='ByteLengthQueuingStrategy', demands=['QueuingStrategyInit'], returns='ByteLengthQueuingStrategy'),
    ],
    "CAPTURING_PHASE": [
        FieldCall(field='CAPTURING_PHASE', demands=['Event'], returns='1'),
    ],
    "CCW": [
        FieldCall(field='CCW', demands=['WebGLRenderingContextBase'], returns='0x0901'),
    ],
    "CDATASection": [
        NewCall(constructor='CDATASection', demands=[], returns='CDATASection'),
    ],
    "CDATA_SECTION_NODE": [
        FieldCall(field='CDATA_SECTION_NODE', demands=['Node'], returns='4'),
    ],
    "CHARSET_RULE": [
        FieldCall(field='CHARSET_RULE', demands=['CSSRule'], returns='2'),
    ],
    "CLAMP_TO_EDGE": [
        FieldCall(field='CLAMP_TO_EDGE', demands=['WebGLRenderingContextBase'], returns='0x812F'),
    ],
    "CLOSED": [
        FieldCall(field='CLOSED', demands=['EventSource'], returns='2'),
        FieldCall(field='CLOSED', demands=['WebSocket'], returns='3'),
        FieldCall(field='CLOSED', demands=['WebSocket'], returns='float'),
    ],
    "CLOSING": [
        FieldCall(field='CLOSING', demands=['WebSocket'], returns='2'),
        FieldCall(field='CLOSING', demands=['WebSocket'], returns='float'),
    ],
    "COLOR": [
        FieldCall(field='COLOR', demands=['WebGL2RenderingContextBase'], returns='0x1800'),
    ],
    "COLOR_ATTACHMENT0": [
        FieldCall(field='COLOR_ATTACHMENT0', demands=['WebGLRenderingContextBase'], returns='0x8CE0'),
    ],
    "COLOR_ATTACHMENT0_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT0_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE0'),
    ],
    "COLOR_ATTACHMENT1": [
        FieldCall(field='COLOR_ATTACHMENT1', demands=['WebGL2RenderingContextBase'], returns='0x8CE1'),
    ],
    "COLOR_ATTACHMENT10": [
        FieldCall(field='COLOR_ATTACHMENT10', demands=['WebGL2RenderingContextBase'], returns='0x8CEA'),
    ],
    "COLOR_ATTACHMENT10_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT10_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CEA'),
    ],
    "COLOR_ATTACHMENT11": [
        FieldCall(field='COLOR_ATTACHMENT11', demands=['WebGL2RenderingContextBase'], returns='0x8CEB'),
    ],
    "COLOR_ATTACHMENT11_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT11_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CEB'),
    ],
    "COLOR_ATTACHMENT12": [
        FieldCall(field='COLOR_ATTACHMENT12', demands=['WebGL2RenderingContextBase'], returns='0x8CEC'),
    ],
    "COLOR_ATTACHMENT12_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT12_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CEC'),
    ],
    "COLOR_ATTACHMENT13": [
        FieldCall(field='COLOR_ATTACHMENT13', demands=['WebGL2RenderingContextBase'], returns='0x8CED'),
    ],
    "COLOR_ATTACHMENT13_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT13_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CED'),
    ],
    "COLOR_ATTACHMENT14": [
        FieldCall(field='COLOR_ATTACHMENT14', demands=['WebGL2RenderingContextBase'], returns='0x8CEE'),
    ],
    "COLOR_ATTACHMENT14_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT14_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CEE'),
    ],
    "COLOR_ATTACHMENT15": [
        FieldCall(field='COLOR_ATTACHMENT15', demands=['WebGL2RenderingContextBase'], returns='0x8CEF'),
    ],
    "COLOR_ATTACHMENT15_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT15_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CEF'),
    ],
    "COLOR_ATTACHMENT1_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT1_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE1'),
    ],
    "COLOR_ATTACHMENT2": [
        FieldCall(field='COLOR_ATTACHMENT2', demands=['WebGL2RenderingContextBase'], returns='0x8CE2'),
    ],
    "COLOR_ATTACHMENT2_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT2_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE2'),
    ],
    "COLOR_ATTACHMENT3": [
        FieldCall(field='COLOR_ATTACHMENT3', demands=['WebGL2RenderingContextBase'], returns='0x8CE3'),
    ],
    "COLOR_ATTACHMENT3_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT3_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE3'),
    ],
    "COLOR_ATTACHMENT4": [
        FieldCall(field='COLOR_ATTACHMENT4', demands=['WebGL2RenderingContextBase'], returns='0x8CE4'),
    ],
    "COLOR_ATTACHMENT4_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT4_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE4'),
    ],
    "COLOR_ATTACHMENT5": [
        FieldCall(field='COLOR_ATTACHMENT5', demands=['WebGL2RenderingContextBase'], returns='0x8CE5'),
    ],
    "COLOR_ATTACHMENT5_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT5_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE5'),
    ],
    "COLOR_ATTACHMENT6": [
        FieldCall(field='COLOR_ATTACHMENT6', demands=['WebGL2RenderingContextBase'], returns='0x8CE6'),
    ],
    "COLOR_ATTACHMENT6_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT6_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE6'),
    ],
    "COLOR_ATTACHMENT7": [
        FieldCall(field='COLOR_ATTACHMENT7', demands=['WebGL2RenderingContextBase'], returns='0x8CE7'),
    ],
    "COLOR_ATTACHMENT7_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT7_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE7'),
    ],
    "COLOR_ATTACHMENT8": [
        FieldCall(field='COLOR_ATTACHMENT8', demands=['WebGL2RenderingContextBase'], returns='0x8CE8'),
    ],
    "COLOR_ATTACHMENT8_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT8_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE8'),
    ],
    "COLOR_ATTACHMENT9": [
        FieldCall(field='COLOR_ATTACHMENT9', demands=['WebGL2RenderingContextBase'], returns='0x8CE9'),
    ],
    "COLOR_ATTACHMENT9_WEBGL": [
        FieldCall(field='COLOR_ATTACHMENT9_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CE9'),
    ],
    "COLOR_BUFFER_BIT": [
        FieldCall(field='COLOR_BUFFER_BIT', demands=['WebGLRenderingContextBase'], returns='0x00004000'),
    ],
    "COLOR_CLEAR_VALUE": [
        FieldCall(field='COLOR_CLEAR_VALUE', demands=['WebGLRenderingContextBase'], returns='0x0C22'),
    ],
    "COLOR_WRITEMASK": [
        FieldCall(field='COLOR_WRITEMASK', demands=['WebGLRenderingContextBase'], returns='0x0C23'),
    ],
    "COMMENT_NODE": [
        FieldCall(field='COMMENT_NODE', demands=['Node'], returns='8'),
    ],
    "COMPARE_REF_TO_TEXTURE": [
        FieldCall(field='COMPARE_REF_TO_TEXTURE', demands=['WebGL2RenderingContextBase'], returns='0x884E'),
    ],
    "COMPILE_STATUS": [
        FieldCall(field='COMPILE_STATUS', demands=['WebGLRenderingContextBase'], returns='0x8B81'),
    ],
    "COMPLETION_STATUS_KHR": [
        FieldCall(field='COMPLETION_STATUS_KHR', demands=['KHR_parallel_shader_compile'], returns='0x91B1'),
    ],
    "COMPRESSED_R11_EAC": [
        FieldCall(field='COMPRESSED_R11_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9270'),
    ],
    "COMPRESSED_RED_GREEN_RGTC2_EXT": [
        FieldCall(field='COMPRESSED_RED_GREEN_RGTC2_EXT', demands=['EXT_texture_compression_rgtc'], returns='0x8DBD'),
    ],
    "COMPRESSED_RED_RGTC1_EXT": [
        FieldCall(field='COMPRESSED_RED_RGTC1_EXT', demands=['EXT_texture_compression_rgtc'], returns='0x8DBB'),
    ],
    "COMPRESSED_RG11_EAC": [
        FieldCall(field='COMPRESSED_RG11_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9272'),
    ],
    "COMPRESSED_RGB8_ETC2": [
        FieldCall(field='COMPRESSED_RGB8_ETC2', demands=['WEBGL_compressed_texture_etc'], returns='0x9274'),
    ],
    "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2": [
        FieldCall(field='COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2', demands=['WEBGL_compressed_texture_etc'], returns='0x9276'),
    ],
    "COMPRESSED_RGBA8_ETC2_EAC": [
        FieldCall(field='COMPRESSED_RGBA8_ETC2_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9278'),
    ],
    "COMPRESSED_RGBA_ASTC_10x10_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_10x10_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93BB'),
    ],
    "COMPRESSED_RGBA_ASTC_10x5_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_10x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B8'),
    ],
    "COMPRESSED_RGBA_ASTC_10x6_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_10x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B9'),
    ],
    "COMPRESSED_RGBA_ASTC_10x8_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_10x8_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93BA'),
    ],
    "COMPRESSED_RGBA_ASTC_12x10_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_12x10_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93BC'),
    ],
    "COMPRESSED_RGBA_ASTC_12x12_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_12x12_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93BD'),
    ],
    "COMPRESSED_RGBA_ASTC_4x4_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_4x4_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B0'),
    ],
    "COMPRESSED_RGBA_ASTC_5x4_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_5x4_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B1'),
    ],
    "COMPRESSED_RGBA_ASTC_5x5_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_5x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B2'),
    ],
    "COMPRESSED_RGBA_ASTC_6x5_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_6x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B3'),
    ],
    "COMPRESSED_RGBA_ASTC_6x6_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_6x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B4'),
    ],
    "COMPRESSED_RGBA_ASTC_8x5_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_8x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B5'),
    ],
    "COMPRESSED_RGBA_ASTC_8x6_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_8x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B6'),
    ],
    "COMPRESSED_RGBA_ASTC_8x8_KHR": [
        FieldCall(field='COMPRESSED_RGBA_ASTC_8x8_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93B7'),
    ],
    "COMPRESSED_RGBA_BPTC_UNORM_EXT": [
        FieldCall(field='COMPRESSED_RGBA_BPTC_UNORM_EXT', demands=['EXT_texture_compression_bptc'], returns='0x8E8C'),
    ],
    "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG": [
        FieldCall(field='COMPRESSED_RGBA_PVRTC_2BPPV1_IMG', demands=['WEBGL_compressed_texture_pvrtc'], returns='0x8C03'),
    ],
    "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG": [
        FieldCall(field='COMPRESSED_RGBA_PVRTC_4BPPV1_IMG', demands=['WEBGL_compressed_texture_pvrtc'], returns='0x8C02'),
    ],
    "COMPRESSED_RGBA_S3TC_DXT1_EXT": [
        FieldCall(field='COMPRESSED_RGBA_S3TC_DXT1_EXT', demands=['WEBGL_compressed_texture_s3tc'], returns='0x83F1'),
    ],
    "COMPRESSED_RGBA_S3TC_DXT3_EXT": [
        FieldCall(field='COMPRESSED_RGBA_S3TC_DXT3_EXT', demands=['WEBGL_compressed_texture_s3tc'], returns='0x83F2'),
    ],
    "COMPRESSED_RGBA_S3TC_DXT5_EXT": [
        FieldCall(field='COMPRESSED_RGBA_S3TC_DXT5_EXT', demands=['WEBGL_compressed_texture_s3tc'], returns='0x83F3'),
    ],
    "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT": [
        FieldCall(field='COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT', demands=['EXT_texture_compression_bptc'], returns='0x8E8E'),
    ],
    "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT": [
        FieldCall(field='COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT', demands=['EXT_texture_compression_bptc'], returns='0x8E8F'),
    ],
    "COMPRESSED_RGB_ETC1_WEBGL": [
        FieldCall(field='COMPRESSED_RGB_ETC1_WEBGL', demands=['WEBGL_compressed_texture_etc1'], returns='0x8D64'),
    ],
    "COMPRESSED_RGB_PVRTC_2BPPV1_IMG": [
        FieldCall(field='COMPRESSED_RGB_PVRTC_2BPPV1_IMG', demands=['WEBGL_compressed_texture_pvrtc'], returns='0x8C01'),
    ],
    "COMPRESSED_RGB_PVRTC_4BPPV1_IMG": [
        FieldCall(field='COMPRESSED_RGB_PVRTC_4BPPV1_IMG', demands=['WEBGL_compressed_texture_pvrtc'], returns='0x8C00'),
    ],
    "COMPRESSED_RGB_S3TC_DXT1_EXT": [
        FieldCall(field='COMPRESSED_RGB_S3TC_DXT1_EXT', demands=['WEBGL_compressed_texture_s3tc'], returns='0x83F0'),
    ],
    "COMPRESSED_SIGNED_R11_EAC": [
        FieldCall(field='COMPRESSED_SIGNED_R11_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9271'),
    ],
    "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT": [
        FieldCall(field='COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT', demands=['EXT_texture_compression_rgtc'], returns='0x8DBE'),
    ],
    "COMPRESSED_SIGNED_RED_RGTC1_EXT": [
        FieldCall(field='COMPRESSED_SIGNED_RED_RGTC1_EXT', demands=['EXT_texture_compression_rgtc'], returns='0x8DBC'),
    ],
    "COMPRESSED_SIGNED_RG11_EAC": [
        FieldCall(field='COMPRESSED_SIGNED_RG11_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9273'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93DB'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D8'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D9'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93DA'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93DC'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93DD'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D0'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D1'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D2'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D3'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D4'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D5'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D6'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR', demands=['WEBGL_compressed_texture_astc'], returns='0x93D7'),
    ],
    "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC": [
        FieldCall(field='COMPRESSED_SRGB8_ALPHA8_ETC2_EAC', demands=['WEBGL_compressed_texture_etc'], returns='0x9279'),
    ],
    "COMPRESSED_SRGB8_ETC2": [
        FieldCall(field='COMPRESSED_SRGB8_ETC2', demands=['WEBGL_compressed_texture_etc'], returns='0x9275'),
    ],
    "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2": [
        FieldCall(field='COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2', demands=['WEBGL_compressed_texture_etc'], returns='0x9277'),
    ],
    "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT": [
        FieldCall(field='COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT', demands=['EXT_texture_compression_bptc'], returns='0x8E8D'),
    ],
    "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT": [
        FieldCall(field='COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT', demands=['WEBGL_compressed_texture_s3tc_srgb'], returns='0x8C4D'),
    ],
    "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT": [
        FieldCall(field='COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT', demands=['WEBGL_compressed_texture_s3tc_srgb'], returns='0x8C4E'),
    ],
    "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT": [
        FieldCall(field='COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT', demands=['WEBGL_compressed_texture_s3tc_srgb'], returns='0x8C4F'),
    ],
    "COMPRESSED_SRGB_S3TC_DXT1_EXT": [
        FieldCall(field='COMPRESSED_SRGB_S3TC_DXT1_EXT', demands=['WEBGL_compressed_texture_s3tc_srgb'], returns='0x8C4C'),
    ],
    "COMPRESSED_TEXTURE_FORMATS": [
        FieldCall(field='COMPRESSED_TEXTURE_FORMATS', demands=['WebGLRenderingContextBase'], returns='0x86A3'),
    ],
    "CONDITION_SATISFIED": [
        FieldCall(field='CONDITION_SATISFIED', demands=['WebGL2RenderingContextBase'], returns='0x911C'),
    ],
    "CONNECTING": [
        FieldCall(field='CONNECTING', demands=['EventSource'], returns='0'),
        FieldCall(field='CONNECTING', demands=['WebSocket'], returns='0'),
        FieldCall(field='CONNECTING', demands=['WebSocket'], returns='float'),
    ],
    "CONSTANT_ALPHA": [
        FieldCall(field='CONSTANT_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x8003'),
    ],
    "CONSTANT_COLOR": [
        FieldCall(field='CONSTANT_COLOR', demands=['WebGLRenderingContextBase'], returns='0x8001'),
    ],
    "CONTEXT_LOST_WEBGL": [
        FieldCall(field='CONTEXT_LOST_WEBGL', demands=['WebGLRenderingContextBase'], returns='0x9242'),
    ],
    "COPY_READ_BUFFER": [
        FieldCall(field='COPY_READ_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8F36'),
    ],
    "COPY_READ_BUFFER_BINDING": [
        FieldCall(field='COPY_READ_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8F36'),
    ],
    "COPY_WRITE_BUFFER": [
        FieldCall(field='COPY_WRITE_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8F37'),
    ],
    "COPY_WRITE_BUFFER_BINDING": [
        FieldCall(field='COPY_WRITE_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8F37'),
    ],
    "COUNTER_STYLE_RULE": [
        FieldCall(field='COUNTER_STYLE_RULE', demands=['CSSRule'], returns='11'),
    ],
    "CSPViolationReportBody": [
        NewCall(constructor='CSPViolationReportBody', demands=[], returns='CSPViolationReportBody'),
    ],
    "CSSAnimation": [
        NewCall(constructor='CSSAnimation', demands=[], returns='CSSAnimation'),
    ],
    "CSSConditionRule": [
        NewCall(constructor='CSSConditionRule', demands=[], returns='CSSConditionRule'),
    ],
    "CSSContainerRule": [
        NewCall(constructor='CSSContainerRule', demands=[], returns='CSSContainerRule'),
    ],
    "CSSCounterStyleRule": [
        NewCall(constructor='CSSCounterStyleRule', demands=[], returns='CSSCounterStyleRule'),
    ],
    "CSSFontFaceRule": [
        NewCall(constructor='CSSFontFaceRule', demands=[], returns='CSSFontFaceRule'),
    ],
    "CSSFontFeatureValuesRule": [
        NewCall(constructor='CSSFontFeatureValuesRule', demands=[], returns='CSSFontFeatureValuesRule'),
    ],
    "CSSFontPaletteValuesRule": [
        NewCall(constructor='CSSFontPaletteValuesRule', demands=[], returns='CSSFontPaletteValuesRule'),
    ],
    "CSSGroupingRule": [
        NewCall(constructor='CSSGroupingRule', demands=[], returns='CSSGroupingRule'),
    ],
    "CSSImageValue": [
        NewCall(constructor='CSSImageValue', demands=[], returns='CSSImageValue'),
    ],
    "CSSImportRule": [
        NewCall(constructor='CSSImportRule', demands=[], returns='CSSImportRule'),
    ],
    "CSSKeyframeRule": [
        NewCall(constructor='CSSKeyframeRule', demands=[], returns='CSSKeyframeRule'),
    ],
    "CSSKeyframesRule": [
        NewCall(constructor='CSSKeyframesRule', demands=[], returns='CSSKeyframesRule'),
    ],
    "CSSKeywordValue": [
        NewCall(constructor='CSSKeywordValue', demands=['str'], returns='CSSKeywordValue'),
    ],
    "CSSLayerBlockRule": [
        NewCall(constructor='CSSLayerBlockRule', demands=[], returns='CSSLayerBlockRule'),
    ],
    "CSSLayerStatementRule": [
        NewCall(constructor='CSSLayerStatementRule', demands=[], returns='CSSLayerStatementRule'),
    ],
    "CSSMathClamp": [
        NewCall(constructor='CSSMathClamp', demands=['CSSNumberish', 'CSSNumberish', 'CSSNumberish'], returns='CSSMathClamp'),
    ],
    "CSSMathInvert": [
        NewCall(constructor='CSSMathInvert', demands=['CSSNumberish'], returns='CSSMathInvert'),
    ],
    "CSSMathMax": [
        NewCall(constructor='CSSMathMax', demands=['*'], returns='CSSMathMax'),
    ],
    "CSSMathMin": [
        NewCall(constructor='CSSMathMin', demands=['*'], returns='CSSMathMin'),
    ],
    "CSSMathNegate": [
        NewCall(constructor='CSSMathNegate', demands=['CSSNumberish'], returns='CSSMathNegate'),
    ],
    "CSSMathProduct": [
        NewCall(constructor='CSSMathProduct', demands=['*'], returns='CSSMathProduct'),
    ],
    "CSSMathSum": [
        NewCall(constructor='CSSMathSum', demands=['*'], returns='CSSMathSum'),
    ],
    "CSSMathValue": [
        NewCall(constructor='CSSMathValue', demands=[], returns='CSSMathValue'),
    ],
    "CSSMatrixComponent": [
        NewCall(constructor='CSSMatrixComponent', demands=['DOMMatrixReadOnly'], returns='CSSMatrixComponent'),
        NewCall(constructor='CSSMatrixComponent', demands=['DOMMatrixReadOnly', 'CSSMatrixComponentOptions'], returns='CSSMatrixComponent'),
    ],
    "CSSMediaRule": [
        NewCall(constructor='CSSMediaRule', demands=[], returns='CSSMediaRule'),
    ],
    "CSSNamespaceRule": [
        NewCall(constructor='CSSNamespaceRule', demands=[], returns='CSSNamespaceRule'),
    ],
    "CSSNestedDeclarations": [
        NewCall(constructor='CSSNestedDeclarations', demands=[], returns='CSSNestedDeclarations'),
    ],
    "CSSNumericArray": [
        NewCall(constructor='CSSNumericArray', demands=[], returns='CSSNumericArray'),
    ],
    "CSSNumericValue": [
        NewCall(constructor='CSSNumericValue', demands=[], returns='CSSNumericValue'),
    ],
    "CSSPageRule": [
        NewCall(constructor='CSSPageRule', demands=[], returns='CSSPageRule'),
    ],
    "CSSPerspective": [
        NewCall(constructor='CSSPerspective', demands=['CSSPerspectiveValue'], returns='CSSPerspective'),
    ],
    "CSSPropertyRule": [
        NewCall(constructor='CSSPropertyRule', demands=[], returns='CSSPropertyRule'),
    ],
    "CSSRotate": [
        NewCall(constructor='CSSRotate', demands=['CSSNumericValue'], returns='CSSRotate'),
    ],
    "CSSRule": [
        NewCall(constructor='CSSRule', demands=[], returns='CSSRule'),
    ],
    "CSSRuleList": [
        NewCall(constructor='CSSRuleList', demands=[], returns='CSSRuleList'),
    ],
    "CSSScale": [
        NewCall(constructor='CSSScale', demands=['CSSNumberish', 'CSSNumberish'], returns='CSSScale'),
        NewCall(constructor='CSSScale', demands=['CSSNumberish', 'CSSNumberish', 'CSSNumberish'], returns='CSSScale'),
    ],
    "CSSScopeRule": [
        NewCall(constructor='CSSScopeRule', demands=[], returns='CSSScopeRule'),
    ],
    "CSSSkew": [
        NewCall(constructor='CSSSkew', demands=['CSSNumericValue', 'CSSNumericValue'], returns='CSSSkew'),
    ],
    "CSSSkewX": [
        NewCall(constructor='CSSSkewX', demands=['CSSNumericValue'], returns='CSSSkewX'),
    ],
    "CSSSkewY": [
        NewCall(constructor='CSSSkewY', demands=['CSSNumericValue'], returns='CSSSkewY'),
    ],
    "CSSStartingStyleRule": [
        NewCall(constructor='CSSStartingStyleRule', demands=[], returns='CSSStartingStyleRule'),
    ],
    "CSSStyleDeclaration": [
        NewCall(constructor='CSSStyleDeclaration', demands=[], returns='CSSStyleDeclaration'),
    ],
    "CSSStyleRule": [
        NewCall(constructor='CSSStyleRule', demands=[], returns='CSSStyleRule'),
    ],
    "CSSStyleSheet": [
        NewCall(constructor='CSSStyleSheet', demands=[], returns='CSSStyleSheet'),
        NewCall(constructor='CSSStyleSheet', demands=['CSSStyleSheetInit'], returns='CSSStyleSheet'),
    ],
    "CSSStyleValue": [
        NewCall(constructor='CSSStyleValue', demands=[], returns='CSSStyleValue'),
    ],
    "CSSSupportsRule": [
        NewCall(constructor='CSSSupportsRule', demands=[], returns='CSSSupportsRule'),
    ],
    "CSSTransformComponent": [
        NewCall(constructor='CSSTransformComponent', demands=[], returns='CSSTransformComponent'),
    ],
    "CSSTransformValue": [
        NewCall(constructor='CSSTransformValue', demands=['list'], returns='CSSTransformValue'),
    ],
    "CSSTransition": [
        NewCall(constructor='CSSTransition', demands=[], returns='CSSTransition'),
    ],
    "CSSTranslate": [
        NewCall(constructor='CSSTranslate', demands=['CSSNumericValue', 'CSSNumericValue'], returns='CSSTranslate'),
        NewCall(constructor='CSSTranslate', demands=['CSSNumericValue', 'CSSNumericValue', 'CSSNumericValue'], returns='CSSTranslate'),
    ],
    "CSSUnitValue": [
        NewCall(constructor='CSSUnitValue', demands=['float', 'str'], returns='CSSUnitValue'),
    ],
    "CSSUnparsedValue": [
        NewCall(constructor='CSSUnparsedValue', demands=['list'], returns='CSSUnparsedValue'),
    ],
    "CSSVariableReferenceValue": [
        NewCall(constructor='CSSVariableReferenceValue', demands=['str'], returns='CSSVariableReferenceValue'),
        NewCall(constructor='CSSVariableReferenceValue', demands=['str', 'CSSUnparsedValue'], returns='CSSVariableReferenceValue'),
    ],
    "CSSViewTransitionRule": [
        NewCall(constructor='CSSViewTransitionRule', demands=[], returns='CSSViewTransitionRule'),
    ],
    "CULL_FACE": [
        FieldCall(field='CULL_FACE', demands=['WebGLRenderingContextBase'], returns='0x0B44'),
    ],
    "CULL_FACE_MODE": [
        FieldCall(field='CULL_FACE_MODE', demands=['WebGLRenderingContextBase'], returns='0x0B45'),
    ],
    "CURRENT_PROGRAM": [
        FieldCall(field='CURRENT_PROGRAM', demands=['WebGLRenderingContextBase'], returns='0x8B8D'),
    ],
    "CURRENT_QUERY": [
        FieldCall(field='CURRENT_QUERY', demands=['WebGL2RenderingContextBase'], returns='0x8865'),
    ],
    "CURRENT_VERTEX_ATTRIB": [
        FieldCall(field='CURRENT_VERTEX_ATTRIB', demands=['WebGLRenderingContextBase'], returns='0x8626'),
    ],
    "CW": [
        FieldCall(field='CW', demands=['WebGLRenderingContextBase'], returns='0x0900'),
    ],
    "Cache": [
        NewCall(constructor='Cache', demands=[], returns='Cache'),
        NewCall(constructor='Cache', demands=[], returns='never'),
    ],
    "CacheStorage": [
        NewCall(constructor='CacheStorage', demands=[], returns='CacheStorage'),
        NewCall(constructor='CacheStorage', demands=[], returns='never'),
    ],
    "CanvasCaptureMediaStreamTrack": [
        NewCall(constructor='CanvasCaptureMediaStreamTrack', demands=[], returns='CanvasCaptureMediaStreamTrack'),
    ],
    "CanvasGradient": [
        NewCall(constructor='CanvasGradient', demands=[], returns='CanvasGradient'),
    ],
    "CanvasPattern": [
        NewCall(constructor='CanvasPattern', demands=[], returns='CanvasPattern'),
    ],
    "CanvasRenderingContext2D": [
        NewCall(constructor='CanvasRenderingContext2D', demands=[], returns='CanvasRenderingContext2D'),
    ],
    "CaretPosition": [
        NewCall(constructor='CaretPosition', demands=[], returns='CaretPosition'),
    ],
    "ChannelMergerNode": [
        NewCall(constructor='ChannelMergerNode', demands=['BaseAudioContext'], returns='ChannelMergerNode'),
        NewCall(constructor='ChannelMergerNode', demands=['BaseAudioContext', 'ChannelMergerOptions'], returns='ChannelMergerNode'),
    ],
    "ChannelSplitterNode": [
        NewCall(constructor='ChannelSplitterNode', demands=['BaseAudioContext'], returns='ChannelSplitterNode'),
        NewCall(constructor='ChannelSplitterNode', demands=['BaseAudioContext', 'ChannelSplitterOptions'], returns='ChannelSplitterNode'),
    ],
    "CharacterData": [
        NewCall(constructor='CharacterData', demands=[], returns='CharacterData'),
    ],
    "Clipboard": [
        NewCall(constructor='Clipboard', demands=[], returns='Clipboard'),
    ],
    "ClipboardEvent": [
        NewCall(constructor='ClipboardEvent', demands=['str'], returns='ClipboardEvent'),
        NewCall(constructor='ClipboardEvent', demands=['str', 'ClipboardEventInit'], returns='ClipboardEvent'),
    ],
    "ClipboardItem": [
        NewCall(constructor='ClipboardItem', demands=['Record<string,string'], returns='ClipboardItem'),
        NewCall(constructor='ClipboardItem', demands=['Record<string,string', 'ClipboardItemOptions'], returns='ClipboardItem'),
    ],
    "Close": [
        PrototypeCall(constructor='ITextWriter', fn='Close', demands=['ITextWriter'], returns='None'),
        PrototypeCall(constructor='TextStreamBase', fn='Close', demands=['TextStreamBase'], returns='None'),
    ],
    "CloseEvent": [
        NewCall(constructor='CloseEvent', demands=['str'], returns='CloseEvent'),
        NewCall(constructor='CloseEvent', demands=['str', 'CloseEventInit'], returns='CloseEvent'),
    ],
    "Column": [
        FieldCall(field='Column', demands=['TextStreamBase'], returns='float'),
        FieldCall(field='Column', demands=['TextStreamBase', 'float'], returns='None'),
    ],
    "Comment": [
        NewCall(constructor='Comment', demands=[], returns='Comment'),
        NewCall(constructor='Comment', demands=['str'], returns='Comment'),
    ],
    "CompositionEvent": [
        NewCall(constructor='CompositionEvent', demands=['str'], returns='CompositionEvent'),
        NewCall(constructor='CompositionEvent', demands=['str', 'CompositionEventInit'], returns='CompositionEvent'),
    ],
    "CompressionStream": [
        NewCall(constructor='CompressionStream', demands=['CompressionFormat'], returns='CompressionStream'),
    ],
    "ConstantSourceNode": [
        NewCall(constructor='ConstantSourceNode', demands=['BaseAudioContext'], returns='ConstantSourceNode'),
        NewCall(constructor='ConstantSourceNode', demands=['BaseAudioContext', 'ConstantSourceOptions'], returns='ConstantSourceNode'),
    ],
    "ContentVisibilityAutoStateChangeEvent": [
        NewCall(constructor='ContentVisibilityAutoStateChangeEvent', demands=['str'], returns='ContentVisibilityAutoStateChangeEvent'),
        NewCall(constructor='ContentVisibilityAutoStateChangeEvent', demands=['str', 'ContentVisibilityAutoStateChangeEventInit'], returns='ContentVisibilityAutoStateChangeEvent'),
    ],
    "ConvolverNode": [
        NewCall(constructor='ConvolverNode', demands=['BaseAudioContext'], returns='ConvolverNode'),
        NewCall(constructor='ConvolverNode', demands=['BaseAudioContext', 'ConvolverOptions'], returns='ConvolverNode'),
    ],
    "CookieChangeEvent": [
        NewCall(constructor='CookieChangeEvent', demands=['str'], returns='CookieChangeEvent'),
        NewCall(constructor='CookieChangeEvent', demands=['str', 'CookieChangeEventInit'], returns='CookieChangeEvent'),
    ],
    "CookieStore": [
        NewCall(constructor='CookieStore', demands=[], returns='CookieStore'),
    ],
    "CookieStoreManager": [
        NewCall(constructor='CookieStoreManager', demands=[], returns='CookieStoreManager'),
    ],
    "CountQueuingStrategy": [
        NewCall(constructor='CountQueuingStrategy', demands=['QueuingStrategyInit'], returns='CountQueuingStrategy'),
    ],
    "Credential": [
        NewCall(constructor='Credential', demands=[], returns='Credential'),
    ],
    "CredentialsContainer": [
        NewCall(constructor='CredentialsContainer', demands=[], returns='CredentialsContainer'),
    ],
    "Crypto": [
        NewCall(constructor='Crypto', demands=[], returns='Crypto'),
        NewCall(constructor='Crypto', demands=[], returns='never'),
    ],
    "CryptoKey": [
        NewCall(constructor='CryptoKey', demands=[], returns='CryptoKey'),
        NewCall(constructor='CryptoKey', demands=[], returns='never'),
    ],
    "CryptoKeyPair": [
        NewCall(constructor='CryptoKeyPair', demands=[], returns='never'),
    ],
    "CustomElementRegistry": [
        NewCall(constructor='CustomElementRegistry', demands=[], returns='CustomElementRegistry'),
    ],
    "CustomStateSet": [
        NewCall(constructor='CustomStateSet', demands=[], returns='CustomStateSet'),
    ],
    "DATA_CLONE_ERR": [
        FieldCall(field='DATA_CLONE_ERR', demands=['DOMException'], returns='25'),
    ],
    "DECR": [
        FieldCall(field='DECR', demands=['WebGLRenderingContextBase'], returns='0x1E03'),
    ],
    "DECR_WRAP": [
        FieldCall(field='DECR_WRAP', demands=['WebGLRenderingContextBase'], returns='0x8508'),
    ],
    "DELETE_STATUS": [
        FieldCall(field='DELETE_STATUS', demands=['WebGLRenderingContextBase'], returns='0x8B80'),
    ],
    "DEPTH": [
        FieldCall(field='DEPTH', demands=['WebGL2RenderingContextBase'], returns='0x1801'),
    ],
    "DEPTH24_STENCIL8": [
        FieldCall(field='DEPTH24_STENCIL8', demands=['WebGL2RenderingContextBase'], returns='0x88F0'),
    ],
    "DEPTH32F_STENCIL8": [
        FieldCall(field='DEPTH32F_STENCIL8', demands=['WebGL2RenderingContextBase'], returns='0x8CAD'),
    ],
    "DEPTH_ATTACHMENT": [
        FieldCall(field='DEPTH_ATTACHMENT', demands=['WebGLRenderingContextBase'], returns='0x8D00'),
    ],
    "DEPTH_BITS": [
        FieldCall(field='DEPTH_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D56'),
    ],
    "DEPTH_BUFFER_BIT": [
        FieldCall(field='DEPTH_BUFFER_BIT', demands=['WebGLRenderingContextBase'], returns='0x00000100'),
    ],
    "DEPTH_CLEAR_VALUE": [
        FieldCall(field='DEPTH_CLEAR_VALUE', demands=['WebGLRenderingContextBase'], returns='0x0B73'),
    ],
    "DEPTH_COMPONENT": [
        FieldCall(field='DEPTH_COMPONENT', demands=['WebGLRenderingContextBase'], returns='0x1902'),
    ],
    "DEPTH_COMPONENT16": [
        FieldCall(field='DEPTH_COMPONENT16', demands=['WebGLRenderingContextBase'], returns='0x81A5'),
    ],
    "DEPTH_COMPONENT24": [
        FieldCall(field='DEPTH_COMPONENT24', demands=['WebGL2RenderingContextBase'], returns='0x81A6'),
    ],
    "DEPTH_COMPONENT32F": [
        FieldCall(field='DEPTH_COMPONENT32F', demands=['WebGL2RenderingContextBase'], returns='0x8CAC'),
    ],
    "DEPTH_FUNC": [
        FieldCall(field='DEPTH_FUNC', demands=['WebGLRenderingContextBase'], returns='0x0B74'),
    ],
    "DEPTH_RANGE": [
        FieldCall(field='DEPTH_RANGE', demands=['WebGLRenderingContextBase'], returns='0x0B70'),
    ],
    "DEPTH_STENCIL": [
        FieldCall(field='DEPTH_STENCIL', demands=['WebGLRenderingContextBase'], returns='0x84F9'),
    ],
    "DEPTH_STENCIL_ATTACHMENT": [
        FieldCall(field='DEPTH_STENCIL_ATTACHMENT', demands=['WebGLRenderingContextBase'], returns='0x821A'),
    ],
    "DEPTH_TEST": [
        FieldCall(field='DEPTH_TEST', demands=['WebGLRenderingContextBase'], returns='0x0B71'),
    ],
    "DEPTH_WRITEMASK": [
        FieldCall(field='DEPTH_WRITEMASK', demands=['WebGLRenderingContextBase'], returns='0x0B72'),
    ],
    "DITHER": [
        FieldCall(field='DITHER', demands=['WebGLRenderingContextBase'], returns='0x0BD0'),
    ],
    "DOCUMENT_FRAGMENT_NODE": [
        FieldCall(field='DOCUMENT_FRAGMENT_NODE', demands=['Node'], returns='11'),
    ],
    "DOCUMENT_NODE": [
        FieldCall(field='DOCUMENT_NODE', demands=['Node'], returns='9'),
    ],
    "DOCUMENT_POSITION_CONTAINED_BY": [
        FieldCall(field='DOCUMENT_POSITION_CONTAINED_BY', demands=['Node'], returns='0x10'),
    ],
    "DOCUMENT_POSITION_CONTAINS": [
        FieldCall(field='DOCUMENT_POSITION_CONTAINS', demands=['Node'], returns='0x08'),
    ],
    "DOCUMENT_POSITION_DISCONNECTED": [
        FieldCall(field='DOCUMENT_POSITION_DISCONNECTED', demands=['Node'], returns='0x01'),
    ],
    "DOCUMENT_POSITION_FOLLOWING": [
        FieldCall(field='DOCUMENT_POSITION_FOLLOWING', demands=['Node'], returns='0x04'),
    ],
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": [
        FieldCall(field='DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', demands=['Node'], returns='0x20'),
    ],
    "DOCUMENT_POSITION_PRECEDING": [
        FieldCall(field='DOCUMENT_POSITION_PRECEDING', demands=['Node'], returns='0x02'),
    ],
    "DOCUMENT_TYPE_NODE": [
        FieldCall(field='DOCUMENT_TYPE_NODE', demands=['Node'], returns='10'),
    ],
    "DOMContentLoaded": [
        FieldCall(field='DOMContentLoaded', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='DOMContentLoaded', demands=['DocumentEventMap', 'Event'], returns='None'),
        FieldCall(field='DOMContentLoaded', demands=['WindowEventMap'], returns='Event'),
        FieldCall(field='DOMContentLoaded', demands=['WindowEventMap', 'Event'], returns='None'),
    ],
    "DOMException": [
        NewCall(constructor='DOMException', demands=[], returns='DOMException'),
        NewCall(constructor='DOMException', demands=['str'], returns='DOMException'),
        NewCall(constructor='DOMException', demands=['str', 'str'], returns='DOMException'),
    ],
    "DOMImplementation": [
        NewCall(constructor='DOMImplementation', demands=[], returns='DOMImplementation'),
    ],
    "DOMMatrix": [
        NewCall(constructor='DOMMatrix', demands=[], returns='DOMMatrix'),
        NewCall(constructor='DOMMatrix', demands=['str'], returns='DOMMatrix'),
    ],
    "DOMMatrixReadOnly": [
        NewCall(constructor='DOMMatrixReadOnly', demands=[], returns='DOMMatrixReadOnly'),
        NewCall(constructor='DOMMatrixReadOnly', demands=['str'], returns='DOMMatrixReadOnly'),
    ],
    "DOMParser": [
        NewCall(constructor='DOMParser', demands=[], returns='DOMParser'),
    ],
    "DOMPoint": [
        NewCall(constructor='DOMPoint', demands=[], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float', 'float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float', 'float', 'float'], returns='DOMPoint'),
    ],
    "DOMPointReadOnly": [
        NewCall(constructor='DOMPointReadOnly', demands=[], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float', 'float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float', 'float', 'float'], returns='DOMPointReadOnly'),
    ],
    "DOMQuad": [
        NewCall(constructor='DOMQuad', demands=[], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['DOMPointInit'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['DOMPointInit', 'DOMPointInit'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['DOMPointInit', 'DOMPointInit', 'DOMPointInit'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['DOMPointInit', 'DOMPointInit', 'DOMPointInit', 'DOMPointInit'], returns='DOMQuad'),
    ],
    "DOMRect": [
        NewCall(constructor='DOMRect', demands=[], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float', 'float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float', 'float', 'float'], returns='DOMRect'),
    ],
    "DOMRectList": [
        NewCall(constructor='DOMRectList', demands=[], returns='DOMRectList'),
    ],
    "DOMRectReadOnly": [
        NewCall(constructor='DOMRectReadOnly', demands=[], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float', 'float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float', 'float', 'float'], returns='DOMRectReadOnly'),
    ],
    "DOMSTRING_SIZE_ERR": [
        FieldCall(field='DOMSTRING_SIZE_ERR', demands=['DOMException'], returns='2'),
    ],
    "DOMStringList": [
        NewCall(constructor='DOMStringList', demands=[], returns='DOMStringList'),
    ],
    "DOMStringMap": [
        NewCall(constructor='DOMStringMap', demands=[], returns='DOMStringMap'),
    ],
    "DOMTokenList": [
        NewCall(constructor='DOMTokenList', demands=[], returns='DOMTokenList'),
    ],
    "DOM_DELTA_LINE": [
        FieldCall(field='DOM_DELTA_LINE', demands=['WheelEvent'], returns='0x01'),
    ],
    "DOM_DELTA_PAGE": [
        FieldCall(field='DOM_DELTA_PAGE', demands=['WheelEvent'], returns='0x02'),
    ],
    "DOM_DELTA_PIXEL": [
        FieldCall(field='DOM_DELTA_PIXEL', demands=['WheelEvent'], returns='0x00'),
    ],
    "DOM_KEY_LOCATION_LEFT": [
        FieldCall(field='DOM_KEY_LOCATION_LEFT', demands=['KeyboardEvent'], returns='0x01'),
    ],
    "DOM_KEY_LOCATION_NUMPAD": [
        FieldCall(field='DOM_KEY_LOCATION_NUMPAD', demands=['KeyboardEvent'], returns='0x03'),
    ],
    "DOM_KEY_LOCATION_RIGHT": [
        FieldCall(field='DOM_KEY_LOCATION_RIGHT', demands=['KeyboardEvent'], returns='0x02'),
    ],
    "DOM_KEY_LOCATION_STANDARD": [
        FieldCall(field='DOM_KEY_LOCATION_STANDARD', demands=['KeyboardEvent'], returns='0x00'),
    ],
    "DONE": [
        FieldCall(field='DONE', demands=['FileReader'], returns='2'),
        FieldCall(field='DONE', demands=['XMLHttpRequest'], returns='4'),
    ],
    "DONT_CARE": [
        FieldCall(field='DONT_CARE', demands=['WebGLRenderingContextBase'], returns='0x1100'),
    ],
    "DRAW_BUFFER0": [
        FieldCall(field='DRAW_BUFFER0', demands=['WebGL2RenderingContextBase'], returns='0x8825'),
    ],
    "DRAW_BUFFER0_WEBGL": [
        FieldCall(field='DRAW_BUFFER0_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8825'),
    ],
    "DRAW_BUFFER1": [
        FieldCall(field='DRAW_BUFFER1', demands=['WebGL2RenderingContextBase'], returns='0x8826'),
    ],
    "DRAW_BUFFER10": [
        FieldCall(field='DRAW_BUFFER10', demands=['WebGL2RenderingContextBase'], returns='0x882F'),
    ],
    "DRAW_BUFFER10_WEBGL": [
        FieldCall(field='DRAW_BUFFER10_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882F'),
    ],
    "DRAW_BUFFER11": [
        FieldCall(field='DRAW_BUFFER11', demands=['WebGL2RenderingContextBase'], returns='0x8830'),
    ],
    "DRAW_BUFFER11_WEBGL": [
        FieldCall(field='DRAW_BUFFER11_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8830'),
    ],
    "DRAW_BUFFER12": [
        FieldCall(field='DRAW_BUFFER12', demands=['WebGL2RenderingContextBase'], returns='0x8831'),
    ],
    "DRAW_BUFFER12_WEBGL": [
        FieldCall(field='DRAW_BUFFER12_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8831'),
    ],
    "DRAW_BUFFER13": [
        FieldCall(field='DRAW_BUFFER13', demands=['WebGL2RenderingContextBase'], returns='0x8832'),
    ],
    "DRAW_BUFFER13_WEBGL": [
        FieldCall(field='DRAW_BUFFER13_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8832'),
    ],
    "DRAW_BUFFER14": [
        FieldCall(field='DRAW_BUFFER14', demands=['WebGL2RenderingContextBase'], returns='0x8833'),
    ],
    "DRAW_BUFFER14_WEBGL": [
        FieldCall(field='DRAW_BUFFER14_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8833'),
    ],
    "DRAW_BUFFER15": [
        FieldCall(field='DRAW_BUFFER15', demands=['WebGL2RenderingContextBase'], returns='0x8834'),
    ],
    "DRAW_BUFFER15_WEBGL": [
        FieldCall(field='DRAW_BUFFER15_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8834'),
    ],
    "DRAW_BUFFER1_WEBGL": [
        FieldCall(field='DRAW_BUFFER1_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8826'),
    ],
    "DRAW_BUFFER2": [
        FieldCall(field='DRAW_BUFFER2', demands=['WebGL2RenderingContextBase'], returns='0x8827'),
    ],
    "DRAW_BUFFER2_WEBGL": [
        FieldCall(field='DRAW_BUFFER2_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8827'),
    ],
    "DRAW_BUFFER3": [
        FieldCall(field='DRAW_BUFFER3', demands=['WebGL2RenderingContextBase'], returns='0x8828'),
    ],
    "DRAW_BUFFER3_WEBGL": [
        FieldCall(field='DRAW_BUFFER3_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8828'),
    ],
    "DRAW_BUFFER4": [
        FieldCall(field='DRAW_BUFFER4', demands=['WebGL2RenderingContextBase'], returns='0x8829'),
    ],
    "DRAW_BUFFER4_WEBGL": [
        FieldCall(field='DRAW_BUFFER4_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8829'),
    ],
    "DRAW_BUFFER5": [
        FieldCall(field='DRAW_BUFFER5', demands=['WebGL2RenderingContextBase'], returns='0x882A'),
    ],
    "DRAW_BUFFER5_WEBGL": [
        FieldCall(field='DRAW_BUFFER5_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882A'),
    ],
    "DRAW_BUFFER6": [
        FieldCall(field='DRAW_BUFFER6', demands=['WebGL2RenderingContextBase'], returns='0x882B'),
    ],
    "DRAW_BUFFER6_WEBGL": [
        FieldCall(field='DRAW_BUFFER6_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882B'),
    ],
    "DRAW_BUFFER7": [
        FieldCall(field='DRAW_BUFFER7', demands=['WebGL2RenderingContextBase'], returns='0x882C'),
    ],
    "DRAW_BUFFER7_WEBGL": [
        FieldCall(field='DRAW_BUFFER7_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882C'),
    ],
    "DRAW_BUFFER8": [
        FieldCall(field='DRAW_BUFFER8', demands=['WebGL2RenderingContextBase'], returns='0x882D'),
    ],
    "DRAW_BUFFER8_WEBGL": [
        FieldCall(field='DRAW_BUFFER8_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882D'),
    ],
    "DRAW_BUFFER9": [
        FieldCall(field='DRAW_BUFFER9', demands=['WebGL2RenderingContextBase'], returns='0x882E'),
    ],
    "DRAW_BUFFER9_WEBGL": [
        FieldCall(field='DRAW_BUFFER9_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x882E'),
    ],
    "DRAW_FRAMEBUFFER": [
        FieldCall(field='DRAW_FRAMEBUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8CA9'),
    ],
    "DRAW_FRAMEBUFFER_BINDING": [
        FieldCall(field='DRAW_FRAMEBUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8CA6'),
    ],
    "DST_ALPHA": [
        FieldCall(field='DST_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x0304'),
    ],
    "DST_COLOR": [
        FieldCall(field='DST_COLOR', demands=['WebGLRenderingContextBase'], returns='0x0306'),
    ],
    "DYNAMIC_COPY": [
        FieldCall(field='DYNAMIC_COPY', demands=['WebGL2RenderingContextBase'], returns='0x88EA'),
    ],
    "DYNAMIC_DRAW": [
        FieldCall(field='DYNAMIC_DRAW', demands=['WebGLRenderingContextBase'], returns='0x88E8'),
    ],
    "DYNAMIC_READ": [
        FieldCall(field='DYNAMIC_READ', demands=['WebGL2RenderingContextBase'], returns='0x88E9'),
    ],
    "DataTransfer": [
        NewCall(constructor='DataTransfer', demands=[], returns='DataTransfer'),
    ],
    "DataTransferItem": [
        NewCall(constructor='DataTransferItem', demands=[], returns='DataTransferItem'),
    ],
    "DataTransferItemList": [
        NewCall(constructor='DataTransferItemList', demands=[], returns='DataTransferItemList'),
    ],
    "DecompressionStream": [
        NewCall(constructor='DecompressionStream', demands=['CompressionFormat'], returns='DecompressionStream'),
    ],
    "DelayNode": [
        NewCall(constructor='DelayNode', demands=['BaseAudioContext'], returns='DelayNode'),
        NewCall(constructor='DelayNode', demands=['BaseAudioContext', 'DelayOptions'], returns='DelayNode'),
    ],
    "Deno": [
        FieldCall(field='Deno', demands=['Window'], returns='typeofDeno'),
        FieldCall(field='Deno', demands=['Window', 'typeofDeno'], returns='None'),
    ],
    "DeviceMotionEvent": [
        NewCall(constructor='DeviceMotionEvent', demands=['str'], returns='DeviceMotionEvent'),
        NewCall(constructor='DeviceMotionEvent', demands=['str', 'DeviceMotionEventInit'], returns='DeviceMotionEvent'),
    ],
    "DeviceOrientationEvent": [
        NewCall(constructor='DeviceOrientationEvent', demands=['str'], returns='DeviceOrientationEvent'),
        NewCall(constructor='DeviceOrientationEvent', demands=['str', 'DeviceOrientationEventInit'], returns='DeviceOrientationEvent'),
    ],
    "Document": [
        NewCall(constructor='Document', demands=[], returns='Document'),
    ],
    "DocumentFragment": [
        NewCall(constructor='DocumentFragment', demands=[], returns='DocumentFragment'),
    ],
    "DocumentTimeline": [
        NewCall(constructor='DocumentTimeline', demands=[], returns='DocumentTimeline'),
        NewCall(constructor='DocumentTimeline', demands=['DocumentTimelineOptions'], returns='DocumentTimeline'),
    ],
    "DocumentType": [
        NewCall(constructor='DocumentType', demands=[], returns='DocumentType'),
    ],
    "DragEvent": [
        NewCall(constructor='DragEvent', demands=['str'], returns='DragEvent'),
        NewCall(constructor='DragEvent', demands=['str', 'DragEventInit'], returns='DragEvent'),
    ],
    "DynamicsCompressorNode": [
        NewCall(constructor='DynamicsCompressorNode', demands=['BaseAudioContext'], returns='DynamicsCompressorNode'),
        NewCall(constructor='DynamicsCompressorNode', demands=['BaseAudioContext', 'DynamicsCompressorOptions'], returns='DynamicsCompressorNode'),
    ],
    "E": [
        FieldCall(field='E', demands=['Math'], returns='float'),
    ],
    "ELEMENT_ARRAY_BUFFER": [
        FieldCall(field='ELEMENT_ARRAY_BUFFER', demands=['WebGLRenderingContextBase'], returns='0x8893'),
    ],
    "ELEMENT_ARRAY_BUFFER_BINDING": [
        FieldCall(field='ELEMENT_ARRAY_BUFFER_BINDING', demands=['WebGLRenderingContextBase'], returns='0x8895'),
    ],
    "ELEMENT_NODE": [
        FieldCall(field='ELEMENT_NODE', demands=['Node'], returns='1'),
    ],
    "EMPTY": [
        FieldCall(field='EMPTY', demands=['FileReader'], returns='0'),
    ],
    "END_TO_END": [
        FieldCall(field='END_TO_END', demands=['Range'], returns='2'),
    ],
    "END_TO_START": [
        FieldCall(field='END_TO_START', demands=['Range'], returns='3'),
    ],
    "ENTITY_NODE": [
        FieldCall(field='ENTITY_NODE', demands=['Node'], returns='6'),
    ],
    "ENTITY_REFERENCE_NODE": [
        FieldCall(field='ENTITY_REFERENCE_NODE', demands=['Node'], returns='5'),
    ],
    "EPSILON": [
        FieldCall(field='EPSILON', demands=['NumberConstructor'], returns='float'),
    ],
    "EQUAL": [
        FieldCall(field='EQUAL', demands=['WebGLRenderingContextBase'], returns='0x0202'),
    ],
    "ERROR": [
        FieldCall(field='ERROR', demands=['HTMLTrackElement'], returns='3'),
    ],
    "Element": [
        NewCall(constructor='Element', demands=[], returns='Element'),
    ],
    "ElementInternals": [
        NewCall(constructor='ElementInternals', demands=[], returns='ElementInternals'),
    ],
    "EncodedAudioChunk": [
        NewCall(constructor='EncodedAudioChunk', demands=['EncodedAudioChunkInit'], returns='EncodedAudioChunk'),
    ],
    "EncodedVideoChunk": [
        NewCall(constructor='EncodedVideoChunk', demands=['EncodedVideoChunkInit'], returns='EncodedVideoChunk'),
    ],
    "ErrorEvent": [
        NewCall(constructor='ErrorEvent', demands=['str'], returns='ErrorEvent'),
        NewCall(constructor='ErrorEvent', demands=['str', 'ErrorEventInit'], returns='ErrorEvent'),
    ],
    "Event": [
        NewCall(constructor='Event', demands=['str'], returns='Event'),
        NewCall(constructor='Event', demands=['str', 'EventInit'], returns='Event'),
    ],
    "EventCounts": [
        NewCall(constructor='EventCounts', demands=[], returns='EventCounts'),
    ],
    "EventSource": [
        NewCall(constructor='EventSource', demands=['str'], returns='EventSource'),
        NewCall(constructor='EventSource', demands=['str', 'EventSourceInit'], returns='EventSource'),
    ],
    "EventTarget": [
        NewCall(constructor='EventTarget', demands=[], returns='EventTarget'),
    ],
    "External": [
        NewCall(constructor='External', demands=[], returns='External'),
    ],
    "FASTEST": [
        FieldCall(field='FASTEST', demands=['WebGLRenderingContextBase'], returns='0x1101'),
    ],
    "FIRST_ORDERED_NODE_TYPE": [
        FieldCall(field='FIRST_ORDERED_NODE_TYPE', demands=['XPathResult'], returns='9'),
    ],
    "FLOAT": [
        FieldCall(field='FLOAT', demands=['WebGLRenderingContextBase'], returns='0x1406'),
    ],
    "FLOAT_32_UNSIGNED_INT_24_8_REV": [
        FieldCall(field='FLOAT_32_UNSIGNED_INT_24_8_REV', demands=['WebGL2RenderingContextBase'], returns='0x8DAD'),
    ],
    "FLOAT_MAT2": [
        FieldCall(field='FLOAT_MAT2', demands=['WebGLRenderingContextBase'], returns='0x8B5A'),
    ],
    "FLOAT_MAT2x3": [
        FieldCall(field='FLOAT_MAT2x3', demands=['WebGL2RenderingContextBase'], returns='0x8B65'),
    ],
    "FLOAT_MAT2x4": [
        FieldCall(field='FLOAT_MAT2x4', demands=['WebGL2RenderingContextBase'], returns='0x8B66'),
    ],
    "FLOAT_MAT3": [
        FieldCall(field='FLOAT_MAT3', demands=['WebGLRenderingContextBase'], returns='0x8B5B'),
    ],
    "FLOAT_MAT3x2": [
        FieldCall(field='FLOAT_MAT3x2', demands=['WebGL2RenderingContextBase'], returns='0x8B67'),
    ],
    "FLOAT_MAT3x4": [
        FieldCall(field='FLOAT_MAT3x4', demands=['WebGL2RenderingContextBase'], returns='0x8B68'),
    ],
    "FLOAT_MAT4": [
        FieldCall(field='FLOAT_MAT4', demands=['WebGLRenderingContextBase'], returns='0x8B5C'),
    ],
    "FLOAT_MAT4x2": [
        FieldCall(field='FLOAT_MAT4x2', demands=['WebGL2RenderingContextBase'], returns='0x8B69'),
    ],
    "FLOAT_MAT4x3": [
        FieldCall(field='FLOAT_MAT4x3', demands=['WebGL2RenderingContextBase'], returns='0x8B6A'),
    ],
    "FLOAT_VEC2": [
        FieldCall(field='FLOAT_VEC2', demands=['WebGLRenderingContextBase'], returns='0x8B50'),
    ],
    "FLOAT_VEC3": [
        FieldCall(field='FLOAT_VEC3', demands=['WebGLRenderingContextBase'], returns='0x8B51'),
    ],
    "FLOAT_VEC4": [
        FieldCall(field='FLOAT_VEC4', demands=['WebGLRenderingContextBase'], returns='0x8B52'),
    ],
    "FONT_FACE_RULE": [
        FieldCall(field='FONT_FACE_RULE', demands=['CSSRule'], returns='5'),
    ],
    "FONT_FEATURE_VALUES_RULE": [
        FieldCall(field='FONT_FEATURE_VALUES_RULE', demands=['CSSRule'], returns='14'),
    ],
    "FRAGMENT_SHADER": [
        FieldCall(field='FRAGMENT_SHADER', demands=['WebGLRenderingContextBase'], returns='0x8B30'),
    ],
    "FRAGMENT_SHADER_DERIVATIVE_HINT": [
        FieldCall(field='FRAGMENT_SHADER_DERIVATIVE_HINT', demands=['WebGL2RenderingContextBase'], returns='0x8B8B'),
    ],
    "FRAGMENT_SHADER_DERIVATIVE_HINT_OES": [
        FieldCall(field='FRAGMENT_SHADER_DERIVATIVE_HINT_OES', demands=['OES_standard_derivatives'], returns='0x8B8B'),
    ],
    "FRAMEBUFFER": [
        FieldCall(field='FRAMEBUFFER', demands=['WebGLRenderingContextBase'], returns='0x8D40'),
    ],
    "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8215'),
    ],
    "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_BLUE_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8214'),
    ],
    "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING', demands=['WebGL2RenderingContextBase'], returns='0x8210'),
    ],
    "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT', demands=['EXT_sRGB'], returns='0x8210'),
    ],
    "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE', demands=['WebGL2RenderingContextBase'], returns='0x8211'),
    ],
    "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT', demands=['EXT_color_buffer_half_float'], returns='0x8211'),
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT', demands=['WEBGL_color_buffer_float'], returns='0x8211'),
    ],
    "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8216'),
    ],
    "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_GREEN_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8213'),
    ],
    "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_OBJECT_NAME', demands=['WebGLRenderingContextBase'], returns='0x8CD1'),
    ],
    "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE', demands=['WebGLRenderingContextBase'], returns='0x8CD0'),
    ],
    "FRAMEBUFFER_ATTACHMENT_RED_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_RED_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8212'),
    ],
    "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8217'),
    ],
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR', demands=['OVR_multiview2'], returns='0x9632'),
    ],
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE', demands=['WebGLRenderingContextBase'], returns='0x8CD3'),
    ],
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER', demands=['WebGL2RenderingContextBase'], returns='0x8CD4'),
    ],
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL', demands=['WebGLRenderingContextBase'], returns='0x8CD2'),
    ],
    "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR": [
        FieldCall(field='FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR', demands=['OVR_multiview2'], returns='0x9630'),
    ],
    "FRAMEBUFFER_BINDING": [
        FieldCall(field='FRAMEBUFFER_BINDING', demands=['WebGLRenderingContextBase'], returns='0x8CA6'),
    ],
    "FRAMEBUFFER_COMPLETE": [
        FieldCall(field='FRAMEBUFFER_COMPLETE', demands=['WebGLRenderingContextBase'], returns='0x8CD5'),
    ],
    "FRAMEBUFFER_DEFAULT": [
        FieldCall(field='FRAMEBUFFER_DEFAULT', demands=['WebGL2RenderingContextBase'], returns='0x8218'),
    ],
    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": [
        FieldCall(field='FRAMEBUFFER_INCOMPLETE_ATTACHMENT', demands=['WebGLRenderingContextBase'], returns='0x8CD6'),
    ],
    "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": [
        FieldCall(field='FRAMEBUFFER_INCOMPLETE_DIMENSIONS', demands=['WebGLRenderingContextBase'], returns='0x8CD9'),
    ],
    "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": [
        FieldCall(field='FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT', demands=['WebGLRenderingContextBase'], returns='0x8CD7'),
    ],
    "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE": [
        FieldCall(field='FRAMEBUFFER_INCOMPLETE_MULTISAMPLE', demands=['WebGL2RenderingContextBase'], returns='0x8D56'),
    ],
    "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR": [
        FieldCall(field='FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR', demands=['OVR_multiview2'], returns='0x9633'),
    ],
    "FRAMEBUFFER_UNSUPPORTED": [
        FieldCall(field='FRAMEBUFFER_UNSUPPORTED', demands=['WebGLRenderingContextBase'], returns='0x8CDD'),
    ],
    "FRONT": [
        FieldCall(field='FRONT', demands=['WebGLRenderingContextBase'], returns='0x0404'),
    ],
    "FRONT_AND_BACK": [
        FieldCall(field='FRONT_AND_BACK', demands=['WebGLRenderingContextBase'], returns='0x0408'),
    ],
    "FRONT_FACE": [
        FieldCall(field='FRONT_FACE', demands=['WebGLRenderingContextBase'], returns='0x0B46'),
    ],
    "FUNC_ADD": [
        FieldCall(field='FUNC_ADD', demands=['WebGLRenderingContextBase'], returns='0x8006'),
    ],
    "FUNC_REVERSE_SUBTRACT": [
        FieldCall(field='FUNC_REVERSE_SUBTRACT', demands=['WebGLRenderingContextBase'], returns='0x800B'),
    ],
    "FUNC_SUBTRACT": [
        FieldCall(field='FUNC_SUBTRACT', demands=['WebGLRenderingContextBase'], returns='0x800A'),
    ],
    "File": [
        NewCall(constructor='File', demands=['list', 'str'], returns='File'),
        NewCall(constructor='File', demands=['list', 'str', 'FilePropertyBag'], returns='File'),
    ],
    "FileList": [
        NewCall(constructor='FileList', demands=[], returns='FileList'),
    ],
    "FileReader": [
        NewCall(constructor='FileReader', demands=[], returns='FileReader'),
    ],
    "FileSystem": [
        NewCall(constructor='FileSystem', demands=[], returns='FileSystem'),
    ],
    "FileSystemDirectoryEntry": [
        NewCall(constructor='FileSystemDirectoryEntry', demands=[], returns='FileSystemDirectoryEntry'),
    ],
    "FileSystemDirectoryHandle": [
        NewCall(constructor='FileSystemDirectoryHandle', demands=[], returns='FileSystemDirectoryHandle'),
    ],
    "FileSystemDirectoryReader": [
        NewCall(constructor='FileSystemDirectoryReader', demands=[], returns='FileSystemDirectoryReader'),
    ],
    "FileSystemEntry": [
        NewCall(constructor='FileSystemEntry', demands=[], returns='FileSystemEntry'),
    ],
    "FileSystemFileEntry": [
        NewCall(constructor='FileSystemFileEntry', demands=[], returns='FileSystemFileEntry'),
    ],
    "FileSystemFileHandle": [
        NewCall(constructor='FileSystemFileHandle', demands=[], returns='FileSystemFileHandle'),
    ],
    "FileSystemHandle": [
        NewCall(constructor='FileSystemHandle', demands=[], returns='FileSystemHandle'),
    ],
    "FileSystemWritableFileStream": [
        NewCall(constructor='FileSystemWritableFileStream', demands=[], returns='FileSystemWritableFileStream'),
    ],
    "FocusEvent": [
        NewCall(constructor='FocusEvent', demands=['str'], returns='FocusEvent'),
        NewCall(constructor='FocusEvent', demands=['str', 'FocusEventInit'], returns='FocusEvent'),
    ],
    "FontFace": [
        NewCall(constructor='FontFace', demands=['str', 'str'], returns='FontFace'),
        NewCall(constructor='FontFace', demands=['str', 'str', 'FontFaceDescriptors'], returns='FontFace'),
    ],
    "FontFaceSet": [
        NewCall(constructor='FontFaceSet', demands=[], returns='FontFaceSet'),
    ],
    "FontFaceSetLoadEvent": [
        NewCall(constructor='FontFaceSetLoadEvent', demands=['str'], returns='FontFaceSetLoadEvent'),
        NewCall(constructor='FontFaceSetLoadEvent', demands=['str', 'FontFaceSetLoadEventInit'], returns='FontFaceSetLoadEvent'),
    ],
    "FormData": [
        NewCall(constructor='FormData', demands=[], returns='FormData'),
        NewCall(constructor='FormData', demands=['HTMLFormElement'], returns='FormData'),
        NewCall(constructor='FormData', demands=['HTMLFormElement', 'HTMLElement'], returns='FormData'),
    ],
    "FormDataEvent": [
        NewCall(constructor='FormDataEvent', demands=['str', 'FormDataEventInit'], returns='FormDataEvent'),
    ],
    "FragmentDirective": [
        NewCall(constructor='FragmentDirective', demands=[], returns='FragmentDirective'),
    ],
    "GENERATE_MIPMAP_HINT": [
        FieldCall(field='GENERATE_MIPMAP_HINT', demands=['WebGLRenderingContextBase'], returns='0x8192'),
    ],
    "GEQUAL": [
        FieldCall(field='GEQUAL', demands=['WebGLRenderingContextBase'], returns='0x0206'),
    ],
    "GREATER": [
        FieldCall(field='GREATER', demands=['WebGLRenderingContextBase'], returns='0x0204'),
    ],
    "GREEN_BITS": [
        FieldCall(field='GREEN_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D53'),
    ],
    "GainNode": [
        NewCall(constructor='GainNode', demands=['BaseAudioContext'], returns='GainNode'),
        NewCall(constructor='GainNode', demands=['BaseAudioContext', 'GainOptions'], returns='GainNode'),
    ],
    "Gamepad": [
        NewCall(constructor='Gamepad', demands=[], returns='Gamepad'),
    ],
    "GamepadButton": [
        NewCall(constructor='GamepadButton', demands=[], returns='GamepadButton'),
    ],
    "GamepadEvent": [
        NewCall(constructor='GamepadEvent', demands=['str', 'GamepadEventInit'], returns='GamepadEvent'),
    ],
    "GamepadHapticActuator": [
        NewCall(constructor='GamepadHapticActuator', demands=[], returns='GamepadHapticActuator'),
    ],
    "Geolocation": [
        NewCall(constructor='Geolocation', demands=[], returns='Geolocation'),
    ],
    "GeolocationCoordinates": [
        NewCall(constructor='GeolocationCoordinates', demands=[], returns='GeolocationCoordinates'),
    ],
    "GeolocationPosition": [
        NewCall(constructor='GeolocationPosition', demands=[], returns='GeolocationPosition'),
    ],
    "GeolocationPositionError": [
        NewCall(constructor='GeolocationPositionError', demands=[], returns='GeolocationPositionError'),
    ],
    "HALF_FLOAT": [
        FieldCall(field='HALF_FLOAT', demands=['WebGL2RenderingContextBase'], returns='0x140B'),
    ],
    "HALF_FLOAT_OES": [
        FieldCall(field='HALF_FLOAT_OES', demands=['OES_texture_half_float'], returns='0x8D61'),
    ],
    "HAVE_CURRENT_DATA": [
        FieldCall(field='HAVE_CURRENT_DATA', demands=['HTMLMediaElement'], returns='2'),
    ],
    "HAVE_ENOUGH_DATA": [
        FieldCall(field='HAVE_ENOUGH_DATA', demands=['HTMLMediaElement'], returns='4'),
    ],
    "HAVE_FUTURE_DATA": [
        FieldCall(field='HAVE_FUTURE_DATA', demands=['HTMLMediaElement'], returns='3'),
    ],
    "HAVE_METADATA": [
        FieldCall(field='HAVE_METADATA', demands=['HTMLMediaElement'], returns='1'),
    ],
    "HAVE_NOTHING": [
        FieldCall(field='HAVE_NOTHING', demands=['HTMLMediaElement'], returns='0'),
    ],
    "HEADERS_RECEIVED": [
        FieldCall(field='HEADERS_RECEIVED', demands=['XMLHttpRequest'], returns='2'),
    ],
    "HIERARCHY_REQUEST_ERR": [
        FieldCall(field='HIERARCHY_REQUEST_ERR', demands=['DOMException'], returns='3'),
    ],
    "HIGH_FLOAT": [
        FieldCall(field='HIGH_FLOAT', demands=['WebGLRenderingContextBase'], returns='0x8DF2'),
    ],
    "HIGH_INT": [
        FieldCall(field='HIGH_INT', demands=['WebGLRenderingContextBase'], returns='0x8DF5'),
    ],
    "HTMLAllCollection": [
        NewCall(constructor='HTMLAllCollection', demands=[], returns='HTMLAllCollection'),
    ],
    "HTMLAnchorElement": [
        NewCall(constructor='HTMLAnchorElement', demands=[], returns='HTMLAnchorElement'),
    ],
    "HTMLAreaElement": [
        NewCall(constructor='HTMLAreaElement', demands=[], returns='HTMLAreaElement'),
    ],
    "HTMLAudioElement": [
        NewCall(constructor='HTMLAudioElement', demands=[], returns='HTMLAudioElement'),
    ],
    "HTMLBRElement": [
        NewCall(constructor='HTMLBRElement', demands=[], returns='HTMLBRElement'),
    ],
    "HTMLBaseElement": [
        NewCall(constructor='HTMLBaseElement', demands=[], returns='HTMLBaseElement'),
    ],
    "HTMLBodyElement": [
        NewCall(constructor='HTMLBodyElement', demands=[], returns='HTMLBodyElement'),
    ],
    "HTMLButtonElement": [
        NewCall(constructor='HTMLButtonElement', demands=[], returns='HTMLButtonElement'),
    ],
    "HTMLCanvasElement": [
        NewCall(constructor='HTMLCanvasElement', demands=[], returns='HTMLCanvasElement'),
    ],
    "HTMLCollection": [
        NewCall(constructor='HTMLCollection', demands=[], returns='HTMLCollection'),
    ],
    "HTMLDListElement": [
        NewCall(constructor='HTMLDListElement', demands=[], returns='HTMLDListElement'),
    ],
    "HTMLDataElement": [
        NewCall(constructor='HTMLDataElement', demands=[], returns='HTMLDataElement'),
    ],
    "HTMLDataListElement": [
        NewCall(constructor='HTMLDataListElement', demands=[], returns='HTMLDataListElement'),
    ],
    "HTMLDetailsElement": [
        NewCall(constructor='HTMLDetailsElement', demands=[], returns='HTMLDetailsElement'),
    ],
    "HTMLDialogElement": [
        NewCall(constructor='HTMLDialogElement', demands=[], returns='HTMLDialogElement'),
    ],
    "HTMLDirectoryElement": [
        NewCall(constructor='HTMLDirectoryElement', demands=[], returns='HTMLDirectoryElement'),
    ],
    "HTMLDivElement": [
        NewCall(constructor='HTMLDivElement', demands=[], returns='HTMLDivElement'),
    ],
    "HTMLDocument": [
        NewCall(constructor='HTMLDocument', demands=[], returns='HTMLDocument'),
    ],
    "HTMLElement": [
        NewCall(constructor='HTMLElement', demands=[], returns='HTMLElement'),
    ],
    "HTMLEmbedElement": [
        NewCall(constructor='HTMLEmbedElement', demands=[], returns='HTMLEmbedElement'),
    ],
    "HTMLFieldSetElement": [
        NewCall(constructor='HTMLFieldSetElement', demands=[], returns='HTMLFieldSetElement'),
    ],
    "HTMLFontElement": [
        NewCall(constructor='HTMLFontElement', demands=[], returns='HTMLFontElement'),
    ],
    "HTMLFormControlsCollection": [
        NewCall(constructor='HTMLFormControlsCollection', demands=[], returns='HTMLFormControlsCollection'),
    ],
    "HTMLFormElement": [
        NewCall(constructor='HTMLFormElement', demands=[], returns='HTMLFormElement'),
    ],
    "HTMLFrameElement": [
        NewCall(constructor='HTMLFrameElement', demands=[], returns='HTMLFrameElement'),
    ],
    "HTMLFrameSetElement": [
        NewCall(constructor='HTMLFrameSetElement', demands=[], returns='HTMLFrameSetElement'),
    ],
    "HTMLHRElement": [
        NewCall(constructor='HTMLHRElement', demands=[], returns='HTMLHRElement'),
    ],
    "HTMLHeadElement": [
        NewCall(constructor='HTMLHeadElement', demands=[], returns='HTMLHeadElement'),
    ],
    "HTMLHeadingElement": [
        NewCall(constructor='HTMLHeadingElement', demands=[], returns='HTMLHeadingElement'),
    ],
    "HTMLHtmlElement": [
        NewCall(constructor='HTMLHtmlElement', demands=[], returns='HTMLHtmlElement'),
    ],
    "HTMLIFrameElement": [
        NewCall(constructor='HTMLIFrameElement', demands=[], returns='HTMLIFrameElement'),
    ],
    "HTMLImageElement": [
        NewCall(constructor='HTMLImageElement', demands=[], returns='HTMLImageElement'),
    ],
    "HTMLInputElement": [
        NewCall(constructor='HTMLInputElement', demands=[], returns='HTMLInputElement'),
    ],
    "HTMLLIElement": [
        NewCall(constructor='HTMLLIElement', demands=[], returns='HTMLLIElement'),
    ],
    "HTMLLabelElement": [
        NewCall(constructor='HTMLLabelElement', demands=[], returns='HTMLLabelElement'),
    ],
    "HTMLLegendElement": [
        NewCall(constructor='HTMLLegendElement', demands=[], returns='HTMLLegendElement'),
    ],
    "HTMLLinkElement": [
        NewCall(constructor='HTMLLinkElement', demands=[], returns='HTMLLinkElement'),
    ],
    "HTMLMapElement": [
        NewCall(constructor='HTMLMapElement', demands=[], returns='HTMLMapElement'),
    ],
    "HTMLMarqueeElement": [
        NewCall(constructor='HTMLMarqueeElement', demands=[], returns='HTMLMarqueeElement'),
    ],
    "HTMLMediaElement": [
        NewCall(constructor='HTMLMediaElement', demands=[], returns='HTMLMediaElement'),
    ],
    "HTMLMenuElement": [
        NewCall(constructor='HTMLMenuElement', demands=[], returns='HTMLMenuElement'),
    ],
    "HTMLMetaElement": [
        NewCall(constructor='HTMLMetaElement', demands=[], returns='HTMLMetaElement'),
    ],
    "HTMLMeterElement": [
        NewCall(constructor='HTMLMeterElement', demands=[], returns='HTMLMeterElement'),
    ],
    "HTMLModElement": [
        NewCall(constructor='HTMLModElement', demands=[], returns='HTMLModElement'),
    ],
    "HTMLOListElement": [
        NewCall(constructor='HTMLOListElement', demands=[], returns='HTMLOListElement'),
    ],
    "HTMLObjectElement": [
        NewCall(constructor='HTMLObjectElement', demands=[], returns='HTMLObjectElement'),
    ],
    "HTMLOptGroupElement": [
        NewCall(constructor='HTMLOptGroupElement', demands=[], returns='HTMLOptGroupElement'),
    ],
    "HTMLOptionElement": [
        NewCall(constructor='HTMLOptionElement', demands=[], returns='HTMLOptionElement'),
    ],
    "HTMLOptionsCollection": [
        NewCall(constructor='HTMLOptionsCollection', demands=[], returns='HTMLOptionsCollection'),
    ],
    "HTMLOutputElement": [
        NewCall(constructor='HTMLOutputElement', demands=[], returns='HTMLOutputElement'),
    ],
    "HTMLParagraphElement": [
        NewCall(constructor='HTMLParagraphElement', demands=[], returns='HTMLParagraphElement'),
    ],
    "HTMLParamElement": [
        NewCall(constructor='HTMLParamElement', demands=[], returns='HTMLParamElement'),
    ],
    "HTMLPictureElement": [
        NewCall(constructor='HTMLPictureElement', demands=[], returns='HTMLPictureElement'),
    ],
    "HTMLPreElement": [
        NewCall(constructor='HTMLPreElement', demands=[], returns='HTMLPreElement'),
    ],
    "HTMLProgressElement": [
        NewCall(constructor='HTMLProgressElement', demands=[], returns='HTMLProgressElement'),
    ],
    "HTMLQuoteElement": [
        NewCall(constructor='HTMLQuoteElement', demands=[], returns='HTMLQuoteElement'),
    ],
    "HTMLScriptElement": [
        NewCall(constructor='HTMLScriptElement', demands=[], returns='HTMLScriptElement'),
    ],
    "HTMLSelectElement": [
        NewCall(constructor='HTMLSelectElement', demands=[], returns='HTMLSelectElement'),
    ],
    "HTMLSlotElement": [
        NewCall(constructor='HTMLSlotElement', demands=[], returns='HTMLSlotElement'),
    ],
    "HTMLSourceElement": [
        NewCall(constructor='HTMLSourceElement', demands=[], returns='HTMLSourceElement'),
    ],
    "HTMLSpanElement": [
        NewCall(constructor='HTMLSpanElement', demands=[], returns='HTMLSpanElement'),
    ],
    "HTMLStyleElement": [
        NewCall(constructor='HTMLStyleElement', demands=[], returns='HTMLStyleElement'),
    ],
    "HTMLTableCaptionElement": [
        NewCall(constructor='HTMLTableCaptionElement', demands=[], returns='HTMLTableCaptionElement'),
    ],
    "HTMLTableCellElement": [
        NewCall(constructor='HTMLTableCellElement', demands=[], returns='HTMLTableCellElement'),
    ],
    "HTMLTableColElement": [
        NewCall(constructor='HTMLTableColElement', demands=[], returns='HTMLTableColElement'),
    ],
    "HTMLTableElement": [
        NewCall(constructor='HTMLTableElement', demands=[], returns='HTMLTableElement'),
    ],
    "HTMLTableRowElement": [
        NewCall(constructor='HTMLTableRowElement', demands=[], returns='HTMLTableRowElement'),
    ],
    "HTMLTableSectionElement": [
        NewCall(constructor='HTMLTableSectionElement', demands=[], returns='HTMLTableSectionElement'),
    ],
    "HTMLTemplateElement": [
        NewCall(constructor='HTMLTemplateElement', demands=[], returns='HTMLTemplateElement'),
    ],
    "HTMLTextAreaElement": [
        NewCall(constructor='HTMLTextAreaElement', demands=[], returns='HTMLTextAreaElement'),
    ],
    "HTMLTimeElement": [
        NewCall(constructor='HTMLTimeElement', demands=[], returns='HTMLTimeElement'),
    ],
    "HTMLTitleElement": [
        NewCall(constructor='HTMLTitleElement', demands=[], returns='HTMLTitleElement'),
    ],
    "HTMLTrackElement": [
        NewCall(constructor='HTMLTrackElement', demands=[], returns='HTMLTrackElement'),
    ],
    "HTMLUListElement": [
        NewCall(constructor='HTMLUListElement', demands=[], returns='HTMLUListElement'),
    ],
    "HTMLUnknownElement": [
        NewCall(constructor='HTMLUnknownElement', demands=[], returns='HTMLUnknownElement'),
    ],
    "HTMLVideoElement": [
        NewCall(constructor='HTMLVideoElement', demands=[], returns='HTMLVideoElement'),
    ],
    "HashChangeEvent": [
        NewCall(constructor='HashChangeEvent', demands=['str'], returns='HashChangeEvent'),
        NewCall(constructor='HashChangeEvent', demands=['str', 'HashChangeEventInit'], returns='HashChangeEvent'),
    ],
    "Headers": [
        NewCall(constructor='Headers', demands=[], returns='Headers'),
        NewCall(constructor='Headers', demands=['HeadersInit'], returns='Headers'),
    ],
    "Highlight": [
        NewCall(constructor='Highlight', demands=['*'], returns='Highlight'),
    ],
    "HighlightRegistry": [
        NewCall(constructor='HighlightRegistry', demands=[], returns='HighlightRegistry'),
    ],
    "History": [
        NewCall(constructor='History', demands=[], returns='History'),
    ],
    "IDBCursor": [
        NewCall(constructor='IDBCursor', demands=[], returns='IDBCursor'),
    ],
    "IDBCursorWithValue": [
        NewCall(constructor='IDBCursorWithValue', demands=[], returns='IDBCursorWithValue'),
    ],
    "IDBDatabase": [
        NewCall(constructor='IDBDatabase', demands=[], returns='IDBDatabase'),
    ],
    "IDBFactory": [
        NewCall(constructor='IDBFactory', demands=[], returns='IDBFactory'),
    ],
    "IDBIndex": [
        NewCall(constructor='IDBIndex', demands=[], returns='IDBIndex'),
    ],
    "IDBKeyRange": [
        NewCall(constructor='IDBKeyRange', demands=[], returns='IDBKeyRange'),
    ],
    "IDBObjectStore": [
        NewCall(constructor='IDBObjectStore', demands=[], returns='IDBObjectStore'),
    ],
    "IDBOpenDBRequest": [
        NewCall(constructor='IDBOpenDBRequest', demands=[], returns='IDBOpenDBRequest'),
    ],
    "IDBRequest": [
        NewCall(constructor='IDBRequest', demands=[], returns='IDBRequest'),
    ],
    "IDBTransaction": [
        NewCall(constructor='IDBTransaction', demands=[], returns='IDBTransaction'),
    ],
    "IDBVersionChangeEvent": [
        NewCall(constructor='IDBVersionChangeEvent', demands=['str'], returns='IDBVersionChangeEvent'),
        NewCall(constructor='IDBVersionChangeEvent', demands=['str', 'IDBVersionChangeEventInit'], returns='IDBVersionChangeEvent'),
    ],
    "IIRFilterNode": [
        NewCall(constructor='IIRFilterNode', demands=['BaseAudioContext', 'IIRFilterOptions'], returns='IIRFilterNode'),
    ],
    "IMPLEMENTATION_COLOR_READ_FORMAT": [
        FieldCall(field='IMPLEMENTATION_COLOR_READ_FORMAT', demands=['WebGLRenderingContextBase'], returns='0x8B9B'),
    ],
    "IMPLEMENTATION_COLOR_READ_TYPE": [
        FieldCall(field='IMPLEMENTATION_COLOR_READ_TYPE', demands=['WebGLRenderingContextBase'], returns='0x8B9A'),
    ],
    "IMPORT_RULE": [
        FieldCall(field='IMPORT_RULE', demands=['CSSRule'], returns='3'),
    ],
    "INCR": [
        FieldCall(field='INCR', demands=['WebGLRenderingContextBase'], returns='0x1E02'),
    ],
    "INCR_WRAP": [
        FieldCall(field='INCR_WRAP', demands=['WebGLRenderingContextBase'], returns='0x8507'),
    ],
    "INDEX_SIZE_ERR": [
        FieldCall(field='INDEX_SIZE_ERR', demands=['DOMException'], returns='1'),
    ],
    "INT": [
        FieldCall(field='INT', demands=['WebGLRenderingContextBase'], returns='0x1404'),
    ],
    "INTERLEAVED_ATTRIBS": [
        FieldCall(field='INTERLEAVED_ATTRIBS', demands=['WebGL2RenderingContextBase'], returns='0x8C8C'),
    ],
    "INT_2_10_10_10_REV": [
        FieldCall(field='INT_2_10_10_10_REV', demands=['WebGL2RenderingContextBase'], returns='0x8D9F'),
    ],
    "INT_SAMPLER_2D": [
        FieldCall(field='INT_SAMPLER_2D', demands=['WebGL2RenderingContextBase'], returns='0x8DCA'),
    ],
    "INT_SAMPLER_2D_ARRAY": [
        FieldCall(field='INT_SAMPLER_2D_ARRAY', demands=['WebGL2RenderingContextBase'], returns='0x8DCF'),
    ],
    "INT_SAMPLER_3D": [
        FieldCall(field='INT_SAMPLER_3D', demands=['WebGL2RenderingContextBase'], returns='0x8DCB'),
    ],
    "INT_SAMPLER_CUBE": [
        FieldCall(field='INT_SAMPLER_CUBE', demands=['WebGL2RenderingContextBase'], returns='0x8DCC'),
    ],
    "INT_VEC2": [
        FieldCall(field='INT_VEC2', demands=['WebGLRenderingContextBase'], returns='0x8B53'),
    ],
    "INT_VEC3": [
        FieldCall(field='INT_VEC3', demands=['WebGLRenderingContextBase'], returns='0x8B54'),
    ],
    "INT_VEC4": [
        FieldCall(field='INT_VEC4', demands=['WebGLRenderingContextBase'], returns='0x8B55'),
    ],
    "INUSE_ATTRIBUTE_ERR": [
        FieldCall(field='INUSE_ATTRIBUTE_ERR', demands=['DOMException'], returns='10'),
    ],
    "INVALID_ACCESS_ERR": [
        FieldCall(field='INVALID_ACCESS_ERR', demands=['DOMException'], returns='15'),
    ],
    "INVALID_CHARACTER_ERR": [
        FieldCall(field='INVALID_CHARACTER_ERR', demands=['DOMException'], returns='5'),
    ],
    "INVALID_ENUM": [
        FieldCall(field='INVALID_ENUM', demands=['WebGLRenderingContextBase'], returns='0x0500'),
    ],
    "INVALID_FRAMEBUFFER_OPERATION": [
        FieldCall(field='INVALID_FRAMEBUFFER_OPERATION', demands=['WebGLRenderingContextBase'], returns='0x0506'),
    ],
    "INVALID_INDEX": [
        FieldCall(field='INVALID_INDEX', demands=['WebGL2RenderingContextBase'], returns='0xFFFFFFFF'),
    ],
    "INVALID_MODIFICATION_ERR": [
        FieldCall(field='INVALID_MODIFICATION_ERR', demands=['DOMException'], returns='13'),
    ],
    "INVALID_NODE_TYPE_ERR": [
        FieldCall(field='INVALID_NODE_TYPE_ERR', demands=['DOMException'], returns='24'),
    ],
    "INVALID_OPERATION": [
        FieldCall(field='INVALID_OPERATION', demands=['WebGLRenderingContextBase'], returns='0x0502'),
    ],
    "INVALID_STATE_ERR": [
        FieldCall(field='INVALID_STATE_ERR', demands=['DOMException'], returns='11'),
    ],
    "INVALID_VALUE": [
        FieldCall(field='INVALID_VALUE', demands=['WebGLRenderingContextBase'], returns='0x0501'),
    ],
    "INVERT": [
        FieldCall(field='INVERT', demands=['WebGLRenderingContextBase'], returns='0x150A'),
    ],
    "IdleDeadline": [
        NewCall(constructor='IdleDeadline', demands=[], returns='IdleDeadline'),
    ],
    "Image": [
        NewCall(constructor='Image', demands=[], returns='HTMLImageElement'),
        NewCall(constructor='Image', demands=['float'], returns='HTMLImageElement'),
        NewCall(constructor='Image', demands=['float', 'float'], returns='HTMLImageElement'),
    ],
    "ImageBitmap": [
        NewCall(constructor='ImageBitmap', demands=[], returns='ImageBitmap'),
    ],
    "ImageBitmapRenderingContext": [
        NewCall(constructor='ImageBitmapRenderingContext', demands=[], returns='ImageBitmapRenderingContext'),
    ],
    "ImageCapture": [
        NewCall(constructor='ImageCapture', demands=['MediaStreamTrack'], returns='ImageCapture'),
    ],
    "ImageData": [
        NewCall(constructor='ImageData', demands=['float', 'float'], returns='ImageData'),
        NewCall(constructor='ImageData', demands=['float', 'float', 'ImageDataSettings'], returns='ImageData'),
    ],
    "ImageDecoder": [
        NewCall(constructor='ImageDecoder', demands=['ImageDecoderInit'], returns='ImageDecoder'),
    ],
    "ImageTrack": [
        NewCall(constructor='ImageTrack', demands=[], returns='ImageTrack'),
    ],
    "ImageTrackList": [
        NewCall(constructor='ImageTrackList', demands=[], returns='ImageTrackList'),
    ],
    "InputDeviceInfo": [
        NewCall(constructor='InputDeviceInfo', demands=[], returns='InputDeviceInfo'),
    ],
    "InputEvent": [
        NewCall(constructor='InputEvent', demands=['str'], returns='InputEvent'),
        NewCall(constructor='InputEvent', demands=['str', 'InputEventInit'], returns='InputEvent'),
    ],
    "IntersectionObserver": [
        NewCall(constructor='IntersectionObserver', demands=['IntersectionObserverCallback'], returns='IntersectionObserver'),
        NewCall(constructor='IntersectionObserver', demands=['IntersectionObserverCallback', 'IntersectionObserverInit'], returns='IntersectionObserver'),
    ],
    "IntersectionObserverEntry": [
        NewCall(constructor='IntersectionObserverEntry', demands=[], returns='IntersectionObserverEntry'),
    ],
    "IsSearchProviderInstalled": [
        PrototypeCall(constructor='External', fn='IsSearchProviderInstalled', demands=['External'], returns='None'),
    ],
    "KEEP": [
        FieldCall(field='KEEP', demands=['WebGLRenderingContextBase'], returns='0x1E00'),
    ],
    "KEYFRAMES_RULE": [
        FieldCall(field='KEYFRAMES_RULE', demands=['CSSRule'], returns='7'),
    ],
    "KEYFRAME_RULE": [
        FieldCall(field='KEYFRAME_RULE', demands=['CSSRule'], returns='8'),
    ],
    "KeyboardEvent": [
        NewCall(constructor='KeyboardEvent', demands=['str'], returns='KeyboardEvent'),
        NewCall(constructor='KeyboardEvent', demands=['str', 'KeyboardEventInit'], returns='KeyboardEvent'),
    ],
    "KeyframeEffect": [
        NewCall(constructor='KeyframeEffect', demands=['Element', 'list'], returns='KeyframeEffect'),
        NewCall(constructor='KeyframeEffect', demands=['Element', 'list', 'float'], returns='KeyframeEffect'),
    ],
    "LENGTHADJUST_SPACING": [
        FieldCall(field='LENGTHADJUST_SPACING', demands=['SVGTextContentElement'], returns='1'),
    ],
    "LENGTHADJUST_SPACINGANDGLYPHS": [
        FieldCall(field='LENGTHADJUST_SPACINGANDGLYPHS', demands=['SVGTextContentElement'], returns='2'),
    ],
    "LENGTHADJUST_UNKNOWN": [
        FieldCall(field='LENGTHADJUST_UNKNOWN', demands=['SVGTextContentElement'], returns='0'),
    ],
    "LEQUAL": [
        FieldCall(field='LEQUAL', demands=['WebGLRenderingContextBase'], returns='0x0203'),
    ],
    "LESS": [
        FieldCall(field='LESS', demands=['WebGLRenderingContextBase'], returns='0x0201'),
    ],
    "LINEAR": [
        FieldCall(field='LINEAR', demands=['WebGLRenderingContextBase'], returns='0x2601'),
    ],
    "LINEAR_MIPMAP_LINEAR": [
        FieldCall(field='LINEAR_MIPMAP_LINEAR', demands=['WebGLRenderingContextBase'], returns='0x2703'),
    ],
    "LINEAR_MIPMAP_NEAREST": [
        FieldCall(field='LINEAR_MIPMAP_NEAREST', demands=['WebGLRenderingContextBase'], returns='0x2701'),
    ],
    "LINES": [
        FieldCall(field='LINES', demands=['WebGLRenderingContextBase'], returns='0x0001'),
    ],
    "LINE_LOOP": [
        FieldCall(field='LINE_LOOP', demands=['WebGLRenderingContextBase'], returns='0x0002'),
    ],
    "LINE_STRIP": [
        FieldCall(field='LINE_STRIP', demands=['WebGLRenderingContextBase'], returns='0x0003'),
    ],
    "LINE_WIDTH": [
        FieldCall(field='LINE_WIDTH', demands=['WebGLRenderingContextBase'], returns='0x0B21'),
    ],
    "LINK_STATUS": [
        FieldCall(field='LINK_STATUS', demands=['WebGLRenderingContextBase'], returns='0x8B82'),
    ],
    "LN10": [
        FieldCall(field='LN10', demands=['Math'], returns='float'),
    ],
    "LN2": [
        FieldCall(field='LN2', demands=['Math'], returns='float'),
    ],
    "LOADED": [
        FieldCall(field='LOADED', demands=['HTMLTrackElement'], returns='2'),
    ],
    "LOADING": [
        FieldCall(field='LOADING', demands=['FileReader'], returns='1'),
        FieldCall(field='LOADING', demands=['HTMLTrackElement'], returns='1'),
        FieldCall(field='LOADING', demands=['XMLHttpRequest'], returns='3'),
    ],
    "LOG10E": [
        FieldCall(field='LOG10E', demands=['Math'], returns='float'),
    ],
    "LOG2E": [
        FieldCall(field='LOG2E', demands=['Math'], returns='float'),
    ],
    "LOW_FLOAT": [
        FieldCall(field='LOW_FLOAT', demands=['WebGLRenderingContextBase'], returns='0x8DF0'),
    ],
    "LOW_INT": [
        FieldCall(field='LOW_INT', demands=['WebGLRenderingContextBase'], returns='0x8DF3'),
    ],
    "LUMINANCE": [
        FieldCall(field='LUMINANCE', demands=['WebGLRenderingContextBase'], returns='0x1909'),
    ],
    "LUMINANCE_ALPHA": [
        FieldCall(field='LUMINANCE_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x190A'),
    ],
    "LargestContentfulPaint": [
        NewCall(constructor='LargestContentfulPaint', demands=[], returns='LargestContentfulPaint'),
    ],
    "Line": [
        FieldCall(field='Line', demands=['TextStreamBase'], returns='float'),
        FieldCall(field='Line', demands=['TextStreamBase', 'float'], returns='None'),
    ],
    "Location": [
        NewCall(constructor='Location', demands=[], returns='Location'),
        FieldCall(field='Location', demands=['Window'], returns='typeofLocation'),
        FieldCall(field='Location', demands=['Window', 'typeofLocation'], returns='None'),
        NewCall(constructor='Location', demands=[], returns='never'),
    ],
    "Lock": [
        NewCall(constructor='Lock', demands=[], returns='Lock'),
    ],
    "LockManager": [
        NewCall(constructor='LockManager', demands=[], returns='LockManager'),
    ],
    "MAX": [
        FieldCall(field='MAX', demands=['WebGL2RenderingContextBase'], returns='0x8008'),
    ],
    "MAX_3D_TEXTURE_SIZE": [
        FieldCall(field='MAX_3D_TEXTURE_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8073'),
    ],
    "MAX_ARRAY_TEXTURE_LAYERS": [
        FieldCall(field='MAX_ARRAY_TEXTURE_LAYERS', demands=['WebGL2RenderingContextBase'], returns='0x88FF'),
    ],
    "MAX_CLIENT_WAIT_TIMEOUT_WEBGL": [
        FieldCall(field='MAX_CLIENT_WAIT_TIMEOUT_WEBGL', demands=['WebGL2RenderingContextBase'], returns='0x9247'),
    ],
    "MAX_COLOR_ATTACHMENTS": [
        FieldCall(field='MAX_COLOR_ATTACHMENTS', demands=['WebGL2RenderingContextBase'], returns='0x8CDF'),
    ],
    "MAX_COLOR_ATTACHMENTS_WEBGL": [
        FieldCall(field='MAX_COLOR_ATTACHMENTS_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8CDF'),
    ],
    "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS": [
        FieldCall(field='MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8A33'),
    ],
    "MAX_COMBINED_TEXTURE_IMAGE_UNITS": [
        FieldCall(field='MAX_COMBINED_TEXTURE_IMAGE_UNITS', demands=['WebGLRenderingContextBase'], returns='0x8B4D'),
    ],
    "MAX_COMBINED_UNIFORM_BLOCKS": [
        FieldCall(field='MAX_COMBINED_UNIFORM_BLOCKS', demands=['WebGL2RenderingContextBase'], returns='0x8A2E'),
    ],
    "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS": [
        FieldCall(field='MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8A31'),
    ],
    "MAX_CUBE_MAP_TEXTURE_SIZE": [
        FieldCall(field='MAX_CUBE_MAP_TEXTURE_SIZE', demands=['WebGLRenderingContextBase'], returns='0x851C'),
    ],
    "MAX_DRAW_BUFFERS": [
        FieldCall(field='MAX_DRAW_BUFFERS', demands=['WebGL2RenderingContextBase'], returns='0x8824'),
    ],
    "MAX_DRAW_BUFFERS_WEBGL": [
        FieldCall(field='MAX_DRAW_BUFFERS_WEBGL', demands=['WEBGL_draw_buffers'], returns='0x8824'),
    ],
    "MAX_ELEMENTS_INDICES": [
        FieldCall(field='MAX_ELEMENTS_INDICES', demands=['WebGL2RenderingContextBase'], returns='0x80E9'),
    ],
    "MAX_ELEMENTS_VERTICES": [
        FieldCall(field='MAX_ELEMENTS_VERTICES', demands=['WebGL2RenderingContextBase'], returns='0x80E8'),
    ],
    "MAX_ELEMENT_INDEX": [
        FieldCall(field='MAX_ELEMENT_INDEX', demands=['WebGL2RenderingContextBase'], returns='0x8D6B'),
    ],
    "MAX_EXT": [
        FieldCall(field='MAX_EXT', demands=['EXT_blend_minmax'], returns='0x8008'),
    ],
    "MAX_FRAGMENT_INPUT_COMPONENTS": [
        FieldCall(field='MAX_FRAGMENT_INPUT_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x9125'),
    ],
    "MAX_FRAGMENT_UNIFORM_BLOCKS": [
        FieldCall(field='MAX_FRAGMENT_UNIFORM_BLOCKS', demands=['WebGL2RenderingContextBase'], returns='0x8A2D'),
    ],
    "MAX_FRAGMENT_UNIFORM_COMPONENTS": [
        FieldCall(field='MAX_FRAGMENT_UNIFORM_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8B49'),
    ],
    "MAX_FRAGMENT_UNIFORM_VECTORS": [
        FieldCall(field='MAX_FRAGMENT_UNIFORM_VECTORS', demands=['WebGLRenderingContextBase'], returns='0x8DFD'),
    ],
    "MAX_PROGRAM_TEXEL_OFFSET": [
        FieldCall(field='MAX_PROGRAM_TEXEL_OFFSET', demands=['WebGL2RenderingContextBase'], returns='0x8905'),
    ],
    "MAX_RENDERBUFFER_SIZE": [
        FieldCall(field='MAX_RENDERBUFFER_SIZE', demands=['WebGLRenderingContextBase'], returns='0x84E8'),
    ],
    "MAX_SAFE_INTEGER": [
        FieldCall(field='MAX_SAFE_INTEGER', demands=['NumberConstructor'], returns='float'),
    ],
    "MAX_SAMPLES": [
        FieldCall(field='MAX_SAMPLES', demands=['WebGL2RenderingContextBase'], returns='0x8D57'),
    ],
    "MAX_SERVER_WAIT_TIMEOUT": [
        FieldCall(field='MAX_SERVER_WAIT_TIMEOUT', demands=['WebGL2RenderingContextBase'], returns='0x9111'),
    ],
    "MAX_TEXTURE_IMAGE_UNITS": [
        FieldCall(field='MAX_TEXTURE_IMAGE_UNITS', demands=['WebGLRenderingContextBase'], returns='0x8872'),
    ],
    "MAX_TEXTURE_LOD_BIAS": [
        FieldCall(field='MAX_TEXTURE_LOD_BIAS', demands=['WebGL2RenderingContextBase'], returns='0x84FD'),
    ],
    "MAX_TEXTURE_MAX_ANISOTROPY_EXT": [
        FieldCall(field='MAX_TEXTURE_MAX_ANISOTROPY_EXT', demands=['EXT_texture_filter_anisotropic'], returns='0x84FF'),
    ],
    "MAX_TEXTURE_SIZE": [
        FieldCall(field='MAX_TEXTURE_SIZE', demands=['WebGLRenderingContextBase'], returns='0x0D33'),
    ],
    "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS": [
        FieldCall(field='MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8C8A'),
    ],
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS": [
        FieldCall(field='MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS', demands=['WebGL2RenderingContextBase'], returns='0x8C8B'),
    ],
    "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS": [
        FieldCall(field='MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8C80'),
    ],
    "MAX_UNIFORM_BLOCK_SIZE": [
        FieldCall(field='MAX_UNIFORM_BLOCK_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8A30'),
    ],
    "MAX_UNIFORM_BUFFER_BINDINGS": [
        FieldCall(field='MAX_UNIFORM_BUFFER_BINDINGS', demands=['WebGL2RenderingContextBase'], returns='0x8A2F'),
    ],
    "MAX_VALUE": [
        FieldCall(field='MAX_VALUE', demands=['NumberConstructor'], returns='float'),
    ],
    "MAX_VARYING_COMPONENTS": [
        FieldCall(field='MAX_VARYING_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8B4B'),
    ],
    "MAX_VARYING_VECTORS": [
        FieldCall(field='MAX_VARYING_VECTORS', demands=['WebGLRenderingContextBase'], returns='0x8DFC'),
    ],
    "MAX_VERTEX_ATTRIBS": [
        FieldCall(field='MAX_VERTEX_ATTRIBS', demands=['WebGLRenderingContextBase'], returns='0x8869'),
    ],
    "MAX_VERTEX_OUTPUT_COMPONENTS": [
        FieldCall(field='MAX_VERTEX_OUTPUT_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x9122'),
    ],
    "MAX_VERTEX_TEXTURE_IMAGE_UNITS": [
        FieldCall(field='MAX_VERTEX_TEXTURE_IMAGE_UNITS', demands=['WebGLRenderingContextBase'], returns='0x8B4C'),
    ],
    "MAX_VERTEX_UNIFORM_BLOCKS": [
        FieldCall(field='MAX_VERTEX_UNIFORM_BLOCKS', demands=['WebGL2RenderingContextBase'], returns='0x8A2B'),
    ],
    "MAX_VERTEX_UNIFORM_COMPONENTS": [
        FieldCall(field='MAX_VERTEX_UNIFORM_COMPONENTS', demands=['WebGL2RenderingContextBase'], returns='0x8B4A'),
    ],
    "MAX_VERTEX_UNIFORM_VECTORS": [
        FieldCall(field='MAX_VERTEX_UNIFORM_VECTORS', demands=['WebGLRenderingContextBase'], returns='0x8DFB'),
    ],
    "MAX_VIEWPORT_DIMS": [
        FieldCall(field='MAX_VIEWPORT_DIMS', demands=['WebGLRenderingContextBase'], returns='0x0D3A'),
    ],
    "MAX_VIEWS_OVR": [
        FieldCall(field='MAX_VIEWS_OVR', demands=['OVR_multiview2'], returns='0x9631'),
    ],
    "MEDIA_ERR_ABORTED": [
        FieldCall(field='MEDIA_ERR_ABORTED', demands=['MediaError'], returns='1'),
    ],
    "MEDIA_ERR_DECODE": [
        FieldCall(field='MEDIA_ERR_DECODE', demands=['MediaError'], returns='3'),
    ],
    "MEDIA_ERR_NETWORK": [
        FieldCall(field='MEDIA_ERR_NETWORK', demands=['MediaError'], returns='2'),
    ],
    "MEDIA_ERR_SRC_NOT_SUPPORTED": [
        FieldCall(field='MEDIA_ERR_SRC_NOT_SUPPORTED', demands=['MediaError'], returns='4'),
    ],
    "MEDIA_RULE": [
        FieldCall(field='MEDIA_RULE', demands=['CSSRule'], returns='4'),
    ],
    "MEDIUM_FLOAT": [
        FieldCall(field='MEDIUM_FLOAT', demands=['WebGLRenderingContextBase'], returns='0x8DF1'),
    ],
    "MEDIUM_INT": [
        FieldCall(field='MEDIUM_INT', demands=['WebGLRenderingContextBase'], returns='0x8DF4'),
    ],
    "MIDIAccess": [
        NewCall(constructor='MIDIAccess', demands=[], returns='MIDIAccess'),
    ],
    "MIDIConnectionEvent": [
        NewCall(constructor='MIDIConnectionEvent', demands=['str'], returns='MIDIConnectionEvent'),
        NewCall(constructor='MIDIConnectionEvent', demands=['str', 'MIDIConnectionEventInit'], returns='MIDIConnectionEvent'),
    ],
    "MIDIInput": [
        NewCall(constructor='MIDIInput', demands=[], returns='MIDIInput'),
    ],
    "MIDIInputMap": [
        NewCall(constructor='MIDIInputMap', demands=[], returns='MIDIInputMap'),
    ],
    "MIDIMessageEvent": [
        NewCall(constructor='MIDIMessageEvent', demands=['str'], returns='MIDIMessageEvent'),
        NewCall(constructor='MIDIMessageEvent', demands=['str', 'MIDIMessageEventInit'], returns='MIDIMessageEvent'),
    ],
    "MIDIOutput": [
        NewCall(constructor='MIDIOutput', demands=[], returns='MIDIOutput'),
    ],
    "MIDIOutputMap": [
        NewCall(constructor='MIDIOutputMap', demands=[], returns='MIDIOutputMap'),
    ],
    "MIDIPort": [
        NewCall(constructor='MIDIPort', demands=[], returns='MIDIPort'),
    ],
    "MIN": [
        FieldCall(field='MIN', demands=['WebGL2RenderingContextBase'], returns='0x8007'),
    ],
    "MIN_EXT": [
        FieldCall(field='MIN_EXT', demands=['EXT_blend_minmax'], returns='0x8007'),
    ],
    "MIN_PROGRAM_TEXEL_OFFSET": [
        FieldCall(field='MIN_PROGRAM_TEXEL_OFFSET', demands=['WebGL2RenderingContextBase'], returns='0x8904'),
    ],
    "MIN_SAFE_INTEGER": [
        FieldCall(field='MIN_SAFE_INTEGER', demands=['NumberConstructor'], returns='float'),
    ],
    "MIN_VALUE": [
        FieldCall(field='MIN_VALUE', demands=['NumberConstructor'], returns='float'),
    ],
    "MIRRORED_REPEAT": [
        FieldCall(field='MIRRORED_REPEAT', demands=['WebGLRenderingContextBase'], returns='0x8370'),
    ],
    "MathMLElement": [
        NewCall(constructor='MathMLElement', demands=[], returns='MathMLElement'),
    ],
    "MediaCapabilities": [
        NewCall(constructor='MediaCapabilities', demands=[], returns='MediaCapabilities'),
    ],
    "MediaDeviceInfo": [
        NewCall(constructor='MediaDeviceInfo', demands=[], returns='MediaDeviceInfo'),
    ],
    "MediaDevices": [
        NewCall(constructor='MediaDevices', demands=[], returns='MediaDevices'),
    ],
    "MediaElementAudioSourceNode": [
        NewCall(constructor='MediaElementAudioSourceNode', demands=['AudioContext', 'MediaElementAudioSourceOptions'], returns='MediaElementAudioSourceNode'),
    ],
    "MediaEncryptedEvent": [
        NewCall(constructor='MediaEncryptedEvent', demands=['str'], returns='MediaEncryptedEvent'),
        NewCall(constructor='MediaEncryptedEvent', demands=['str', 'MediaEncryptedEventInit'], returns='MediaEncryptedEvent'),
    ],
    "MediaError": [
        NewCall(constructor='MediaError', demands=[], returns='MediaError'),
    ],
    "MediaKeyMessageEvent": [
        NewCall(constructor='MediaKeyMessageEvent', demands=['str', 'MediaKeyMessageEventInit'], returns='MediaKeyMessageEvent'),
    ],
    "MediaKeySession": [
        NewCall(constructor='MediaKeySession', demands=[], returns='MediaKeySession'),
    ],
    "MediaKeyStatusMap": [
        NewCall(constructor='MediaKeyStatusMap', demands=[], returns='MediaKeyStatusMap'),
    ],
    "MediaKeySystemAccess": [
        NewCall(constructor='MediaKeySystemAccess', demands=[], returns='MediaKeySystemAccess'),
    ],
    "MediaKeys": [
        NewCall(constructor='MediaKeys', demands=[], returns='MediaKeys'),
    ],
    "MediaList": [
        NewCall(constructor='MediaList', demands=[], returns='MediaList'),
    ],
    "MediaMetadata": [
        NewCall(constructor='MediaMetadata', demands=[], returns='MediaMetadata'),
        NewCall(constructor='MediaMetadata', demands=['MediaMetadataInit'], returns='MediaMetadata'),
    ],
    "MediaQueryList": [
        NewCall(constructor='MediaQueryList', demands=[], returns='MediaQueryList'),
    ],
    "MediaQueryListEvent": [
        NewCall(constructor='MediaQueryListEvent', demands=['str'], returns='MediaQueryListEvent'),
        NewCall(constructor='MediaQueryListEvent', demands=['str', 'MediaQueryListEventInit'], returns='MediaQueryListEvent'),
    ],
    "MediaRecorder": [
        NewCall(constructor='MediaRecorder', demands=['MediaStream'], returns='MediaRecorder'),
        NewCall(constructor='MediaRecorder', demands=['MediaStream', 'MediaRecorderOptions'], returns='MediaRecorder'),
    ],
    "MediaSession": [
        NewCall(constructor='MediaSession', demands=[], returns='MediaSession'),
    ],
    "MediaSource": [
        NewCall(constructor='MediaSource', demands=[], returns='MediaSource'),
    ],
    "MediaSourceHandle": [
        NewCall(constructor='MediaSourceHandle', demands=[], returns='MediaSourceHandle'),
    ],
    "MediaStream": [
        NewCall(constructor='MediaStream', demands=[], returns='MediaStream'),
    ],
    "MediaStreamAudioDestinationNode": [
        NewCall(constructor='MediaStreamAudioDestinationNode', demands=['AudioContext'], returns='MediaStreamAudioDestinationNode'),
        NewCall(constructor='MediaStreamAudioDestinationNode', demands=['AudioContext', 'AudioNodeOptions'], returns='MediaStreamAudioDestinationNode'),
    ],
    "MediaStreamAudioSourceNode": [
        NewCall(constructor='MediaStreamAudioSourceNode', demands=['AudioContext', 'MediaStreamAudioSourceOptions'], returns='MediaStreamAudioSourceNode'),
    ],
    "MediaStreamTrack": [
        NewCall(constructor='MediaStreamTrack', demands=[], returns='MediaStreamTrack'),
    ],
    "MediaStreamTrackEvent": [
        NewCall(constructor='MediaStreamTrackEvent', demands=['str', 'MediaStreamTrackEventInit'], returns='MediaStreamTrackEvent'),
    ],
    "MessageChannel": [
        NewCall(constructor='MessageChannel', demands=[], returns='MessageChannel'),
    ],
    "MessagePort": [
        NewCall(constructor='MessagePort', demands=[], returns='MessagePort'),
        NewCall(constructor='MessagePort', demands=[], returns='never'),
    ],
    "MimeType": [
        NewCall(constructor='MimeType', demands=[], returns='MimeType'),
    ],
    "MimeTypeArray": [
        NewCall(constructor='MimeTypeArray', demands=[], returns='MimeTypeArray'),
    ],
    "MouseEvent": [
        NewCall(constructor='MouseEvent', demands=['str'], returns='MouseEvent'),
        NewCall(constructor='MouseEvent', demands=['str', 'MouseEventInit'], returns='MouseEvent'),
    ],
    "MutationObserver": [
        NewCall(constructor='MutationObserver', demands=['MutationCallback'], returns='MutationObserver'),
    ],
    "MutationRecord": [
        NewCall(constructor='MutationRecord', demands=[], returns='MutationRecord'),
    ],
    "NAMESPACE_ERR": [
        FieldCall(field='NAMESPACE_ERR', demands=['DOMException'], returns='14'),
    ],
    "NAMESPACE_RULE": [
        FieldCall(field='NAMESPACE_RULE', demands=['CSSRule'], returns='10'),
    ],
    "NEAREST": [
        FieldCall(field='NEAREST', demands=['WebGLRenderingContextBase'], returns='0x2600'),
    ],
    "NEAREST_MIPMAP_LINEAR": [
        FieldCall(field='NEAREST_MIPMAP_LINEAR', demands=['WebGLRenderingContextBase'], returns='0x2702'),
    ],
    "NEAREST_MIPMAP_NEAREST": [
        FieldCall(field='NEAREST_MIPMAP_NEAREST', demands=['WebGLRenderingContextBase'], returns='0x2700'),
    ],
    "NEGATIVE_INFINITY": [
        FieldCall(field='NEGATIVE_INFINITY', demands=['NumberConstructor'], returns='float'),
    ],
    "NETWORK_EMPTY": [
        FieldCall(field='NETWORK_EMPTY', demands=['HTMLMediaElement'], returns='0'),
    ],
    "NETWORK_ERR": [
        FieldCall(field='NETWORK_ERR', demands=['DOMException'], returns='19'),
    ],
    "NETWORK_IDLE": [
        FieldCall(field='NETWORK_IDLE', demands=['HTMLMediaElement'], returns='1'),
    ],
    "NETWORK_LOADING": [
        FieldCall(field='NETWORK_LOADING', demands=['HTMLMediaElement'], returns='2'),
    ],
    "NETWORK_NO_SOURCE": [
        FieldCall(field='NETWORK_NO_SOURCE', demands=['HTMLMediaElement'], returns='3'),
    ],
    "NEVER": [
        FieldCall(field='NEVER', demands=['WebGLRenderingContextBase'], returns='0x0200'),
    ],
    "NICEST": [
        FieldCall(field='NICEST', demands=['WebGLRenderingContextBase'], returns='0x1102'),
    ],
    "NONE": [
        FieldCall(field='NONE', demands=['Event'], returns='0'),
        FieldCall(field='NONE', demands=['HTMLTrackElement'], returns='0'),
        FieldCall(field='NONE', demands=['WebGLRenderingContextBase'], returns='0'),
    ],
    "NOTATION_NODE": [
        FieldCall(field='NOTATION_NODE', demands=['Node'], returns='12'),
    ],
    "NOTEQUAL": [
        FieldCall(field='NOTEQUAL', demands=['WebGLRenderingContextBase'], returns='0x0205'),
    ],
    "NOT_FOUND_ERR": [
        FieldCall(field='NOT_FOUND_ERR', demands=['DOMException'], returns='8'),
    ],
    "NOT_SUPPORTED_ERR": [
        FieldCall(field='NOT_SUPPORTED_ERR', demands=['DOMException'], returns='9'),
    ],
    "NO_DATA_ALLOWED_ERR": [
        FieldCall(field='NO_DATA_ALLOWED_ERR', demands=['DOMException'], returns='6'),
    ],
    "NO_ERROR": [
        FieldCall(field='NO_ERROR', demands=['WebGLRenderingContextBase'], returns='0'),
    ],
    "NO_MODIFICATION_ALLOWED_ERR": [
        FieldCall(field='NO_MODIFICATION_ALLOWED_ERR', demands=['DOMException'], returns='7'),
    ],
    "NUMBER_TYPE": [
        FieldCall(field='NUMBER_TYPE', demands=['XPathResult'], returns='1'),
    ],
    "NaN": [
        FieldCall(field='NaN', demands=['NumberConstructor'], returns='float'),
    ],
    "NamedNodeMap": [
        NewCall(constructor='NamedNodeMap', demands=[], returns='NamedNodeMap'),
    ],
    "NavigationActivation": [
        NewCall(constructor='NavigationActivation', demands=[], returns='NavigationActivation'),
    ],
    "NavigationHistoryEntry": [
        NewCall(constructor='NavigationHistoryEntry', demands=[], returns='NavigationHistoryEntry'),
    ],
    "NavigationPreloadManager": [
        NewCall(constructor='NavigationPreloadManager', demands=[], returns='NavigationPreloadManager'),
    ],
    "Navigator": [
        NewCall(constructor='Navigator', demands=[], returns='Navigator'),
        FieldCall(field='Navigator', demands=['Window'], returns='typeofNavigator'),
        FieldCall(field='Navigator', demands=['Window', 'typeofNavigator'], returns='None'),
        NewCall(constructor='Navigator', demands=[], returns='never'),
    ],
    "NavigatorLogin": [
        NewCall(constructor='NavigatorLogin', demands=[], returns='NavigatorLogin'),
    ],
    "Node": [
        NewCall(constructor='Node', demands=[], returns='Node'),
    ],
    "NodeIterator": [
        NewCall(constructor='NodeIterator', demands=[], returns='NodeIterator'),
    ],
    "NodeList": [
        NewCall(constructor='NodeList', demands=[], returns='NodeList'),
    ],
    "Notification": [
        NewCall(constructor='Notification', demands=['str'], returns='Notification'),
        NewCall(constructor='Notification', demands=['str', 'NotificationOptions'], returns='Notification'),
    ],
    "OBJECT_TYPE": [
        FieldCall(field='OBJECT_TYPE', demands=['WebGL2RenderingContextBase'], returns='0x9112'),
    ],
    "ONE": [
        FieldCall(field='ONE', demands=['WebGLRenderingContextBase'], returns='1'),
    ],
    "ONE_MINUS_CONSTANT_ALPHA": [
        FieldCall(field='ONE_MINUS_CONSTANT_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x8004'),
    ],
    "ONE_MINUS_CONSTANT_COLOR": [
        FieldCall(field='ONE_MINUS_CONSTANT_COLOR', demands=['WebGLRenderingContextBase'], returns='0x8002'),
    ],
    "ONE_MINUS_DST_ALPHA": [
        FieldCall(field='ONE_MINUS_DST_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x0305'),
    ],
    "ONE_MINUS_DST_COLOR": [
        FieldCall(field='ONE_MINUS_DST_COLOR', demands=['WebGLRenderingContextBase'], returns='0x0307'),
    ],
    "ONE_MINUS_SRC_ALPHA": [
        FieldCall(field='ONE_MINUS_SRC_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x0303'),
    ],
    "ONE_MINUS_SRC_COLOR": [
        FieldCall(field='ONE_MINUS_SRC_COLOR', demands=['WebGLRenderingContextBase'], returns='0x0301'),
    ],
    "OPEN": [
        FieldCall(field='OPEN', demands=['EventSource'], returns='1'),
        FieldCall(field='OPEN', demands=['WebSocket'], returns='1'),
        FieldCall(field='OPEN', demands=['WebSocket'], returns='float'),
    ],
    "OPENED": [
        FieldCall(field='OPENED', demands=['XMLHttpRequest'], returns='1'),
    ],
    "ORDERED_NODE_ITERATOR_TYPE": [
        FieldCall(field='ORDERED_NODE_ITERATOR_TYPE', demands=['XPathResult'], returns='5'),
    ],
    "ORDERED_NODE_SNAPSHOT_TYPE": [
        FieldCall(field='ORDERED_NODE_SNAPSHOT_TYPE', demands=['XPathResult'], returns='7'),
    ],
    "OUT_OF_MEMORY": [
        FieldCall(field='OUT_OF_MEMORY', demands=['WebGLRenderingContextBase'], returns='0x0505'),
    ],
    "OfflineAudioCompletionEvent": [
        NewCall(constructor='OfflineAudioCompletionEvent', demands=['str', 'OfflineAudioCompletionEventInit'], returns='OfflineAudioCompletionEvent'),
    ],
    "OfflineAudioContext": [
        NewCall(constructor='OfflineAudioContext', demands=['OfflineAudioContextOptions'], returns='OfflineAudioContext'),
    ],
    "OffscreenCanvas": [
        NewCall(constructor='OffscreenCanvas', demands=['float', 'float'], returns='OffscreenCanvas'),
    ],
    "OffscreenCanvasRenderingContext2D": [
        NewCall(constructor='OffscreenCanvasRenderingContext2D', demands=[], returns='OffscreenCanvasRenderingContext2D'),
    ],
    "Option": [
        NewCall(constructor='Option', demands=[], returns='HTMLOptionElement'),
        NewCall(constructor='Option', demands=['str'], returns='HTMLOptionElement'),
        NewCall(constructor='Option', demands=['str', 'str'], returns='HTMLOptionElement'),
        NewCall(constructor='Option', demands=['str', 'str', 'bool'], returns='HTMLOptionElement'),
        NewCall(constructor='Option', demands=['str', 'str', 'bool', 'bool'], returns='HTMLOptionElement'),
    ],
    "OscillatorNode": [
        NewCall(constructor='OscillatorNode', demands=['BaseAudioContext'], returns='OscillatorNode'),
        NewCall(constructor='OscillatorNode', demands=['BaseAudioContext', 'OscillatorOptions'], returns='OscillatorNode'),
    ],
    "OverconstrainedError": [
        NewCall(constructor='OverconstrainedError', demands=['str'], returns='OverconstrainedError'),
        NewCall(constructor='OverconstrainedError', demands=['str', 'str'], returns='OverconstrainedError'),
    ],
    "PACK_ALIGNMENT": [
        FieldCall(field='PACK_ALIGNMENT', demands=['WebGLRenderingContextBase'], returns='0x0D05'),
    ],
    "PACK_ROW_LENGTH": [
        FieldCall(field='PACK_ROW_LENGTH', demands=['WebGL2RenderingContextBase'], returns='0x0D02'),
    ],
    "PACK_SKIP_PIXELS": [
        FieldCall(field='PACK_SKIP_PIXELS', demands=['WebGL2RenderingContextBase'], returns='0x0D04'),
    ],
    "PACK_SKIP_ROWS": [
        FieldCall(field='PACK_SKIP_ROWS', demands=['WebGL2RenderingContextBase'], returns='0x0D03'),
    ],
    "PAGE_RULE": [
        FieldCall(field='PAGE_RULE', demands=['CSSRule'], returns='6'),
    ],
    "PERMISSION_DENIED": [
        FieldCall(field='PERMISSION_DENIED', demands=['GeolocationPositionError'], returns='1'),
    ],
    "PI": [
        FieldCall(field='PI', demands=['Math'], returns='float'),
    ],
    "PIXEL_PACK_BUFFER": [
        FieldCall(field='PIXEL_PACK_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x88EB'),
    ],
    "PIXEL_PACK_BUFFER_BINDING": [
        FieldCall(field='PIXEL_PACK_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x88ED'),
    ],
    "PIXEL_UNPACK_BUFFER": [
        FieldCall(field='PIXEL_UNPACK_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x88EC'),
    ],
    "PIXEL_UNPACK_BUFFER_BINDING": [
        FieldCall(field='PIXEL_UNPACK_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x88EF'),
    ],
    "POINTS": [
        FieldCall(field='POINTS', demands=['WebGLRenderingContextBase'], returns='0x0000'),
    ],
    "POLYGON_OFFSET_FACTOR": [
        FieldCall(field='POLYGON_OFFSET_FACTOR', demands=['WebGLRenderingContextBase'], returns='0x8038'),
    ],
    "POLYGON_OFFSET_FILL": [
        FieldCall(field='POLYGON_OFFSET_FILL', demands=['WebGLRenderingContextBase'], returns='0x8037'),
    ],
    "POLYGON_OFFSET_UNITS": [
        FieldCall(field='POLYGON_OFFSET_UNITS', demands=['WebGLRenderingContextBase'], returns='0x2A00'),
    ],
    "POSITION_UNAVAILABLE": [
        FieldCall(field='POSITION_UNAVAILABLE', demands=['GeolocationPositionError'], returns='2'),
    ],
    "POSITIVE_INFINITY": [
        FieldCall(field='POSITIVE_INFINITY', demands=['NumberConstructor'], returns='float'),
    ],
    "PROCESSING_INSTRUCTION_NODE": [
        FieldCall(field='PROCESSING_INSTRUCTION_NODE', demands=['Node'], returns='7'),
    ],
    "PageRevealEvent": [
        NewCall(constructor='PageRevealEvent', demands=['str'], returns='PageRevealEvent'),
        NewCall(constructor='PageRevealEvent', demands=['str', 'PageRevealEventInit'], returns='PageRevealEvent'),
    ],
    "PageSwapEvent": [
        NewCall(constructor='PageSwapEvent', demands=['str'], returns='PageSwapEvent'),
        NewCall(constructor='PageSwapEvent', demands=['str', 'PageSwapEventInit'], returns='PageSwapEvent'),
    ],
    "PageTransitionEvent": [
        NewCall(constructor='PageTransitionEvent', demands=['str'], returns='PageTransitionEvent'),
        NewCall(constructor='PageTransitionEvent', demands=['str', 'PageTransitionEventInit'], returns='PageTransitionEvent'),
    ],
    "PannerNode": [
        NewCall(constructor='PannerNode', demands=['BaseAudioContext'], returns='PannerNode'),
        NewCall(constructor='PannerNode', demands=['BaseAudioContext', 'PannerOptions'], returns='PannerNode'),
    ],
    "Path2D": [
        NewCall(constructor='Path2D', demands=[], returns='Path2D'),
        NewCall(constructor='Path2D', demands=['Path2D'], returns='Path2D'),
    ],
    "PaymentAddress": [
        NewCall(constructor='PaymentAddress', demands=[], returns='PaymentAddress'),
    ],
    "PaymentMethodChangeEvent": [
        NewCall(constructor='PaymentMethodChangeEvent', demands=['str'], returns='PaymentMethodChangeEvent'),
        NewCall(constructor='PaymentMethodChangeEvent', demands=['str', 'PaymentMethodChangeEventInit'], returns='PaymentMethodChangeEvent'),
    ],
    "PaymentRequest": [
        NewCall(constructor='PaymentRequest', demands=['list', 'PaymentDetailsInit'], returns='PaymentRequest'),
        NewCall(constructor='PaymentRequest', demands=['list', 'PaymentDetailsInit', 'PaymentOptions'], returns='PaymentRequest'),
    ],
    "PaymentRequestUpdateEvent": [
        NewCall(constructor='PaymentRequestUpdateEvent', demands=['str'], returns='PaymentRequestUpdateEvent'),
        NewCall(constructor='PaymentRequestUpdateEvent', demands=['str', 'PaymentRequestUpdateEventInit'], returns='PaymentRequestUpdateEvent'),
    ],
    "PaymentResponse": [
        NewCall(constructor='PaymentResponse', demands=[], returns='PaymentResponse'),
    ],
    "Performance": [
        NewCall(constructor='Performance', demands=[], returns='Performance'),
        NewCall(constructor='Performance', demands=[], returns='never'),
    ],
    "PerformanceEntry": [
        NewCall(constructor='PerformanceEntry', demands=[], returns='PerformanceEntry'),
        NewCall(constructor='PerformanceEntry', demands=[], returns='never'),
    ],
    "PerformanceEventTiming": [
        NewCall(constructor='PerformanceEventTiming', demands=[], returns='PerformanceEventTiming'),
    ],
    "PerformanceMark": [
        NewCall(constructor='PerformanceMark', demands=['str'], returns='PerformanceMark'),
        NewCall(constructor='PerformanceMark', demands=['str', 'PerformanceMarkOptions'], returns='PerformanceMark'),
    ],
    "PerformanceMeasure": [
        NewCall(constructor='PerformanceMeasure', demands=[], returns='PerformanceMeasure'),
        NewCall(constructor='PerformanceMeasure', demands=[], returns='never'),
    ],
    "PerformanceNavigation": [
        NewCall(constructor='PerformanceNavigation', demands=[], returns='PerformanceNavigation'),
    ],
    "PerformanceNavigationTiming": [
        NewCall(constructor='PerformanceNavigationTiming', demands=[], returns='PerformanceNavigationTiming'),
    ],
    "PerformanceObserver": [
        NewCall(constructor='PerformanceObserver', demands=['PerformanceObserverCallback'], returns='PerformanceObserver'),
    ],
    "PerformanceObserverEntryList": [
        NewCall(constructor='PerformanceObserverEntryList', demands=[], returns='PerformanceObserverEntryList'),
    ],
    "PerformancePaintTiming": [
        NewCall(constructor='PerformancePaintTiming', demands=[], returns='PerformancePaintTiming'),
    ],
    "PerformanceResourceTiming": [
        NewCall(constructor='PerformanceResourceTiming', demands=[], returns='PerformanceResourceTiming'),
    ],
    "PerformanceServerTiming": [
        NewCall(constructor='PerformanceServerTiming', demands=[], returns='PerformanceServerTiming'),
    ],
    "PerformanceTiming": [
        NewCall(constructor='PerformanceTiming', demands=[], returns='PerformanceTiming'),
    ],
    "PeriodicWave": [
        NewCall(constructor='PeriodicWave', demands=['BaseAudioContext'], returns='PeriodicWave'),
        NewCall(constructor='PeriodicWave', demands=['BaseAudioContext', 'PeriodicWaveOptions'], returns='PeriodicWave'),
    ],
    "PermissionStatus": [
        NewCall(constructor='PermissionStatus', demands=[], returns='PermissionStatus'),
    ],
    "Permissions": [
        NewCall(constructor='Permissions', demands=[], returns='Permissions'),
    ],
    "PictureInPictureEvent": [
        NewCall(constructor='PictureInPictureEvent', demands=['str', 'PictureInPictureEventInit'], returns='PictureInPictureEvent'),
    ],
    "PictureInPictureWindow": [
        NewCall(constructor='PictureInPictureWindow', demands=[], returns='PictureInPictureWindow'),
    ],
    "Plugin": [
        NewCall(constructor='Plugin', demands=[], returns='Plugin'),
    ],
    "PluginArray": [
        NewCall(constructor='PluginArray', demands=[], returns='PluginArray'),
    ],
    "PointerEvent": [
        NewCall(constructor='PointerEvent', demands=['str'], returns='PointerEvent'),
        NewCall(constructor='PointerEvent', demands=['str', 'PointerEventInit'], returns='PointerEvent'),
    ],
    "PopStateEvent": [
        NewCall(constructor='PopStateEvent', demands=['str'], returns='PopStateEvent'),
        NewCall(constructor='PopStateEvent', demands=['str', 'PopStateEventInit'], returns='PopStateEvent'),
    ],
    "ProcessingInstruction": [
        NewCall(constructor='ProcessingInstruction', demands=[], returns='ProcessingInstruction'),
    ],
    "ProgressEvent": [
        NewCall(constructor='ProgressEvent', demands=['str'], returns='ProgressEvent'),
        NewCall(constructor='ProgressEvent', demands=['str', 'ProgressEventInit'], returns='ProgressEvent'),
    ],
    "PromiseRejectionEvent": [
        NewCall(constructor='PromiseRejectionEvent', demands=['str', 'PromiseRejectionEventInit'], returns='PromiseRejectionEvent'),
        NewCall(constructor='PromiseRejectionEvent', demands=['str'], returns='PromiseRejectionEvent'),
    ],
    "PublicKeyCredential": [
        NewCall(constructor='PublicKeyCredential', demands=[], returns='PublicKeyCredential'),
    ],
    "PushManager": [
        NewCall(constructor='PushManager', demands=[], returns='PushManager'),
    ],
    "PushSubscription": [
        NewCall(constructor='PushSubscription', demands=[], returns='PushSubscription'),
    ],
    "PushSubscriptionOptions": [
        NewCall(constructor='PushSubscriptionOptions', demands=[], returns='PushSubscriptionOptions'),
    ],
    "Q": [
        FieldCall(field='Q', demands=['BiquadFilterOptions'], returns='float'),
        FieldCall(field='Q', demands=['BiquadFilterOptions', 'float'], returns='None'),
        FieldCall(field='Q', demands=['BiquadFilterNode'], returns='AudioParam'),
    ],
    "QUERY_RESULT": [
        FieldCall(field='QUERY_RESULT', demands=['WebGL2RenderingContextBase'], returns='0x8866'),
    ],
    "QUERY_RESULT_AVAILABLE": [
        FieldCall(field='QUERY_RESULT_AVAILABLE', demands=['WebGL2RenderingContextBase'], returns='0x8867'),
    ],
    "QUOTA_EXCEEDED_ERR": [
        FieldCall(field='QUOTA_EXCEEDED_ERR', demands=['DOMException'], returns='22'),
    ],
    "R11F_G11F_B10F": [
        FieldCall(field='R11F_G11F_B10F', demands=['WebGL2RenderingContextBase'], returns='0x8C3A'),
    ],
    "R16F": [
        FieldCall(field='R16F', demands=['WebGL2RenderingContextBase'], returns='0x822D'),
    ],
    "R16I": [
        FieldCall(field='R16I', demands=['WebGL2RenderingContextBase'], returns='0x8233'),
    ],
    "R16UI": [
        FieldCall(field='R16UI', demands=['WebGL2RenderingContextBase'], returns='0x8234'),
    ],
    "R16_EXT": [
        FieldCall(field='R16_EXT', demands=['EXT_texture_norm16'], returns='0x822A'),
    ],
    "R16_SNORM_EXT": [
        FieldCall(field='R16_SNORM_EXT', demands=['EXT_texture_norm16'], returns='0x8F98'),
    ],
    "R32F": [
        FieldCall(field='R32F', demands=['WebGL2RenderingContextBase'], returns='0x822E'),
    ],
    "R32I": [
        FieldCall(field='R32I', demands=['WebGL2RenderingContextBase'], returns='0x8235'),
    ],
    "R32UI": [
        FieldCall(field='R32UI', demands=['WebGL2RenderingContextBase'], returns='0x8236'),
    ],
    "R8": [
        FieldCall(field='R8', demands=['WebGL2RenderingContextBase'], returns='0x8229'),
    ],
    "R8I": [
        FieldCall(field='R8I', demands=['WebGL2RenderingContextBase'], returns='0x8231'),
    ],
    "R8UI": [
        FieldCall(field='R8UI', demands=['WebGL2RenderingContextBase'], returns='0x8232'),
    ],
    "R8_SNORM": [
        FieldCall(field='R8_SNORM', demands=['WebGL2RenderingContextBase'], returns='0x8F94'),
    ],
    "RASTERIZER_DISCARD": [
        FieldCall(field='RASTERIZER_DISCARD', demands=['WebGL2RenderingContextBase'], returns='0x8C89'),
    ],
    "READ_BUFFER": [
        FieldCall(field='READ_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x0C02'),
    ],
    "READ_FRAMEBUFFER": [
        FieldCall(field='READ_FRAMEBUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8CA8'),
    ],
    "READ_FRAMEBUFFER_BINDING": [
        FieldCall(field='READ_FRAMEBUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8CAA'),
    ],
    "RED": [
        FieldCall(field='RED', demands=['WebGL2RenderingContextBase'], returns='0x1903'),
    ],
    "RED_BITS": [
        FieldCall(field='RED_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D52'),
    ],
    "RED_INTEGER": [
        FieldCall(field='RED_INTEGER', demands=['WebGL2RenderingContextBase'], returns='0x8D94'),
    ],
    "RENDERBUFFER": [
        FieldCall(field='RENDERBUFFER', demands=['WebGLRenderingContextBase'], returns='0x8D41'),
    ],
    "RENDERBUFFER_ALPHA_SIZE": [
        FieldCall(field='RENDERBUFFER_ALPHA_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D53'),
    ],
    "RENDERBUFFER_BINDING": [
        FieldCall(field='RENDERBUFFER_BINDING', demands=['WebGLRenderingContextBase'], returns='0x8CA7'),
    ],
    "RENDERBUFFER_BLUE_SIZE": [
        FieldCall(field='RENDERBUFFER_BLUE_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D52'),
    ],
    "RENDERBUFFER_DEPTH_SIZE": [
        FieldCall(field='RENDERBUFFER_DEPTH_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D54'),
    ],
    "RENDERBUFFER_GREEN_SIZE": [
        FieldCall(field='RENDERBUFFER_GREEN_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D51'),
    ],
    "RENDERBUFFER_HEIGHT": [
        FieldCall(field='RENDERBUFFER_HEIGHT', demands=['WebGLRenderingContextBase'], returns='0x8D43'),
    ],
    "RENDERBUFFER_INTERNAL_FORMAT": [
        FieldCall(field='RENDERBUFFER_INTERNAL_FORMAT', demands=['WebGLRenderingContextBase'], returns='0x8D44'),
    ],
    "RENDERBUFFER_RED_SIZE": [
        FieldCall(field='RENDERBUFFER_RED_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D50'),
    ],
    "RENDERBUFFER_SAMPLES": [
        FieldCall(field='RENDERBUFFER_SAMPLES', demands=['WebGL2RenderingContextBase'], returns='0x8CAB'),
    ],
    "RENDERBUFFER_STENCIL_SIZE": [
        FieldCall(field='RENDERBUFFER_STENCIL_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8D55'),
    ],
    "RENDERBUFFER_WIDTH": [
        FieldCall(field='RENDERBUFFER_WIDTH', demands=['WebGLRenderingContextBase'], returns='0x8D42'),
    ],
    "RENDERER": [
        FieldCall(field='RENDERER', demands=['WebGLRenderingContextBase'], returns='0x1F01'),
    ],
    "REPEAT": [
        FieldCall(field='REPEAT', demands=['WebGLRenderingContextBase'], returns='0x2901'),
    ],
    "REPLACE": [
        FieldCall(field='REPLACE', demands=['WebGLRenderingContextBase'], returns='0x1E01'),
    ],
    "RG": [
        FieldCall(field='RG', demands=['WebGL2RenderingContextBase'], returns='0x8227'),
    ],
    "RG16F": [
        FieldCall(field='RG16F', demands=['WebGL2RenderingContextBase'], returns='0x822F'),
    ],
    "RG16I": [
        FieldCall(field='RG16I', demands=['WebGL2RenderingContextBase'], returns='0x8239'),
    ],
    "RG16UI": [
        FieldCall(field='RG16UI', demands=['WebGL2RenderingContextBase'], returns='0x823A'),
    ],
    "RG16_EXT": [
        FieldCall(field='RG16_EXT', demands=['EXT_texture_norm16'], returns='0x822C'),
    ],
    "RG16_SNORM_EXT": [
        FieldCall(field='RG16_SNORM_EXT', demands=['EXT_texture_norm16'], returns='0x8F99'),
    ],
    "RG32F": [
        FieldCall(field='RG32F', demands=['WebGL2RenderingContextBase'], returns='0x8230'),
    ],
    "RG32I": [
        FieldCall(field='RG32I', demands=['WebGL2RenderingContextBase'], returns='0x823B'),
    ],
    "RG32UI": [
        FieldCall(field='RG32UI', demands=['WebGL2RenderingContextBase'], returns='0x823C'),
    ],
    "RG8": [
        FieldCall(field='RG8', demands=['WebGL2RenderingContextBase'], returns='0x822B'),
    ],
    "RG8I": [
        FieldCall(field='RG8I', demands=['WebGL2RenderingContextBase'], returns='0x8237'),
    ],
    "RG8UI": [
        FieldCall(field='RG8UI', demands=['WebGL2RenderingContextBase'], returns='0x8238'),
    ],
    "RG8_SNORM": [
        FieldCall(field='RG8_SNORM', demands=['WebGL2RenderingContextBase'], returns='0x8F95'),
    ],
    "RGB": [
        FieldCall(field='RGB', demands=['WebGLRenderingContextBase'], returns='0x1907'),
    ],
    "RGB10_A2": [
        FieldCall(field='RGB10_A2', demands=['WebGL2RenderingContextBase'], returns='0x8059'),
    ],
    "RGB10_A2UI": [
        FieldCall(field='RGB10_A2UI', demands=['WebGL2RenderingContextBase'], returns='0x906F'),
    ],
    "RGB16F": [
        FieldCall(field='RGB16F', demands=['WebGL2RenderingContextBase'], returns='0x881B'),
    ],
    "RGB16F_EXT": [
        FieldCall(field='RGB16F_EXT', demands=['EXT_color_buffer_half_float'], returns='0x881B'),
    ],
    "RGB16I": [
        FieldCall(field='RGB16I', demands=['WebGL2RenderingContextBase'], returns='0x8D89'),
    ],
    "RGB16UI": [
        FieldCall(field='RGB16UI', demands=['WebGL2RenderingContextBase'], returns='0x8D77'),
    ],
    "RGB16_EXT": [
        FieldCall(field='RGB16_EXT', demands=['EXT_texture_norm16'], returns='0x8054'),
    ],
    "RGB16_SNORM_EXT": [
        FieldCall(field='RGB16_SNORM_EXT', demands=['EXT_texture_norm16'], returns='0x8F9A'),
    ],
    "RGB32F": [
        FieldCall(field='RGB32F', demands=['WebGL2RenderingContextBase'], returns='0x8815'),
    ],
    "RGB32I": [
        FieldCall(field='RGB32I', demands=['WebGL2RenderingContextBase'], returns='0x8D83'),
    ],
    "RGB32UI": [
        FieldCall(field='RGB32UI', demands=['WebGL2RenderingContextBase'], returns='0x8D71'),
    ],
    "RGB565": [
        FieldCall(field='RGB565', demands=['WebGLRenderingContextBase'], returns='0x8D62'),
    ],
    "RGB5_A1": [
        FieldCall(field='RGB5_A1', demands=['WebGLRenderingContextBase'], returns='0x8057'),
    ],
    "RGB8": [
        FieldCall(field='RGB8', demands=['WebGL2RenderingContextBase'], returns='0x8051'),
    ],
    "RGB8I": [
        FieldCall(field='RGB8I', demands=['WebGL2RenderingContextBase'], returns='0x8D8F'),
    ],
    "RGB8UI": [
        FieldCall(field='RGB8UI', demands=['WebGL2RenderingContextBase'], returns='0x8D7D'),
    ],
    "RGB8_SNORM": [
        FieldCall(field='RGB8_SNORM', demands=['WebGL2RenderingContextBase'], returns='0x8F96'),
    ],
    "RGB9_E5": [
        FieldCall(field='RGB9_E5', demands=['WebGL2RenderingContextBase'], returns='0x8C3D'),
    ],
    "RGBA": [
        FieldCall(field='RGBA', demands=['WebGLRenderingContextBase'], returns='0x1908'),
    ],
    "RGBA16F": [
        FieldCall(field='RGBA16F', demands=['WebGL2RenderingContextBase'], returns='0x881A'),
    ],
    "RGBA16F_EXT": [
        FieldCall(field='RGBA16F_EXT', demands=['EXT_color_buffer_half_float'], returns='0x881A'),
    ],
    "RGBA16I": [
        FieldCall(field='RGBA16I', demands=['WebGL2RenderingContextBase'], returns='0x8D88'),
    ],
    "RGBA16UI": [
        FieldCall(field='RGBA16UI', demands=['WebGL2RenderingContextBase'], returns='0x8D76'),
    ],
    "RGBA16_EXT": [
        FieldCall(field='RGBA16_EXT', demands=['EXT_texture_norm16'], returns='0x805B'),
    ],
    "RGBA16_SNORM_EXT": [
        FieldCall(field='RGBA16_SNORM_EXT', demands=['EXT_texture_norm16'], returns='0x8F9B'),
    ],
    "RGBA32F": [
        FieldCall(field='RGBA32F', demands=['WebGL2RenderingContextBase'], returns='0x8814'),
    ],
    "RGBA32F_EXT": [
        FieldCall(field='RGBA32F_EXT', demands=['WEBGL_color_buffer_float'], returns='0x8814'),
    ],
    "RGBA32I": [
        FieldCall(field='RGBA32I', demands=['WebGL2RenderingContextBase'], returns='0x8D82'),
    ],
    "RGBA32UI": [
        FieldCall(field='RGBA32UI', demands=['WebGL2RenderingContextBase'], returns='0x8D70'),
    ],
    "RGBA4": [
        FieldCall(field='RGBA4', demands=['WebGLRenderingContextBase'], returns='0x8056'),
    ],
    "RGBA8": [
        FieldCall(field='RGBA8', demands=['WebGLRenderingContextBase'], returns='0x8058'),
    ],
    "RGBA8I": [
        FieldCall(field='RGBA8I', demands=['WebGL2RenderingContextBase'], returns='0x8D8E'),
    ],
    "RGBA8UI": [
        FieldCall(field='RGBA8UI', demands=['WebGL2RenderingContextBase'], returns='0x8D7C'),
    ],
    "RGBA8_SNORM": [
        FieldCall(field='RGBA8_SNORM', demands=['WebGL2RenderingContextBase'], returns='0x8F97'),
    ],
    "RGBA_INTEGER": [
        FieldCall(field='RGBA_INTEGER', demands=['WebGL2RenderingContextBase'], returns='0x8D99'),
    ],
    "RGB_INTEGER": [
        FieldCall(field='RGB_INTEGER', demands=['WebGL2RenderingContextBase'], returns='0x8D98'),
    ],
    "RG_INTEGER": [
        FieldCall(field='RG_INTEGER', demands=['WebGL2RenderingContextBase'], returns='0x8228'),
    ],
    "RTCCertificate": [
        NewCall(constructor='RTCCertificate', demands=[], returns='RTCCertificate'),
    ],
    "RTCDTMFSender": [
        NewCall(constructor='RTCDTMFSender', demands=[], returns='RTCDTMFSender'),
    ],
    "RTCDTMFToneChangeEvent": [
        NewCall(constructor='RTCDTMFToneChangeEvent', demands=['str'], returns='RTCDTMFToneChangeEvent'),
        NewCall(constructor='RTCDTMFToneChangeEvent', demands=['str', 'RTCDTMFToneChangeEventInit'], returns='RTCDTMFToneChangeEvent'),
    ],
    "RTCDataChannel": [
        NewCall(constructor='RTCDataChannel', demands=[], returns='RTCDataChannel'),
    ],
    "RTCDataChannelEvent": [
        NewCall(constructor='RTCDataChannelEvent', demands=['str', 'RTCDataChannelEventInit'], returns='RTCDataChannelEvent'),
    ],
    "RTCDtlsTransport": [
        NewCall(constructor='RTCDtlsTransport', demands=[], returns='RTCDtlsTransport'),
    ],
    "RTCEncodedAudioFrame": [
        NewCall(constructor='RTCEncodedAudioFrame', demands=[], returns='RTCEncodedAudioFrame'),
    ],
    "RTCEncodedVideoFrame": [
        NewCall(constructor='RTCEncodedVideoFrame', demands=[], returns='RTCEncodedVideoFrame'),
    ],
    "RTCError": [
        NewCall(constructor='RTCError', demands=['RTCErrorInit'], returns='RTCError'),
        NewCall(constructor='RTCError', demands=['RTCErrorInit', 'str'], returns='RTCError'),
    ],
    "RTCErrorEvent": [
        NewCall(constructor='RTCErrorEvent', demands=['str', 'RTCErrorEventInit'], returns='RTCErrorEvent'),
    ],
    "RTCIceCandidate": [
        NewCall(constructor='RTCIceCandidate', demands=[], returns='RTCIceCandidate'),
        NewCall(constructor='RTCIceCandidate', demands=['RTCLocalIceCandidateInit'], returns='RTCIceCandidate'),
        NewCall(constructor='RTCIceCandidate', demands=['RTCIceCandidateInit'], returns='RTCIceCandidate'),
    ],
    "RTCIceTransport": [
        NewCall(constructor='RTCIceTransport', demands=[], returns='RTCIceTransport'),
    ],
    "RTCPeerConnection": [
        NewCall(constructor='RTCPeerConnection', demands=[], returns='RTCPeerConnection'),
        NewCall(constructor='RTCPeerConnection', demands=['RTCConfiguration'], returns='RTCPeerConnection'),
    ],
    "RTCPeerConnectionIceErrorEvent": [
        NewCall(constructor='RTCPeerConnectionIceErrorEvent', demands=['str', 'RTCPeerConnectionIceErrorEventInit'], returns='RTCPeerConnectionIceErrorEvent'),
    ],
    "RTCPeerConnectionIceEvent": [
        NewCall(constructor='RTCPeerConnectionIceEvent', demands=['str'], returns='RTCPeerConnectionIceEvent'),
        NewCall(constructor='RTCPeerConnectionIceEvent', demands=['str', 'RTCPeerConnectionIceEventInit'], returns='RTCPeerConnectionIceEvent'),
    ],
    "RTCRtpReceiver": [
        NewCall(constructor='RTCRtpReceiver', demands=[], returns='RTCRtpReceiver'),
    ],
    "RTCRtpScriptTransform": [
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker'], returns='RTCRtpScriptTransform'),
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker', '*'], returns='RTCRtpScriptTransform'),
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker', '*', 'list'], returns='RTCRtpScriptTransform'),
    ],
    "RTCRtpSender": [
        NewCall(constructor='RTCRtpSender', demands=[], returns='RTCRtpSender'),
    ],
    "RTCRtpTransceiver": [
        NewCall(constructor='RTCRtpTransceiver', demands=[], returns='RTCRtpTransceiver'),
    ],
    "RTCSctpTransport": [
        NewCall(constructor='RTCSctpTransport', demands=[], returns='RTCSctpTransport'),
    ],
    "RTCSessionDescription": [
        NewCall(constructor='RTCSessionDescription', demands=['RTCSessionDescriptionInit'], returns='RTCSessionDescription'),
    ],
    "RTCStatsReport": [
        NewCall(constructor='RTCStatsReport', demands=[], returns='RTCStatsReport'),
    ],
    "RTCTrackEvent": [
        NewCall(constructor='RTCTrackEvent', demands=['str', 'RTCTrackEventInit'], returns='RTCTrackEvent'),
    ],
    "RadioNodeList": [
        NewCall(constructor='RadioNodeList', demands=[], returns='RadioNodeList'),
    ],
    "Range": [
        NewCall(constructor='Range', demands=[], returns='Range'),
    ],
    "Read": [
        PrototypeCall(constructor='TextStreamReader', fn='Read', demands=['TextStreamReader', 'float'], returns='str'),
    ],
    "ReadAll": [
        PrototypeCall(constructor='TextStreamReader', fn='ReadAll', demands=['TextStreamReader'], returns='str'),
    ],
    "ReadLine": [
        PrototypeCall(constructor='TextStreamReader', fn='ReadLine', demands=['TextStreamReader'], returns='str'),
    ],
    "ReadableByteStreamController": [
        NewCall(constructor='ReadableByteStreamController', demands=[], returns='ReadableByteStreamController'),
        NewCall(constructor='ReadableByteStreamController', demands=[], returns='never'),
    ],
    "ReadableStream": [
        NewCall(constructor='ReadableStream', demands=['UnderlyingByteSource'], returns='ReadableStream'),
        NewCall(constructor='ReadableStream', demands=['UnderlyingByteSource', '{highWaterMark?:number}'], returns='ReadableStream'),
    ],
    "ReadableStreamBYOBReader": [
        NewCall(constructor='ReadableStreamBYOBReader', demands=['ReadableStream'], returns='ReadableStreamBYOBReader'),
    ],
    "ReadableStreamBYOBRequest": [
        NewCall(constructor='ReadableStreamBYOBRequest', demands=[], returns='ReadableStreamBYOBRequest'),
        NewCall(constructor='ReadableStreamBYOBRequest', demands=[], returns='never'),
    ],
    "ReadableStreamDefaultController": [
        NewCall(constructor='ReadableStreamDefaultController', demands=[], returns='ReadableStreamDefaultController'),
        NewCall(constructor='ReadableStreamDefaultController', demands=[], returns='never'),
    ],
    "RemotePlayback": [
        NewCall(constructor='RemotePlayback', demands=[], returns='RemotePlayback'),
    ],
    "Report": [
        NewCall(constructor='Report', demands=[], returns='Report'),
    ],
    "ReportBody": [
        NewCall(constructor='ReportBody', demands=[], returns='ReportBody'),
    ],
    "ReportingObserver": [
        NewCall(constructor='ReportingObserver', demands=['ReportingObserverCallback'], returns='ReportingObserver'),
        NewCall(constructor='ReportingObserver', demands=['ReportingObserverCallback', 'ReportingObserverOptions'], returns='ReportingObserver'),
    ],
    "Request": [
        NewCall(constructor='Request', demands=['RequestInfo'], returns='Request'),
        NewCall(constructor='Request', demands=['RequestInfo', 'RequestInit'], returns='Request'),
    ],
    "ResizeObserver": [
        NewCall(constructor='ResizeObserver', demands=['ResizeObserverCallback'], returns='ResizeObserver'),
    ],
    "ResizeObserverEntry": [
        NewCall(constructor='ResizeObserverEntry', demands=[], returns='ResizeObserverEntry'),
    ],
    "ResizeObserverSize": [
        NewCall(constructor='ResizeObserverSize', demands=[], returns='ResizeObserverSize'),
    ],
    "Response": [
        NewCall(constructor='Response', demands=[], returns='Response'),
        NewCall(constructor='Response', demands=['BodyInit'], returns='Response'),
        NewCall(constructor='Response', demands=['BodyInit', 'ResponseInit'], returns='Response'),
    ],
    "SAMPLER_2D": [
        FieldCall(field='SAMPLER_2D', demands=['WebGLRenderingContextBase'], returns='0x8B5E'),
    ],
    "SAMPLER_2D_ARRAY": [
        FieldCall(field='SAMPLER_2D_ARRAY', demands=['WebGL2RenderingContextBase'], returns='0x8DC1'),
    ],
    "SAMPLER_2D_ARRAY_SHADOW": [
        FieldCall(field='SAMPLER_2D_ARRAY_SHADOW', demands=['WebGL2RenderingContextBase'], returns='0x8DC4'),
    ],
    "SAMPLER_2D_SHADOW": [
        FieldCall(field='SAMPLER_2D_SHADOW', demands=['WebGL2RenderingContextBase'], returns='0x8B62'),
    ],
    "SAMPLER_3D": [
        FieldCall(field='SAMPLER_3D', demands=['WebGL2RenderingContextBase'], returns='0x8B5F'),
    ],
    "SAMPLER_BINDING": [
        FieldCall(field='SAMPLER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8919'),
    ],
    "SAMPLER_CUBE": [
        FieldCall(field='SAMPLER_CUBE', demands=['WebGLRenderingContextBase'], returns='0x8B60'),
    ],
    "SAMPLER_CUBE_SHADOW": [
        FieldCall(field='SAMPLER_CUBE_SHADOW', demands=['WebGL2RenderingContextBase'], returns='0x8DC5'),
    ],
    "SAMPLES": [
        FieldCall(field='SAMPLES', demands=['WebGLRenderingContextBase'], returns='0x80A9'),
    ],
    "SAMPLE_ALPHA_TO_COVERAGE": [
        FieldCall(field='SAMPLE_ALPHA_TO_COVERAGE', demands=['WebGLRenderingContextBase'], returns='0x809E'),
    ],
    "SAMPLE_BUFFERS": [
        FieldCall(field='SAMPLE_BUFFERS', demands=['WebGLRenderingContextBase'], returns='0x80A8'),
    ],
    "SAMPLE_COVERAGE": [
        FieldCall(field='SAMPLE_COVERAGE', demands=['WebGLRenderingContextBase'], returns='0x80A0'),
    ],
    "SAMPLE_COVERAGE_INVERT": [
        FieldCall(field='SAMPLE_COVERAGE_INVERT', demands=['WebGLRenderingContextBase'], returns='0x80AB'),
    ],
    "SAMPLE_COVERAGE_VALUE": [
        FieldCall(field='SAMPLE_COVERAGE_VALUE', demands=['WebGLRenderingContextBase'], returns='0x80AA'),
    ],
    "SCISSOR_BOX": [
        FieldCall(field='SCISSOR_BOX', demands=['WebGLRenderingContextBase'], returns='0x0C10'),
    ],
    "SCISSOR_TEST": [
        FieldCall(field='SCISSOR_TEST', demands=['WebGLRenderingContextBase'], returns='0x0C11'),
    ],
    "SECURITY_ERR": [
        FieldCall(field='SECURITY_ERR', demands=['DOMException'], returns='18'),
    ],
    "SEPARATE_ATTRIBS": [
        FieldCall(field='SEPARATE_ATTRIBS', demands=['WebGL2RenderingContextBase'], returns='0x8C8D'),
    ],
    "SHADER_TYPE": [
        FieldCall(field='SHADER_TYPE', demands=['WebGLRenderingContextBase'], returns='0x8B4F'),
    ],
    "SHADING_LANGUAGE_VERSION": [
        FieldCall(field='SHADING_LANGUAGE_VERSION', demands=['WebGLRenderingContextBase'], returns='0x8B8C'),
    ],
    "SHORT": [
        FieldCall(field='SHORT', demands=['WebGLRenderingContextBase'], returns='0x1402'),
    ],
    "SIGNALED": [
        FieldCall(field='SIGNALED', demands=['WebGL2RenderingContextBase'], returns='0x9119'),
    ],
    "SIGNED_NORMALIZED": [
        FieldCall(field='SIGNED_NORMALIZED', demands=['WebGL2RenderingContextBase'], returns='0x8F9C'),
    ],
    "SQRT1_2": [
        FieldCall(field='SQRT1_2', demands=['Math'], returns='float'),
    ],
    "SQRT2": [
        FieldCall(field='SQRT2', demands=['Math'], returns='float'),
    ],
    "SRC_ALPHA": [
        FieldCall(field='SRC_ALPHA', demands=['WebGLRenderingContextBase'], returns='0x0302'),
    ],
    "SRC_ALPHA_SATURATE": [
        FieldCall(field='SRC_ALPHA_SATURATE', demands=['WebGLRenderingContextBase'], returns='0x0308'),
    ],
    "SRC_COLOR": [
        FieldCall(field='SRC_COLOR', demands=['WebGLRenderingContextBase'], returns='0x0300'),
    ],
    "SRGB": [
        FieldCall(field='SRGB', demands=['WebGL2RenderingContextBase'], returns='0x8C40'),
    ],
    "SRGB8": [
        FieldCall(field='SRGB8', demands=['WebGL2RenderingContextBase'], returns='0x8C41'),
    ],
    "SRGB8_ALPHA8": [
        FieldCall(field='SRGB8_ALPHA8', demands=['WebGL2RenderingContextBase'], returns='0x8C43'),
    ],
    "SRGB8_ALPHA8_EXT": [
        FieldCall(field='SRGB8_ALPHA8_EXT', demands=['EXT_sRGB'], returns='0x8C43'),
    ],
    "SRGB_ALPHA_EXT": [
        FieldCall(field='SRGB_ALPHA_EXT', demands=['EXT_sRGB'], returns='0x8C42'),
    ],
    "SRGB_EXT": [
        FieldCall(field='SRGB_EXT', demands=['EXT_sRGB'], returns='0x8C40'),
    ],
    "START_TO_END": [
        FieldCall(field='START_TO_END', demands=['Range'], returns='1'),
    ],
    "START_TO_START": [
        FieldCall(field='START_TO_START', demands=['Range'], returns='0'),
    ],
    "STATIC_COPY": [
        FieldCall(field='STATIC_COPY', demands=['WebGL2RenderingContextBase'], returns='0x88E6'),
    ],
    "STATIC_DRAW": [
        FieldCall(field='STATIC_DRAW', demands=['WebGLRenderingContextBase'], returns='0x88E4'),
    ],
    "STATIC_READ": [
        FieldCall(field='STATIC_READ', demands=['WebGL2RenderingContextBase'], returns='0x88E5'),
    ],
    "STENCIL": [
        FieldCall(field='STENCIL', demands=['WebGL2RenderingContextBase'], returns='0x1802'),
    ],
    "STENCIL_ATTACHMENT": [
        FieldCall(field='STENCIL_ATTACHMENT', demands=['WebGLRenderingContextBase'], returns='0x8D20'),
    ],
    "STENCIL_BACK_FAIL": [
        FieldCall(field='STENCIL_BACK_FAIL', demands=['WebGLRenderingContextBase'], returns='0x8801'),
    ],
    "STENCIL_BACK_FUNC": [
        FieldCall(field='STENCIL_BACK_FUNC', demands=['WebGLRenderingContextBase'], returns='0x8800'),
    ],
    "STENCIL_BACK_PASS_DEPTH_FAIL": [
        FieldCall(field='STENCIL_BACK_PASS_DEPTH_FAIL', demands=['WebGLRenderingContextBase'], returns='0x8802'),
    ],
    "STENCIL_BACK_PASS_DEPTH_PASS": [
        FieldCall(field='STENCIL_BACK_PASS_DEPTH_PASS', demands=['WebGLRenderingContextBase'], returns='0x8803'),
    ],
    "STENCIL_BACK_REF": [
        FieldCall(field='STENCIL_BACK_REF', demands=['WebGLRenderingContextBase'], returns='0x8CA3'),
    ],
    "STENCIL_BACK_VALUE_MASK": [
        FieldCall(field='STENCIL_BACK_VALUE_MASK', demands=['WebGLRenderingContextBase'], returns='0x8CA4'),
    ],
    "STENCIL_BACK_WRITEMASK": [
        FieldCall(field='STENCIL_BACK_WRITEMASK', demands=['WebGLRenderingContextBase'], returns='0x8CA5'),
    ],
    "STENCIL_BITS": [
        FieldCall(field='STENCIL_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D57'),
    ],
    "STENCIL_BUFFER_BIT": [
        FieldCall(field='STENCIL_BUFFER_BIT', demands=['WebGLRenderingContextBase'], returns='0x00000400'),
    ],
    "STENCIL_CLEAR_VALUE": [
        FieldCall(field='STENCIL_CLEAR_VALUE', demands=['WebGLRenderingContextBase'], returns='0x0B91'),
    ],
    "STENCIL_FAIL": [
        FieldCall(field='STENCIL_FAIL', demands=['WebGLRenderingContextBase'], returns='0x0B94'),
    ],
    "STENCIL_FUNC": [
        FieldCall(field='STENCIL_FUNC', demands=['WebGLRenderingContextBase'], returns='0x0B92'),
    ],
    "STENCIL_INDEX8": [
        FieldCall(field='STENCIL_INDEX8', demands=['WebGLRenderingContextBase'], returns='0x8D48'),
    ],
    "STENCIL_PASS_DEPTH_FAIL": [
        FieldCall(field='STENCIL_PASS_DEPTH_FAIL', demands=['WebGLRenderingContextBase'], returns='0x0B95'),
    ],
    "STENCIL_PASS_DEPTH_PASS": [
        FieldCall(field='STENCIL_PASS_DEPTH_PASS', demands=['WebGLRenderingContextBase'], returns='0x0B96'),
    ],
    "STENCIL_REF": [
        FieldCall(field='STENCIL_REF', demands=['WebGLRenderingContextBase'], returns='0x0B97'),
    ],
    "STENCIL_TEST": [
        FieldCall(field='STENCIL_TEST', demands=['WebGLRenderingContextBase'], returns='0x0B90'),
    ],
    "STENCIL_VALUE_MASK": [
        FieldCall(field='STENCIL_VALUE_MASK', demands=['WebGLRenderingContextBase'], returns='0x0B93'),
    ],
    "STENCIL_WRITEMASK": [
        FieldCall(field='STENCIL_WRITEMASK', demands=['WebGLRenderingContextBase'], returns='0x0B98'),
    ],
    "STREAM_COPY": [
        FieldCall(field='STREAM_COPY', demands=['WebGL2RenderingContextBase'], returns='0x88E2'),
    ],
    "STREAM_DRAW": [
        FieldCall(field='STREAM_DRAW', demands=['WebGLRenderingContextBase'], returns='0x88E0'),
    ],
    "STREAM_READ": [
        FieldCall(field='STREAM_READ', demands=['WebGL2RenderingContextBase'], returns='0x88E1'),
    ],
    "STRING_TYPE": [
        FieldCall(field='STRING_TYPE', demands=['XPathResult'], returns='2'),
    ],
    "STYLE_RULE": [
        FieldCall(field='STYLE_RULE', demands=['CSSRule'], returns='1'),
    ],
    "SUBPIXEL_BITS": [
        FieldCall(field='SUBPIXEL_BITS', demands=['WebGLRenderingContextBase'], returns='0x0D50'),
    ],
    "SUPPORTS_RULE": [
        FieldCall(field='SUPPORTS_RULE', demands=['CSSRule'], returns='12'),
    ],
    "SVGAElement": [
        NewCall(constructor='SVGAElement', demands=[], returns='SVGAElement'),
    ],
    "SVGAngle": [
        NewCall(constructor='SVGAngle', demands=[], returns='SVGAngle'),
    ],
    "SVGAnimateElement": [
        NewCall(constructor='SVGAnimateElement', demands=[], returns='SVGAnimateElement'),
    ],
    "SVGAnimateMotionElement": [
        NewCall(constructor='SVGAnimateMotionElement', demands=[], returns='SVGAnimateMotionElement'),
    ],
    "SVGAnimateTransformElement": [
        NewCall(constructor='SVGAnimateTransformElement', demands=[], returns='SVGAnimateTransformElement'),
    ],
    "SVGAnimatedAngle": [
        NewCall(constructor='SVGAnimatedAngle', demands=[], returns='SVGAnimatedAngle'),
    ],
    "SVGAnimatedBoolean": [
        NewCall(constructor='SVGAnimatedBoolean', demands=[], returns='SVGAnimatedBoolean'),
    ],
    "SVGAnimatedEnumeration": [
        NewCall(constructor='SVGAnimatedEnumeration', demands=[], returns='SVGAnimatedEnumeration'),
    ],
    "SVGAnimatedInteger": [
        NewCall(constructor='SVGAnimatedInteger', demands=[], returns='SVGAnimatedInteger'),
    ],
    "SVGAnimatedLength": [
        NewCall(constructor='SVGAnimatedLength', demands=[], returns='SVGAnimatedLength'),
    ],
    "SVGAnimatedLengthList": [
        NewCall(constructor='SVGAnimatedLengthList', demands=[], returns='SVGAnimatedLengthList'),
    ],
    "SVGAnimatedNumber": [
        NewCall(constructor='SVGAnimatedNumber', demands=[], returns='SVGAnimatedNumber'),
    ],
    "SVGAnimatedNumberList": [
        NewCall(constructor='SVGAnimatedNumberList', demands=[], returns='SVGAnimatedNumberList'),
    ],
    "SVGAnimatedPreserveAspectRatio": [
        NewCall(constructor='SVGAnimatedPreserveAspectRatio', demands=[], returns='SVGAnimatedPreserveAspectRatio'),
    ],
    "SVGAnimatedRect": [
        NewCall(constructor='SVGAnimatedRect', demands=[], returns='SVGAnimatedRect'),
    ],
    "SVGAnimatedString": [
        NewCall(constructor='SVGAnimatedString', demands=[], returns='SVGAnimatedString'),
    ],
    "SVGAnimatedTransformList": [
        NewCall(constructor='SVGAnimatedTransformList', demands=[], returns='SVGAnimatedTransformList'),
    ],
    "SVGAnimationElement": [
        NewCall(constructor='SVGAnimationElement', demands=[], returns='SVGAnimationElement'),
    ],
    "SVGCircleElement": [
        NewCall(constructor='SVGCircleElement', demands=[], returns='SVGCircleElement'),
    ],
    "SVGClipPathElement": [
        NewCall(constructor='SVGClipPathElement', demands=[], returns='SVGClipPathElement'),
    ],
    "SVGComponentTransferFunctionElement": [
        NewCall(constructor='SVGComponentTransferFunctionElement', demands=[], returns='SVGComponentTransferFunctionElement'),
    ],
    "SVGDefsElement": [
        NewCall(constructor='SVGDefsElement', demands=[], returns='SVGDefsElement'),
    ],
    "SVGDescElement": [
        NewCall(constructor='SVGDescElement', demands=[], returns='SVGDescElement'),
    ],
    "SVGElement": [
        NewCall(constructor='SVGElement', demands=[], returns='SVGElement'),
    ],
    "SVGEllipseElement": [
        NewCall(constructor='SVGEllipseElement', demands=[], returns='SVGEllipseElement'),
    ],
    "SVGFEBlendElement": [
        NewCall(constructor='SVGFEBlendElement', demands=[], returns='SVGFEBlendElement'),
    ],
    "SVGFEColorMatrixElement": [
        NewCall(constructor='SVGFEColorMatrixElement', demands=[], returns='SVGFEColorMatrixElement'),
    ],
    "SVGFEComponentTransferElement": [
        NewCall(constructor='SVGFEComponentTransferElement', demands=[], returns='SVGFEComponentTransferElement'),
    ],
    "SVGFECompositeElement": [
        NewCall(constructor='SVGFECompositeElement', demands=[], returns='SVGFECompositeElement'),
    ],
    "SVGFEConvolveMatrixElement": [
        NewCall(constructor='SVGFEConvolveMatrixElement', demands=[], returns='SVGFEConvolveMatrixElement'),
    ],
    "SVGFEDiffuseLightingElement": [
        NewCall(constructor='SVGFEDiffuseLightingElement', demands=[], returns='SVGFEDiffuseLightingElement'),
    ],
    "SVGFEDisplacementMapElement": [
        NewCall(constructor='SVGFEDisplacementMapElement', demands=[], returns='SVGFEDisplacementMapElement'),
    ],
    "SVGFEDistantLightElement": [
        NewCall(constructor='SVGFEDistantLightElement', demands=[], returns='SVGFEDistantLightElement'),
    ],
    "SVGFEDropShadowElement": [
        NewCall(constructor='SVGFEDropShadowElement', demands=[], returns='SVGFEDropShadowElement'),
    ],
    "SVGFEFloodElement": [
        NewCall(constructor='SVGFEFloodElement', demands=[], returns='SVGFEFloodElement'),
    ],
    "SVGFEFuncAElement": [
        NewCall(constructor='SVGFEFuncAElement', demands=[], returns='SVGFEFuncAElement'),
    ],
    "SVGFEFuncBElement": [
        NewCall(constructor='SVGFEFuncBElement', demands=[], returns='SVGFEFuncBElement'),
    ],
    "SVGFEFuncGElement": [
        NewCall(constructor='SVGFEFuncGElement', demands=[], returns='SVGFEFuncGElement'),
    ],
    "SVGFEFuncRElement": [
        NewCall(constructor='SVGFEFuncRElement', demands=[], returns='SVGFEFuncRElement'),
    ],
    "SVGFEGaussianBlurElement": [
        NewCall(constructor='SVGFEGaussianBlurElement', demands=[], returns='SVGFEGaussianBlurElement'),
    ],
    "SVGFEImageElement": [
        NewCall(constructor='SVGFEImageElement', demands=[], returns='SVGFEImageElement'),
    ],
    "SVGFEMergeElement": [
        NewCall(constructor='SVGFEMergeElement', demands=[], returns='SVGFEMergeElement'),
    ],
    "SVGFEMergeNodeElement": [
        NewCall(constructor='SVGFEMergeNodeElement', demands=[], returns='SVGFEMergeNodeElement'),
    ],
    "SVGFEMorphologyElement": [
        NewCall(constructor='SVGFEMorphologyElement', demands=[], returns='SVGFEMorphologyElement'),
    ],
    "SVGFEOffsetElement": [
        NewCall(constructor='SVGFEOffsetElement', demands=[], returns='SVGFEOffsetElement'),
    ],
    "SVGFEPointLightElement": [
        NewCall(constructor='SVGFEPointLightElement', demands=[], returns='SVGFEPointLightElement'),
    ],
    "SVGFESpecularLightingElement": [
        NewCall(constructor='SVGFESpecularLightingElement', demands=[], returns='SVGFESpecularLightingElement'),
    ],
    "SVGFESpotLightElement": [
        NewCall(constructor='SVGFESpotLightElement', demands=[], returns='SVGFESpotLightElement'),
    ],
    "SVGFETileElement": [
        NewCall(constructor='SVGFETileElement', demands=[], returns='SVGFETileElement'),
    ],
    "SVGFETurbulenceElement": [
        NewCall(constructor='SVGFETurbulenceElement', demands=[], returns='SVGFETurbulenceElement'),
    ],
    "SVGFilterElement": [
        NewCall(constructor='SVGFilterElement', demands=[], returns='SVGFilterElement'),
    ],
    "SVGForeignObjectElement": [
        NewCall(constructor='SVGForeignObjectElement', demands=[], returns='SVGForeignObjectElement'),
    ],
    "SVGGElement": [
        NewCall(constructor='SVGGElement', demands=[], returns='SVGGElement'),
    ],
    "SVGGeometryElement": [
        NewCall(constructor='SVGGeometryElement', demands=[], returns='SVGGeometryElement'),
    ],
    "SVGGradientElement": [
        NewCall(constructor='SVGGradientElement', demands=[], returns='SVGGradientElement'),
    ],
    "SVGGraphicsElement": [
        NewCall(constructor='SVGGraphicsElement', demands=[], returns='SVGGraphicsElement'),
    ],
    "SVGImageElement": [
        NewCall(constructor='SVGImageElement', demands=[], returns='SVGImageElement'),
    ],
    "SVGLength": [
        NewCall(constructor='SVGLength', demands=[], returns='SVGLength'),
    ],
    "SVGLengthList": [
        NewCall(constructor='SVGLengthList', demands=[], returns='SVGLengthList'),
    ],
    "SVGLineElement": [
        NewCall(constructor='SVGLineElement', demands=[], returns='SVGLineElement'),
    ],
    "SVGLinearGradientElement": [
        NewCall(constructor='SVGLinearGradientElement', demands=[], returns='SVGLinearGradientElement'),
    ],
    "SVGMPathElement": [
        NewCall(constructor='SVGMPathElement', demands=[], returns='SVGMPathElement'),
    ],
    "SVGMarkerElement": [
        NewCall(constructor='SVGMarkerElement', demands=[], returns='SVGMarkerElement'),
    ],
    "SVGMaskElement": [
        NewCall(constructor='SVGMaskElement', demands=[], returns='SVGMaskElement'),
    ],
    "SVGMetadataElement": [
        NewCall(constructor='SVGMetadataElement', demands=[], returns='SVGMetadataElement'),
    ],
    "SVGNumber": [
        NewCall(constructor='SVGNumber', demands=[], returns='SVGNumber'),
    ],
    "SVGNumberList": [
        NewCall(constructor='SVGNumberList', demands=[], returns='SVGNumberList'),
    ],
    "SVGPathElement": [
        NewCall(constructor='SVGPathElement', demands=[], returns='SVGPathElement'),
    ],
    "SVGPatternElement": [
        NewCall(constructor='SVGPatternElement', demands=[], returns='SVGPatternElement'),
    ],
    "SVGPointList": [
        NewCall(constructor='SVGPointList', demands=[], returns='SVGPointList'),
    ],
    "SVGPolygonElement": [
        NewCall(constructor='SVGPolygonElement', demands=[], returns='SVGPolygonElement'),
    ],
    "SVGPolylineElement": [
        NewCall(constructor='SVGPolylineElement', demands=[], returns='SVGPolylineElement'),
    ],
    "SVGPreserveAspectRatio": [
        NewCall(constructor='SVGPreserveAspectRatio', demands=[], returns='SVGPreserveAspectRatio'),
    ],
    "SVGRadialGradientElement": [
        NewCall(constructor='SVGRadialGradientElement', demands=[], returns='SVGRadialGradientElement'),
    ],
    "SVGRectElement": [
        NewCall(constructor='SVGRectElement', demands=[], returns='SVGRectElement'),
    ],
    "SVGSVGElement": [
        NewCall(constructor='SVGSVGElement', demands=[], returns='SVGSVGElement'),
    ],
    "SVGScriptElement": [
        NewCall(constructor='SVGScriptElement', demands=[], returns='SVGScriptElement'),
    ],
    "SVGSetElement": [
        NewCall(constructor='SVGSetElement', demands=[], returns='SVGSetElement'),
    ],
    "SVGStopElement": [
        NewCall(constructor='SVGStopElement', demands=[], returns='SVGStopElement'),
    ],
    "SVGStringList": [
        NewCall(constructor='SVGStringList', demands=[], returns='SVGStringList'),
    ],
    "SVGStyleElement": [
        NewCall(constructor='SVGStyleElement', demands=[], returns='SVGStyleElement'),
    ],
    "SVGSwitchElement": [
        NewCall(constructor='SVGSwitchElement', demands=[], returns='SVGSwitchElement'),
    ],
    "SVGSymbolElement": [
        NewCall(constructor='SVGSymbolElement', demands=[], returns='SVGSymbolElement'),
    ],
    "SVGTSpanElement": [
        NewCall(constructor='SVGTSpanElement', demands=[], returns='SVGTSpanElement'),
    ],
    "SVGTextContentElement": [
        NewCall(constructor='SVGTextContentElement', demands=[], returns='SVGTextContentElement'),
    ],
    "SVGTextElement": [
        NewCall(constructor='SVGTextElement', demands=[], returns='SVGTextElement'),
    ],
    "SVGTextPathElement": [
        NewCall(constructor='SVGTextPathElement', demands=[], returns='SVGTextPathElement'),
    ],
    "SVGTextPositioningElement": [
        NewCall(constructor='SVGTextPositioningElement', demands=[], returns='SVGTextPositioningElement'),
    ],
    "SVGTitleElement": [
        NewCall(constructor='SVGTitleElement', demands=[], returns='SVGTitleElement'),
    ],
    "SVGTransform": [
        NewCall(constructor='SVGTransform', demands=[], returns='SVGTransform'),
    ],
    "SVGTransformList": [
        NewCall(constructor='SVGTransformList', demands=[], returns='SVGTransformList'),
    ],
    "SVGUnitTypes": [
        NewCall(constructor='SVGUnitTypes', demands=[], returns='SVGUnitTypes'),
    ],
    "SVGUseElement": [
        NewCall(constructor='SVGUseElement', demands=[], returns='SVGUseElement'),
    ],
    "SVGViewElement": [
        NewCall(constructor='SVGViewElement', demands=[], returns='SVGViewElement'),
    ],
    "SVG_ANGLETYPE_DEG": [
        FieldCall(field='SVG_ANGLETYPE_DEG', demands=['SVGAngle'], returns='2'),
    ],
    "SVG_ANGLETYPE_GRAD": [
        FieldCall(field='SVG_ANGLETYPE_GRAD', demands=['SVGAngle'], returns='4'),
    ],
    "SVG_ANGLETYPE_RAD": [
        FieldCall(field='SVG_ANGLETYPE_RAD', demands=['SVGAngle'], returns='3'),
    ],
    "SVG_ANGLETYPE_UNKNOWN": [
        FieldCall(field='SVG_ANGLETYPE_UNKNOWN', demands=['SVGAngle'], returns='0'),
    ],
    "SVG_ANGLETYPE_UNSPECIFIED": [
        FieldCall(field='SVG_ANGLETYPE_UNSPECIFIED', demands=['SVGAngle'], returns='1'),
    ],
    "SVG_CHANNEL_A": [
        FieldCall(field='SVG_CHANNEL_A', demands=['SVGFEDisplacementMapElement'], returns='4'),
    ],
    "SVG_CHANNEL_B": [
        FieldCall(field='SVG_CHANNEL_B', demands=['SVGFEDisplacementMapElement'], returns='3'),
    ],
    "SVG_CHANNEL_G": [
        FieldCall(field='SVG_CHANNEL_G', demands=['SVGFEDisplacementMapElement'], returns='2'),
    ],
    "SVG_CHANNEL_R": [
        FieldCall(field='SVG_CHANNEL_R', demands=['SVGFEDisplacementMapElement'], returns='1'),
    ],
    "SVG_CHANNEL_UNKNOWN": [
        FieldCall(field='SVG_CHANNEL_UNKNOWN', demands=['SVGFEDisplacementMapElement'], returns='0'),
    ],
    "SVG_EDGEMODE_DUPLICATE": [
        FieldCall(field='SVG_EDGEMODE_DUPLICATE', demands=['SVGFEConvolveMatrixElement'], returns='1'),
    ],
    "SVG_EDGEMODE_NONE": [
        FieldCall(field='SVG_EDGEMODE_NONE', demands=['SVGFEConvolveMatrixElement'], returns='3'),
    ],
    "SVG_EDGEMODE_UNKNOWN": [
        FieldCall(field='SVG_EDGEMODE_UNKNOWN', demands=['SVGFEConvolveMatrixElement'], returns='0'),
    ],
    "SVG_EDGEMODE_WRAP": [
        FieldCall(field='SVG_EDGEMODE_WRAP', demands=['SVGFEConvolveMatrixElement'], returns='2'),
    ],
    "SVG_FEBLEND_MODE_COLOR": [
        FieldCall(field='SVG_FEBLEND_MODE_COLOR', demands=['SVGFEBlendElement'], returns='15'),
    ],
    "SVG_FEBLEND_MODE_COLOR_BURN": [
        FieldCall(field='SVG_FEBLEND_MODE_COLOR_BURN', demands=['SVGFEBlendElement'], returns='8'),
    ],
    "SVG_FEBLEND_MODE_COLOR_DODGE": [
        FieldCall(field='SVG_FEBLEND_MODE_COLOR_DODGE', demands=['SVGFEBlendElement'], returns='7'),
    ],
    "SVG_FEBLEND_MODE_DARKEN": [
        FieldCall(field='SVG_FEBLEND_MODE_DARKEN', demands=['SVGFEBlendElement'], returns='4'),
    ],
    "SVG_FEBLEND_MODE_DIFFERENCE": [
        FieldCall(field='SVG_FEBLEND_MODE_DIFFERENCE', demands=['SVGFEBlendElement'], returns='11'),
    ],
    "SVG_FEBLEND_MODE_EXCLUSION": [
        FieldCall(field='SVG_FEBLEND_MODE_EXCLUSION', demands=['SVGFEBlendElement'], returns='12'),
    ],
    "SVG_FEBLEND_MODE_HARD_LIGHT": [
        FieldCall(field='SVG_FEBLEND_MODE_HARD_LIGHT', demands=['SVGFEBlendElement'], returns='9'),
    ],
    "SVG_FEBLEND_MODE_HUE": [
        FieldCall(field='SVG_FEBLEND_MODE_HUE', demands=['SVGFEBlendElement'], returns='13'),
    ],
    "SVG_FEBLEND_MODE_LIGHTEN": [
        FieldCall(field='SVG_FEBLEND_MODE_LIGHTEN', demands=['SVGFEBlendElement'], returns='5'),
    ],
    "SVG_FEBLEND_MODE_LUMINOSITY": [
        FieldCall(field='SVG_FEBLEND_MODE_LUMINOSITY', demands=['SVGFEBlendElement'], returns='16'),
    ],
    "SVG_FEBLEND_MODE_MULTIPLY": [
        FieldCall(field='SVG_FEBLEND_MODE_MULTIPLY', demands=['SVGFEBlendElement'], returns='2'),
    ],
    "SVG_FEBLEND_MODE_NORMAL": [
        FieldCall(field='SVG_FEBLEND_MODE_NORMAL', demands=['SVGFEBlendElement'], returns='1'),
    ],
    "SVG_FEBLEND_MODE_OVERLAY": [
        FieldCall(field='SVG_FEBLEND_MODE_OVERLAY', demands=['SVGFEBlendElement'], returns='6'),
    ],
    "SVG_FEBLEND_MODE_SATURATION": [
        FieldCall(field='SVG_FEBLEND_MODE_SATURATION', demands=['SVGFEBlendElement'], returns='14'),
    ],
    "SVG_FEBLEND_MODE_SCREEN": [
        FieldCall(field='SVG_FEBLEND_MODE_SCREEN', demands=['SVGFEBlendElement'], returns='3'),
    ],
    "SVG_FEBLEND_MODE_SOFT_LIGHT": [
        FieldCall(field='SVG_FEBLEND_MODE_SOFT_LIGHT', demands=['SVGFEBlendElement'], returns='10'),
    ],
    "SVG_FEBLEND_MODE_UNKNOWN": [
        FieldCall(field='SVG_FEBLEND_MODE_UNKNOWN', demands=['SVGFEBlendElement'], returns='0'),
    ],
    "SVG_FECOLORMATRIX_TYPE_HUEROTATE": [
        FieldCall(field='SVG_FECOLORMATRIX_TYPE_HUEROTATE', demands=['SVGFEColorMatrixElement'], returns='3'),
    ],
    "SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA": [
        FieldCall(field='SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA', demands=['SVGFEColorMatrixElement'], returns='4'),
    ],
    "SVG_FECOLORMATRIX_TYPE_MATRIX": [
        FieldCall(field='SVG_FECOLORMATRIX_TYPE_MATRIX', demands=['SVGFEColorMatrixElement'], returns='1'),
    ],
    "SVG_FECOLORMATRIX_TYPE_SATURATE": [
        FieldCall(field='SVG_FECOLORMATRIX_TYPE_SATURATE', demands=['SVGFEColorMatrixElement'], returns='2'),
    ],
    "SVG_FECOLORMATRIX_TYPE_UNKNOWN": [
        FieldCall(field='SVG_FECOLORMATRIX_TYPE_UNKNOWN', demands=['SVGFEColorMatrixElement'], returns='0'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE', demands=['SVGComponentTransferFunctionElement'], returns='3'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_GAMMA": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_GAMMA', demands=['SVGComponentTransferFunctionElement'], returns='5'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY', demands=['SVGComponentTransferFunctionElement'], returns='1'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_LINEAR": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_LINEAR', demands=['SVGComponentTransferFunctionElement'], returns='4'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_TABLE": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_TABLE', demands=['SVGComponentTransferFunctionElement'], returns='2'),
    ],
    "SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN": [
        FieldCall(field='SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN', demands=['SVGComponentTransferFunctionElement'], returns='0'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_ARITHMETIC": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_ARITHMETIC', demands=['SVGFECompositeElement'], returns='6'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_ATOP": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_ATOP', demands=['SVGFECompositeElement'], returns='4'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_IN": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_IN', demands=['SVGFECompositeElement'], returns='2'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_OUT": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_OUT', demands=['SVGFECompositeElement'], returns='3'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_OVER": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_OVER', demands=['SVGFECompositeElement'], returns='1'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_UNKNOWN": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_UNKNOWN', demands=['SVGFECompositeElement'], returns='0'),
    ],
    "SVG_FECOMPOSITE_OPERATOR_XOR": [
        FieldCall(field='SVG_FECOMPOSITE_OPERATOR_XOR', demands=['SVGFECompositeElement'], returns='5'),
    ],
    "SVG_LENGTHTYPE_CM": [
        FieldCall(field='SVG_LENGTHTYPE_CM', demands=['SVGLength'], returns='6'),
    ],
    "SVG_LENGTHTYPE_EMS": [
        FieldCall(field='SVG_LENGTHTYPE_EMS', demands=['SVGLength'], returns='3'),
    ],
    "SVG_LENGTHTYPE_EXS": [
        FieldCall(field='SVG_LENGTHTYPE_EXS', demands=['SVGLength'], returns='4'),
    ],
    "SVG_LENGTHTYPE_IN": [
        FieldCall(field='SVG_LENGTHTYPE_IN', demands=['SVGLength'], returns='8'),
    ],
    "SVG_LENGTHTYPE_MM": [
        FieldCall(field='SVG_LENGTHTYPE_MM', demands=['SVGLength'], returns='7'),
    ],
    "SVG_LENGTHTYPE_NUMBER": [
        FieldCall(field='SVG_LENGTHTYPE_NUMBER', demands=['SVGLength'], returns='1'),
    ],
    "SVG_LENGTHTYPE_PC": [
        FieldCall(field='SVG_LENGTHTYPE_PC', demands=['SVGLength'], returns='10'),
    ],
    "SVG_LENGTHTYPE_PERCENTAGE": [
        FieldCall(field='SVG_LENGTHTYPE_PERCENTAGE', demands=['SVGLength'], returns='2'),
    ],
    "SVG_LENGTHTYPE_PT": [
        FieldCall(field='SVG_LENGTHTYPE_PT', demands=['SVGLength'], returns='9'),
    ],
    "SVG_LENGTHTYPE_PX": [
        FieldCall(field='SVG_LENGTHTYPE_PX', demands=['SVGLength'], returns='5'),
    ],
    "SVG_LENGTHTYPE_UNKNOWN": [
        FieldCall(field='SVG_LENGTHTYPE_UNKNOWN', demands=['SVGLength'], returns='0'),
    ],
    "SVG_MARKERUNITS_STROKEWIDTH": [
        FieldCall(field='SVG_MARKERUNITS_STROKEWIDTH', demands=['SVGMarkerElement'], returns='2'),
    ],
    "SVG_MARKERUNITS_UNKNOWN": [
        FieldCall(field='SVG_MARKERUNITS_UNKNOWN', demands=['SVGMarkerElement'], returns='0'),
    ],
    "SVG_MARKERUNITS_USERSPACEONUSE": [
        FieldCall(field='SVG_MARKERUNITS_USERSPACEONUSE', demands=['SVGMarkerElement'], returns='1'),
    ],
    "SVG_MARKER_ORIENT_ANGLE": [
        FieldCall(field='SVG_MARKER_ORIENT_ANGLE', demands=['SVGMarkerElement'], returns='2'),
    ],
    "SVG_MARKER_ORIENT_AUTO": [
        FieldCall(field='SVG_MARKER_ORIENT_AUTO', demands=['SVGMarkerElement'], returns='1'),
    ],
    "SVG_MARKER_ORIENT_UNKNOWN": [
        FieldCall(field='SVG_MARKER_ORIENT_UNKNOWN', demands=['SVGMarkerElement'], returns='0'),
    ],
    "SVG_MEETORSLICE_MEET": [
        FieldCall(field='SVG_MEETORSLICE_MEET', demands=['SVGPreserveAspectRatio'], returns='1'),
    ],
    "SVG_MEETORSLICE_SLICE": [
        FieldCall(field='SVG_MEETORSLICE_SLICE', demands=['SVGPreserveAspectRatio'], returns='2'),
    ],
    "SVG_MEETORSLICE_UNKNOWN": [
        FieldCall(field='SVG_MEETORSLICE_UNKNOWN', demands=['SVGPreserveAspectRatio'], returns='0'),
    ],
    "SVG_MORPHOLOGY_OPERATOR_DILATE": [
        FieldCall(field='SVG_MORPHOLOGY_OPERATOR_DILATE', demands=['SVGFEMorphologyElement'], returns='2'),
    ],
    "SVG_MORPHOLOGY_OPERATOR_ERODE": [
        FieldCall(field='SVG_MORPHOLOGY_OPERATOR_ERODE', demands=['SVGFEMorphologyElement'], returns='1'),
    ],
    "SVG_MORPHOLOGY_OPERATOR_UNKNOWN": [
        FieldCall(field='SVG_MORPHOLOGY_OPERATOR_UNKNOWN', demands=['SVGFEMorphologyElement'], returns='0'),
    ],
    "SVG_PRESERVEASPECTRATIO_NONE": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_NONE', demands=['SVGPreserveAspectRatio'], returns='1'),
    ],
    "SVG_PRESERVEASPECTRATIO_UNKNOWN": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_UNKNOWN', demands=['SVGPreserveAspectRatio'], returns='0'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMAXYMAX": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMAXYMAX', demands=['SVGPreserveAspectRatio'], returns='10'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMAXYMID": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMAXYMID', demands=['SVGPreserveAspectRatio'], returns='7'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMAXYMIN": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMAXYMIN', demands=['SVGPreserveAspectRatio'], returns='4'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMIDYMAX": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMIDYMAX', demands=['SVGPreserveAspectRatio'], returns='9'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMIDYMID": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMIDYMID', demands=['SVGPreserveAspectRatio'], returns='6'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMIDYMIN": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMIDYMIN', demands=['SVGPreserveAspectRatio'], returns='3'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMINYMAX": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMINYMAX', demands=['SVGPreserveAspectRatio'], returns='8'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMINYMID": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMINYMID', demands=['SVGPreserveAspectRatio'], returns='5'),
    ],
    "SVG_PRESERVEASPECTRATIO_XMINYMIN": [
        FieldCall(field='SVG_PRESERVEASPECTRATIO_XMINYMIN', demands=['SVGPreserveAspectRatio'], returns='2'),
    ],
    "SVG_SPREADMETHOD_PAD": [
        FieldCall(field='SVG_SPREADMETHOD_PAD', demands=['SVGGradientElement'], returns='1'),
    ],
    "SVG_SPREADMETHOD_REFLECT": [
        FieldCall(field='SVG_SPREADMETHOD_REFLECT', demands=['SVGGradientElement'], returns='2'),
    ],
    "SVG_SPREADMETHOD_REPEAT": [
        FieldCall(field='SVG_SPREADMETHOD_REPEAT', demands=['SVGGradientElement'], returns='3'),
    ],
    "SVG_SPREADMETHOD_UNKNOWN": [
        FieldCall(field='SVG_SPREADMETHOD_UNKNOWN', demands=['SVGGradientElement'], returns='0'),
    ],
    "SVG_STITCHTYPE_NOSTITCH": [
        FieldCall(field='SVG_STITCHTYPE_NOSTITCH', demands=['SVGFETurbulenceElement'], returns='2'),
    ],
    "SVG_STITCHTYPE_STITCH": [
        FieldCall(field='SVG_STITCHTYPE_STITCH', demands=['SVGFETurbulenceElement'], returns='1'),
    ],
    "SVG_STITCHTYPE_UNKNOWN": [
        FieldCall(field='SVG_STITCHTYPE_UNKNOWN', demands=['SVGFETurbulenceElement'], returns='0'),
    ],
    "SVG_TRANSFORM_MATRIX": [
        FieldCall(field='SVG_TRANSFORM_MATRIX', demands=['SVGTransform'], returns='1'),
    ],
    "SVG_TRANSFORM_ROTATE": [
        FieldCall(field='SVG_TRANSFORM_ROTATE', demands=['SVGTransform'], returns='4'),
    ],
    "SVG_TRANSFORM_SCALE": [
        FieldCall(field='SVG_TRANSFORM_SCALE', demands=['SVGTransform'], returns='3'),
    ],
    "SVG_TRANSFORM_SKEWX": [
        FieldCall(field='SVG_TRANSFORM_SKEWX', demands=['SVGTransform'], returns='5'),
    ],
    "SVG_TRANSFORM_SKEWY": [
        FieldCall(field='SVG_TRANSFORM_SKEWY', demands=['SVGTransform'], returns='6'),
    ],
    "SVG_TRANSFORM_TRANSLATE": [
        FieldCall(field='SVG_TRANSFORM_TRANSLATE', demands=['SVGTransform'], returns='2'),
    ],
    "SVG_TRANSFORM_UNKNOWN": [
        FieldCall(field='SVG_TRANSFORM_UNKNOWN', demands=['SVGTransform'], returns='0'),
    ],
    "SVG_TURBULENCE_TYPE_FRACTALNOISE": [
        FieldCall(field='SVG_TURBULENCE_TYPE_FRACTALNOISE', demands=['SVGFETurbulenceElement'], returns='1'),
    ],
    "SVG_TURBULENCE_TYPE_TURBULENCE": [
        FieldCall(field='SVG_TURBULENCE_TYPE_TURBULENCE', demands=['SVGFETurbulenceElement'], returns='2'),
    ],
    "SVG_TURBULENCE_TYPE_UNKNOWN": [
        FieldCall(field='SVG_TURBULENCE_TYPE_UNKNOWN', demands=['SVGFETurbulenceElement'], returns='0'),
    ],
    "SVG_UNIT_TYPE_OBJECTBOUNDINGBOX": [
        FieldCall(field='SVG_UNIT_TYPE_OBJECTBOUNDINGBOX', demands=['SVGUnitTypes'], returns='2'),
    ],
    "SVG_UNIT_TYPE_UNKNOWN": [
        FieldCall(field='SVG_UNIT_TYPE_UNKNOWN', demands=['SVGUnitTypes'], returns='0'),
    ],
    "SVG_UNIT_TYPE_USERSPACEONUSE": [
        FieldCall(field='SVG_UNIT_TYPE_USERSPACEONUSE', demands=['SVGUnitTypes'], returns='1'),
    ],
    "SYNC_CONDITION": [
        FieldCall(field='SYNC_CONDITION', demands=['WebGL2RenderingContextBase'], returns='0x9113'),
    ],
    "SYNC_FENCE": [
        FieldCall(field='SYNC_FENCE', demands=['WebGL2RenderingContextBase'], returns='0x9116'),
    ],
    "SYNC_FLAGS": [
        FieldCall(field='SYNC_FLAGS', demands=['WebGL2RenderingContextBase'], returns='0x9115'),
    ],
    "SYNC_FLUSH_COMMANDS_BIT": [
        FieldCall(field='SYNC_FLUSH_COMMANDS_BIT', demands=['WebGL2RenderingContextBase'], returns='0x00000001'),
    ],
    "SYNC_GPU_COMMANDS_COMPLETE": [
        FieldCall(field='SYNC_GPU_COMMANDS_COMPLETE', demands=['WebGL2RenderingContextBase'], returns='0x9117'),
    ],
    "SYNC_STATUS": [
        FieldCall(field='SYNC_STATUS', demands=['WebGL2RenderingContextBase'], returns='0x9114'),
    ],
    "SYNTAX_ERR": [
        FieldCall(field='SYNTAX_ERR', demands=['DOMException'], returns='12'),
    ],
    "Screen": [
        NewCall(constructor='Screen', demands=[], returns='Screen'),
    ],
    "ScreenOrientation": [
        NewCall(constructor='ScreenOrientation', demands=[], returns='ScreenOrientation'),
    ],
    "ScriptProcessorNode": [
        NewCall(constructor='ScriptProcessorNode', demands=[], returns='ScriptProcessorNode'),
    ],
    "SecurityPolicyViolationEvent": [
        NewCall(constructor='SecurityPolicyViolationEvent', demands=['str'], returns='SecurityPolicyViolationEvent'),
        NewCall(constructor='SecurityPolicyViolationEvent', demands=['str', 'SecurityPolicyViolationEventInit'], returns='SecurityPolicyViolationEvent'),
    ],
    "Selection": [
        NewCall(constructor='Selection', demands=[], returns='Selection'),
    ],
    "ServiceWorker": [
        NewCall(constructor='ServiceWorker', demands=[], returns='ServiceWorker'),
    ],
    "ServiceWorkerContainer": [
        NewCall(constructor='ServiceWorkerContainer', demands=[], returns='ServiceWorkerContainer'),
    ],
    "ServiceWorkerRegistration": [
        NewCall(constructor='ServiceWorkerRegistration', demands=[], returns='ServiceWorkerRegistration'),
    ],
    "ShadowRoot": [
        NewCall(constructor='ShadowRoot', demands=[], returns='ShadowRoot'),
    ],
    "SharedArrayBuffer": [
        FieldCall(field='SharedArrayBuffer', demands=['ArrayBufferTypes'], returns='SharedArrayBuffer'),
        FieldCall(field='SharedArrayBuffer', demands=['ArrayBufferTypes', 'SharedArrayBuffer'], returns='None'),
    ],
    "SharedWorker": [
        NewCall(constructor='SharedWorker', demands=['str'], returns='SharedWorker'),
        NewCall(constructor='SharedWorker', demands=['str', 'str'], returns='SharedWorker'),
    ],
    "Skip": [
        PrototypeCall(constructor='TextStreamReader', fn='Skip', demands=['TextStreamReader', 'float'], returns='None'),
    ],
    "SkipLine": [
        PrototypeCall(constructor='TextStreamReader', fn='SkipLine', demands=['TextStreamReader'], returns='None'),
    ],
    "SourceBuffer": [
        NewCall(constructor='SourceBuffer', demands=[], returns='SourceBuffer'),
    ],
    "SourceBufferList": [
        NewCall(constructor='SourceBufferList', demands=[], returns='SourceBufferList'),
    ],
    "SpeechRecognitionAlternative": [
        NewCall(constructor='SpeechRecognitionAlternative', demands=[], returns='SpeechRecognitionAlternative'),
    ],
    "SpeechRecognitionResult": [
        NewCall(constructor='SpeechRecognitionResult', demands=[], returns='SpeechRecognitionResult'),
    ],
    "SpeechRecognitionResultList": [
        NewCall(constructor='SpeechRecognitionResultList', demands=[], returns='SpeechRecognitionResultList'),
    ],
    "SpeechSynthesis": [
        NewCall(constructor='SpeechSynthesis', demands=[], returns='SpeechSynthesis'),
    ],
    "SpeechSynthesisErrorEvent": [
        NewCall(constructor='SpeechSynthesisErrorEvent', demands=['str', 'SpeechSynthesisErrorEventInit'], returns='SpeechSynthesisErrorEvent'),
    ],
    "SpeechSynthesisEvent": [
        NewCall(constructor='SpeechSynthesisEvent', demands=['str', 'SpeechSynthesisEventInit'], returns='SpeechSynthesisEvent'),
    ],
    "SpeechSynthesisUtterance": [
        NewCall(constructor='SpeechSynthesisUtterance', demands=[], returns='SpeechSynthesisUtterance'),
        NewCall(constructor='SpeechSynthesisUtterance', demands=['str'], returns='SpeechSynthesisUtterance'),
    ],
    "SpeechSynthesisVoice": [
        NewCall(constructor='SpeechSynthesisVoice', demands=[], returns='SpeechSynthesisVoice'),
    ],
    "StaticRange": [
        NewCall(constructor='StaticRange', demands=['StaticRangeInit'], returns='StaticRange'),
    ],
    "StereoPannerNode": [
        NewCall(constructor='StereoPannerNode', demands=['BaseAudioContext'], returns='StereoPannerNode'),
        NewCall(constructor='StereoPannerNode', demands=['BaseAudioContext', 'StereoPannerOptions'], returns='StereoPannerNode'),
    ],
    "Storage": [
        NewCall(constructor='Storage', demands=[], returns='Storage'),
        NewCall(constructor='Storage', demands=[], returns='never'),
    ],
    "StorageEvent": [
        NewCall(constructor='StorageEvent', demands=['str'], returns='StorageEvent'),
        NewCall(constructor='StorageEvent', demands=['str', 'StorageEventInit'], returns='StorageEvent'),
    ],
    "StorageManager": [
        NewCall(constructor='StorageManager', demands=[], returns='StorageManager'),
    ],
    "StylePropertyMap": [
        NewCall(constructor='StylePropertyMap', demands=[], returns='StylePropertyMap'),
    ],
    "StylePropertyMapReadOnly": [
        NewCall(constructor='StylePropertyMapReadOnly', demands=[], returns='StylePropertyMapReadOnly'),
    ],
    "StyleSheet": [
        NewCall(constructor='StyleSheet', demands=[], returns='StyleSheet'),
    ],
    "StyleSheetList": [
        NewCall(constructor='StyleSheetList', demands=[], returns='StyleSheetList'),
    ],
    "SubmitEvent": [
        NewCall(constructor='SubmitEvent', demands=['str'], returns='SubmitEvent'),
        NewCall(constructor='SubmitEvent', demands=['str', 'SubmitEventInit'], returns='SubmitEvent'),
    ],
    "SubtleCrypto": [
        NewCall(constructor='SubtleCrypto', demands=[], returns='SubtleCrypto'),
        NewCall(constructor='SubtleCrypto', demands=[], returns='never'),
    ],
    "TEXTPATH_METHODTYPE_ALIGN": [
        FieldCall(field='TEXTPATH_METHODTYPE_ALIGN', demands=['SVGTextPathElement'], returns='1'),
    ],
    "TEXTPATH_METHODTYPE_STRETCH": [
        FieldCall(field='TEXTPATH_METHODTYPE_STRETCH', demands=['SVGTextPathElement'], returns='2'),
    ],
    "TEXTPATH_METHODTYPE_UNKNOWN": [
        FieldCall(field='TEXTPATH_METHODTYPE_UNKNOWN', demands=['SVGTextPathElement'], returns='0'),
    ],
    "TEXTPATH_SPACINGTYPE_AUTO": [
        FieldCall(field='TEXTPATH_SPACINGTYPE_AUTO', demands=['SVGTextPathElement'], returns='1'),
    ],
    "TEXTPATH_SPACINGTYPE_EXACT": [
        FieldCall(field='TEXTPATH_SPACINGTYPE_EXACT', demands=['SVGTextPathElement'], returns='2'),
    ],
    "TEXTPATH_SPACINGTYPE_UNKNOWN": [
        FieldCall(field='TEXTPATH_SPACINGTYPE_UNKNOWN', demands=['SVGTextPathElement'], returns='0'),
    ],
    "TEXTURE": [
        FieldCall(field='TEXTURE', demands=['WebGLRenderingContextBase'], returns='0x1702'),
    ],
    "TEXTURE0": [
        FieldCall(field='TEXTURE0', demands=['WebGLRenderingContextBase'], returns='0x84C0'),
    ],
    "TEXTURE1": [
        FieldCall(field='TEXTURE1', demands=['WebGLRenderingContextBase'], returns='0x84C1'),
    ],
    "TEXTURE10": [
        FieldCall(field='TEXTURE10', demands=['WebGLRenderingContextBase'], returns='0x84CA'),
    ],
    "TEXTURE11": [
        FieldCall(field='TEXTURE11', demands=['WebGLRenderingContextBase'], returns='0x84CB'),
    ],
    "TEXTURE12": [
        FieldCall(field='TEXTURE12', demands=['WebGLRenderingContextBase'], returns='0x84CC'),
    ],
    "TEXTURE13": [
        FieldCall(field='TEXTURE13', demands=['WebGLRenderingContextBase'], returns='0x84CD'),
    ],
    "TEXTURE14": [
        FieldCall(field='TEXTURE14', demands=['WebGLRenderingContextBase'], returns='0x84CE'),
    ],
    "TEXTURE15": [
        FieldCall(field='TEXTURE15', demands=['WebGLRenderingContextBase'], returns='0x84CF'),
    ],
    "TEXTURE16": [
        FieldCall(field='TEXTURE16', demands=['WebGLRenderingContextBase'], returns='0x84D0'),
    ],
    "TEXTURE17": [
        FieldCall(field='TEXTURE17', demands=['WebGLRenderingContextBase'], returns='0x84D1'),
    ],
    "TEXTURE18": [
        FieldCall(field='TEXTURE18', demands=['WebGLRenderingContextBase'], returns='0x84D2'),
    ],
    "TEXTURE19": [
        FieldCall(field='TEXTURE19', demands=['WebGLRenderingContextBase'], returns='0x84D3'),
    ],
    "TEXTURE2": [
        FieldCall(field='TEXTURE2', demands=['WebGLRenderingContextBase'], returns='0x84C2'),
    ],
    "TEXTURE20": [
        FieldCall(field='TEXTURE20', demands=['WebGLRenderingContextBase'], returns='0x84D4'),
    ],
    "TEXTURE21": [
        FieldCall(field='TEXTURE21', demands=['WebGLRenderingContextBase'], returns='0x84D5'),
    ],
    "TEXTURE22": [
        FieldCall(field='TEXTURE22', demands=['WebGLRenderingContextBase'], returns='0x84D6'),
    ],
    "TEXTURE23": [
        FieldCall(field='TEXTURE23', demands=['WebGLRenderingContextBase'], returns='0x84D7'),
    ],
    "TEXTURE24": [
        FieldCall(field='TEXTURE24', demands=['WebGLRenderingContextBase'], returns='0x84D8'),
    ],
    "TEXTURE25": [
        FieldCall(field='TEXTURE25', demands=['WebGLRenderingContextBase'], returns='0x84D9'),
    ],
    "TEXTURE26": [
        FieldCall(field='TEXTURE26', demands=['WebGLRenderingContextBase'], returns='0x84DA'),
    ],
    "TEXTURE27": [
        FieldCall(field='TEXTURE27', demands=['WebGLRenderingContextBase'], returns='0x84DB'),
    ],
    "TEXTURE28": [
        FieldCall(field='TEXTURE28', demands=['WebGLRenderingContextBase'], returns='0x84DC'),
    ],
    "TEXTURE29": [
        FieldCall(field='TEXTURE29', demands=['WebGLRenderingContextBase'], returns='0x84DD'),
    ],
    "TEXTURE3": [
        FieldCall(field='TEXTURE3', demands=['WebGLRenderingContextBase'], returns='0x84C3'),
    ],
    "TEXTURE30": [
        FieldCall(field='TEXTURE30', demands=['WebGLRenderingContextBase'], returns='0x84DE'),
    ],
    "TEXTURE31": [
        FieldCall(field='TEXTURE31', demands=['WebGLRenderingContextBase'], returns='0x84DF'),
    ],
    "TEXTURE4": [
        FieldCall(field='TEXTURE4', demands=['WebGLRenderingContextBase'], returns='0x84C4'),
    ],
    "TEXTURE5": [
        FieldCall(field='TEXTURE5', demands=['WebGLRenderingContextBase'], returns='0x84C5'),
    ],
    "TEXTURE6": [
        FieldCall(field='TEXTURE6', demands=['WebGLRenderingContextBase'], returns='0x84C6'),
    ],
    "TEXTURE7": [
        FieldCall(field='TEXTURE7', demands=['WebGLRenderingContextBase'], returns='0x84C7'),
    ],
    "TEXTURE8": [
        FieldCall(field='TEXTURE8', demands=['WebGLRenderingContextBase'], returns='0x84C8'),
    ],
    "TEXTURE9": [
        FieldCall(field='TEXTURE9', demands=['WebGLRenderingContextBase'], returns='0x84C9'),
    ],
    "TEXTURE_2D": [
        FieldCall(field='TEXTURE_2D', demands=['WebGLRenderingContextBase'], returns='0x0DE1'),
    ],
    "TEXTURE_2D_ARRAY": [
        FieldCall(field='TEXTURE_2D_ARRAY', demands=['WebGL2RenderingContextBase'], returns='0x8C1A'),
    ],
    "TEXTURE_3D": [
        FieldCall(field='TEXTURE_3D', demands=['WebGL2RenderingContextBase'], returns='0x806F'),
    ],
    "TEXTURE_BASE_LEVEL": [
        FieldCall(field='TEXTURE_BASE_LEVEL', demands=['WebGL2RenderingContextBase'], returns='0x813C'),
    ],
    "TEXTURE_BINDING_2D": [
        FieldCall(field='TEXTURE_BINDING_2D', demands=['WebGLRenderingContextBase'], returns='0x8069'),
    ],
    "TEXTURE_BINDING_2D_ARRAY": [
        FieldCall(field='TEXTURE_BINDING_2D_ARRAY', demands=['WebGL2RenderingContextBase'], returns='0x8C1D'),
    ],
    "TEXTURE_BINDING_3D": [
        FieldCall(field='TEXTURE_BINDING_3D', demands=['WebGL2RenderingContextBase'], returns='0x806A'),
    ],
    "TEXTURE_BINDING_CUBE_MAP": [
        FieldCall(field='TEXTURE_BINDING_CUBE_MAP', demands=['WebGLRenderingContextBase'], returns='0x8514'),
    ],
    "TEXTURE_COMPARE_FUNC": [
        FieldCall(field='TEXTURE_COMPARE_FUNC', demands=['WebGL2RenderingContextBase'], returns='0x884D'),
    ],
    "TEXTURE_COMPARE_MODE": [
        FieldCall(field='TEXTURE_COMPARE_MODE', demands=['WebGL2RenderingContextBase'], returns='0x884C'),
    ],
    "TEXTURE_CUBE_MAP": [
        FieldCall(field='TEXTURE_CUBE_MAP', demands=['WebGLRenderingContextBase'], returns='0x8513'),
    ],
    "TEXTURE_CUBE_MAP_NEGATIVE_X": [
        FieldCall(field='TEXTURE_CUBE_MAP_NEGATIVE_X', demands=['WebGLRenderingContextBase'], returns='0x8516'),
    ],
    "TEXTURE_CUBE_MAP_NEGATIVE_Y": [
        FieldCall(field='TEXTURE_CUBE_MAP_NEGATIVE_Y', demands=['WebGLRenderingContextBase'], returns='0x8518'),
    ],
    "TEXTURE_CUBE_MAP_NEGATIVE_Z": [
        FieldCall(field='TEXTURE_CUBE_MAP_NEGATIVE_Z', demands=['WebGLRenderingContextBase'], returns='0x851A'),
    ],
    "TEXTURE_CUBE_MAP_POSITIVE_X": [
        FieldCall(field='TEXTURE_CUBE_MAP_POSITIVE_X', demands=['WebGLRenderingContextBase'], returns='0x8515'),
    ],
    "TEXTURE_CUBE_MAP_POSITIVE_Y": [
        FieldCall(field='TEXTURE_CUBE_MAP_POSITIVE_Y', demands=['WebGLRenderingContextBase'], returns='0x8517'),
    ],
    "TEXTURE_CUBE_MAP_POSITIVE_Z": [
        FieldCall(field='TEXTURE_CUBE_MAP_POSITIVE_Z', demands=['WebGLRenderingContextBase'], returns='0x8519'),
    ],
    "TEXTURE_IMMUTABLE_FORMAT": [
        FieldCall(field='TEXTURE_IMMUTABLE_FORMAT', demands=['WebGL2RenderingContextBase'], returns='0x912F'),
    ],
    "TEXTURE_IMMUTABLE_LEVELS": [
        FieldCall(field='TEXTURE_IMMUTABLE_LEVELS', demands=['WebGL2RenderingContextBase'], returns='0x82DF'),
    ],
    "TEXTURE_MAG_FILTER": [
        FieldCall(field='TEXTURE_MAG_FILTER', demands=['WebGLRenderingContextBase'], returns='0x2800'),
    ],
    "TEXTURE_MAX_ANISOTROPY_EXT": [
        FieldCall(field='TEXTURE_MAX_ANISOTROPY_EXT', demands=['EXT_texture_filter_anisotropic'], returns='0x84FE'),
    ],
    "TEXTURE_MAX_LEVEL": [
        FieldCall(field='TEXTURE_MAX_LEVEL', demands=['WebGL2RenderingContextBase'], returns='0x813D'),
    ],
    "TEXTURE_MAX_LOD": [
        FieldCall(field='TEXTURE_MAX_LOD', demands=['WebGL2RenderingContextBase'], returns='0x813B'),
    ],
    "TEXTURE_MIN_FILTER": [
        FieldCall(field='TEXTURE_MIN_FILTER', demands=['WebGLRenderingContextBase'], returns='0x2801'),
    ],
    "TEXTURE_MIN_LOD": [
        FieldCall(field='TEXTURE_MIN_LOD', demands=['WebGL2RenderingContextBase'], returns='0x813A'),
    ],
    "TEXTURE_WRAP_R": [
        FieldCall(field='TEXTURE_WRAP_R', demands=['WebGL2RenderingContextBase'], returns='0x8072'),
    ],
    "TEXTURE_WRAP_S": [
        FieldCall(field='TEXTURE_WRAP_S', demands=['WebGLRenderingContextBase'], returns='0x2802'),
    ],
    "TEXTURE_WRAP_T": [
        FieldCall(field='TEXTURE_WRAP_T', demands=['WebGLRenderingContextBase'], returns='0x2803'),
    ],
    "TEXT_NODE": [
        FieldCall(field='TEXT_NODE', demands=['Node'], returns='3'),
    ],
    "TIMEOUT": [
        FieldCall(field='TIMEOUT', demands=['GeolocationPositionError'], returns='3'),
    ],
    "TIMEOUT_ERR": [
        FieldCall(field='TIMEOUT_ERR', demands=['DOMException'], returns='23'),
    ],
    "TIMEOUT_EXPIRED": [
        FieldCall(field='TIMEOUT_EXPIRED', demands=['WebGL2RenderingContextBase'], returns='0x911B'),
    ],
    "TIMEOUT_IGNORED": [
        FieldCall(field='TIMEOUT_IGNORED', demands=['WebGL2RenderingContextBase'], returns='-1'),
    ],
    "TRANSFORM_FEEDBACK": [
        FieldCall(field='TRANSFORM_FEEDBACK', demands=['WebGL2RenderingContextBase'], returns='0x8E22'),
    ],
    "TRANSFORM_FEEDBACK_ACTIVE": [
        FieldCall(field='TRANSFORM_FEEDBACK_ACTIVE', demands=['WebGL2RenderingContextBase'], returns='0x8E24'),
    ],
    "TRANSFORM_FEEDBACK_BINDING": [
        FieldCall(field='TRANSFORM_FEEDBACK_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8E25'),
    ],
    "TRANSFORM_FEEDBACK_BUFFER": [
        FieldCall(field='TRANSFORM_FEEDBACK_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8C8E'),
    ],
    "TRANSFORM_FEEDBACK_BUFFER_BINDING": [
        FieldCall(field='TRANSFORM_FEEDBACK_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8C8F'),
    ],
    "TRANSFORM_FEEDBACK_BUFFER_MODE": [
        FieldCall(field='TRANSFORM_FEEDBACK_BUFFER_MODE', demands=['WebGL2RenderingContextBase'], returns='0x8C7F'),
    ],
    "TRANSFORM_FEEDBACK_BUFFER_SIZE": [
        FieldCall(field='TRANSFORM_FEEDBACK_BUFFER_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8C85'),
    ],
    "TRANSFORM_FEEDBACK_BUFFER_START": [
        FieldCall(field='TRANSFORM_FEEDBACK_BUFFER_START', demands=['WebGL2RenderingContextBase'], returns='0x8C84'),
    ],
    "TRANSFORM_FEEDBACK_PAUSED": [
        FieldCall(field='TRANSFORM_FEEDBACK_PAUSED', demands=['WebGL2RenderingContextBase'], returns='0x8E23'),
    ],
    "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN": [
        FieldCall(field='TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN', demands=['WebGL2RenderingContextBase'], returns='0x8C88'),
    ],
    "TRANSFORM_FEEDBACK_VARYINGS": [
        FieldCall(field='TRANSFORM_FEEDBACK_VARYINGS', demands=['WebGL2RenderingContextBase'], returns='0x8C83'),
    ],
    "TRIANGLES": [
        FieldCall(field='TRIANGLES', demands=['WebGLRenderingContextBase'], returns='0x0004'),
    ],
    "TRIANGLE_FAN": [
        FieldCall(field='TRIANGLE_FAN', demands=['WebGLRenderingContextBase'], returns='0x0006'),
    ],
    "TRIANGLE_STRIP": [
        FieldCall(field='TRIANGLE_STRIP', demands=['WebGLRenderingContextBase'], returns='0x0005'),
    ],
    "TYPE_BACK_FORWARD": [
        FieldCall(field='TYPE_BACK_FORWARD', demands=['PerformanceNavigation'], returns='2'),
    ],
    "TYPE_MISMATCH_ERR": [
        FieldCall(field='TYPE_MISMATCH_ERR', demands=['DOMException'], returns='17'),
    ],
    "TYPE_NAVIGATE": [
        FieldCall(field='TYPE_NAVIGATE', demands=['PerformanceNavigation'], returns='0'),
    ],
    "TYPE_RELOAD": [
        FieldCall(field='TYPE_RELOAD', demands=['PerformanceNavigation'], returns='1'),
    ],
    "TYPE_RESERVED": [
        FieldCall(field='TYPE_RESERVED', demands=['PerformanceNavigation'], returns='255'),
    ],
    "Text": [
        NewCall(constructor='Text', demands=[], returns='Text'),
        NewCall(constructor='Text', demands=['str'], returns='Text'),
    ],
    "TextDecoder": [
        NewCall(constructor='TextDecoder', demands=[], returns='TextDecoder'),
        NewCall(constructor='TextDecoder', demands=['str'], returns='TextDecoder'),
        NewCall(constructor='TextDecoder', demands=['str', 'TextDecoderOptions'], returns='TextDecoder'),
    ],
    "TextDecoderStream": [
        NewCall(constructor='TextDecoderStream', demands=[], returns='TextDecoderStream'),
        NewCall(constructor='TextDecoderStream', demands=['str'], returns='TextDecoderStream'),
        NewCall(constructor='TextDecoderStream', demands=['str', 'TextDecoderOptions'], returns='TextDecoderStream'),
    ],
    "TextEncoder": [
        NewCall(constructor='TextEncoder', demands=[], returns='TextEncoder'),
    ],
    "TextEncoderStream": [
        NewCall(constructor='TextEncoderStream', demands=[], returns='TextEncoderStream'),
    ],
    "TextEvent": [
        NewCall(constructor='TextEvent', demands=[], returns='TextEvent'),
    ],
    "TextMetrics": [
        NewCall(constructor='TextMetrics', demands=[], returns='TextMetrics'),
    ],
    "TextTrack": [
        NewCall(constructor='TextTrack', demands=[], returns='TextTrack'),
    ],
    "TextTrackCue": [
        NewCall(constructor='TextTrackCue', demands=[], returns='TextTrackCue'),
    ],
    "TextTrackCueList": [
        NewCall(constructor='TextTrackCueList', demands=[], returns='TextTrackCueList'),
    ],
    "TextTrackList": [
        NewCall(constructor='TextTrackList', demands=[], returns='TextTrackList'),
    ],
    "TimeRanges": [
        NewCall(constructor='TimeRanges', demands=[], returns='TimeRanges'),
    ],
    "ToggleEvent": [
        NewCall(constructor='ToggleEvent', demands=['str'], returns='ToggleEvent'),
        NewCall(constructor='ToggleEvent', demands=['str', 'ToggleEventInit'], returns='ToggleEvent'),
    ],
    "Touch": [
        NewCall(constructor='Touch', demands=['TouchInit'], returns='Touch'),
    ],
    "TouchEvent": [
        NewCall(constructor='TouchEvent', demands=['str'], returns='TouchEvent'),
        NewCall(constructor='TouchEvent', demands=['str', 'TouchEventInit'], returns='TouchEvent'),
    ],
    "TouchList": [
        NewCall(constructor='TouchList', demands=[], returns='TouchList'),
    ],
    "TrackEvent": [
        NewCall(constructor='TrackEvent', demands=['str'], returns='TrackEvent'),
        NewCall(constructor='TrackEvent', demands=['str', 'TrackEventInit'], returns='TrackEvent'),
    ],
    "TransformStreamDefaultController": [
        NewCall(constructor='TransformStreamDefaultController', demands=[], returns='TransformStreamDefaultController'),
        NewCall(constructor='TransformStreamDefaultController', demands=[], returns='never'),
    ],
    "TransitionEvent": [
        NewCall(constructor='TransitionEvent', demands=['str'], returns='TransitionEvent'),
        NewCall(constructor='TransitionEvent', demands=['str', 'TransitionEventInit'], returns='TransitionEvent'),
    ],
    "TreeWalker": [
        NewCall(constructor='TreeWalker', demands=[], returns='TreeWalker'),
    ],
    "UIEvent": [
        NewCall(constructor='UIEvent', demands=['str'], returns='UIEvent'),
        NewCall(constructor='UIEvent', demands=['str', 'UIEventInit'], returns='UIEvent'),
    ],
    "UNIFORM_ARRAY_STRIDE": [
        FieldCall(field='UNIFORM_ARRAY_STRIDE', demands=['WebGL2RenderingContextBase'], returns='0x8A3C'),
    ],
    "UNIFORM_BLOCK_ACTIVE_UNIFORMS": [
        FieldCall(field='UNIFORM_BLOCK_ACTIVE_UNIFORMS', demands=['WebGL2RenderingContextBase'], returns='0x8A42'),
    ],
    "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES": [
        FieldCall(field='UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES', demands=['WebGL2RenderingContextBase'], returns='0x8A43'),
    ],
    "UNIFORM_BLOCK_BINDING": [
        FieldCall(field='UNIFORM_BLOCK_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8A3F'),
    ],
    "UNIFORM_BLOCK_DATA_SIZE": [
        FieldCall(field='UNIFORM_BLOCK_DATA_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8A40'),
    ],
    "UNIFORM_BLOCK_INDEX": [
        FieldCall(field='UNIFORM_BLOCK_INDEX', demands=['WebGL2RenderingContextBase'], returns='0x8A3A'),
    ],
    "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER": [
        FieldCall(field='UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER', demands=['WebGL2RenderingContextBase'], returns='0x8A46'),
    ],
    "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER": [
        FieldCall(field='UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER', demands=['WebGL2RenderingContextBase'], returns='0x8A44'),
    ],
    "UNIFORM_BUFFER": [
        FieldCall(field='UNIFORM_BUFFER', demands=['WebGL2RenderingContextBase'], returns='0x8A11'),
    ],
    "UNIFORM_BUFFER_BINDING": [
        FieldCall(field='UNIFORM_BUFFER_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x8A28'),
    ],
    "UNIFORM_BUFFER_OFFSET_ALIGNMENT": [
        FieldCall(field='UNIFORM_BUFFER_OFFSET_ALIGNMENT', demands=['WebGL2RenderingContextBase'], returns='0x8A34'),
    ],
    "UNIFORM_BUFFER_SIZE": [
        FieldCall(field='UNIFORM_BUFFER_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8A2A'),
    ],
    "UNIFORM_BUFFER_START": [
        FieldCall(field='UNIFORM_BUFFER_START', demands=['WebGL2RenderingContextBase'], returns='0x8A29'),
    ],
    "UNIFORM_IS_ROW_MAJOR": [
        FieldCall(field='UNIFORM_IS_ROW_MAJOR', demands=['WebGL2RenderingContextBase'], returns='0x8A3E'),
    ],
    "UNIFORM_MATRIX_STRIDE": [
        FieldCall(field='UNIFORM_MATRIX_STRIDE', demands=['WebGL2RenderingContextBase'], returns='0x8A3D'),
    ],
    "UNIFORM_OFFSET": [
        FieldCall(field='UNIFORM_OFFSET', demands=['WebGL2RenderingContextBase'], returns='0x8A3B'),
    ],
    "UNIFORM_SIZE": [
        FieldCall(field='UNIFORM_SIZE', demands=['WebGL2RenderingContextBase'], returns='0x8A38'),
    ],
    "UNIFORM_TYPE": [
        FieldCall(field='UNIFORM_TYPE', demands=['WebGL2RenderingContextBase'], returns='0x8A37'),
    ],
    "UNMASKED_RENDERER_WEBGL": [
        FieldCall(field='UNMASKED_RENDERER_WEBGL', demands=['WEBGL_debug_renderer_info'], returns='0x9246'),
    ],
    "UNMASKED_VENDOR_WEBGL": [
        FieldCall(field='UNMASKED_VENDOR_WEBGL', demands=['WEBGL_debug_renderer_info'], returns='0x9245'),
    ],
    "UNORDERED_NODE_ITERATOR_TYPE": [
        FieldCall(field='UNORDERED_NODE_ITERATOR_TYPE', demands=['XPathResult'], returns='4'),
    ],
    "UNORDERED_NODE_SNAPSHOT_TYPE": [
        FieldCall(field='UNORDERED_NODE_SNAPSHOT_TYPE', demands=['XPathResult'], returns='6'),
    ],
    "UNPACK_ALIGNMENT": [
        FieldCall(field='UNPACK_ALIGNMENT', demands=['WebGLRenderingContextBase'], returns='0x0CF5'),
    ],
    "UNPACK_COLORSPACE_CONVERSION_WEBGL": [
        FieldCall(field='UNPACK_COLORSPACE_CONVERSION_WEBGL', demands=['WebGLRenderingContextBase'], returns='0x9243'),
    ],
    "UNPACK_FLIP_Y_WEBGL": [
        FieldCall(field='UNPACK_FLIP_Y_WEBGL', demands=['WebGLRenderingContextBase'], returns='0x9240'),
    ],
    "UNPACK_IMAGE_HEIGHT": [
        FieldCall(field='UNPACK_IMAGE_HEIGHT', demands=['WebGL2RenderingContextBase'], returns='0x806E'),
    ],
    "UNPACK_PREMULTIPLY_ALPHA_WEBGL": [
        FieldCall(field='UNPACK_PREMULTIPLY_ALPHA_WEBGL', demands=['WebGLRenderingContextBase'], returns='0x9241'),
    ],
    "UNPACK_ROW_LENGTH": [
        FieldCall(field='UNPACK_ROW_LENGTH', demands=['WebGL2RenderingContextBase'], returns='0x0CF2'),
    ],
    "UNPACK_SKIP_IMAGES": [
        FieldCall(field='UNPACK_SKIP_IMAGES', demands=['WebGL2RenderingContextBase'], returns='0x806D'),
    ],
    "UNPACK_SKIP_PIXELS": [
        FieldCall(field='UNPACK_SKIP_PIXELS', demands=['WebGL2RenderingContextBase'], returns='0x0CF4'),
    ],
    "UNPACK_SKIP_ROWS": [
        FieldCall(field='UNPACK_SKIP_ROWS', demands=['WebGL2RenderingContextBase'], returns='0x0CF3'),
    ],
    "UNSENT": [
        FieldCall(field='UNSENT', demands=['XMLHttpRequest'], returns='0'),
    ],
    "UNSIGNALED": [
        FieldCall(field='UNSIGNALED', demands=['WebGL2RenderingContextBase'], returns='0x9118'),
    ],
    "UNSIGNED_BYTE": [
        FieldCall(field='UNSIGNED_BYTE', demands=['WebGLRenderingContextBase'], returns='0x1401'),
    ],
    "UNSIGNED_INT": [
        FieldCall(field='UNSIGNED_INT', demands=['WebGLRenderingContextBase'], returns='0x1405'),
    ],
    "UNSIGNED_INT_10F_11F_11F_REV": [
        FieldCall(field='UNSIGNED_INT_10F_11F_11F_REV', demands=['WebGL2RenderingContextBase'], returns='0x8C3B'),
    ],
    "UNSIGNED_INT_24_8": [
        FieldCall(field='UNSIGNED_INT_24_8', demands=['WebGL2RenderingContextBase'], returns='0x84FA'),
    ],
    "UNSIGNED_INT_24_8_WEBGL": [
        FieldCall(field='UNSIGNED_INT_24_8_WEBGL', demands=['WEBGL_depth_texture'], returns='0x84FA'),
    ],
    "UNSIGNED_INT_2_10_10_10_REV": [
        FieldCall(field='UNSIGNED_INT_2_10_10_10_REV', demands=['WebGL2RenderingContextBase'], returns='0x8368'),
    ],
    "UNSIGNED_INT_5_9_9_9_REV": [
        FieldCall(field='UNSIGNED_INT_5_9_9_9_REV', demands=['WebGL2RenderingContextBase'], returns='0x8C3E'),
    ],
    "UNSIGNED_INT_SAMPLER_2D": [
        FieldCall(field='UNSIGNED_INT_SAMPLER_2D', demands=['WebGL2RenderingContextBase'], returns='0x8DD2'),
    ],
    "UNSIGNED_INT_SAMPLER_2D_ARRAY": [
        FieldCall(field='UNSIGNED_INT_SAMPLER_2D_ARRAY', demands=['WebGL2RenderingContextBase'], returns='0x8DD7'),
    ],
    "UNSIGNED_INT_SAMPLER_3D": [
        FieldCall(field='UNSIGNED_INT_SAMPLER_3D', demands=['WebGL2RenderingContextBase'], returns='0x8DD3'),
    ],
    "UNSIGNED_INT_SAMPLER_CUBE": [
        FieldCall(field='UNSIGNED_INT_SAMPLER_CUBE', demands=['WebGL2RenderingContextBase'], returns='0x8DD4'),
    ],
    "UNSIGNED_INT_VEC2": [
        FieldCall(field='UNSIGNED_INT_VEC2', demands=['WebGL2RenderingContextBase'], returns='0x8DC6'),
    ],
    "UNSIGNED_INT_VEC3": [
        FieldCall(field='UNSIGNED_INT_VEC3', demands=['WebGL2RenderingContextBase'], returns='0x8DC7'),
    ],
    "UNSIGNED_INT_VEC4": [
        FieldCall(field='UNSIGNED_INT_VEC4', demands=['WebGL2RenderingContextBase'], returns='0x8DC8'),
    ],
    "UNSIGNED_NORMALIZED": [
        FieldCall(field='UNSIGNED_NORMALIZED', demands=['WebGL2RenderingContextBase'], returns='0x8C17'),
    ],
    "UNSIGNED_NORMALIZED_EXT": [
        FieldCall(field='UNSIGNED_NORMALIZED_EXT', demands=['EXT_color_buffer_half_float'], returns='0x8C17'),
        FieldCall(field='UNSIGNED_NORMALIZED_EXT', demands=['WEBGL_color_buffer_float'], returns='0x8C17'),
    ],
    "UNSIGNED_SHORT": [
        FieldCall(field='UNSIGNED_SHORT', demands=['WebGLRenderingContextBase'], returns='0x1403'),
    ],
    "UNSIGNED_SHORT_4_4_4_4": [
        FieldCall(field='UNSIGNED_SHORT_4_4_4_4', demands=['WebGLRenderingContextBase'], returns='0x8033'),
    ],
    "UNSIGNED_SHORT_5_5_5_1": [
        FieldCall(field='UNSIGNED_SHORT_5_5_5_1', demands=['WebGLRenderingContextBase'], returns='0x8034'),
    ],
    "UNSIGNED_SHORT_5_6_5": [
        FieldCall(field='UNSIGNED_SHORT_5_6_5', demands=['WebGLRenderingContextBase'], returns='0x8363'),
    ],
    "URL": [
        FieldCall(field='URL', demands=['Document'], returns='str'),
        NewCall(constructor='URL', demands=['str'], returns='URL'),
        NewCall(constructor='URL', demands=['str', 'str'], returns='URL'),
    ],
    "URLPattern": [
        NewCall(constructor='URLPattern', demands=['URLPatternInput', 'str'], returns='URLPattern'),
        NewCall(constructor='URLPattern', demands=['URLPatternInput', 'str', 'URLPatternOptions'], returns='URLPattern'),
    ],
    "URLSearchParams": [
        NewCall(constructor='URLSearchParams', demands=[], returns='URLSearchParams'),
        NewCall(constructor='URLSearchParams', demands=['list'], returns='URLSearchParams'),
        NewCall(constructor='URLSearchParams', demands=[''], returns='URLSearchParams'),
    ],
    "URL_MISMATCH_ERR": [
        FieldCall(field='URL_MISMATCH_ERR', demands=['DOMException'], returns='21'),
    ],
    "UTC": [
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='UTC', demands=['DateConstructor', 'float'], returns='float'),
    ],
    "UserActivation": [
        NewCall(constructor='UserActivation', demands=[], returns='UserActivation'),
    ],
    "VALIDATE_STATUS": [
        FieldCall(field='VALIDATE_STATUS', demands=['WebGLRenderingContextBase'], returns='0x8B83'),
    ],
    "VALIDATION_ERR": [
        FieldCall(field='VALIDATION_ERR', demands=['DOMException'], returns='16'),
    ],
    "VENDOR": [
        FieldCall(field='VENDOR', demands=['WebGLRenderingContextBase'], returns='0x1F00'),
    ],
    "VERSION": [
        FieldCall(field='VERSION', demands=['WebGLRenderingContextBase'], returns='0x1F02'),
    ],
    "VERTEX_ARRAY_BINDING": [
        FieldCall(field='VERTEX_ARRAY_BINDING', demands=['WebGL2RenderingContextBase'], returns='0x85B5'),
    ],
    "VERTEX_ARRAY_BINDING_OES": [
        FieldCall(field='VERTEX_ARRAY_BINDING_OES', demands=['OES_vertex_array_object'], returns='0x85B5'),
    ],
    "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_BUFFER_BINDING', demands=['WebGLRenderingContextBase'], returns='0x889F'),
    ],
    "VERTEX_ATTRIB_ARRAY_DIVISOR": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_DIVISOR', demands=['WebGL2RenderingContextBase'], returns='0x88FE'),
    ],
    "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE', demands=['ANGLE_instanced_arrays'], returns='0x88FE'),
    ],
    "VERTEX_ATTRIB_ARRAY_ENABLED": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_ENABLED', demands=['WebGLRenderingContextBase'], returns='0x8622'),
    ],
    "VERTEX_ATTRIB_ARRAY_INTEGER": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_INTEGER', demands=['WebGL2RenderingContextBase'], returns='0x88FD'),
    ],
    "VERTEX_ATTRIB_ARRAY_NORMALIZED": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_NORMALIZED', demands=['WebGLRenderingContextBase'], returns='0x886A'),
    ],
    "VERTEX_ATTRIB_ARRAY_POINTER": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_POINTER', demands=['WebGLRenderingContextBase'], returns='0x8645'),
    ],
    "VERTEX_ATTRIB_ARRAY_SIZE": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_SIZE', demands=['WebGLRenderingContextBase'], returns='0x8623'),
    ],
    "VERTEX_ATTRIB_ARRAY_STRIDE": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_STRIDE', demands=['WebGLRenderingContextBase'], returns='0x8624'),
    ],
    "VERTEX_ATTRIB_ARRAY_TYPE": [
        FieldCall(field='VERTEX_ATTRIB_ARRAY_TYPE', demands=['WebGLRenderingContextBase'], returns='0x8625'),
    ],
    "VERTEX_SHADER": [
        FieldCall(field='VERTEX_SHADER', demands=['WebGLRenderingContextBase'], returns='0x8B31'),
    ],
    "VIEWPORT": [
        FieldCall(field='VIEWPORT', demands=['WebGLRenderingContextBase'], returns='0x0BA2'),
    ],
    "VTTCue": [
        NewCall(constructor='VTTCue', demands=['float', 'float', 'str'], returns='VTTCue'),
    ],
    "VTTRegion": [
        NewCall(constructor='VTTRegion', demands=[], returns='VTTRegion'),
    ],
    "ValidityState": [
        NewCall(constructor='ValidityState', demands=[], returns='ValidityState'),
    ],
    "VideoColorSpace": [
        NewCall(constructor='VideoColorSpace', demands=[], returns='VideoColorSpace'),
        NewCall(constructor='VideoColorSpace', demands=['VideoColorSpaceInit'], returns='VideoColorSpace'),
    ],
    "VideoDecoder": [
        NewCall(constructor='VideoDecoder', demands=['VideoDecoderInit'], returns='VideoDecoder'),
    ],
    "VideoEncoder": [
        NewCall(constructor='VideoEncoder', demands=['VideoEncoderInit'], returns='VideoEncoder'),
    ],
    "VideoFrame": [
        NewCall(constructor='VideoFrame', demands=['CanvasImageSource'], returns='VideoFrame'),
        NewCall(constructor='VideoFrame', demands=['CanvasImageSource', 'VideoFrameInit'], returns='VideoFrame'),
    ],
    "VideoPlaybackQuality": [
        NewCall(constructor='VideoPlaybackQuality', demands=[], returns='VideoPlaybackQuality'),
    ],
    "ViewTransition": [
        NewCall(constructor='ViewTransition', demands=[], returns='ViewTransition'),
    ],
    "ViewTransitionTypeSet": [
        NewCall(constructor='ViewTransitionTypeSet', demands=[], returns='ViewTransitionTypeSet'),
    ],
    "VisualViewport": [
        NewCall(constructor='VisualViewport', demands=[], returns='VisualViewport'),
    ],
    "WAIT_FAILED": [
        FieldCall(field='WAIT_FAILED', demands=['WebGL2RenderingContextBase'], returns='0x911D'),
    ],
    "WRONG_DOCUMENT_ERR": [
        FieldCall(field='WRONG_DOCUMENT_ERR', demands=['DOMException'], returns='4'),
    ],
    "WakeLock": [
        NewCall(constructor='WakeLock', demands=[], returns='WakeLock'),
    ],
    "WakeLockSentinel": [
        NewCall(constructor='WakeLockSentinel', demands=[], returns='WakeLockSentinel'),
    ],
    "WaveShaperNode": [
        NewCall(constructor='WaveShaperNode', demands=['BaseAudioContext'], returns='WaveShaperNode'),
        NewCall(constructor='WaveShaperNode', demands=['BaseAudioContext', 'WaveShaperOptions'], returns='WaveShaperNode'),
    ],
    "WebGL2RenderingContext": [
        NewCall(constructor='WebGL2RenderingContext', demands=[], returns='WebGL2RenderingContext'),
    ],
    "WebGLActiveInfo": [
        NewCall(constructor='WebGLActiveInfo', demands=[], returns='WebGLActiveInfo'),
    ],
    "WebGLBuffer": [
        NewCall(constructor='WebGLBuffer', demands=[], returns='WebGLBuffer'),
    ],
    "WebGLContextEvent": [
        NewCall(constructor='WebGLContextEvent', demands=['str'], returns='WebGLContextEvent'),
        NewCall(constructor='WebGLContextEvent', demands=['str', 'WebGLContextEventInit'], returns='WebGLContextEvent'),
    ],
    "WebGLFramebuffer": [
        NewCall(constructor='WebGLFramebuffer', demands=[], returns='WebGLFramebuffer'),
    ],
    "WebGLProgram": [
        NewCall(constructor='WebGLProgram', demands=[], returns='WebGLProgram'),
    ],
    "WebGLQuery": [
        NewCall(constructor='WebGLQuery', demands=[], returns='WebGLQuery'),
    ],
    "WebGLRenderbuffer": [
        NewCall(constructor='WebGLRenderbuffer', demands=[], returns='WebGLRenderbuffer'),
    ],
    "WebGLRenderingContext": [
        NewCall(constructor='WebGLRenderingContext', demands=[], returns='WebGLRenderingContext'),
    ],
    "WebGLSampler": [
        NewCall(constructor='WebGLSampler', demands=[], returns='WebGLSampler'),
    ],
    "WebGLShader": [
        NewCall(constructor='WebGLShader', demands=[], returns='WebGLShader'),
    ],
    "WebGLShaderPrecisionFormat": [
        NewCall(constructor='WebGLShaderPrecisionFormat', demands=[], returns='WebGLShaderPrecisionFormat'),
    ],
    "WebGLSync": [
        NewCall(constructor='WebGLSync', demands=[], returns='WebGLSync'),
    ],
    "WebGLTexture": [
        NewCall(constructor='WebGLTexture', demands=[], returns='WebGLTexture'),
    ],
    "WebGLTransformFeedback": [
        NewCall(constructor='WebGLTransformFeedback', demands=[], returns='WebGLTransformFeedback'),
    ],
    "WebGLUniformLocation": [
        NewCall(constructor='WebGLUniformLocation', demands=[], returns='WebGLUniformLocation'),
    ],
    "WebGLVertexArrayObject": [
        NewCall(constructor='WebGLVertexArrayObject', demands=[], returns='WebGLVertexArrayObject'),
    ],
    "WebSocket": [
        NewCall(constructor='WebSocket', demands=['str'], returns='WebSocket'),
        NewCall(constructor='WebSocket', demands=['str', 'str'], returns='WebSocket'),
    ],
    "WebSocketError": [
        NewCall(constructor='WebSocketError', demands=[], returns='WebSocketError'),
        NewCall(constructor='WebSocketError', demands=['str'], returns='WebSocketError'),
        NewCall(constructor='WebSocketError', demands=['str', 'WebSocketCloseInfo'], returns='WebSocketError'),
    ],
    "WebTransport": [
        NewCall(constructor='WebTransport', demands=['str'], returns='WebTransport'),
        NewCall(constructor='WebTransport', demands=['str', 'WebTransportOptions'], returns='WebTransport'),
    ],
    "WebTransportBidirectionalStream": [
        NewCall(constructor='WebTransportBidirectionalStream', demands=[], returns='WebTransportBidirectionalStream'),
    ],
    "WebTransportDatagramDuplexStream": [
        NewCall(constructor='WebTransportDatagramDuplexStream', demands=[], returns='WebTransportDatagramDuplexStream'),
    ],
    "WebTransportError": [
        NewCall(constructor='WebTransportError', demands=[], returns='WebTransportError'),
        NewCall(constructor='WebTransportError', demands=['str'], returns='WebTransportError'),
        NewCall(constructor='WebTransportError', demands=['str', 'WebTransportErrorOptions'], returns='WebTransportError'),
    ],
    "WebTransportReceiveStream": [
        NewCall(constructor='WebTransportReceiveStream', demands=[], returns='WebTransportReceiveStream'),
    ],
    "WebTransportSendGroup": [
        NewCall(constructor='WebTransportSendGroup', demands=[], returns='WebTransportSendGroup'),
    ],
    "WebTransportSendStream": [
        NewCall(constructor='WebTransportSendStream', demands=[], returns='WebTransportSendStream'),
    ],
    "WebTransportWriter": [
        NewCall(constructor='WebTransportWriter', demands=[], returns='WebTransportWriter'),
    ],
    "WheelEvent": [
        NewCall(constructor='WheelEvent', demands=['str'], returns='WheelEvent'),
        NewCall(constructor='WheelEvent', demands=['str', 'WheelEventInit'], returns='WheelEvent'),
    ],
    "Window": [
        NewCall(constructor='Window', demands=[], returns='Window'),
        NewCall(constructor='Window', demands=[], returns='never'),
    ],
    "Worker": [
        NewCall(constructor='Worker', demands=['str'], returns='Worker'),
        NewCall(constructor='Worker', demands=['str', 'WorkerOptions'], returns='Worker'),
    ],
    "Worklet": [
        NewCall(constructor='Worklet', demands=[], returns='Worklet'),
    ],
    "WritableStreamDefaultController": [
        NewCall(constructor='WritableStreamDefaultController', demands=[], returns='WritableStreamDefaultController'),
        NewCall(constructor='WritableStreamDefaultController', demands=[], returns='never'),
    ],
    "Write": [
        PrototypeCall(constructor='ITextWriter', fn='Write', demands=['ITextWriter', 'str'], returns='None'),
        PrototypeCall(constructor='TextStreamWriter', fn='Write', demands=['TextStreamWriter', 'str'], returns='None'),
    ],
    "WriteBlankLines": [
        PrototypeCall(constructor='TextStreamWriter', fn='WriteBlankLines', demands=['TextStreamWriter', 'float'], returns='None'),
    ],
    "WriteLine": [
        PrototypeCall(constructor='ITextWriter', fn='WriteLine', demands=['ITextWriter', 'str'], returns='None'),
        PrototypeCall(constructor='TextStreamWriter', fn='WriteLine', demands=['TextStreamWriter', 'str'], returns='None'),
    ],
    "XMLDocument": [
        NewCall(constructor='XMLDocument', demands=[], returns='XMLDocument'),
    ],
    "XMLHttpRequest": [
        NewCall(constructor='XMLHttpRequest', demands=[], returns='XMLHttpRequest'),
    ],
    "XMLHttpRequestEventTarget": [
        NewCall(constructor='XMLHttpRequestEventTarget', demands=[], returns='XMLHttpRequestEventTarget'),
    ],
    "XMLHttpRequestUpload": [
        NewCall(constructor='XMLHttpRequestUpload', demands=[], returns='XMLHttpRequestUpload'),
    ],
    "XMLSerializer": [
        NewCall(constructor='XMLSerializer', demands=[], returns='XMLSerializer'),
    ],
    "XPathEvaluator": [
        NewCall(constructor='XPathEvaluator', demands=[], returns='XPathEvaluator'),
    ],
    "XPathExpression": [
        NewCall(constructor='XPathExpression', demands=[], returns='XPathExpression'),
    ],
    "XPathResult": [
        NewCall(constructor='XPathResult', demands=[], returns='XPathResult'),
    ],
    "XSLTProcessor": [
        NewCall(constructor='XSLTProcessor', demands=[], returns='XSLTProcessor'),
    ],
    "ZERO": [
        FieldCall(field='ZERO', demands=['WebGLRenderingContextBase'], returns='0'),
    ],
    "[Symbol.asyncDispose]": [
        PrototypeCall(constructor='AsyncDisposable', fn='[Symbol.asyncDispose]', demands=['AsyncDisposable'], returns='PromiseLike'),
        PrototypeCall(constructor='AsyncDisposableStack', fn='[Symbol.asyncDispose]', demands=['AsyncDisposableStack'], returns='None'),
    ],
    "[Symbol.asyncIterator]": [
        PrototypeCall(constructor='FileSystemDirectoryHandleAsyncIterator', fn='[Symbol.asyncIterator]', demands=['FileSystemDirectoryHandleAsyncIterator'], returns='FileSystemDirectoryHandleAsyncIterator'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='[Symbol.asyncIterator]', demands=['FileSystemDirectoryHandle'], returns='FileSystemDirectoryHandleAsyncIterator'),
        PrototypeCall(constructor='ReadableStreamAsyncIterator', fn='[Symbol.asyncIterator]', demands=['ReadableStreamAsyncIterator'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='ReadableStream', fn='[Symbol.asyncIterator]', demands=['ReadableStream'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='[Symbol.asyncIterator]', demands=['WebTransportReceiveStream'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='ReadableStream', fn='[Symbol.asyncIterator]', demands=['ReadableStream'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='[Symbol.asyncIterator]', demands=['WebTransportReceiveStream'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='AsyncIterable', fn='[Symbol.asyncIterator]', demands=['AsyncIterable'], returns='AsyncIterator'),
        PrototypeCall(constructor='AsyncIterableIterator', fn='[Symbol.asyncIterator]', demands=['AsyncIterableIterator'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='AsyncIteratorObject', fn='[Symbol.asyncIterator]', demands=['AsyncIteratorObject'], returns='AsyncIteratorObject'),
        PrototypeCall(constructor='AsyncGenerator', fn='[Symbol.asyncIterator]', demands=['AsyncGenerator'], returns='AsyncGenerator'),
    ],
    "[Symbol.dispose]": [
        PrototypeCall(constructor='Disposable', fn='[Symbol.dispose]', demands=['Disposable'], returns='None'),
        PrototypeCall(constructor='DisposableStack', fn='[Symbol.dispose]', demands=['DisposableStack'], returns='None'),
    ],
    "[Symbol.hasInstance]": [
        PrototypeCall(constructor='Function', fn='[Symbol.hasInstance]', demands=['*'], returns='bool'),
    ],
    "[Symbol.iterator]": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='[Symbol.iterator]', demands=['CSSKeyframesRule'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSNumericArray', fn='[Symbol.iterator]', demands=['CSSNumericArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSRuleList', fn='[Symbol.iterator]', demands=['CSSRuleList'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSStyleDeclaration', fn='[Symbol.iterator]', demands=['CSSStyleDeclaration'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSTransformValue', fn='[Symbol.iterator]', demands=['CSSTransformValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='[Symbol.iterator]', demands=['CSSUnparsedValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMRectList', fn='[Symbol.iterator]', demands=['DOMRectList'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMStringList', fn='[Symbol.iterator]', demands=['DOMStringList'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMTokenList', fn='[Symbol.iterator]', demands=['DOMTokenList'], returns='ArrayIterator'),
        PrototypeCall(constructor='DataTransferItemList', fn='[Symbol.iterator]', demands=['DataTransferItemList'], returns='ArrayIterator'),
        PrototypeCall(constructor='FileList', fn='[Symbol.iterator]', demands=['FileList'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormDataIterator', fn='[Symbol.iterator]', demands=['FormDataIterator'], returns='FormDataIterator'),
        PrototypeCall(constructor='FormData', fn='[Symbol.iterator]', demands=['FormData'], returns='FormDataIterator'),
        PrototypeCall(constructor='HTMLAllCollection', fn='[Symbol.iterator]', demands=['HTMLAllCollection'], returns='ArrayIterator'),
        PrototypeCall(constructor='HTMLFormControlsCollection', fn='[Symbol.iterator]', demands=['HTMLFormControlsCollection'], returns='ArrayIterator'),
        PrototypeCall(constructor='HTMLCollection', fn='[Symbol.iterator]', demands=['HTMLCollection'], returns='ArrayIterator'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='[Symbol.iterator]', demands=['HTMLOptionsCollection'], returns='ArrayIterator'),
        PrototypeCall(constructor='HTMLFormElement', fn='[Symbol.iterator]', demands=['HTMLFormElement'], returns='ArrayIterator'),
        PrototypeCall(constructor='HTMLSelectElement', fn='[Symbol.iterator]', demands=['HTMLSelectElement'], returns='ArrayIterator'),
        PrototypeCall(constructor='HeadersIterator', fn='[Symbol.iterator]', demands=['HeadersIterator'], returns='HeadersIterator'),
        PrototypeCall(constructor='Headers', fn='[Symbol.iterator]', demands=['Headers'], returns='HeadersIterator'),
        PrototypeCall(constructor='ImageTrackList', fn='[Symbol.iterator]', demands=['ImageTrackList'], returns='ArrayIterator'),
        PrototypeCall(constructor='MediaKeyStatusMapIterator', fn='[Symbol.iterator]', demands=['MediaKeyStatusMapIterator'], returns='MediaKeyStatusMapIterator'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='[Symbol.iterator]', demands=['MediaKeyStatusMap'], returns='MediaKeyStatusMapIterator'),
        PrototypeCall(constructor='MediaList', fn='[Symbol.iterator]', demands=['MediaList'], returns='ArrayIterator'),
        PrototypeCall(constructor='MimeTypeArray', fn='[Symbol.iterator]', demands=['MimeTypeArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='NamedNodeMap', fn='[Symbol.iterator]', demands=['NamedNodeMap'], returns='ArrayIterator'),
        PrototypeCall(constructor='NodeList', fn='[Symbol.iterator]', demands=['NodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='RadioNodeList', fn='[Symbol.iterator]', demands=['RadioNodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='NodeListOf', fn='[Symbol.iterator]', demands=['NodeListOf'], returns='ArrayIterator'),
        PrototypeCall(constructor='Plugin', fn='[Symbol.iterator]', demands=['Plugin'], returns='ArrayIterator'),
        PrototypeCall(constructor='PluginArray', fn='[Symbol.iterator]', demands=['PluginArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='SVGLengthList', fn='[Symbol.iterator]', demands=['SVGLengthList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SVGNumberList', fn='[Symbol.iterator]', demands=['SVGNumberList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SVGPointList', fn='[Symbol.iterator]', demands=['SVGPointList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SVGStringList', fn='[Symbol.iterator]', demands=['SVGStringList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SVGTransformList', fn='[Symbol.iterator]', demands=['SVGTransformList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SourceBufferList', fn='[Symbol.iterator]', demands=['SourceBufferList'], returns='ArrayIterator'),
        PrototypeCall(constructor='SpeechRecognitionResult', fn='[Symbol.iterator]', demands=['SpeechRecognitionResult'], returns='ArrayIterator'),
        PrototypeCall(constructor='SpeechRecognitionResultList', fn='[Symbol.iterator]', demands=['SpeechRecognitionResultList'], returns='ArrayIterator'),
        PrototypeCall(constructor='StylePropertyMapReadOnlyIterator', fn='[Symbol.iterator]', demands=['StylePropertyMapReadOnlyIterator'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='[Symbol.iterator]', demands=['StylePropertyMapReadOnly'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StylePropertyMap', fn='[Symbol.iterator]', demands=['StylePropertyMap'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StyleSheetList', fn='[Symbol.iterator]', demands=['StyleSheetList'], returns='ArrayIterator'),
        PrototypeCall(constructor='TextTrackCueList', fn='[Symbol.iterator]', demands=['TextTrackCueList'], returns='ArrayIterator'),
        PrototypeCall(constructor='TextTrackList', fn='[Symbol.iterator]', demands=['TextTrackList'], returns='ArrayIterator'),
        PrototypeCall(constructor='TouchList', fn='[Symbol.iterator]', demands=['TouchList'], returns='ArrayIterator'),
        PrototypeCall(constructor='URLSearchParamsIterator', fn='[Symbol.iterator]', demands=['URLSearchParamsIterator'], returns='URLSearchParamsIterator'),
        PrototypeCall(constructor='URLSearchParams', fn='[Symbol.iterator]', demands=['URLSearchParams'], returns='URLSearchParamsIterator'),
        PrototypeCall(constructor='BigInt64Array', fn='[Symbol.iterator]', demands=['BigInt64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='BigUint64Array', fn='[Symbol.iterator]', demands=['BigUint64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='RegExpStringIterator', fn='[Symbol.iterator]', demands=['RegExpStringIterator'], returns='RegExpStringIterator'),
        PrototypeCall(constructor='FormData', fn='[Symbol.iterator]', demands=['FormData'], returns='IterableIterator'),
        PrototypeCall(constructor='Headers', fn='[Symbol.iterator]', demands=['Headers'], returns='IterableIterator'),
        PrototypeCall(constructor='Iterable', fn='[Symbol.iterator]', demands=['Iterable'], returns='Iterator'),
        PrototypeCall(constructor='IterableIterator', fn='[Symbol.iterator]', demands=['IterableIterator'], returns='IterableIterator'),
        PrototypeCall(constructor='IteratorObject', fn='[Symbol.iterator]', demands=['IteratorObject'], returns='IteratorObject'),
        PrototypeCall(constructor='ArrayIterator', fn='[Symbol.iterator]', demands=['ArrayIterator'], returns='ArrayIterator'),
        PrototypeCall(constructor='Array', fn='[Symbol.iterator]', demands=['list'], returns='ArrayIterator'),
        PrototypeCall(constructor='ReadonlyArray', fn='[Symbol.iterator]', demands=['ReadonlyArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='IArguments', fn='[Symbol.iterator]', demands=['IArguments'], returns='ArrayIterator'),
        PrototypeCall(constructor='MapIterator', fn='[Symbol.iterator]', demands=['MapIterator'], returns='MapIterator'),
        PrototypeCall(constructor='HighlightRegistry', fn='[Symbol.iterator]', demands=['HighlightRegistry'], returns='MapIterator'),
        PrototypeCall(constructor='AudioParamMap', fn='[Symbol.iterator]', demands=['AudioParamMap'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIInputMap', fn='[Symbol.iterator]', demands=['MIDIInputMap'], returns='MapIterator'),
        PrototypeCall(constructor='EventCounts', fn='[Symbol.iterator]', demands=['EventCounts'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIOutputMap', fn='[Symbol.iterator]', demands=['MIDIOutputMap'], returns='MapIterator'),
        PrototypeCall(constructor='RTCStatsReport', fn='[Symbol.iterator]', demands=['RTCStatsReport'], returns='MapIterator'),
        PrototypeCall(constructor='SetIterator', fn='[Symbol.iterator]', demands=['SetIterator'], returns='SetIterator'),
        PrototypeCall(constructor='Highlight', fn='[Symbol.iterator]', demands=['Highlight'], returns='SetIterator'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='[Symbol.iterator]', demands=['ViewTransitionTypeSet'], returns='SetIterator'),
        PrototypeCall(constructor='FontFaceSet', fn='[Symbol.iterator]', demands=['FontFaceSet'], returns='SetIterator'),
        PrototypeCall(constructor='CustomStateSet', fn='[Symbol.iterator]', demands=['CustomStateSet'], returns='SetIterator'),
        PrototypeCall(constructor='ReadonlySet', fn='[Symbol.iterator]', demands=['ReadonlySet'], returns='SetIterator'),
        PrototypeCall(constructor='StringIterator', fn='[Symbol.iterator]', demands=['StringIterator'], returns='StringIterator'),
        PrototypeCall(constructor='String', fn='[Symbol.iterator]', demands=['str'], returns='StringIterator'),
        PrototypeCall(constructor='Int8Array', fn='[Symbol.iterator]', demands=['Int8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8Array', fn='[Symbol.iterator]', demands=['Uint8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='[Symbol.iterator]', demands=['Uint8ClampedArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int16Array', fn='[Symbol.iterator]', demands=['Int16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint16Array', fn='[Symbol.iterator]', demands=['Uint16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int32Array', fn='[Symbol.iterator]', demands=['Int32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint32Array', fn='[Symbol.iterator]', demands=['Uint32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float32Array', fn='[Symbol.iterator]', demands=['Float32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float64Array', fn='[Symbol.iterator]', demands=['Float64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Generator', fn='[Symbol.iterator]', demands=['Generator'], returns='Generator'),
        PrototypeCall(constructor='Float16Array', fn='[Symbol.iterator]', demands=['Float16Array'], returns='ArrayIterator'),
    ],
    "[Symbol.matchAll]": [
        PrototypeCall(constructor='RegExp', fn='[Symbol.matchAll]', demands=['regex'], returns='RegExpStringIterator'),
    ],
    "[Symbol.match]": [
        PrototypeCall(constructor='RegExp', fn='[Symbol.match]', demands=['regex'], returns='RegExpMatchArray'),
    ],
    "[Symbol.metadata]": [
        FieldCall(field='[Symbol.metadata]', demands=['*'], returns='DecoratorMetadata'),
        FieldCall(field='[Symbol.metadata]', demands=['*', 'DecoratorMetadata'], returns='None'),
    ],
    "[Symbol.replace]": [
        PrototypeCall(constructor='RegExp', fn='[Symbol.replace]', demands=['regex'], returns='str'),
    ],
    "[Symbol.search]": [
        PrototypeCall(constructor='RegExp', fn='[Symbol.search]', demands=['regex'], returns='float'),
    ],
    "[Symbol.species]": [
        FieldCall(field='[Symbol.species]', demands=['PromiseConstructor'], returns='PromiseConstructor'),
        FieldCall(field='[Symbol.species]', demands=['RegExpConstructor'], returns='RegExpConstructor'),
        FieldCall(field='[Symbol.species]', demands=['ArrayConstructor'], returns='ArrayConstructor'),
        FieldCall(field='[Symbol.species]', demands=['MapConstructor'], returns='MapConstructor'),
        FieldCall(field='[Symbol.species]', demands=['SetConstructor'], returns='SetConstructor'),
        FieldCall(field='[Symbol.species]', demands=['ArrayBufferConstructor'], returns='ArrayBufferConstructor'),
        FieldCall(field='[Symbol.species]', demands=['SharedArrayBufferConstructor'], returns='SharedArrayBufferConstructor'),
    ],
    "[Symbol.split]": [
        PrototypeCall(constructor='RegExp', fn='[Symbol.split]', demands=['regex'], returns='list'),
    ],
    "[Symbol.toPrimitive]": [
        PrototypeCall(constructor='Symbol', fn='[Symbol.toPrimitive]', demands=['Symbol'], returns='symbol'),
        PrototypeCall(constructor='Date', fn='[Symbol.toPrimitive]', demands=['Date'], returns='str'),
        PrototypeCall(constructor='Date', fn='[Symbol.toPrimitive]', demands=['Date'], returns='float'),
    ],
    "[Symbol.toStringTag]": [
        FieldCall(field='[Symbol.toStringTag]', demands=['BigInt'], returns='"BigInt"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['BigInt64Array'], returns='"BigInt64Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['BigUint64Array'], returns='"BigUint64Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['WeakRef'], returns='"WeakRef"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['FinalizationRegistry'], returns='"FinalizationRegistry"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Symbol'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Map'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['WeakMap'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Set'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['WeakSet'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['JSON'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['GeneratorFunction'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Math'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Promise'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['ArrayBuffer'], returns='"ArrayBuffer"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['DataView'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Int8Array'], returns='"Int8Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Uint8Array'], returns='"Uint8Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Uint8ClampedArray'], returns='"Uint8ClampedArray"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Int16Array'], returns='"Int16Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Uint16Array'], returns='"Uint16Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Int32Array'], returns='"Int32Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Uint32Array'], returns='"Uint32Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Float32Array'], returns='"Float32Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Float64Array'], returns='"Float64Array"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['DisposableStack'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['AsyncDisposableStack'], returns='str'),
        FieldCall(field='[Symbol.toStringTag]', demands=['SharedArrayBuffer'], returns='"SharedArrayBuffer"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Atomics'], returns='"Atomics"'),
        FieldCall(field='[Symbol.toStringTag]', demands=['Float16Array'], returns='"Float16Array"'),
    ],
    "[Symbol.unscopables]": [
        FieldCall(field='[Symbol.unscopables]', demands=['list'], returns='{[Kinkeyofany[]]?:boolean;}'),
        FieldCall(field='[Symbol.unscopables]', demands=['ReadonlyArray'], returns='{[Kinkeyofreadonlyany[]]?:boolean;}'),
    ],
    "[index:number]": [
        FieldCall(field='[index:number]', demands=['CSSKeyframesRule'], returns='CSSKeyframeRule'),
        FieldCall(field='[index:number]', demands=['CSSKeyframesRule', 'CSSKeyframeRule'], returns='None'),
        FieldCall(field='[index:number]', demands=['CSSNumericArray'], returns='CSSNumericValue'),
        FieldCall(field='[index:number]', demands=['CSSNumericArray', 'CSSNumericValue'], returns='None'),
        FieldCall(field='[index:number]', demands=['CSSRuleList'], returns='CSSRule'),
        FieldCall(field='[index:number]', demands=['CSSRuleList', 'CSSRule'], returns='None'),
        FieldCall(field='[index:number]', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='[index:number]', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='[index:number]', demands=['CSSTransformValue'], returns='CSSTransformComponent'),
        FieldCall(field='[index:number]', demands=['CSSTransformValue', 'CSSTransformComponent'], returns='None'),
        FieldCall(field='[index:number]', demands=['CSSUnparsedValue'], returns='CSSUnparsedSegment'),
        FieldCall(field='[index:number]', demands=['CSSUnparsedValue', 'CSSUnparsedSegment'], returns='None'),
        FieldCall(field='[index:number]', demands=['DOMRectList'], returns='DOMRect'),
        FieldCall(field='[index:number]', demands=['DOMRectList', 'DOMRect'], returns='None'),
        FieldCall(field='[index:number]', demands=['DOMStringList'], returns='str'),
        FieldCall(field='[index:number]', demands=['DOMStringList', 'str'], returns='None'),
        FieldCall(field='[index:number]', demands=['DOMTokenList'], returns='str'),
        FieldCall(field='[index:number]', demands=['DOMTokenList', 'str'], returns='None'),
        FieldCall(field='[index:number]', demands=['DataTransferItemList'], returns='DataTransferItem'),
        FieldCall(field='[index:number]', demands=['DataTransferItemList', 'DataTransferItem'], returns='None'),
        FieldCall(field='[index:number]', demands=['FileList'], returns='File'),
        FieldCall(field='[index:number]', demands=['FileList', 'File'], returns='None'),
        FieldCall(field='[index:number]', demands=['HTMLAllCollection'], returns='Element'),
        FieldCall(field='[index:number]', demands=['HTMLAllCollection', 'Element'], returns='None'),
        FieldCall(field='[index:number]', demands=['HTMLCollectionBase'], returns='Element'),
        FieldCall(field='[index:number]', demands=['HTMLCollectionBase', 'Element'], returns='None'),
        FieldCall(field='[index:number]', demands=['HTMLCollectionOf'], returns='T'),
        FieldCall(field='[index:number]', demands=['HTMLCollectionOf', 'T'], returns='None'),
        FieldCall(field='[index:number]', demands=['HTMLFormElement'], returns='Element'),
        FieldCall(field='[index:number]', demands=['HTMLFormElement', 'Element'], returns='None'),
        FieldCall(field='[index:number]', demands=['ImageTrackList'], returns='ImageTrack'),
        FieldCall(field='[index:number]', demands=['ImageTrackList', 'ImageTrack'], returns='None'),
        FieldCall(field='[index:number]', demands=['MediaList'], returns='str'),
        FieldCall(field='[index:number]', demands=['MediaList', 'str'], returns='None'),
        FieldCall(field='[index:number]', demands=['MimeTypeArray'], returns='MimeType'),
        FieldCall(field='[index:number]', demands=['MimeTypeArray', 'MimeType'], returns='None'),
        FieldCall(field='[index:number]', demands=['NamedNodeMap'], returns='Attr'),
        FieldCall(field='[index:number]', demands=['NamedNodeMap', 'Attr'], returns='None'),
        FieldCall(field='[index:number]', demands=['NodeList'], returns='Node'),
        FieldCall(field='[index:number]', demands=['NodeList', 'Node'], returns='None'),
        FieldCall(field='[index:number]', demands=['NodeListOf'], returns='TNode'),
        FieldCall(field='[index:number]', demands=['NodeListOf', 'TNode'], returns='None'),
        FieldCall(field='[index:number]', demands=['Plugin'], returns='MimeType'),
        FieldCall(field='[index:number]', demands=['Plugin', 'MimeType'], returns='None'),
        FieldCall(field='[index:number]', demands=['PluginArray'], returns='Plugin'),
        FieldCall(field='[index:number]', demands=['PluginArray', 'Plugin'], returns='None'),
        FieldCall(field='[index:number]', demands=['SVGLengthList'], returns='SVGLength'),
        FieldCall(field='[index:number]', demands=['SVGLengthList', 'SVGLength'], returns='None'),
        FieldCall(field='[index:number]', demands=['SVGNumberList'], returns='SVGNumber'),
        FieldCall(field='[index:number]', demands=['SVGNumberList', 'SVGNumber'], returns='None'),
        FieldCall(field='[index:number]', demands=['SVGPointList'], returns='DOMPoint'),
        FieldCall(field='[index:number]', demands=['SVGPointList', 'DOMPoint'], returns='None'),
        FieldCall(field='[index:number]', demands=['SVGStringList'], returns='str'),
        FieldCall(field='[index:number]', demands=['SVGStringList', 'str'], returns='None'),
        FieldCall(field='[index:number]', demands=['SVGTransformList'], returns='SVGTransform'),
        FieldCall(field='[index:number]', demands=['SVGTransformList', 'SVGTransform'], returns='None'),
        FieldCall(field='[index:number]', demands=['SourceBufferList'], returns='SourceBuffer'),
        FieldCall(field='[index:number]', demands=['SourceBufferList', 'SourceBuffer'], returns='None'),
        FieldCall(field='[index:number]', demands=['SpeechRecognitionResult'], returns='SpeechRecognitionAlternative'),
        FieldCall(field='[index:number]', demands=['SpeechRecognitionResult', 'SpeechRecognitionAlternative'], returns='None'),
        FieldCall(field='[index:number]', demands=['SpeechRecognitionResultList'], returns='SpeechRecognitionResult'),
        FieldCall(field='[index:number]', demands=['SpeechRecognitionResultList', 'SpeechRecognitionResult'], returns='None'),
        FieldCall(field='[index:number]', demands=['StyleSheetList'], returns='CSSStyleSheet'),
        FieldCall(field='[index:number]', demands=['StyleSheetList', 'CSSStyleSheet'], returns='None'),
        FieldCall(field='[index:number]', demands=['TextTrackCueList'], returns='TextTrackCue'),
        FieldCall(field='[index:number]', demands=['TextTrackCueList', 'TextTrackCue'], returns='None'),
        FieldCall(field='[index:number]', demands=['TextTrackList'], returns='TextTrack'),
        FieldCall(field='[index:number]', demands=['TextTrackList', 'TextTrack'], returns='None'),
        FieldCall(field='[index:number]', demands=['TouchList'], returns='Touch'),
        FieldCall(field='[index:number]', demands=['TouchList', 'Touch'], returns='None'),
        FieldCall(field='[index:number]', demands=['Window'], returns='Window'),
        FieldCall(field='[index:number]', demands=['Window', 'Window'], returns='None'),
        FieldCall(field='[index:number]', demands=['BigInt64Array'], returns='bigint'),
        FieldCall(field='[index:number]', demands=['BigInt64Array', 'bigint'], returns='None'),
        FieldCall(field='[index:number]', demands=['BigUint64Array'], returns='bigint'),
        FieldCall(field='[index:number]', demands=['BigUint64Array', 'bigint'], returns='None'),
        FieldCall(field='[index:number]', demands=['IArguments'], returns='*'),
        FieldCall(field='[index:number]', demands=['IArguments', '*'], returns='None'),
        FieldCall(field='[index:number]', demands=['str'], returns='str'),
        FieldCall(field='[index:number]', demands=['Int8Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Int8Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Uint8Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Uint8Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Uint8ClampedArray'], returns='float'),
        FieldCall(field='[index:number]', demands=['Uint8ClampedArray', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Int16Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Int16Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Uint16Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Uint16Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Int32Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Int32Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Uint32Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Uint32Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Float32Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Float32Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Float64Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Float64Array', 'float'], returns='None'),
        FieldCall(field='[index:number]', demands=['Float16Array'], returns='float'),
        FieldCall(field='[index:number]', demands=['Float16Array', 'float'], returns='None'),
    ],
    "[key:PropertyKey]": [
        FieldCall(field='[key:PropertyKey]', demands=['PropertyDescriptorMap'], returns='PropertyDescriptor'),
        FieldCall(field='[key:PropertyKey]', demands=['PropertyDescriptorMap', 'PropertyDescriptor'], returns='None'),
    ],
    "[key:string]": [
        FieldCall(field='[key:string]', demands=['ImportAssertions'], returns='str'),
        FieldCall(field='[key:string]', demands=['ImportAssertions', 'str'], returns='None'),
        FieldCall(field='[key:string]', demands=['ImportAttributes'], returns='str'),
        FieldCall(field='[key:string]', demands=['ImportAttributes', 'str'], returns='None'),
    ],
    "[n:number]": [
        FieldCall(field='[n:number]', demands=['ReadonlyArray'], returns='T'),
        FieldCall(field='[n:number]', demands=['ConcatArray'], returns='T'),
        FieldCall(field='[n:number]', demands=['list'], returns='T'),
        FieldCall(field='[n:number]', demands=['list', 'T'], returns='None'),
        FieldCall(field='[n:number]', demands=['ArrayLike'], returns='T'),
    ],
    "[name:number]": [
        FieldCall(field='[name:number]', demands=['HTMLSelectElement'], returns='HTMLOptionElement'),
        FieldCall(field='[name:number]', demands=['HTMLSelectElement', 'HTMLOptionElement'], returns='None'),
    ],
    "[name:string]": [
        FieldCall(field='[name:string]', demands=['DOMStringMap'], returns='str'),
        FieldCall(field='[name:string]', demands=['DOMStringMap', 'str'], returns='None'),
        FieldCall(field='[name:string]', demands=['HTMLFormElement'], returns='*'),
        FieldCall(field='[name:string]', demands=['HTMLFormElement', '*'], returns='None'),
        FieldCall(field='[name:string]', demands=['Storage'], returns='*'),
        FieldCall(field='[name:string]', demands=['Storage', '*'], returns='None'),
    ],
    "[property:string]": [
        FieldCall(field='[property:string]', demands=['ComputedKeyframe'], returns='str'),
        FieldCall(field='[property:string]', demands=['ComputedKeyframe', 'str'], returns='None'),
        FieldCall(field='[property:string]', demands=['Keyframe'], returns='str'),
        FieldCall(field='[property:string]', demands=['Keyframe', 'str'], returns='None'),
        FieldCall(field='[property:string]', demands=['PropertyIndexedKeyframes'], returns='str'),
        FieldCall(field='[property:string]', demands=['PropertyIndexedKeyframes', 'str'], returns='None'),
    ],
    "__call__": [
        PrototypeCall(constructor='EventListener', fn='__call__', demands=['EventListener'], returns='None'),
        PrototypeCall(constructor='AudioDataOutputCallback', fn='__call__', demands=['AudioDataOutputCallback'], returns='None'),
        PrototypeCall(constructor='BlobCallback', fn='__call__', demands=['BlobCallback'], returns='None'),
        PrototypeCall(constructor='DecodeErrorCallback', fn='__call__', demands=['DecodeErrorCallback'], returns='None'),
        PrototypeCall(constructor='DecodeSuccessCallback', fn='__call__', demands=['DecodeSuccessCallback'], returns='None'),
        PrototypeCall(constructor='EncodedAudioChunkOutputCallback', fn='__call__', demands=['EncodedAudioChunkOutputCallback'], returns='None'),
        PrototypeCall(constructor='EncodedVideoChunkOutputCallback', fn='__call__', demands=['EncodedVideoChunkOutputCallback'], returns='None'),
        PrototypeCall(constructor='ErrorCallback', fn='__call__', demands=['ErrorCallback'], returns='None'),
        PrototypeCall(constructor='FileCallback', fn='__call__', demands=['FileCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemEntriesCallback', fn='__call__', demands=['FileSystemEntriesCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemEntryCallback', fn='__call__', demands=['FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FrameRequestCallback', fn='__call__', demands=['FrameRequestCallback'], returns='None'),
        PrototypeCall(constructor='FunctionStringCallback', fn='__call__', demands=['FunctionStringCallback'], returns='None'),
        PrototypeCall(constructor='IdleRequestCallback', fn='__call__', demands=['IdleRequestCallback'], returns='None'),
        PrototypeCall(constructor='IntersectionObserverCallback', fn='__call__', demands=['IntersectionObserverCallback'], returns='None'),
        PrototypeCall(constructor='LockGrantedCallback', fn='__call__', demands=['LockGrantedCallback'], returns='T'),
        PrototypeCall(constructor='MediaSessionActionHandler', fn='__call__', demands=['MediaSessionActionHandler'], returns='None'),
        PrototypeCall(constructor='MutationCallback', fn='__call__', demands=['MutationCallback'], returns='None'),
        PrototypeCall(constructor='NotificationPermissionCallback', fn='__call__', demands=['NotificationPermissionCallback'], returns='None'),
        PrototypeCall(constructor='OnBeforeUnloadEventHandlerNonNull', fn='__call__', demands=['OnBeforeUnloadEventHandlerNonNull'], returns='str'),
        PrototypeCall(constructor='OnErrorEventHandlerNonNull', fn='__call__', demands=['OnErrorEventHandlerNonNull'], returns='*'),
        PrototypeCall(constructor='PerformanceObserverCallback', fn='__call__', demands=['PerformanceObserverCallback'], returns='None'),
        PrototypeCall(constructor='PositionCallback', fn='__call__', demands=['PositionCallback'], returns='None'),
        PrototypeCall(constructor='PositionErrorCallback', fn='__call__', demands=['PositionErrorCallback'], returns='None'),
        PrototypeCall(constructor='QueuingStrategySize', fn='__call__', demands=['QueuingStrategySize'], returns='float'),
        PrototypeCall(constructor='RTCPeerConnectionErrorCallback', fn='__call__', demands=['RTCPeerConnectionErrorCallback'], returns='None'),
        PrototypeCall(constructor='RTCSessionDescriptionCallback', fn='__call__', demands=['RTCSessionDescriptionCallback'], returns='None'),
        PrototypeCall(constructor='RemotePlaybackAvailabilityCallback', fn='__call__', demands=['RemotePlaybackAvailabilityCallback'], returns='None'),
        PrototypeCall(constructor='ReportingObserverCallback', fn='__call__', demands=['ReportingObserverCallback'], returns='None'),
        PrototypeCall(constructor='ResizeObserverCallback', fn='__call__', demands=['ResizeObserverCallback'], returns='None'),
        PrototypeCall(constructor='TransformerFlushCallback', fn='__call__', demands=['TransformerFlushCallback'], returns='None'),
        PrototypeCall(constructor='TransformerStartCallback', fn='__call__', demands=['TransformerStartCallback'], returns='*'),
        PrototypeCall(constructor='TransformerTransformCallback', fn='__call__', demands=['TransformerTransformCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSinkAbortCallback', fn='__call__', demands=['UnderlyingSinkAbortCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSinkCloseCallback', fn='__call__', demands=['UnderlyingSinkCloseCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSinkStartCallback', fn='__call__', demands=['UnderlyingSinkStartCallback'], returns='*'),
        PrototypeCall(constructor='UnderlyingSinkWriteCallback', fn='__call__', demands=['UnderlyingSinkWriteCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSourceCancelCallback', fn='__call__', demands=['UnderlyingSourceCancelCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSourcePullCallback', fn='__call__', demands=['UnderlyingSourcePullCallback'], returns='None'),
        PrototypeCall(constructor='UnderlyingSourceStartCallback', fn='__call__', demands=['UnderlyingSourceStartCallback'], returns='*'),
        PrototypeCall(constructor='VideoFrameOutputCallback', fn='__call__', demands=['VideoFrameOutputCallback'], returns='None'),
        PrototypeCall(constructor='VideoFrameRequestCallback', fn='__call__', demands=['VideoFrameRequestCallback'], returns='None'),
        PrototypeCall(constructor='ViewTransitionUpdateCallback', fn='__call__', demands=['ViewTransitionUpdateCallback'], returns='*'),
        PrototypeCall(constructor='VoidFunction', fn='__call__', demands=['VoidFunction'], returns='None'),
        PrototypeCall(constructor='WebCodecsErrorCallback', fn='__call__', demands=['WebCodecsErrorCallback'], returns='None'),
        PrototypeCall(constructor='BigIntConstructor', fn='__call__', demands=['BigIntConstructor'], returns='bigint'),
        PrototypeCall(constructor='AggregateErrorConstructor', fn='__call__', demands=['AggregateErrorConstructor'], returns='AggregateError'),
        PrototypeCall(constructor='ErrorConstructor', fn='__call__', demands=['ErrorConstructor'], returns='Error'),
        PrototypeCall(constructor='EvalErrorConstructor', fn='__call__', demands=['EvalErrorConstructor'], returns='EvalError'),
        PrototypeCall(constructor='RangeErrorConstructor', fn='__call__', demands=['RangeErrorConstructor'], returns='RangeError'),
        PrototypeCall(constructor='ReferenceErrorConstructor', fn='__call__', demands=['ReferenceErrorConstructor'], returns='ReferenceError'),
        PrototypeCall(constructor='SyntaxErrorConstructor', fn='__call__', demands=['SyntaxErrorConstructor'], returns='SyntaxError'),
        PrototypeCall(constructor='TypeErrorConstructor', fn='__call__', demands=['TypeErrorConstructor'], returns='TypeError'),
        PrototypeCall(constructor='URIErrorConstructor', fn='__call__', demands=['URIErrorConstructor'], returns='URIError'),
        PrototypeCall(constructor='TransformerCancelCallback', fn='__call__', demands=['TransformerCancelCallback'], returns='None'),
        PrototypeCall(constructor='SymbolConstructor', fn='__call__', demands=['SymbolConstructor'], returns='symbol'),
        PrototypeCall(constructor='ObjectConstructor', fn='__call__', demands=['ObjectConstructor'], returns='*'),
        PrototypeCall(constructor='FunctionConstructor', fn='__call__', demands=['FunctionConstructor'], returns='*'),
        PrototypeCall(constructor='StringConstructor', fn='__call__', demands=['StringConstructor'], returns='str'),
        PrototypeCall(constructor='BooleanConstructor', fn='__call__', demands=['BooleanConstructor'], returns='bool'),
        PrototypeCall(constructor='NumberConstructor', fn='__call__', demands=['NumberConstructor'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='__call__', demands=['DateConstructor'], returns='str'),
        PrototypeCall(constructor='RegExpConstructor', fn='__call__', demands=['RegExpConstructor'], returns='regex'),
        PrototypeCall(constructor='ArrayConstructor', fn='__call__', demands=['ArrayConstructor'], returns='list'),
        PrototypeCall(constructor='SuppressedErrorConstructor', fn='__call__', demands=['SuppressedErrorConstructor'], returns='SuppressedError'),
        PrototypeCall(constructor='GeneratorFunction', fn='__call__', demands=['GeneratorFunction'], returns='Generator'),
        PrototypeCall(constructor='GeneratorFunctionConstructor', fn='__call__', demands=['GeneratorFunctionConstructor'], returns='GeneratorFunction'),
        PrototypeCall(constructor='AsyncGeneratorFunction', fn='__call__', demands=['AsyncGeneratorFunction'], returns='AsyncGenerator'),
        PrototypeCall(constructor='AsyncGeneratorFunctionConstructor', fn='__call__', demands=['AsyncGeneratorFunctionConstructor'], returns='AsyncGeneratorFunction'),
    ],
    "a": [
        FieldCall(field='a', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='a', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='a', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='a', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='a', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='a', demands=['HTMLElementTagNameMap'], returns='HTMLAnchorElement'),
        FieldCall(field='a', demands=['HTMLElementTagNameMap', 'HTMLAnchorElement'], returns='None'),
        FieldCall(field='a', demands=['SVGElementTagNameMap'], returns='SVGAElement'),
        FieldCall(field='a', demands=['SVGElementTagNameMap', 'SVGAElement'], returns='None'),
    ],
    "aLink": [
        FieldCall(field='aLink', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='aLink', demands=['HTMLBodyElement', 'str'], returns='None'),
    ],
    "abbr": [
        FieldCall(field='abbr', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='abbr', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='abbr', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='abbr', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "abort": [
        FieldCall(field='abort', demands=['UnderlyingSink'], returns='UnderlyingSinkAbortCallback'),
        FieldCall(field='abort', demands=['UnderlyingSink', 'UnderlyingSinkAbortCallback'], returns='None'),
        PrototypeCall(constructor='AbortController', fn='abort', demands=['AbortController'], returns='None'),
        PrototypeCall(constructor='AbortController', fn='abort', demands=['AbortController', '*'], returns='None'),
        FieldCall(field='abort', demands=['AbortSignalEventMap'], returns='Event'),
        FieldCall(field='abort', demands=['AbortSignalEventMap', 'Event'], returns='None'),
        FieldCall(field='abort', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='abort', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='abort', demands=['FileReader'], returns='None'),
        FieldCall(field='abort', demands=['GlobalEventHandlersEventMap'], returns='UIEvent'),
        FieldCall(field='abort', demands=['GlobalEventHandlersEventMap', 'UIEvent'], returns='None'),
        FieldCall(field='abort', demands=['IDBDatabaseEventMap'], returns='Event'),
        FieldCall(field='abort', demands=['IDBDatabaseEventMap', 'Event'], returns='None'),
        FieldCall(field='abort', demands=['IDBTransactionEventMap'], returns='Event'),
        FieldCall(field='abort', demands=['IDBTransactionEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='abort', demands=['IDBTransaction'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='abort', demands=['PaymentRequest'], returns='None'),
        FieldCall(field='abort', demands=['SourceBufferEventMap'], returns='Event'),
        FieldCall(field='abort', demands=['SourceBufferEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='abort', demands=['SourceBuffer'], returns='None'),
        PrototypeCall(constructor='WebTransportSendStream', fn='abort', demands=['WebTransportSendStream'], returns='None'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='abort', demands=['FileSystemWritableFileStream'], returns='None'),
        PrototypeCall(constructor='WebTransportSendStream', fn='abort', demands=['WebTransportSendStream', '*'], returns='None'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='abort', demands=['FileSystemWritableFileStream', '*'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='abort', demands=['WebTransportWriter'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='abort', demands=['WebTransportWriter', '*'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='abort', demands=['XMLHttpRequest'], returns='None'),
        FieldCall(field='abort', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='abort', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
    ],
    "aborted": [
        FieldCall(field='aborted', demands=['AbortSignal'], returns='bool'),
    ],
    "abs": [
        PrototypeCall(constructor='Math', fn='abs', demands=['Math', 'float'], returns='float'),
    ],
    "absolute": [
        FieldCall(field='absolute', demands=['DeviceOrientationEventInit'], returns='bool'),
        FieldCall(field='absolute', demands=['DeviceOrientationEventInit', 'bool'], returns='None'),
        FieldCall(field='absolute', demands=['DeviceOrientationEvent'], returns='bool'),
    ],
    "acceleration": [
        FieldCall(field='acceleration', demands=['DeviceMotionEventInit'], returns='DeviceMotionEventAccelerationInit'),
        FieldCall(field='acceleration', demands=['DeviceMotionEventInit', 'DeviceMotionEventAccelerationInit'], returns='None'),
        FieldCall(field='acceleration', demands=['DeviceMotionEvent'], returns='DeviceMotionEventAcceleration'),
    ],
    "accelerationIncludingGravity": [
        FieldCall(field='accelerationIncludingGravity', demands=['DeviceMotionEventInit'], returns='DeviceMotionEventAccelerationInit'),
        FieldCall(field='accelerationIncludingGravity', demands=['DeviceMotionEventInit', 'DeviceMotionEventAccelerationInit'], returns='None'),
        FieldCall(field='accelerationIncludingGravity', demands=['DeviceMotionEvent'], returns='DeviceMotionEventAcceleration'),
    ],
    "accentColor": [
        FieldCall(field='accentColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='accentColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "accept": [
        FieldCall(field='accept', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='accept', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "acceptCharset": [
        FieldCall(field='acceptCharset', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='acceptCharset', demands=['HTMLFormElement', 'str'], returns='None'),
    ],
    "access": [
        FieldCall(field='access', demands=['GPUStorageTextureBindingLayout'], returns='GPUStorageTextureAccess'),
        FieldCall(field='access', demands=['GPUStorageTextureBindingLayout', 'GPUStorageTextureAccess'], returns='None'),
        FieldCall(field='access', demands=['ClassMethodDecoratorContext'], returns='{has(object:This):boolean;get(object:This):Value;}'),
        FieldCall(field='access', demands=['ClassGetterDecoratorContext'], returns='{has(object:This):boolean;get(object:This):Value;}'),
        FieldCall(field='access', demands=['ClassSetterDecoratorContext'], returns='{has(object:This):boolean;set(object:This,value:Value):void;}'),
        FieldCall(field='access', demands=['ClassAccessorDecoratorContext'], returns='{has(object:This):boolean;get(object:This):Value;set(object:This,value:Value):void;}'),
        FieldCall(field='access', demands=['ClassFieldDecoratorContext'], returns='{has(object:This):boolean;get(object:This):Value;set(object:This,value:Value):void;}'),
    ],
    "accessKey": [
        FieldCall(field='accessKey', demands=['HTMLElement'], returns='str'),
        FieldCall(field='accessKey', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "accessKeyLabel": [
        FieldCall(field='accessKeyLabel', demands=['HTMLElement'], returns='str'),
    ],
    "accuracy": [
        FieldCall(field='accuracy', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "acos": [
        PrototypeCall(constructor='Math', fn='acos', demands=['Math', 'float'], returns='float'),
    ],
    "acosh": [
        PrototypeCall(constructor='Math', fn='acosh', demands=['Math', 'float'], returns='float'),
    ],
    "acronym": [
        FieldCall(field='acronym', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='acronym', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "action": [
        FieldCall(field='action', demands=['MediaSessionActionDetails'], returns='MediaSessionAction'),
        FieldCall(field='action', demands=['MediaSessionActionDetails', 'MediaSessionAction'], returns='None'),
        FieldCall(field='action', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='action', demands=['HTMLFormElement', 'str'], returns='None'),
    ],
    "activation": [
        FieldCall(field='activation', demands=['PageSwapEventInit'], returns='NavigationActivation'),
        FieldCall(field='activation', demands=['PageSwapEventInit', 'NavigationActivation'], returns='None'),
        FieldCall(field='activation', demands=['PageSwapEvent'], returns='NavigationActivation'),
    ],
    "active": [
        FieldCall(field='active', demands=['RTCOutboundRtpStreamStats'], returns='bool'),
        FieldCall(field='active', demands=['RTCOutboundRtpStreamStats', 'bool'], returns='None'),
        FieldCall(field='active', demands=['RTCRtpEncodingParameters'], returns='bool'),
        FieldCall(field='active', demands=['RTCRtpEncodingParameters', 'bool'], returns='None'),
        FieldCall(field='active', demands=['MediaStream'], returns='bool'),
        FieldCall(field='active', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
    ],
    "activeCues": [
        FieldCall(field='activeCues', demands=['TextTrack'], returns='TextTrackCueList'),
    ],
    "activeDuration": [
        FieldCall(field='activeDuration', demands=['ComputedEffectTiming'], returns='CSSNumberish'),
        FieldCall(field='activeDuration', demands=['ComputedEffectTiming', 'CSSNumberish'], returns='None'),
    ],
    "activeElement": [
        FieldCall(field='activeElement', demands=['DocumentOrShadowRoot'], returns='Element'),
    ],
    "activeSourceBuffers": [
        FieldCall(field='activeSourceBuffers', demands=['MediaSource'], returns='SourceBufferList'),
    ],
    "activeTexture": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='activeTexture', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='activeTexture', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "actualBoundingBoxAscent": [
        FieldCall(field='actualBoundingBoxAscent', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxDescent": [
        FieldCall(field='actualBoundingBoxDescent', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxLeft": [
        FieldCall(field='actualBoundingBoxLeft', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxRight": [
        FieldCall(field='actualBoundingBoxRight', demands=['TextMetrics'], returns='float'),
    ],
    "add": [
        PrototypeCall(constructor='CSSNumericValue', fn='add', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='add', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='add', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='Cache', fn='add', demands=['Cache', 'RequestInfo'], returns='None'),
        PrototypeCall(constructor='DOMTokenList', fn='add', demands=['DOMTokenList', '*'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='add', demands=['DataTransferItemList', 'str', 'str'], returns='DataTransferItem'),
        PrototypeCall(constructor='DataTransferItemList', fn='add', demands=['DataTransferItemList', 'File'], returns='DataTransferItem'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptionElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptionElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='add', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='add', demands=['IDBObjectStore', '*', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='Atomics', fn='add', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Highlight', fn='add', demands=['Highlight', 'T'], returns='Set'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='add', demands=['ViewTransitionTypeSet', 'T'], returns='Set'),
        PrototypeCall(constructor='FontFaceSet', fn='add', demands=['FontFaceSet', 'T'], returns='Set'),
        PrototypeCall(constructor='CustomStateSet', fn='add', demands=['CustomStateSet', 'T'], returns='Set'),
        PrototypeCall(constructor='WeakSet', fn='add', demands=['WeakSet', 'T'], returns='WeakSet'),
        PrototypeCall(constructor='Atomics', fn='add', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "addAll": [
        PrototypeCall(constructor='Cache', fn='addAll', demands=['Cache', 'list'], returns='None'),
        PrototypeCall(constructor='Cache', fn='addAll', demands=['Cache', 'Iterable'], returns='None'),
    ],
    "addColorStop": [
        PrototypeCall(constructor='CanvasGradient', fn='addColorStop', demands=['CanvasGradient', 'float', 'str'], returns='None'),
    ],
    "addCue": [
        PrototypeCall(constructor='TextTrack', fn='addCue', demands=['TextTrack', 'TextTrackCue'], returns='None'),
    ],
    "addEventListener": [
        PrototypeCall(constructor='AbortSignal', fn='addEventListener', demands=['AbortSignal', 'K', '(this:AbortSignal,ev:AbortSignalEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='addEventListener', demands=['AbortSignal', 'K', '(this:AbortSignal,ev:AbortSignalEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='addEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='addEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Animation', fn='addEventListener', demands=['Animation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Animation', fn='addEventListener', demands=['Animation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Animation', fn='addEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Animation', fn='addEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'K', '(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'K', '(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='addEventListener', demands=['AudioDecoder', 'K', '(this:AudioDecoder,ev:AudioDecoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='addEventListener', demands=['AudioDecoder', 'K', '(this:AudioDecoder,ev:AudioDecoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='addEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='addEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='addEventListener', demands=['AudioEncoder', 'K', '(this:AudioEncoder,ev:AudioEncoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='addEventListener', demands=['AudioEncoder', 'K', '(this:AudioEncoder,ev:AudioEncoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='addEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='addEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='addEventListener', demands=['AudioScheduledSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='addEventListener', demands=['AudioScheduledSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='addEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='addEventListener', demands=['AudioScheduledSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='addEventListener', demands=['AudioScheduledSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='addEventListener', demands=['AudioWorkletNode', 'K', '(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='addEventListener', demands=['AudioWorkletNode', 'K', '(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='addEventListener', demands=['AudioWorkletNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='addEventListener', demands=['AudioWorkletNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='addEventListener', demands=['BaseAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='addEventListener', demands=['BaseAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='addEventListener', demands=['AudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='addEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='addEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='addEventListener', demands=['BroadcastChannel', 'K', '(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='addEventListener', demands=['BroadcastChannel', 'K', '(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='addEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='addEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'K', '(this:CSSAnimation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='addEventListener', demands=['CSSAnimation', 'K', '(this:CSSAnimation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'K', '(this:CSSTransition,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='addEventListener', demands=['CSSTransition', 'K', '(this:CSSTransition,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'K', '(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='addEventListener', demands=['ConstantSourceNode', 'K', '(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='addEventListener', demands=['CookieStore', 'K', '(this:CookieStore,ev:CookieStoreEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='addEventListener', demands=['CookieStore', 'K', '(this:CookieStore,ev:CookieStoreEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='addEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='addEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Element', fn='addEventListener', demands=['Element', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Element', fn='addEventListener', demands=['Element', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Element', fn='addEventListener', demands=['Element', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Element', fn='addEventListener', demands=['Element', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'K', '(this:EventSource,ev:EventSourceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'K', '(this:EventSource,ev:EventSourceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'str', '(this:EventSource,event:MessageEvent)=>any'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'str', '(this:EventSource,event:MessageEvent)=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='addEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='addEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='addEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='addEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='addEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='addEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='addEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='addEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='addEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='addEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='addEventListener', demands=['Clipboard', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='addEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='addEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='addEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='addEventListener', demands=['AudioNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='addEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='addEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='addEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='addEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='addEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='addEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='addEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='addEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='addEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='addEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='addEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='addEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='addEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Notification', fn='addEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='addEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='addEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='addEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='addEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Performance', fn='addEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='addEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='addEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='addEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='addEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='addEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='addEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='addEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='addEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='addEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='addEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Node', fn='addEventListener', demands=['Node', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='addEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='addEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='addEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='addEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='addEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='addEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='addEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='addEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='addEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='addEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='addEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='addEventListener', demands=['Clipboard', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='addEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='addEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='addEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='addEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Animation', fn='addEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='addEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='addEventListener', demands=['AudioNode', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='addEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='addEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='addEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='addEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='addEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='addEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='addEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='addEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='addEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='addEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='addEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='addEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='addEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='addEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='addEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Notification', fn='addEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='addEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='addEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='addEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='addEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='addEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Performance', fn='addEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='addEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='addEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='addEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='addEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='addEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='addEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='addEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='addEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='addEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='addEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='addEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='addEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Node', fn='addEventListener', demands=['Node', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='addEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject', 'AddEventListenerOptions'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='addEventListener', demands=['FileReader', 'K', '(this:FileReader,ev:FileReaderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='addEventListener', demands=['FileReader', 'K', '(this:FileReader,ev:FileReaderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='addEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='addEventListener', demands=['FontFaceSet', 'K', '(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='addEventListener', demands=['FontFaceSet', 'K', '(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='addEventListener', demands=['FontFaceSet', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='addEventListener', demands=['FontFaceSet', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='addEventListener', demands=['Document', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'K', '(this:HTMLDocument,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='addEventListener', demands=['HTMLDocument', 'K', '(this:HTMLDocument,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='addEventListener', demands=['HTMLElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='addEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='addEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='addEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='addEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='addEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='addEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='addEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='addEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='addEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='addEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='addEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='addEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='addEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='addEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='addEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='addEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='addEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='addEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='addEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='addEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='addEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='addEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='addEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='addEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='addEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='addEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='addEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='addEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='addEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='addEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='addEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='addEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='addEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='addEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'K', '(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='addEventListener', demands=['HTMLModElement', 'K', '(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='addEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='addEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='addEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='addEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='addEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='addEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='addEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='addEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='addEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='addEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='addEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='addEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='addEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='addEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='addEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='addEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='addEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='addEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='addEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='addEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='addEventListener', demands=['HTMLTableDataCellElement', 'K', '(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='addEventListener', demands=['HTMLTableDataCellElement', 'K', '(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='addEventListener', demands=['HTMLTableDataCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='addEventListener', demands=['HTMLTableDataCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='addEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='addEventListener', demands=['HTMLTableHeaderCellElement', 'K', '(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='addEventListener', demands=['HTMLTableHeaderCellElement', 'K', '(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='addEventListener', demands=['HTMLTableHeaderCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='addEventListener', demands=['HTMLTableHeaderCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='addEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='addEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='addEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='addEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='addEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='addEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='addEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='addEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='addEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='addEventListener', demands=['IDBDatabase', 'K', '(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='addEventListener', demands=['IDBDatabase', 'K', '(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='addEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='addEventListener', demands=['IDBRequest', 'K', '(this:IDBRequest'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBRequest'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='addEventListener', demands=['IDBRequest', 'K', '(this:IDBRequest', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='addEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBRequest', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='addEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='addEventListener', demands=['IDBTransaction', 'K', '(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='addEventListener', demands=['IDBTransaction', 'K', '(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='addEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='addEventListener', demands=['MIDIAccess', 'K', '(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='addEventListener', demands=['MIDIAccess', 'K', '(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='addEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'K', '(this:MIDIInput,ev:MIDIInputEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'K', '(this:MIDIInput,ev:MIDIInputEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'K', '(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'K', '(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='addEventListener', demands=['MIDIPort', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='addEventListener', demands=['MIDIPort', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='addEventListener', demands=['MIDIOutput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='addEventListener', demands=['MIDIInput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='addEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:MathMLElement,ev:MathMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='addEventListener', demands=['MathMLElement', 'K', '(this:MathMLElement,ev:MathMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='addEventListener', demands=['MediaDevices', 'K', '(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='addEventListener', demands=['MediaDevices', 'K', '(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='addEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='addEventListener', demands=['MediaKeySession', 'K', '(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='addEventListener', demands=['MediaKeySession', 'K', '(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='addEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='addEventListener', demands=['MediaQueryList', 'K', '(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='addEventListener', demands=['MediaQueryList', 'K', '(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='addEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='addEventListener', demands=['MediaRecorder', 'K', '(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='addEventListener', demands=['MediaRecorder', 'K', '(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='addEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='addEventListener', demands=['MediaSource', 'K', '(this:MediaSource,ev:MediaSourceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='addEventListener', demands=['MediaSource', 'K', '(this:MediaSource,ev:MediaSourceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='addEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='addEventListener', demands=['MediaStream', 'K', '(this:MediaStream,ev:MediaStreamEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='addEventListener', demands=['MediaStream', 'K', '(this:MediaStream,ev:MediaStreamEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='addEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='addEventListener', demands=['MediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='addEventListener', demands=['MediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='addEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='addEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'K', '(this:MessagePort,ev:MessagePortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='addEventListener', demands=['MessagePort', 'K', '(this:MessagePort,ev:MessagePortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='addEventListener', demands=['NavigationHistoryEntry', 'K', '(this:NavigationHistoryEntry,ev:NavigationHistoryEntryEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='addEventListener', demands=['NavigationHistoryEntry', 'K', '(this:NavigationHistoryEntry,ev:NavigationHistoryEntryEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='addEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Notification', fn='addEventListener', demands=['Notification', 'K', '(this:Notification,ev:NotificationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Notification', fn='addEventListener', demands=['Notification', 'K', '(this:Notification,ev:NotificationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Notification', fn='addEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'K', '(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='addEventListener', demands=['OfflineAudioContext', 'K', '(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='addEventListener', demands=['OffscreenCanvas', 'K', '(this:OffscreenCanvas,ev:OffscreenCanvasEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='addEventListener', demands=['OffscreenCanvas', 'K', '(this:OffscreenCanvas,ev:OffscreenCanvasEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='addEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'K', '(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='addEventListener', demands=['OscillatorNode', 'K', '(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='addEventListener', demands=['PaymentRequest', 'K', '(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='addEventListener', demands=['PaymentRequest', 'K', '(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='addEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='addEventListener', demands=['PaymentResponse', 'K', '(this:PaymentResponse,ev:PaymentResponseEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='addEventListener', demands=['PaymentResponse', 'K', '(this:PaymentResponse,ev:PaymentResponseEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='addEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Performance', fn='addEventListener', demands=['Performance', 'K', '(this:Performance,ev:PerformanceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Performance', fn='addEventListener', demands=['Performance', 'K', '(this:Performance,ev:PerformanceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Performance', fn='addEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='addEventListener', demands=['PermissionStatus', 'K', '(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='addEventListener', demands=['PermissionStatus', 'K', '(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='addEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='addEventListener', demands=['PictureInPictureWindow', 'K', '(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='addEventListener', demands=['PictureInPictureWindow', 'K', '(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='addEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='addEventListener', demands=['RTCDTMFSender', 'K', '(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='addEventListener', demands=['RTCDTMFSender', 'K', '(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='addEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='addEventListener', demands=['RTCDataChannel', 'K', '(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='addEventListener', demands=['RTCDataChannel', 'K', '(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='addEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='addEventListener', demands=['RTCDtlsTransport', 'K', '(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='addEventListener', demands=['RTCDtlsTransport', 'K', '(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='addEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='addEventListener', demands=['RTCIceTransport', 'K', '(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='addEventListener', demands=['RTCIceTransport', 'K', '(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='addEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addEventListener', demands=['RTCPeerConnection', 'K', '(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addEventListener', demands=['RTCPeerConnection', 'K', '(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='addEventListener', demands=['RTCSctpTransport', 'K', '(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='addEventListener', demands=['RTCSctpTransport', 'K', '(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='addEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='addEventListener', demands=['RemotePlayback', 'K', '(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='addEventListener', demands=['RemotePlayback', 'K', '(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='addEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'K', '(this:SVGAElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'K', '(this:SVGAElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='addEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='addEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='addEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'K', '(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'K', '(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'K', '(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'K', '(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'K', '(this:SVGDescElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'K', '(this:SVGDescElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='addEventListener', demands=['SVGElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='addEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='addEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='addEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='addEventListener', demands=['SVGDescElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='addEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='addEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='addEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='addEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='addEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='addEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='addEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='addEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='addEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='addEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='addEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='addEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='addEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='addEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='addEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='addEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='addEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='addEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='addEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='addEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='addEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='addEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='addEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'K', '(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='addEventListener', demands=['SVGFETileElement', 'K', '(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='addEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'K', '(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='addEventListener', demands=['SVGFilterElement', 'K', '(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'K', '(this:SVGGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'K', '(this:SVGGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='addEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='addEventListener', demands=['SVGCircleElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='addEventListener', demands=['SVGGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='addEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='addEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='addEventListener', demands=['SVGGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='addEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='addEventListener', demands=['SVGAElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='addEventListener', demands=['SVGDefsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'K', '(this:SVGImageElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='addEventListener', demands=['SVGImageElement', 'K', '(this:SVGImageElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'K', '(this:SVGLineElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='addEventListener', demands=['SVGLineElement', 'K', '(this:SVGLineElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='addEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'K', '(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='addEventListener', demands=['SVGMPathElement', 'K', '(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='addEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'K', '(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='addEventListener', demands=['SVGMaskElement', 'K', '(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='addEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'K', '(this:SVGPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='addEventListener', demands=['SVGPathElement', 'K', '(this:SVGPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'K', '(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='addEventListener', demands=['SVGPatternElement', 'K', '(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='addEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='addEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='addEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'K', '(this:SVGRectElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='addEventListener', demands=['SVGRectElement', 'K', '(this:SVGRectElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'K', '(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='addEventListener', demands=['SVGScriptElement', 'K', '(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'K', '(this:SVGSetElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='addEventListener', demands=['SVGSetElement', 'K', '(this:SVGSetElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'K', '(this:SVGStopElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='addEventListener', demands=['SVGStopElement', 'K', '(this:SVGStopElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'K', '(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='addEventListener', demands=['SVGStyleElement', 'K', '(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='addEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='addEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='addEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='addEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='addEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='addEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='addEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'K', '(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='addEventListener', demands=['SVGTitleElement', 'K', '(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'K', '(this:SVGUseElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='addEventListener', demands=['SVGUseElement', 'K', '(this:SVGUseElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'K', '(this:SVGViewElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='addEventListener', demands=['SVGViewElement', 'K', '(this:SVGViewElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='addEventListener', demands=['ScreenOrientation', 'K', '(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='addEventListener', demands=['ScreenOrientation', 'K', '(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='addEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='addEventListener', demands=['ScriptProcessorNode', 'K', '(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='addEventListener', demands=['ScriptProcessorNode', 'K', '(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='addEventListener', demands=['ScriptProcessorNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='addEventListener', demands=['ScriptProcessorNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'K', '(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='addEventListener', demands=['ServiceWorker', 'K', '(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='addEventListener', demands=['ServiceWorkerContainer', 'K', '(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='addEventListener', demands=['ServiceWorkerContainer', 'K', '(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='addEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='addEventListener', demands=['ServiceWorkerRegistration', 'K', '(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='addEventListener', demands=['ServiceWorkerRegistration', 'K', '(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='addEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='addEventListener', demands=['ShadowRoot', 'K', '(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='addEventListener', demands=['ShadowRoot', 'K', '(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='addEventListener', demands=['ShadowRoot', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='addEventListener', demands=['ShadowRoot', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'K', '(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='addEventListener', demands=['SharedWorker', 'K', '(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='addEventListener', demands=['SourceBuffer', 'K', '(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='addEventListener', demands=['SourceBuffer', 'K', '(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='addEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='addEventListener', demands=['SourceBufferList', 'K', '(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='addEventListener', demands=['SourceBufferList', 'K', '(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='addEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='addEventListener', demands=['SpeechSynthesis', 'K', '(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='addEventListener', demands=['SpeechSynthesis', 'K', '(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='addEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='addEventListener', demands=['SpeechSynthesisUtterance', 'K', '(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='addEventListener', demands=['SpeechSynthesisUtterance', 'K', '(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='addEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='addEventListener', demands=['TextTrack', 'K', '(this:TextTrack,ev:TextTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='addEventListener', demands=['TextTrack', 'K', '(this:TextTrack,ev:TextTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='addEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='addEventListener', demands=['TextTrackCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='addEventListener', demands=['TextTrackCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='addEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='addEventListener', demands=['TextTrackList', 'K', '(this:TextTrackList,ev:TextTrackListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='addEventListener', demands=['TextTrackList', 'K', '(this:TextTrackList,ev:TextTrackListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='addEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'K', '(this:VTTCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='addEventListener', demands=['VTTCue', 'K', '(this:VTTCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='addEventListener', demands=['VideoDecoder', 'K', '(this:VideoDecoder,ev:VideoDecoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='addEventListener', demands=['VideoDecoder', 'K', '(this:VideoDecoder,ev:VideoDecoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='addEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='addEventListener', demands=['VideoEncoder', 'K', '(this:VideoEncoder,ev:VideoEncoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='addEventListener', demands=['VideoEncoder', 'K', '(this:VideoEncoder,ev:VideoEncoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='addEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='addEventListener', demands=['VisualViewport', 'K', '(this:VisualViewport,ev:VisualViewportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='addEventListener', demands=['VisualViewport', 'K', '(this:VisualViewport,ev:VisualViewportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='addEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='addEventListener', demands=['WakeLockSentinel', 'K', '(this:WakeLockSentinel,ev:WakeLockSentinelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='addEventListener', demands=['WakeLockSentinel', 'K', '(this:WakeLockSentinel,ev:WakeLockSentinelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='addEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='addEventListener', demands=['WebSocket', 'K', '(this:WebSocket,ev:WebSocketEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='addEventListener', demands=['WebSocket', 'K', '(this:WebSocket,ev:WebSocketEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='addEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K])=>any'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K])=>any', 'bool'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['str', 'EventListenerOrEventListenerObject'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='addEventListener', demands=['HTMLFrameSetElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='addEventListener', demands=['Window', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='addEventListener', demands=['HTMLBodyElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='addEventListener', demands=['SVGSVGElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:Worker,ev:WorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='addEventListener', demands=['Worker', 'K', '(this:Worker,ev:WorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'K', '(this:XMLDocument,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='addEventListener', demands=['XMLDocument', 'K', '(this:XMLDocument,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='addEventListener', demands=['XMLHttpRequestEventTarget', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='addEventListener', demands=['XMLHttpRequestEventTarget', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='addEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='addEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='addEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K],)=>any'], returns='None'),
        DirectCall(fn='addEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K],)=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='addEventListener', demands=['Clipboard', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='addEventListener', demands=['AudioNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Node', fn='addEventListener', demands=['Node', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
    ],
    "addIceCandidate": [
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection', 'RTCIceCandidateInit'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection', 'RTCIceCandidateInit', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "addInitializer": [
        PrototypeCall(constructor='ClassDecoratorContext', fn='addInitializer', demands=['ClassDecoratorContext', '(this:Class)=>void'], returns='None'),
        PrototypeCall(constructor='ClassMethodDecoratorContext', fn='addInitializer', demands=['ClassMethodDecoratorContext', '(this:This)=>void'], returns='None'),
        PrototypeCall(constructor='ClassGetterDecoratorContext', fn='addInitializer', demands=['ClassGetterDecoratorContext', '(this:This)=>void'], returns='None'),
        PrototypeCall(constructor='ClassSetterDecoratorContext', fn='addInitializer', demands=['ClassSetterDecoratorContext', '(this:This)=>void'], returns='None'),
        PrototypeCall(constructor='ClassAccessorDecoratorContext', fn='addInitializer', demands=['ClassAccessorDecoratorContext', '(this:This)=>void'], returns='None'),
        PrototypeCall(constructor='ClassFieldDecoratorContext', fn='addInitializer', demands=['ClassFieldDecoratorContext', '(this:This)=>void'], returns='None'),
    ],
    "addListener": [
        PrototypeCall(constructor='MediaQueryList', fn='addListener', demands=['MediaQueryList', '((this:MediaQueryList,ev:MediaQueryListEvent)=>any)'], returns='None'),
    ],
    "addModule": [
        PrototypeCall(constructor='Worklet', fn='addModule', demands=['Worklet', 'str'], returns='None'),
        PrototypeCall(constructor='AudioWorklet', fn='addModule', demands=['AudioWorklet', 'str'], returns='None'),
        PrototypeCall(constructor='Worklet', fn='addModule', demands=['Worklet', 'str', 'WorkletOptions'], returns='None'),
        PrototypeCall(constructor='AudioWorklet', fn='addModule', demands=['AudioWorklet', 'str', 'WorkletOptions'], returns='None'),
    ],
    "addPath": [
        PrototypeCall(constructor='Path2D', fn='addPath', demands=['Path2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='addPath', demands=['Path2D', 'Path2D', 'DOMMatrix2DInit'], returns='None'),
    ],
    "addRange": [
        PrototypeCall(constructor='Selection', fn='addRange', demands=['Selection', 'Range'], returns='None'),
    ],
    "addRule": [
        PrototypeCall(constructor='CSSStyleSheet', fn='addRule', demands=['CSSStyleSheet'], returns='float'),
        PrototypeCall(constructor='CSSStyleSheet', fn='addRule', demands=['CSSStyleSheet', 'str'], returns='float'),
        PrototypeCall(constructor='CSSStyleSheet', fn='addRule', demands=['CSSStyleSheet', 'str', 'str'], returns='float'),
        PrototypeCall(constructor='CSSStyleSheet', fn='addRule', demands=['CSSStyleSheet', 'str', 'str', 'float'], returns='float'),
    ],
    "addSourceBuffer": [
        PrototypeCall(constructor='MediaSource', fn='addSourceBuffer', demands=['MediaSource', 'str'], returns='SourceBuffer'),
    ],
    "addTextTrack": [
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addTextTrack', demands=['HTMLAudioElement', 'TextTrackKind'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addTextTrack', demands=['HTMLVideoElement', 'TextTrackKind'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addTextTrack', demands=['HTMLAudioElement', 'TextTrackKind', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addTextTrack', demands=['HTMLVideoElement', 'TextTrackKind', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind', 'str', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLAudioElement', fn='addTextTrack', demands=['HTMLAudioElement', 'TextTrackKind', 'str', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLVideoElement', fn='addTextTrack', demands=['HTMLVideoElement', 'TextTrackKind', 'str', 'str'], returns='TextTrack'),
    ],
    "addTrack": [
        PrototypeCall(constructor='MediaStream', fn='addTrack', demands=['MediaStream', 'MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addTrack', demands=['RTCPeerConnection', 'MediaStreamTrack', '*'], returns='RTCRtpSender'),
    ],
    "addTransceiver": [
        PrototypeCall(constructor='RTCPeerConnection', fn='addTransceiver', demands=['RTCPeerConnection', 'MediaStreamTrack'], returns='RTCRtpTransceiver'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addTransceiver', demands=['RTCPeerConnection', 'MediaStreamTrack', 'RTCRtpTransceiverInit'], returns='RTCRtpTransceiver'),
    ],
    "addedNodes": [
        FieldCall(field='addedNodes', demands=['MutationRecord'], returns='NodeList'),
    ],
    "additionalData": [
        FieldCall(field='additionalData', demands=['AesGcmParams'], returns='BufferSource'),
        FieldCall(field='additionalData', demands=['AesGcmParams', 'AllowSharedBufferSource'], returns='None'),
    ],
    "additionalDisplayItems": [
        FieldCall(field='additionalDisplayItems', demands=['PaymentDetailsModifier'], returns='list'),
        FieldCall(field='additionalDisplayItems', demands=['PaymentDetailsModifier', 'list'], returns='None'),
    ],
    "additiveSymbols": [
        FieldCall(field='additiveSymbols', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='additiveSymbols', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "address": [
        FieldCall(field='address', demands=['RTCPeerConnectionIceErrorEventInit'], returns='str'),
        FieldCall(field='address', demands=['RTCPeerConnectionIceErrorEventInit', 'str'], returns='None'),
        FieldCall(field='address', demands=['RTCIceCandidate'], returns='str'),
        FieldCall(field='address', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
        FieldCall(field='address', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='address', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "addressLine": [
        FieldCall(field='addressLine', demands=['AddressErrors'], returns='str'),
        FieldCall(field='addressLine', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='addressLine', demands=['PaymentAddress'], returns='ReadonlyArray'),
    ],
    "addsourcebuffer": [
        FieldCall(field='addsourcebuffer', demands=['SourceBufferListEventMap'], returns='Event'),
        FieldCall(field='addsourcebuffer', demands=['SourceBufferListEventMap', 'Event'], returns='None'),
    ],
    "addtrack": [
        FieldCall(field='addtrack', demands=['MediaStreamEventMap'], returns='MediaStreamTrackEvent'),
        FieldCall(field='addtrack', demands=['MediaStreamEventMap', 'MediaStreamTrackEvent'], returns='None'),
        FieldCall(field='addtrack', demands=['TextTrackListEventMap'], returns='TrackEvent'),
        FieldCall(field='addtrack', demands=['TextTrackListEventMap', 'TrackEvent'], returns='None'),
    ],
    "adopt": [
        PrototypeCall(constructor='DisposableStack', fn='adopt', demands=['DisposableStack', 'T', '(value:T)=>void'], returns='T'),
        PrototypeCall(constructor='AsyncDisposableStack', fn='adopt', demands=['AsyncDisposableStack', 'T', '(value:T)=>PromiseLike'], returns='T'),
    ],
    "adoptNode": [
        PrototypeCall(constructor='Document', fn='adoptNode', demands=['Document', 'T'], returns='T'),
        PrototypeCall(constructor='HTMLDocument', fn='adoptNode', demands=['HTMLDocument', 'T'], returns='T'),
        PrototypeCall(constructor='XMLDocument', fn='adoptNode', demands=['XMLDocument', 'T'], returns='T'),
    ],
    "adoptedStyleSheets": [
        FieldCall(field='adoptedStyleSheets', demands=['DocumentOrShadowRoot'], returns='list'),
        FieldCall(field='adoptedStyleSheets', demands=['DocumentOrShadowRoot', 'list'], returns='None'),
    ],
    "advance": [
        PrototypeCall(constructor='IDBCursor', fn='advance', demands=['IDBCursor', 'float'], returns='None'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='advance', demands=['IDBCursorWithValue', 'float'], returns='None'),
    ],
    "advanced": [
        FieldCall(field='advanced', demands=['MediaTrackConstraints'], returns='list'),
        FieldCall(field='advanced', demands=['MediaTrackConstraints', 'list'], returns='None'),
    ],
    "after": [
        PrototypeCall(constructor='DocumentType', fn='after', demands=['DocumentType', '*'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='after', demands=['CharacterData', '*'], returns='None'),
        PrototypeCall(constructor='Element', fn='after', demands=['Element', '*'], returns='None'),
    ],
    "afterprint": [
        FieldCall(field='afterprint', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='afterprint', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "album": [
        FieldCall(field='album', demands=['MediaMetadataInit'], returns='str'),
        FieldCall(field='album', demands=['MediaMetadataInit', 'str'], returns='None'),
        FieldCall(field='album', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='album', demands=['MediaMetadata', 'str'], returns='None'),
    ],
    "alert": [
        DirectCall(fn='alert', receiver=None, demands=[], returns='None'),
        DirectCall(fn='alert', receiver=None, demands=['*'], returns='None'),
        FieldCall(field='alert', demands=['Window'], returns='(message?:string)=>void'),
        FieldCall(field='alert', demands=['Window', '(message?:string)=>void'], returns='None'),
    ],
    "alg": [
        FieldCall(field='alg', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='alg', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='alg', demands=['PublicKeyCredentialParameters'], returns='COSEAlgorithmIdentifier'),
        FieldCall(field='alg', demands=['PublicKeyCredentialParameters', 'COSEAlgorithmIdentifier'], returns='None'),
    ],
    "algorithm": [
        FieldCall(field='algorithm', demands=['RTCDtlsFingerprint'], returns='str'),
        FieldCall(field='algorithm', demands=['RTCDtlsFingerprint', 'str'], returns='None'),
        FieldCall(field='algorithm', demands=['WebTransportHash'], returns='str'),
        FieldCall(field='algorithm', demands=['WebTransportHash', 'str'], returns='None'),
        FieldCall(field='algorithm', demands=['CryptoKey'], returns='KeyAlgorithm'),
    ],
    "align": [
        FieldCall(field='align', demands=['HTMLDivElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLDivElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLHRElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLHRElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLHeadingElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLHeadingElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLLegendElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLLegendElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLParagraphElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLParagraphElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableCaptionElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableCaptionElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableColElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableColElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableRowElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableRowElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['HTMLTableSectionElement'], returns='str'),
        FieldCall(field='align', demands=['HTMLTableSectionElement', 'str'], returns='None'),
        FieldCall(field='align', demands=['SVGPreserveAspectRatio'], returns='float'),
        FieldCall(field='align', demands=['SVGPreserveAspectRatio', 'float'], returns='None'),
        FieldCall(field='align', demands=['VTTCue'], returns='AlignSetting'),
        FieldCall(field='align', demands=['VTTCue', 'AlignSetting'], returns='None'),
    ],
    "alignContent": [
        FieldCall(field='alignContent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='alignContent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "alignItems": [
        FieldCall(field='alignItems', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='alignItems', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "alignSelf": [
        FieldCall(field='alignSelf', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='alignSelf', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "alignmentBaseline": [
        FieldCall(field='alignmentBaseline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='alignmentBaseline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "alinkColor": [
        FieldCall(field='alinkColor', demands=['Document'], returns='str'),
        FieldCall(field='alinkColor', demands=['Document', 'str'], returns='None'),
    ],
    "all": [
        FieldCall(field='all', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='all', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='all', demands=['Document'], returns='HTMLAllCollection'),
        PrototypeCall(constructor='PromiseConstructor', fn='all', demands=['PromiseConstructor', 'Iterable<T'], returns='list'),
        PrototypeCall(constructor='PromiseConstructor', fn='all', demands=['PromiseConstructor', 'T'], returns='{-readonly[PinkeyofT]:Awaited'),
    ],
    "allSettled": [
        PrototypeCall(constructor='PromiseConstructor', fn='allSettled', demands=['PromiseConstructor', 'T'], returns='{-readonly[PinkeyofT]:PromiseSettledResult'),
        PrototypeCall(constructor='PromiseConstructor', fn='allSettled', demands=['PromiseConstructor', 'Iterable<T'], returns='list'),
    ],
    "allocationSize": [
        PrototypeCall(constructor='AudioData', fn='allocationSize', demands=['AudioData', 'AudioDataCopyToOptions'], returns='float'),
        PrototypeCall(constructor='VideoFrame', fn='allocationSize', demands=['VideoFrame'], returns='float'),
        PrototypeCall(constructor='VideoFrame', fn='allocationSize', demands=['VideoFrame', 'VideoFrameCopyToOptions'], returns='float'),
    ],
    "allow": [
        FieldCall(field='allow', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='allow', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "allowCredentials": [
        FieldCall(field='allowCredentials', demands=['PublicKeyCredentialRequestOptions'], returns='list'),
        FieldCall(field='allowCredentials', demands=['PublicKeyCredentialRequestOptions', 'list'], returns='None'),
        FieldCall(field='allowCredentials', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='list'),
        FieldCall(field='allowCredentials', demands=['PublicKeyCredentialRequestOptionsJSON', 'list'], returns='None'),
    ],
    "allowFullscreen": [
        FieldCall(field='allowFullscreen', demands=['HTMLIFrameElement'], returns='bool'),
        FieldCall(field='allowFullscreen', demands=['HTMLIFrameElement', 'bool'], returns='None'),
    ],
    "allowPooling": [
        FieldCall(field='allowPooling', demands=['WebTransportOptions'], returns='bool'),
        FieldCall(field='allowPooling', demands=['WebTransportOptions', 'bool'], returns='None'),
    ],
    "alpha": [
        FieldCall(field='alpha', demands=['CanvasRenderingContext2DSettings'], returns='bool'),
        FieldCall(field='alpha', demands=['CanvasRenderingContext2DSettings', 'bool'], returns='None'),
        FieldCall(field='alpha', demands=['DeviceMotionEventRotationRateInit'], returns='float'),
        FieldCall(field='alpha', demands=['DeviceMotionEventRotationRateInit', 'float'], returns='None'),
        FieldCall(field='alpha', demands=['DeviceOrientationEventInit'], returns='float'),
        FieldCall(field='alpha', demands=['DeviceOrientationEventInit', 'float'], returns='None'),
        FieldCall(field='alpha', demands=['ImageBitmapRenderingContextSettings'], returns='bool'),
        FieldCall(field='alpha', demands=['ImageBitmapRenderingContextSettings', 'bool'], returns='None'),
        FieldCall(field='alpha', demands=['VideoEncoderConfig'], returns='AlphaOption'),
        FieldCall(field='alpha', demands=['VideoEncoderConfig', 'AlphaOption'], returns='None'),
        FieldCall(field='alpha', demands=['VideoFrameInit'], returns='AlphaOption'),
        FieldCall(field='alpha', demands=['VideoFrameInit', 'AlphaOption'], returns='None'),
        FieldCall(field='alpha', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='alpha', demands=['WebGLContextAttributes', 'bool'], returns='None'),
        FieldCall(field='alpha', demands=['DeviceMotionEventRotationRate'], returns='float'),
        FieldCall(field='alpha', demands=['DeviceOrientationEvent'], returns='float'),
        FieldCall(field='alpha', demands=['GPUBlendState'], returns='GPUBlendComponent'),
        FieldCall(field='alpha', demands=['GPUBlendState', 'GPUBlendComponent'], returns='None'),
    ],
    "alphaMode": [
        FieldCall(field='alphaMode', demands=['GPUCanvasConfiguration'], returns='GPUCanvasAlphaMode'),
        FieldCall(field='alphaMode', demands=['GPUCanvasConfiguration', 'GPUCanvasAlphaMode'], returns='None'),
    ],
    "alphaToCoverageEnabled": [
        FieldCall(field='alphaToCoverageEnabled', demands=['GPUMultisampleState'], returns='bool'),
        FieldCall(field='alphaToCoverageEnabled', demands=['GPUMultisampleState', 'bool'], returns='None'),
    ],
    "alphabeticBaseline": [
        FieldCall(field='alphabeticBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "alt": [
        FieldCall(field='alt', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLAreaElement', 'str'], returns='None'),
        FieldCall(field='alt', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='alt', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "altKey": [
        FieldCall(field='altKey', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='altKey', demands=['EventModifierInit', 'bool'], returns='None'),
        FieldCall(field='altKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='altKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='altKey', demands=['TouchEvent'], returns='bool'),
    ],
    "altitude": [
        FieldCall(field='altitude', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "altitudeAccuracy": [
        FieldCall(field='altitudeAccuracy', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "altitudeAngle": [
        FieldCall(field='altitudeAngle', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='altitudeAngle', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='altitudeAngle', demands=['TouchInit'], returns='float'),
        FieldCall(field='altitudeAngle', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='altitudeAngle', demands=['PointerEvent'], returns='float'),
    ],
    "amount": [
        FieldCall(field='amount', demands=['PaymentItem'], returns='PaymentCurrencyAmount'),
        FieldCall(field='amount', demands=['PaymentItem', 'PaymentCurrencyAmount'], returns='None'),
        FieldCall(field='amount', demands=['PaymentShippingOption'], returns='PaymentCurrencyAmount'),
        FieldCall(field='amount', demands=['PaymentShippingOption', 'PaymentCurrencyAmount'], returns='None'),
    ],
    "amplitude": [
        FieldCall(field='amplitude', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "ancestorOrigins": [
        FieldCall(field='ancestorOrigins', demands=['Location'], returns='DOMStringList'),
    ],
    "anchor": [
        PrototypeCall(constructor='String', fn='anchor', demands=['str', 'str'], returns='str'),
    ],
    "anchorNode": [
        FieldCall(field='anchorNode', demands=['Selection'], returns='Node'),
    ],
    "anchorOffset": [
        FieldCall(field='anchorOffset', demands=['Selection'], returns='float'),
    ],
    "anchors": [
        FieldCall(field='anchors', demands=['Document'], returns='HTMLCollectionOf'),
    ],
    "and": [
        PrototypeCall(constructor='Atomics', fn='and', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='and', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "angle": [
        FieldCall(field='angle', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='angle', demands=['CSSNumericType', 'float'], returns='None'),
        FieldCall(field='angle', demands=['CSSRotate'], returns='CSSNumericValue'),
        FieldCall(field='angle', demands=['CSSRotate', 'CSSNumericValue'], returns='None'),
        FieldCall(field='angle', demands=['SVGTransform'], returns='float'),
        FieldCall(field='angle', demands=['ScreenOrientation'], returns='float'),
    ],
    "animVal": [
        FieldCall(field='animVal', demands=['SVGAnimatedAngle'], returns='SVGAngle'),
        FieldCall(field='animVal', demands=['SVGAnimatedBoolean'], returns='bool'),
        FieldCall(field='animVal', demands=['SVGAnimatedEnumeration'], returns='float'),
        FieldCall(field='animVal', demands=['SVGAnimatedInteger'], returns='float'),
        FieldCall(field='animVal', demands=['SVGAnimatedLength'], returns='SVGLength'),
        FieldCall(field='animVal', demands=['SVGAnimatedLengthList'], returns='SVGLengthList'),
        FieldCall(field='animVal', demands=['SVGAnimatedNumber'], returns='float'),
        FieldCall(field='animVal', demands=['SVGAnimatedNumberList'], returns='SVGNumberList'),
        FieldCall(field='animVal', demands=['SVGAnimatedPreserveAspectRatio'], returns='SVGPreserveAspectRatio'),
        FieldCall(field='animVal', demands=['SVGAnimatedRect'], returns='DOMRectReadOnly'),
        FieldCall(field='animVal', demands=['SVGAnimatedString'], returns='str'),
        FieldCall(field='animVal', demands=['SVGAnimatedTransformList'], returns='SVGTransformList'),
    ],
    "animate": [
        PrototypeCall(constructor='Element', fn='animate', demands=['Element', 'list'], returns='Animation'),
        PrototypeCall(constructor='Element', fn='animate', demands=['Element', 'list', 'float'], returns='Animation'),
        FieldCall(field='animate', demands=['SVGElementTagNameMap'], returns='SVGAnimateElement'),
        FieldCall(field='animate', demands=['SVGElementTagNameMap', 'SVGAnimateElement'], returns='None'),
    ],
    "animateMotion": [
        FieldCall(field='animateMotion', demands=['SVGElementTagNameMap'], returns='SVGAnimateMotionElement'),
        FieldCall(field='animateMotion', demands=['SVGElementTagNameMap', 'SVGAnimateMotionElement'], returns='None'),
    ],
    "animateTransform": [
        FieldCall(field='animateTransform', demands=['SVGElementTagNameMap'], returns='SVGAnimateTransformElement'),
        FieldCall(field='animateTransform', demands=['SVGElementTagNameMap', 'SVGAnimateTransformElement'], returns='None'),
    ],
    "animated": [
        FieldCall(field='animated', demands=['ImageTrack'], returns='bool'),
    ],
    "animatedPoints": [
        FieldCall(field='animatedPoints', demands=['SVGAnimatedPoints'], returns='SVGPointList'),
    ],
    "animation": [
        FieldCall(field='animation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationComposition": [
        FieldCall(field='animationComposition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationComposition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationDelay": [
        FieldCall(field='animationDelay', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationDelay', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationDirection": [
        FieldCall(field='animationDirection', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationDirection', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationDuration": [
        FieldCall(field='animationDuration', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationDuration', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationFillMode": [
        FieldCall(field='animationFillMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationFillMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationIterationCount": [
        FieldCall(field='animationIterationCount', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationIterationCount', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationName": [
        FieldCall(field='animationName', demands=['AnimationEventInit'], returns='str'),
        FieldCall(field='animationName', demands=['AnimationEventInit', 'str'], returns='None'),
        FieldCall(field='animationName', demands=['AnimationEvent'], returns='str'),
        FieldCall(field='animationName', demands=['CSSAnimation'], returns='str'),
        FieldCall(field='animationName', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationName', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationPlayState": [
        FieldCall(field='animationPlayState', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationPlayState', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationTimingFunction": [
        FieldCall(field='animationTimingFunction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='animationTimingFunction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "animationcancel": [
        FieldCall(field='animationcancel', demands=['GlobalEventHandlersEventMap'], returns='AnimationEvent'),
        FieldCall(field='animationcancel', demands=['GlobalEventHandlersEventMap', 'AnimationEvent'], returns='None'),
    ],
    "animationend": [
        FieldCall(field='animationend', demands=['GlobalEventHandlersEventMap'], returns='AnimationEvent'),
        FieldCall(field='animationend', demands=['GlobalEventHandlersEventMap', 'AnimationEvent'], returns='None'),
    ],
    "animationiteration": [
        FieldCall(field='animationiteration', demands=['GlobalEventHandlersEventMap'], returns='AnimationEvent'),
        FieldCall(field='animationiteration', demands=['GlobalEventHandlersEventMap', 'AnimationEvent'], returns='None'),
    ],
    "animationsPaused": [
        PrototypeCall(constructor='SVGSVGElement', fn='animationsPaused', demands=['SVGSVGElement'], returns='bool'),
    ],
    "animationstart": [
        FieldCall(field='animationstart', demands=['GlobalEventHandlersEventMap'], returns='AnimationEvent'),
        FieldCall(field='animationstart', demands=['GlobalEventHandlersEventMap', 'AnimationEvent'], returns='None'),
    ],
    "annotation": [
        FieldCall(field='annotation', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='annotation', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "annotation-xml": [
        FieldCall(field='annotation-xml', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='annotation-xml', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "antialias": [
        FieldCall(field='antialias', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='antialias', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "any": [
        PrototypeCall(constructor='PromiseConstructor', fn='any', demands=['PromiseConstructor', 'T'], returns='Awaited'),
        PrototypeCall(constructor='PromiseConstructor', fn='any', demands=['PromiseConstructor', 'Iterable<T'], returns='Awaited'),
    ],
    "appCodeName": [
        FieldCall(field='appCodeName', demands=['NavigatorID'], returns='str'),
    ],
    "appName": [
        FieldCall(field='appName', demands=['NavigatorID'], returns='str'),
    ],
    "appVersion": [
        FieldCall(field='appVersion', demands=['NavigatorID'], returns='str'),
    ],
    "appearance": [
        FieldCall(field='appearance', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='appearance', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "append": [
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'Blob'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'Blob', 'str'], returns='None'),
        PrototypeCall(constructor='Headers', fn='append', demands=['Headers', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='append', demands=['Element', '*'], returns='None'),
        PrototypeCall(constructor='Document', fn='append', demands=['Document', '*'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='append', demands=['DocumentFragment', '*'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='append', demands=['StylePropertyMap', 'str', '*'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='append', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'str', 'str'], returns='None'),
    ],
    "appendBuffer": [
        PrototypeCall(constructor='SourceBuffer', fn='appendBuffer', demands=['SourceBuffer', 'AllowSharedBufferSource'], returns='None'),
    ],
    "appendChild": [
        PrototypeCall(constructor='Node', fn='appendChild', demands=['Node', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentType', fn='appendChild', demands=['DocumentType', 'T'], returns='T'),
        PrototypeCall(constructor='CharacterData', fn='appendChild', demands=['CharacterData', 'T'], returns='T'),
        PrototypeCall(constructor='Element', fn='appendChild', demands=['Element', 'T'], returns='T'),
        PrototypeCall(constructor='Attr', fn='appendChild', demands=['Attr', 'T'], returns='T'),
        PrototypeCall(constructor='Document', fn='appendChild', demands=['Document', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentFragment', fn='appendChild', demands=['DocumentFragment', 'T'], returns='T'),
    ],
    "appendData": [
        PrototypeCall(constructor='CharacterData', fn='appendData', demands=['CharacterData', 'str'], returns='None'),
        PrototypeCall(constructor='Text', fn='appendData', demands=['Text', 'str'], returns='None'),
        PrototypeCall(constructor='ProcessingInstruction', fn='appendData', demands=['ProcessingInstruction', 'str'], returns='None'),
        PrototypeCall(constructor='Comment', fn='appendData', demands=['Comment', 'str'], returns='None'),
    ],
    "appendItem": [
        PrototypeCall(constructor='SVGLengthList', fn='appendItem', demands=['SVGLengthList', 'SVGLength'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='appendItem', demands=['SVGNumberList', 'SVGNumber'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='appendItem', demands=['SVGPointList', 'DOMPoint'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='appendItem', demands=['SVGStringList', 'str'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='appendItem', demands=['SVGTransformList', 'SVGTransform'], returns='SVGTransform'),
    ],
    "appendMedium": [
        PrototypeCall(constructor='MediaList', fn='appendMedium', demands=['MediaList', 'str'], returns='None'),
    ],
    "appendRule": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='appendRule', demands=['CSSKeyframesRule', 'str'], returns='None'),
    ],
    "appendWindowEnd": [
        FieldCall(field='appendWindowEnd', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='appendWindowEnd', demands=['SourceBuffer', 'float'], returns='None'),
    ],
    "appendWindowStart": [
        FieldCall(field='appendWindowStart', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='appendWindowStart', demands=['SourceBuffer', 'float'], returns='None'),
    ],
    "appid": [
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientInputs'], returns='str'),
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientInputs', 'str'], returns='None'),
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientInputsJSON'], returns='str'),
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientInputsJSON', 'str'], returns='None'),
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientOutputs'], returns='bool'),
        FieldCall(field='appid', demands=['AuthenticationExtensionsClientOutputs', 'bool'], returns='None'),
    ],
    "applet": [
        FieldCall(field='applet', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='applet', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "applets": [
        FieldCall(field='applets', demands=['Document'], returns='HTMLCollection'),
    ],
    "applicationServerKey": [
        FieldCall(field='applicationServerKey', demands=['PushSubscriptionOptionsInit'], returns='BufferSource'),
        FieldCall(field='applicationServerKey', demands=['PushSubscriptionOptionsInit', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='applicationServerKey', demands=['PushSubscriptionOptions'], returns='ArrayBuffer'),
    ],
    "apply": [
        PrototypeCall(constructor='Function', fn='apply', demands=['*', '*', '*'], returns='*'),
        PrototypeCall(constructor='Function', fn='apply', demands=['*', '*', '*', '*'], returns='*'),
        PrototypeCall(constructor='CallableFunction', fn='apply', demands=['CallableFunction', '(this:T)=>R', 'T'], returns='R'),
        PrototypeCall(constructor='CallableFunction', fn='apply', demands=['CallableFunction', '(this:T,...args:A)=>R', 'T', 'A'], returns='R'),
        PrototypeCall(constructor='NewableFunction', fn='apply', demands=['NewableFunction', 'new()=>T', 'T'], returns='None'),
        PrototypeCall(constructor='NewableFunction', fn='apply', demands=['NewableFunction', 'new(...args:A)=>T', 'T', 'A'], returns='None'),
        PrototypeCall(constructor='ProxyHandler', fn='apply', demands=['ProxyHandler', 'T', '*', 'list'], returns='*'),
    ],
    "applyConstraints": [
        PrototypeCall(constructor='MediaStreamTrack', fn='applyConstraints', demands=['MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='applyConstraints', demands=['CanvasCaptureMediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='applyConstraints', demands=['MediaStreamTrack', 'MediaTrackConstraints'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='applyConstraints', demands=['CanvasCaptureMediaStreamTrack', 'MediaTrackConstraints'], returns='None'),
    ],
    "arc": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arc', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arc', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arc', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arc', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arc', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arc', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
    ],
    "arcTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arcTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arcTo', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arcTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "archive": [
        FieldCall(field='archive', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='archive', demands=['HTMLObjectElement', 'str'], returns='None'),
    ],
    "area": [
        FieldCall(field='area', demands=['HTMLElementTagNameMap'], returns='HTMLAreaElement'),
        FieldCall(field='area', demands=['HTMLElementTagNameMap', 'HTMLAreaElement'], returns='None'),
    ],
    "areas": [
        FieldCall(field='areas', demands=['HTMLMapElement'], returns='HTMLCollection'),
    ],
    "arguments": [
        FieldCall(field='arguments', demands=['*'], returns='*'),
        FieldCall(field='arguments', demands=['*', '*'], returns='None'),
    ],
    "ariaActiveDescendantElement": [
        FieldCall(field='ariaActiveDescendantElement', demands=['ARIAMixin'], returns='Element'),
        FieldCall(field='ariaActiveDescendantElement', demands=['ARIAMixin', 'Element'], returns='None'),
    ],
    "ariaAtomic": [
        FieldCall(field='ariaAtomic', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaAtomic', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaAutoComplete": [
        FieldCall(field='ariaAutoComplete', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaAutoComplete', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaBrailleLabel": [
        FieldCall(field='ariaBrailleLabel', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaBrailleLabel', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaBrailleRoleDescription": [
        FieldCall(field='ariaBrailleRoleDescription', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaBrailleRoleDescription', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaBusy": [
        FieldCall(field='ariaBusy', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaBusy', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaChecked": [
        FieldCall(field='ariaChecked', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaChecked', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaColCount": [
        FieldCall(field='ariaColCount', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaColCount', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaColIndex": [
        FieldCall(field='ariaColIndex', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaColIndex', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaColIndexText": [
        FieldCall(field='ariaColIndexText', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaColIndexText', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaColSpan": [
        FieldCall(field='ariaColSpan', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaColSpan', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaControlsElements": [
        FieldCall(field='ariaControlsElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaControlsElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaCurrent": [
        FieldCall(field='ariaCurrent', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaCurrent', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaDescribedByElements": [
        FieldCall(field='ariaDescribedByElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaDescribedByElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaDescription": [
        FieldCall(field='ariaDescription', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaDescription', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaDetailsElements": [
        FieldCall(field='ariaDetailsElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaDetailsElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaDisabled": [
        FieldCall(field='ariaDisabled', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaDisabled', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaErrorMessageElements": [
        FieldCall(field='ariaErrorMessageElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaErrorMessageElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaExpanded": [
        FieldCall(field='ariaExpanded', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaExpanded', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaFlowToElements": [
        FieldCall(field='ariaFlowToElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaFlowToElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaHasPopup": [
        FieldCall(field='ariaHasPopup', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaHasPopup', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaHidden": [
        FieldCall(field='ariaHidden', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaHidden', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaInvalid": [
        FieldCall(field='ariaInvalid', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaInvalid', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaKeyShortcuts": [
        FieldCall(field='ariaKeyShortcuts', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaKeyShortcuts', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaLabel": [
        FieldCall(field='ariaLabel', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaLabel', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaLabelledByElements": [
        FieldCall(field='ariaLabelledByElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaLabelledByElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaLevel": [
        FieldCall(field='ariaLevel', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaLevel', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaLive": [
        FieldCall(field='ariaLive', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaLive', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaModal": [
        FieldCall(field='ariaModal', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaModal', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaMultiLine": [
        FieldCall(field='ariaMultiLine', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaMultiLine', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaMultiSelectable": [
        FieldCall(field='ariaMultiSelectable', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaMultiSelectable', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaOrientation": [
        FieldCall(field='ariaOrientation', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaOrientation', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaOwnsElements": [
        FieldCall(field='ariaOwnsElements', demands=['ARIAMixin'], returns='ReadonlyArray<Element>'),
        FieldCall(field='ariaOwnsElements', demands=['ARIAMixin', 'ReadonlyArray'], returns='None'),
    ],
    "ariaPlaceholder": [
        FieldCall(field='ariaPlaceholder', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaPlaceholder', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaPosInSet": [
        FieldCall(field='ariaPosInSet', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaPosInSet', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaPressed": [
        FieldCall(field='ariaPressed', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaPressed', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaReadOnly": [
        FieldCall(field='ariaReadOnly', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaReadOnly', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRelevant": [
        FieldCall(field='ariaRelevant', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRelevant', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRequired": [
        FieldCall(field='ariaRequired', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRequired', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRoleDescription": [
        FieldCall(field='ariaRoleDescription', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRoleDescription', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRowCount": [
        FieldCall(field='ariaRowCount', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRowCount', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRowIndex": [
        FieldCall(field='ariaRowIndex', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRowIndex', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRowIndexText": [
        FieldCall(field='ariaRowIndexText', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRowIndexText', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaRowSpan": [
        FieldCall(field='ariaRowSpan', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaRowSpan', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaSelected": [
        FieldCall(field='ariaSelected', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaSelected', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaSetSize": [
        FieldCall(field='ariaSetSize', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaSetSize', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaSort": [
        FieldCall(field='ariaSort', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaSort', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaValueMax": [
        FieldCall(field='ariaValueMax', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaValueMax', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaValueMin": [
        FieldCall(field='ariaValueMin', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaValueMin', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaValueNow": [
        FieldCall(field='ariaValueNow', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaValueNow', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "ariaValueText": [
        FieldCall(field='ariaValueText', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='ariaValueText', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "arrayBuffer": [
        PrototypeCall(constructor='Blob', fn='arrayBuffer', demands=['Blob'], returns='ArrayBuffer'),
        PrototypeCall(constructor='File', fn='arrayBuffer', demands=['File'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Request', fn='arrayBuffer', demands=['Request'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Response', fn='arrayBuffer', demands=['Response'], returns='ArrayBuffer'),
    ],
    "arrayStride": [
        FieldCall(field='arrayStride', demands=['GPUVertexBufferLayout'], returns='float'),
        FieldCall(field='arrayStride', demands=['GPUVertexBufferLayout', 'float'], returns='None'),
    ],
    "article": [
        FieldCall(field='article', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='article', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "artist": [
        FieldCall(field='artist', demands=['MediaMetadataInit'], returns='str'),
        FieldCall(field='artist', demands=['MediaMetadataInit', 'str'], returns='None'),
        FieldCall(field='artist', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='artist', demands=['MediaMetadata', 'str'], returns='None'),
    ],
    "artwork": [
        FieldCall(field='artwork', demands=['MediaMetadataInit'], returns='list'),
        FieldCall(field='artwork', demands=['MediaMetadataInit', 'list'], returns='None'),
        FieldCall(field='artwork', demands=['MediaMetadata'], returns='ReadonlyArray'),
        FieldCall(field='artwork', demands=['MediaMetadata', 'ReadonlyArray'], returns='None'),
    ],
    "as": [
        FieldCall(field='as', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='as', demands=['HTMLLinkElement', 'str'], returns='None'),
    ],
    "asIntN": [
        PrototypeCall(constructor='BigIntConstructor', fn='asIntN', demands=['BigIntConstructor', 'float', 'bigint'], returns='bigint'),
    ],
    "asUintN": [
        PrototypeCall(constructor='BigIntConstructor', fn='asUintN', demands=['BigIntConstructor', 'float', 'bigint'], returns='bigint'),
    ],
    "ascentOverride": [
        FieldCall(field='ascentOverride', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='ascentOverride', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='ascentOverride', demands=['FontFace'], returns='str'),
        FieldCall(field='ascentOverride', demands=['FontFace', 'str'], returns='None'),
    ],
    "aside": [
        FieldCall(field='aside', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='aside', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "asin": [
        PrototypeCall(constructor='Math', fn='asin', demands=['Math', 'float'], returns='float'),
    ],
    "asinh": [
        PrototypeCall(constructor='Math', fn='asinh', demands=['Math', 'float'], returns='float'),
    ],
    "aspectRatio": [
        FieldCall(field='aspectRatio', demands=['MediaTrackCapabilities'], returns='DoubleRange'),
        FieldCall(field='aspectRatio', demands=['MediaTrackCapabilities', 'DoubleRange'], returns='None'),
        FieldCall(field='aspectRatio', demands=['MediaTrackConstraintSet'], returns='ConstrainDouble'),
        FieldCall(field='aspectRatio', demands=['MediaTrackConstraintSet', 'ConstrainDouble'], returns='None'),
        FieldCall(field='aspectRatio', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='aspectRatio', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='aspectRatio', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='aspectRatio', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='aspectRatio', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='aspectRatio', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "assert": [
        PrototypeCall(constructor='Console', fn='assert', demands=['Console', 'bool'], returns='None'),
        PrototypeCall(constructor='Console', fn='assert', demands=['Console', 'bool', '*'], returns='None'),
        FieldCall(field='assert', demands=['ImportCallOptions'], returns='ImportAssertions'),
        FieldCall(field='assert', demands=['ImportCallOptions', 'ImportAssertions'], returns='None'),
    ],
    "assign": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assign', demands=['HTMLSlotElement', '*'], returns='None'),
        PrototypeCall(constructor='Location', fn='assign', demands=['Location', 'str'], returns='None'),
        PrototypeCall(constructor='ObjectConstructor', fn='assign', demands=['ObjectConstructor', 'T', 'U'], returns='T&U'),
        PrototypeCall(constructor='ObjectConstructor', fn='assign', demands=['ObjectConstructor', 'T', 'U', 'V'], returns='T&U&V'),
        PrototypeCall(constructor='ObjectConstructor', fn='assign', demands=['ObjectConstructor', 'T', 'U', 'V', 'W'], returns='T&U&V&W'),
        PrototypeCall(constructor='ObjectConstructor', fn='assign', demands=['ObjectConstructor', 'dict', '*'], returns='*'),
    ],
    "assignedElements": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedElements', demands=['HTMLSlotElement'], returns='list'),
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedElements', demands=['HTMLSlotElement', 'AssignedNodesOptions'], returns='list'),
    ],
    "assignedNodes": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedNodes', demands=['HTMLSlotElement'], returns='list'),
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedNodes', demands=['HTMLSlotElement', 'AssignedNodesOptions'], returns='list'),
    ],
    "assignedSlot": [
        FieldCall(field='assignedSlot', demands=['Slottable'], returns='HTMLSlotElement'),
    ],
    "async": [
        FieldCall(field='async', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='async', demands=['HTMLScriptElement', 'bool'], returns='None'),
    ],
    "asyncDispose": [
        FieldCall(field='asyncDispose', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "asyncIterator": [
        FieldCall(field='asyncIterator', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "at": [
        PrototypeCall(constructor='Array', fn='at', demands=['list', 'float'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='at', demands=['ReadonlyArray', 'float'], returns='T'),
        PrototypeCall(constructor='Int8Array', fn='at', demands=['Int8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='at', demands=['Uint8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='at', demands=['Uint8ClampedArray', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='at', demands=['Int16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='at', demands=['Uint16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='at', demands=['Int32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='at', demands=['Uint32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='at', demands=['Float32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='at', demands=['Float64Array', 'float'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='at', demands=['BigInt64Array', 'float'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='at', demands=['BigUint64Array', 'float'], returns='bigint'),
        PrototypeCall(constructor='String', fn='at', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='at', demands=['Float16Array', 'float'], returns='float'),
    ],
    "atan": [
        PrototypeCall(constructor='Math', fn='atan', demands=['Math', 'float'], returns='float'),
    ],
    "atan2": [
        PrototypeCall(constructor='Math', fn='atan2', demands=['Math', 'float', 'float'], returns='float'),
    ],
    "atanh": [
        PrototypeCall(constructor='Math', fn='atanh', demands=['Math', 'float'], returns='float'),
    ],
    "atob": [
        DirectCall(fn='atob', receiver=None, demands=['str'], returns='str'),
    ],
    "atomicWrite": [
        PrototypeCall(constructor='WebTransportWriter', fn='atomicWrite', demands=['WebTransportWriter', '*'], returns='None'),
    ],
    "attachInternals": [
        PrototypeCall(constructor='HTMLElement', fn='attachInternals', demands=['HTMLElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLHeadElement', fn='attachInternals', demands=['HTMLHeadElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLModElement', fn='attachInternals', demands=['HTMLModElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='attachInternals', demands=['HTMLDetailsElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableElement', fn='attachInternals', demands=['HTMLTableElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDialogElement', fn='attachInternals', demands=['HTMLDialogElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLImageElement', fn='attachInternals', demands=['HTMLImageElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='attachInternals', demands=['HTMLOptGroupElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDListElement', fn='attachInternals', demands=['HTMLDListElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='attachInternals', demands=['HTMLTemplateElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTitleElement', fn='attachInternals', demands=['HTMLTitleElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLPreElement', fn='attachInternals', demands=['HTMLPreElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='attachInternals', demands=['HTMLAnchorElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLPictureElement', fn='attachInternals', demands=['HTMLPictureElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='attachInternals', demands=['HTMLTableRowElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='attachInternals', demands=['HTMLTableSectionElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='attachInternals', demands=['HTMLFrameSetElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLBaseElement', fn='attachInternals', demands=['HTMLBaseElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLFontElement', fn='attachInternals', demands=['HTMLFontElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLAreaElement', fn='attachInternals', demands=['HTMLAreaElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLOListElement', fn='attachInternals', demands=['HTMLOListElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLBodyElement', fn='attachInternals', demands=['HTMLBodyElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLFormElement', fn='attachInternals', demands=['HTMLFormElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLSelectElement', fn='attachInternals', demands=['HTMLSelectElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='attachInternals', demands=['HTMLTableCaptionElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLScriptElement', fn='attachInternals', demands=['HTMLScriptElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLLIElement', fn='attachInternals', demands=['HTMLLIElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLStyleElement', fn='attachInternals', demands=['HTMLStyleElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='attachInternals', demands=['HTMLTextAreaElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDivElement', fn='attachInternals', demands=['HTMLDivElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLProgressElement', fn='attachInternals', demands=['HTMLProgressElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='attachInternals', demands=['HTMLIFrameElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMeterElement', fn='attachInternals', demands=['HTMLMeterElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='attachInternals', demands=['HTMLHeadingElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLObjectElement', fn='attachInternals', demands=['HTMLObjectElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='attachInternals', demands=['HTMLTableCellElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLLegendElement', fn='attachInternals', demands=['HTMLLegendElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDataListElement', fn='attachInternals', demands=['HTMLDataListElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLUListElement', fn='attachInternals', demands=['HTMLUListElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLLabelElement', fn='attachInternals', demands=['HTMLLabelElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLButtonElement', fn='attachInternals', demands=['HTMLButtonElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='attachInternals', demands=['HTMLParagraphElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='attachInternals', demands=['HTMLDirectoryElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLSourceElement', fn='attachInternals', demands=['HTMLSourceElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMenuElement', fn='attachInternals', demands=['HTMLMenuElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTrackElement', fn='attachInternals', demands=['HTMLTrackElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='attachInternals', demands=['HTMLQuoteElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLSpanElement', fn='attachInternals', demands=['HTMLSpanElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLOutputElement', fn='attachInternals', demands=['HTMLOutputElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='attachInternals', demands=['HTMLMarqueeElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMediaElement', fn='attachInternals', demands=['HTMLMediaElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLInputElement', fn='attachInternals', demands=['HTMLInputElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='attachInternals', demands=['HTMLCanvasElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTableColElement', fn='attachInternals', demands=['HTMLTableColElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLDataElement', fn='attachInternals', demands=['HTMLDataElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLParamElement', fn='attachInternals', demands=['HTMLParamElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMapElement', fn='attachInternals', demands=['HTMLMapElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='attachInternals', demands=['HTMLUnknownElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLHRElement', fn='attachInternals', demands=['HTMLHRElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='attachInternals', demands=['HTMLFieldSetElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLBRElement', fn='attachInternals', demands=['HTMLBRElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLOptionElement', fn='attachInternals', demands=['HTMLOptionElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLLinkElement', fn='attachInternals', demands=['HTMLLinkElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLMetaElement', fn='attachInternals', demands=['HTMLMetaElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='attachInternals', demands=['HTMLHtmlElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLTimeElement', fn='attachInternals', demands=['HTMLTimeElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLSlotElement', fn='attachInternals', demands=['HTMLSlotElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='attachInternals', demands=['HTMLEmbedElement'], returns='ElementInternals'),
        PrototypeCall(constructor='HTMLFrameElement', fn='attachInternals', demands=['HTMLFrameElement'], returns='ElementInternals'),
    ],
    "attachShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='attachShader', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='attachShader', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
    ],
    "attachShadow": [
        PrototypeCall(constructor='Element', fn='attachShadow', demands=['Element', 'ShadowRootInit'], returns='ShadowRoot'),
        PrototypeCall(constructor='MathMLElement', fn='attachShadow', demands=['MathMLElement', 'ShadowRootInit'], returns='ShadowRoot'),
        PrototypeCall(constructor='SVGElement', fn='attachShadow', demands=['SVGElement', 'ShadowRootInit'], returns='ShadowRoot'),
        PrototypeCall(constructor='HTMLElement', fn='attachShadow', demands=['HTMLElement', 'ShadowRootInit'], returns='ShadowRoot'),
    ],
    "attack": [
        FieldCall(field='attack', demands=['DynamicsCompressorOptions'], returns='float'),
        FieldCall(field='attack', demands=['DynamicsCompressorOptions', 'float'], returns='None'),
        FieldCall(field='attack', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "attestation": [
        FieldCall(field='attestation', demands=['PublicKeyCredentialCreationOptions'], returns='AttestationConveyancePreference'),
        FieldCall(field='attestation', demands=['PublicKeyCredentialCreationOptions', 'AttestationConveyancePreference'], returns='None'),
        FieldCall(field='attestation', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='str'),
        FieldCall(field='attestation', demands=['PublicKeyCredentialCreationOptionsJSON', 'str'], returns='None'),
    ],
    "attestationObject": [
        FieldCall(field='attestationObject', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "attributeFilter": [
        FieldCall(field='attributeFilter', demands=['MutationObserverInit'], returns='list'),
        FieldCall(field='attributeFilter', demands=['MutationObserverInit', 'list'], returns='None'),
    ],
    "attributeName": [
        FieldCall(field='attributeName', demands=['MutationRecord'], returns='str'),
    ],
    "attributeNamespace": [
        FieldCall(field='attributeNamespace', demands=['MutationRecord'], returns='str'),
    ],
    "attributeOldValue": [
        FieldCall(field='attributeOldValue', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='attributeOldValue', demands=['MutationObserverInit', 'bool'], returns='None'),
    ],
    "attributeStyleMap": [
        FieldCall(field='attributeStyleMap', demands=['ElementCSSInlineStyle'], returns='StylePropertyMap'),
    ],
    "attributes": [
        FieldCall(field='attributes', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='attributes', demands=['MutationObserverInit', 'bool'], returns='None'),
        FieldCall(field='attributes', demands=['Element'], returns='NamedNodeMap'),
        FieldCall(field='attributes', demands=['GPUVertexBufferLayout'], returns='list'),
        FieldCall(field='attributes', demands=['GPUVertexBufferLayout', 'list'], returns='None'),
    ],
    "audio": [
        FieldCall(field='audio', demands=['DisplayMediaStreamOptions'], returns='bool'),
        FieldCall(field='audio', demands=['DisplayMediaStreamOptions', 'bool'], returns='None'),
        FieldCall(field='audio', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='KeySystemTrackConfiguration'),
        FieldCall(field='audio', demands=['MediaCapabilitiesKeySystemConfiguration', 'KeySystemTrackConfiguration'], returns='None'),
        FieldCall(field='audio', demands=['MediaConfiguration'], returns='AudioConfiguration'),
        FieldCall(field='audio', demands=['MediaConfiguration', 'AudioConfiguration'], returns='None'),
        FieldCall(field='audio', demands=['MediaStreamConstraints'], returns='bool'),
        FieldCall(field='audio', demands=['MediaStreamConstraints', 'bool'], returns='None'),
        FieldCall(field='audio', demands=['HTMLElementTagNameMap'], returns='HTMLAudioElement'),
        FieldCall(field='audio', demands=['HTMLElementTagNameMap', 'HTMLAudioElement'], returns='None'),
    ],
    "audioBitsPerSecond": [
        FieldCall(field='audioBitsPerSecond', demands=['MediaRecorderOptions'], returns='float'),
        FieldCall(field='audioBitsPerSecond', demands=['MediaRecorderOptions', 'float'], returns='None'),
        FieldCall(field='audioBitsPerSecond', demands=['MediaRecorder'], returns='float'),
    ],
    "audioCapabilities": [
        FieldCall(field='audioCapabilities', demands=['MediaKeySystemConfiguration'], returns='list'),
        FieldCall(field='audioCapabilities', demands=['MediaKeySystemConfiguration', 'list'], returns='None'),
    ],
    "audioLevel": [
        FieldCall(field='audioLevel', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='audioLevel', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='audioLevel', demands=['RTCRtpContributingSource'], returns='float'),
        FieldCall(field='audioLevel', demands=['RTCRtpContributingSource', 'float'], returns='None'),
    ],
    "audioWorklet": [
        FieldCall(field='audioWorklet', demands=['BaseAudioContext'], returns='AudioWorklet'),
    ],
    "audioprocess": [
        FieldCall(field='audioprocess', demands=['ScriptProcessorNodeEventMap'], returns='AudioProcessingEvent'),
        FieldCall(field='audioprocess', demands=['ScriptProcessorNodeEventMap', 'AudioProcessingEvent'], returns='None'),
    ],
    "authenticatorAttachment": [
        FieldCall(field='authenticatorAttachment', demands=['AuthenticatorSelectionCriteria'], returns='AuthenticatorAttachment'),
        FieldCall(field='authenticatorAttachment', demands=['AuthenticatorSelectionCriteria', 'AuthenticatorAttachment'], returns='None'),
        FieldCall(field='authenticatorAttachment', demands=['PublicKeyCredential'], returns='str'),
    ],
    "authenticatorData": [
        FieldCall(field='authenticatorData', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "authenticatorSelection": [
        FieldCall(field='authenticatorSelection', demands=['PublicKeyCredentialCreationOptions'], returns='AuthenticatorSelectionCriteria'),
        FieldCall(field='authenticatorSelection', demands=['PublicKeyCredentialCreationOptions', 'AuthenticatorSelectionCriteria'], returns='None'),
        FieldCall(field='authenticatorSelection', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='AuthenticatorSelectionCriteria'),
        FieldCall(field='authenticatorSelection', demands=['PublicKeyCredentialCreationOptionsJSON', 'AuthenticatorSelectionCriteria'], returns='None'),
    ],
    "autoAllocateChunkSize": [
        FieldCall(field='autoAllocateChunkSize', demands=['UnderlyingByteSource'], returns='float'),
        FieldCall(field='autoAllocateChunkSize', demands=['UnderlyingByteSource', 'float'], returns='None'),
        FieldCall(field='autoAllocateChunkSize', demands=['UnderlyingSource'], returns='float'),
        FieldCall(field='autoAllocateChunkSize', demands=['UnderlyingSource', 'float'], returns='None'),
    ],
    "autoGainControl": [
        FieldCall(field='autoGainControl', demands=['MediaTrackCapabilities'], returns='list'),
        FieldCall(field='autoGainControl', demands=['MediaTrackCapabilities', 'list'], returns='None'),
        FieldCall(field='autoGainControl', demands=['MediaTrackConstraintSet'], returns='ConstrainBoolean'),
        FieldCall(field='autoGainControl', demands=['MediaTrackConstraintSet', 'ConstrainBoolean'], returns='None'),
        FieldCall(field='autoGainControl', demands=['MediaTrackSettings'], returns='bool'),
        FieldCall(field='autoGainControl', demands=['MediaTrackSettings', 'bool'], returns='None'),
        FieldCall(field='autoGainControl', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='autoGainControl', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "autoIncrement": [
        FieldCall(field='autoIncrement', demands=['IDBObjectStoreParameters'], returns='bool'),
        FieldCall(field='autoIncrement', demands=['IDBObjectStoreParameters', 'bool'], returns='None'),
        FieldCall(field='autoIncrement', demands=['IDBObjectStore'], returns='bool'),
    ],
    "autocapitalize": [
        FieldCall(field='autocapitalize', demands=['HTMLElement'], returns='str'),
        FieldCall(field='autocapitalize', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "autocomplete": [
        FieldCall(field='autocomplete', demands=['HTMLFormElement'], returns='AutoFillBase'),
        FieldCall(field='autocomplete', demands=['HTMLFormElement', 'AutoFillBase'], returns='None'),
        FieldCall(field='autocomplete', demands=['HTMLInputElement'], returns='AutoFill'),
        FieldCall(field='autocomplete', demands=['HTMLInputElement', 'AutoFill'], returns='None'),
        FieldCall(field='autocomplete', demands=['HTMLSelectElement'], returns='AutoFill'),
        FieldCall(field='autocomplete', demands=['HTMLSelectElement', 'AutoFill'], returns='None'),
        FieldCall(field='autocomplete', demands=['HTMLTextAreaElement'], returns='AutoFill'),
        FieldCall(field='autocomplete', demands=['HTMLTextAreaElement', 'AutoFill'], returns='None'),
    ],
    "autocorrect": [
        FieldCall(field='autocorrect', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='autocorrect', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "autofocus": [
        FieldCall(field='autofocus', demands=['HTMLOrSVGElement'], returns='bool'),
        FieldCall(field='autofocus', demands=['HTMLOrSVGElement', 'bool'], returns='None'),
    ],
    "automationRate": [
        FieldCall(field='automationRate', demands=['AudioParam'], returns='AutomationRate'),
        FieldCall(field='automationRate', demands=['AudioParam', 'AutomationRate'], returns='None'),
    ],
    "autoplay": [
        FieldCall(field='autoplay', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='autoplay', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "auxclick": [
        FieldCall(field='auxclick', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='auxclick', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
        FieldCall(field='auxclick', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='auxclick', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "availHeight": [
        FieldCall(field='availHeight', demands=['Screen'], returns='float'),
    ],
    "availWidth": [
        FieldCall(field='availWidth', demands=['Screen'], returns='float'),
    ],
    "availableIncomingBitrate": [
        FieldCall(field='availableIncomingBitrate', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='availableIncomingBitrate', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "availableOutgoingBitrate": [
        FieldCall(field='availableOutgoingBitrate', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='availableOutgoingBitrate', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "avc": [
        FieldCall(field='avc', demands=['VideoEncoderConfig'], returns='AvcEncoderConfig'),
        FieldCall(field='avc', demands=['VideoEncoderConfig', 'AvcEncoderConfig'], returns='None'),
        FieldCall(field='avc', demands=['VideoEncoderEncodeOptions'], returns='VideoEncoderEncodeOptionsForAvc'),
        FieldCall(field='avc', demands=['VideoEncoderEncodeOptions', 'VideoEncoderEncodeOptionsForAvc'], returns='None'),
    ],
    "ax": [
        FieldCall(field='ax', demands=['CSSSkew'], returns='CSSNumericValue'),
        FieldCall(field='ax', demands=['CSSSkew', 'CSSNumericValue'], returns='None'),
        FieldCall(field='ax', demands=['CSSSkewX'], returns='CSSNumericValue'),
        FieldCall(field='ax', demands=['CSSSkewX', 'CSSNumericValue'], returns='None'),
    ],
    "axes": [
        FieldCall(field='axes', demands=['Gamepad'], returns='ReadonlyArray'),
    ],
    "axis": [
        FieldCall(field='axis', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='axis', demands=['HTMLTableCellElement', 'str'], returns='None'),
    ],
    "ay": [
        FieldCall(field='ay', demands=['CSSSkew'], returns='CSSNumericValue'),
        FieldCall(field='ay', demands=['CSSSkew', 'CSSNumericValue'], returns='None'),
        FieldCall(field='ay', demands=['CSSSkewY'], returns='CSSNumericValue'),
        FieldCall(field='ay', demands=['CSSSkewY', 'CSSNumericValue'], returns='None'),
    ],
    "azimuth": [
        FieldCall(field='azimuth', demands=['SVGFEDistantLightElement'], returns='SVGAnimatedNumber'),
    ],
    "azimuthAngle": [
        FieldCall(field='azimuthAngle', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='azimuthAngle', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='azimuthAngle', demands=['TouchInit'], returns='float'),
        FieldCall(field='azimuthAngle', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='azimuthAngle', demands=['PointerEvent'], returns='float'),
    ],
    "b": [
        FieldCall(field='b', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='b', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='b', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='b', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='b', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='b', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='b', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "back": [
        PrototypeCall(constructor='History', fn='back', demands=['History'], returns='None'),
    ],
    "backdropFilter": [
        FieldCall(field='backdropFilter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backdropFilter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backfaceVisibility": [
        FieldCall(field='backfaceVisibility', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backfaceVisibility', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "background": [
        FieldCall(field='background', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='background', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='background', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='background', demands=['HTMLBodyElement', 'str'], returns='None'),
    ],
    "backgroundAttachment": [
        FieldCall(field='backgroundAttachment', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundAttachment', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundBlendMode": [
        FieldCall(field='backgroundBlendMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundBlendMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundBlur": [
        FieldCall(field='backgroundBlur', demands=['MediaTrackCapabilities'], returns='list'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackCapabilities', 'list'], returns='None'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackConstraintSet'], returns='ConstrainBoolean'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackConstraintSet', 'ConstrainBoolean'], returns='None'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackSettings'], returns='bool'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackSettings', 'bool'], returns='None'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='backgroundBlur', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "backgroundClip": [
        FieldCall(field='backgroundClip', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundClip', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundColor": [
        FieldCall(field='backgroundColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundImage": [
        FieldCall(field='backgroundImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundOrigin": [
        FieldCall(field='backgroundOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundPosition": [
        FieldCall(field='backgroundPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundPositionX": [
        FieldCall(field='backgroundPositionX', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundPositionX', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundPositionY": [
        FieldCall(field='backgroundPositionY', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundPositionY', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundRepeat": [
        FieldCall(field='backgroundRepeat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundRepeat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "backgroundSize": [
        FieldCall(field='backgroundSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='backgroundSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "badInput": [
        FieldCall(field='badInput', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='badInput', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='badInput', demands=['ValidityState'], returns='bool'),
    ],
    "badge": [
        FieldCall(field='badge', demands=['NotificationOptions'], returns='str'),
        FieldCall(field='badge', demands=['NotificationOptions', 'str'], returns='None'),
        FieldCall(field='badge', demands=['Notification'], returns='str'),
    ],
    "base": [
        FieldCall(field='base', demands=['HTMLElementTagNameMap'], returns='HTMLBaseElement'),
        FieldCall(field='base', demands=['HTMLElementTagNameMap', 'HTMLBaseElement'], returns='None'),
    ],
    "baseFrequencyX": [
        FieldCall(field='baseFrequencyX', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "baseFrequencyY": [
        FieldCall(field='baseFrequencyY', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "baseLatency": [
        FieldCall(field='baseLatency', demands=['AudioContext'], returns='float'),
    ],
    "basePalette": [
        FieldCall(field='basePalette', demands=['CSSFontPaletteValuesRule'], returns='str'),
    ],
    "baseURI": [
        FieldCall(field='baseURI', demands=['Node'], returns='str'),
    ],
    "baseURL": [
        FieldCall(field='baseURL', demands=['CSSStyleSheetInit'], returns='str'),
        FieldCall(field='baseURL', demands=['CSSStyleSheetInit', 'str'], returns='None'),
        FieldCall(field='baseURL', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='baseURL', demands=['URLPatternInit', 'str'], returns='None'),
    ],
    "baseVal": [
        FieldCall(field='baseVal', demands=['SVGAnimatedAngle'], returns='SVGAngle'),
        FieldCall(field='baseVal', demands=['SVGAnimatedBoolean'], returns='bool'),
        FieldCall(field='baseVal', demands=['SVGAnimatedBoolean', 'bool'], returns='None'),
        FieldCall(field='baseVal', demands=['SVGAnimatedEnumeration'], returns='float'),
        FieldCall(field='baseVal', demands=['SVGAnimatedEnumeration', 'float'], returns='None'),
        FieldCall(field='baseVal', demands=['SVGAnimatedInteger'], returns='float'),
        FieldCall(field='baseVal', demands=['SVGAnimatedInteger', 'float'], returns='None'),
        FieldCall(field='baseVal', demands=['SVGAnimatedLength'], returns='SVGLength'),
        FieldCall(field='baseVal', demands=['SVGAnimatedLengthList'], returns='SVGLengthList'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumber'], returns='float'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumber', 'float'], returns='None'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumberList'], returns='SVGNumberList'),
        FieldCall(field='baseVal', demands=['SVGAnimatedPreserveAspectRatio'], returns='SVGPreserveAspectRatio'),
        FieldCall(field='baseVal', demands=['SVGAnimatedRect'], returns='DOMRect'),
        FieldCall(field='baseVal', demands=['SVGAnimatedString'], returns='str'),
        FieldCall(field='baseVal', demands=['SVGAnimatedString', 'str'], returns='None'),
        FieldCall(field='baseVal', demands=['SVGAnimatedTransformList'], returns='SVGTransformList'),
    ],
    "basefont": [
        FieldCall(field='basefont', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='basefont', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "baselineShift": [
        FieldCall(field='baselineShift', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='baselineShift', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "baselineSource": [
        FieldCall(field='baselineSource', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='baselineSource', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "bdi": [
        FieldCall(field='bdi', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='bdi', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "bdo": [
        FieldCall(field='bdo', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='bdo', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "before": [
        PrototypeCall(constructor='DocumentType', fn='before', demands=['DocumentType', '*'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='before', demands=['CharacterData', '*'], returns='None'),
        PrototypeCall(constructor='Element', fn='before', demands=['Element', '*'], returns='None'),
    ],
    "beforeinput": [
        FieldCall(field='beforeinput', demands=['GlobalEventHandlersEventMap'], returns='InputEvent'),
        FieldCall(field='beforeinput', demands=['GlobalEventHandlersEventMap', 'InputEvent'], returns='None'),
    ],
    "beforematch": [
        FieldCall(field='beforematch', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='beforematch', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "beforeprint": [
        FieldCall(field='beforeprint', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='beforeprint', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "beforetoggle": [
        FieldCall(field='beforetoggle', demands=['GlobalEventHandlersEventMap'], returns='ToggleEvent'),
        FieldCall(field='beforetoggle', demands=['GlobalEventHandlersEventMap', 'ToggleEvent'], returns='None'),
        FieldCall(field='beforetoggle', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='beforetoggle', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "beforeunload": [
        FieldCall(field='beforeunload', demands=['WindowEventHandlersEventMap'], returns='BeforeUnloadEvent'),
        FieldCall(field='beforeunload', demands=['WindowEventHandlersEventMap', 'BeforeUnloadEvent'], returns='None'),
    ],
    "beginElement": [
        PrototypeCall(constructor='SVGAnimationElement', fn='beginElement', demands=['SVGAnimationElement'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='beginElement', demands=['SVGSetElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='beginElement', demands=['SVGAnimateElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='beginElement', demands=['SVGAnimateTransformElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='beginElement', demands=['SVGAnimateMotionElement'], returns='None'),
    ],
    "beginElementAt": [
        PrototypeCall(constructor='SVGAnimationElement', fn='beginElementAt', demands=['SVGAnimationElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='beginElementAt', demands=['SVGSetElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='beginElementAt', demands=['SVGAnimateElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='beginElementAt', demands=['SVGAnimateTransformElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='beginElementAt', demands=['SVGAnimateMotionElement', 'float'], returns='None'),
    ],
    "beginPath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='beginPath', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='beginPath', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
    ],
    "beginQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='beginQuery', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLQuery'], returns='None'),
    ],
    "beginTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='beginTransformFeedback', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "behavior": [
        FieldCall(field='behavior', demands=['ScrollOptions'], returns='ScrollBehavior'),
        FieldCall(field='behavior', demands=['ScrollOptions', 'ScrollBehavior'], returns='None'),
        FieldCall(field='behavior', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='behavior', demands=['HTMLMarqueeElement', 'str'], returns='None'),
    ],
    "beta": [
        FieldCall(field='beta', demands=['DeviceMotionEventRotationRateInit'], returns='float'),
        FieldCall(field='beta', demands=['DeviceMotionEventRotationRateInit', 'float'], returns='None'),
        FieldCall(field='beta', demands=['DeviceOrientationEventInit'], returns='float'),
        FieldCall(field='beta', demands=['DeviceOrientationEventInit', 'float'], returns='None'),
        FieldCall(field='beta', demands=['DeviceMotionEventRotationRate'], returns='float'),
        FieldCall(field='beta', demands=['DeviceOrientationEvent'], returns='float'),
    ],
    "bezierCurveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='bezierCurveTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='bezierCurveTo', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='bezierCurveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "bgColor": [
        FieldCall(field='bgColor', demands=['Document'], returns='str'),
        FieldCall(field='bgColor', demands=['Document', 'str'], returns='None'),
        FieldCall(field='bgColor', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLBodyElement', 'str'], returns='None'),
        FieldCall(field='bgColor', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLMarqueeElement', 'str'], returns='None'),
        FieldCall(field='bgColor', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='bgColor', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLTableElement', 'str'], returns='None'),
        FieldCall(field='bgColor', demands=['HTMLTableRowElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLTableRowElement', 'str'], returns='None'),
    ],
    "bgsound": [
        FieldCall(field='bgsound', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='bgsound', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "bias": [
        FieldCall(field='bias', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
    ],
    "big": [
        FieldCall(field='big', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='big', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='String', fn='big', demands=['str'], returns='str'),
    ],
    "binaryType": [
        FieldCall(field='binaryType', demands=['RTCDataChannel'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['RTCDataChannel', 'BinaryType'], returns='None'),
        FieldCall(field='binaryType', demands=['WebSocket'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['WebSocket', 'BinaryType'], returns='None'),
    ],
    "bind": [
        PrototypeCall(constructor='Function', fn='bind', demands=['*', '*', '*', '*'], returns='*'),
        PrototypeCall(constructor='CallableFunction', fn='bind', demands=['CallableFunction', 'T', 'ThisParameterType'], returns='OmitThisParameter'),
        PrototypeCall(constructor='CallableFunction', fn='bind', demands=['CallableFunction', '(this:T,...args:[...A,...B])=>R', 'T', '*'], returns='(...args:B)=>R'),
        PrototypeCall(constructor='NewableFunction', fn='bind', demands=['NewableFunction', 'T', '*'], returns='T'),
        PrototypeCall(constructor='NewableFunction', fn='bind', demands=['NewableFunction', 'new(...args:[...A,...B])=>R', '*', '*'], returns='new(...args:B)=>R'),
    ],
    "bindAttribLocation": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindAttribLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint', 'str'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindAttribLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'str'], returns='None'),
    ],
    "bindBuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindBuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLBuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLBuffer'], returns='None'),
    ],
    "bindBufferBase": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBufferBase', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'WebGLBuffer'], returns='None'),
    ],
    "bindBufferRange": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBufferRange', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'WebGLBuffer', 'GLintptr', 'GLsizeiptr'], returns='None'),
    ],
    "bindFramebuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindFramebuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLFramebuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLFramebuffer'], returns='None'),
    ],
    "bindRenderbuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindRenderbuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindRenderbuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
    ],
    "bindSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindSampler', demands=['WebGL2RenderingContext', 'GLuint', 'WebGLSampler'], returns='None'),
    ],
    "bindTexture": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindTexture', demands=['WebGLRenderingContext', 'GLenum', 'WebGLTexture'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindTexture', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLTexture'], returns='None'),
    ],
    "bindTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindTransformFeedback', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLTransformFeedback'], returns='None'),
    ],
    "bindVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='None'),
    ],
    "bindVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='bindVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='None'),
    ],
    "binding": [
        FieldCall(field='binding', demands=['GPUBindGroupEntry'], returns='float'),
        FieldCall(field='binding', demands=['GPUBindGroupEntry', 'float'], returns='None'),
    ],
    "bitrate": [
        FieldCall(field='bitrate', demands=['AudioConfiguration'], returns='float'),
        FieldCall(field='bitrate', demands=['AudioConfiguration', 'float'], returns='None'),
        FieldCall(field='bitrate', demands=['AudioEncoderConfig'], returns='float'),
        FieldCall(field='bitrate', demands=['AudioEncoderConfig', 'float'], returns='None'),
        FieldCall(field='bitrate', demands=['VideoConfiguration'], returns='float'),
        FieldCall(field='bitrate', demands=['VideoConfiguration', 'float'], returns='None'),
        FieldCall(field='bitrate', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='bitrate', demands=['VideoEncoderConfig', 'float'], returns='None'),
    ],
    "bitrateMode": [
        FieldCall(field='bitrateMode', demands=['AudioEncoderConfig'], returns='BitrateMode'),
        FieldCall(field='bitrateMode', demands=['AudioEncoderConfig', 'BitrateMode'], returns='None'),
        FieldCall(field='bitrateMode', demands=['VideoEncoderConfig'], returns='VideoEncoderBitrateMode'),
        FieldCall(field='bitrateMode', demands=['VideoEncoderConfig', 'VideoEncoderBitrateMode'], returns='None'),
    ],
    "bitsPerSecond": [
        FieldCall(field='bitsPerSecond', demands=['MediaRecorderOptions'], returns='float'),
        FieldCall(field='bitsPerSecond', demands=['MediaRecorderOptions', 'float'], returns='None'),
    ],
    "blend": [
        FieldCall(field='blend', demands=['GPUColorTargetState'], returns='GPUBlendState'),
        FieldCall(field='blend', demands=['GPUColorTargetState', 'GPUBlendState'], returns='None'),
    ],
    "blendColor": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendColor', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendColor', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "blendEquation": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendEquation', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendEquation', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "blendEquationSeparate": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendEquationSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendEquationSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendEquationSeparateiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendEquationSeparateiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendEquationiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendEquationiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum'], returns='None'),
    ],
    "blendFunc": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendFunc', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendFunc', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFuncSeparate": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendFuncSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendFuncSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFuncSeparateiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendFuncSeparateiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFunciOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendFunciOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blink": [
        FieldCall(field='blink', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='blink', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
        PrototypeCall(constructor='String', fn='blink', demands=['str'], returns='str'),
    ],
    "blitFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blitFramebuffer', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLbitfield', 'GLenum'], returns='None'),
    ],
    "blob": [
        FieldCall(field='blob', demands=['AuthenticationExtensionsLargeBlobOutputs'], returns='ArrayBuffer'),
        FieldCall(field='blob', demands=['AuthenticationExtensionsLargeBlobOutputs', 'ArrayBuffer'], returns='None'),
        PrototypeCall(constructor='Request', fn='blob', demands=['Request'], returns='Blob'),
        PrototypeCall(constructor='Response', fn='blob', demands=['Response'], returns='Blob'),
    ],
    "block": [
        FieldCall(field='block', demands=['ScrollIntoViewOptions'], returns='ScrollLogicalPosition'),
        FieldCall(field='block', demands=['ScrollIntoViewOptions', 'ScrollLogicalPosition'], returns='None'),
    ],
    "blockSize": [
        FieldCall(field='blockSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='blockSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='blockSize', demands=['ResizeObserverSize'], returns='float'),
    ],
    "blocked": [
        FieldCall(field='blocked', demands=['IDBOpenDBRequestEventMap'], returns='IDBVersionChangeEvent'),
        FieldCall(field='blocked', demands=['IDBOpenDBRequestEventMap', 'IDBVersionChangeEvent'], returns='None'),
    ],
    "blockedURI": [
        FieldCall(field='blockedURI', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='blockedURI', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='blockedURI', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "blockedURL": [
        FieldCall(field='blockedURL', demands=['CSPViolationReportBody'], returns='str'),
    ],
    "blocking": [
        PrototypeCall(constructor='HTMLLinkElement', fn='blocking', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLLinkElement', fn='blocking', demands=['HTMLLinkElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='blocking', demands=['HTMLScriptElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLScriptElement', fn='blocking', demands=['HTMLScriptElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='blocking', demands=['HTMLStyleElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLStyleElement', fn='blocking', demands=['HTMLStyleElement', 'str'], returns='None'),
    ],
    "blockquote": [
        FieldCall(field='blockquote', demands=['HTMLElementTagNameMap'], returns='HTMLQuoteElement'),
        FieldCall(field='blockquote', demands=['HTMLElementTagNameMap', 'HTMLQuoteElement'], returns='None'),
    ],
    "blur": [
        FieldCall(field='blur', demands=['GlobalEventHandlersEventMap'], returns='FocusEvent'),
        FieldCall(field='blur', demands=['GlobalEventHandlersEventMap', 'FocusEvent'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='blur', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='blur', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='blur', demands=['HTMLElement'], returns='None'),
        DirectCall(fn='blur', receiver=None, demands=[], returns='None'),
    ],
    "body": [
        FieldCall(field='body', demands=['NotificationOptions'], returns='str'),
        FieldCall(field='body', demands=['NotificationOptions', 'str'], returns='None'),
        FieldCall(field='body', demands=['RequestInit'], returns='BodyInit'),
        FieldCall(field='body', demands=['RequestInit', 'BodyInit'], returns='None'),
        FieldCall(field='body', demands=['Body'], returns='ReadableStream<Uint8Array<ArrayBuffer>>'),
        FieldCall(field='body', demands=['Document'], returns='HTMLElement'),
        FieldCall(field='body', demands=['Document', 'HTMLElement'], returns='None'),
        FieldCall(field='body', demands=['Notification'], returns='str'),
        FieldCall(field='body', demands=['Report'], returns='ReportBody'),
        FieldCall(field='body', demands=['HTMLElementTagNameMap'], returns='HTMLBodyElement'),
        FieldCall(field='body', demands=['HTMLElementTagNameMap', 'HTMLBodyElement'], returns='None'),
        FieldCall(field='body', demands=['Body'], returns='ReadableStream<Uint8Array>'),
    ],
    "bodyUsed": [
        FieldCall(field='bodyUsed', demands=['Body'], returns='bool'),
    ],
    "bold": [
        PrototypeCall(constructor='String', fn='bold', demands=['str'], returns='str'),
    ],
    "booleanValue": [
        FieldCall(field='booleanValue', demands=['XPathResult'], returns='bool'),
    ],
    "border": [
        FieldCall(field='border', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='border', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='border', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='border', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='border', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='border', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='border', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='border', demands=['HTMLTableElement', 'str'], returns='None'),
    ],
    "borderBlock": [
        FieldCall(field='borderBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockColor": [
        FieldCall(field='borderBlockColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockEnd": [
        FieldCall(field='borderBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockEndColor": [
        FieldCall(field='borderBlockEndColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockEndColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockEndStyle": [
        FieldCall(field='borderBlockEndStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockEndStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockEndWidth": [
        FieldCall(field='borderBlockEndWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockEndWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockStart": [
        FieldCall(field='borderBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockStartColor": [
        FieldCall(field='borderBlockStartColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockStartColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockStartStyle": [
        FieldCall(field='borderBlockStartStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockStartStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockStartWidth": [
        FieldCall(field='borderBlockStartWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockStartWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockStyle": [
        FieldCall(field='borderBlockStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBlockWidth": [
        FieldCall(field='borderBlockWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBlockWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottom": [
        FieldCall(field='borderBottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottomColor": [
        FieldCall(field='borderBottomColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottomColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottomLeftRadius": [
        FieldCall(field='borderBottomLeftRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottomLeftRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottomRightRadius": [
        FieldCall(field='borderBottomRightRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottomRightRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottomStyle": [
        FieldCall(field='borderBottomStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottomStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBottomWidth": [
        FieldCall(field='borderBottomWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderBottomWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderBoxSize": [
        FieldCall(field='borderBoxSize', demands=['ResizeObserverEntry'], returns='ReadonlyArray'),
    ],
    "borderCollapse": [
        FieldCall(field='borderCollapse', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderCollapse', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderColor": [
        FieldCall(field='borderColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderEndEndRadius": [
        FieldCall(field='borderEndEndRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderEndEndRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderEndStartRadius": [
        FieldCall(field='borderEndStartRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderEndStartRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImage": [
        FieldCall(field='borderImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImageOutset": [
        FieldCall(field='borderImageOutset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImageOutset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImageRepeat": [
        FieldCall(field='borderImageRepeat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImageRepeat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImageSlice": [
        FieldCall(field='borderImageSlice', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImageSlice', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImageSource": [
        FieldCall(field='borderImageSource', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImageSource', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderImageWidth": [
        FieldCall(field='borderImageWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderImageWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInline": [
        FieldCall(field='borderInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineColor": [
        FieldCall(field='borderInlineColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineEnd": [
        FieldCall(field='borderInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineEndColor": [
        FieldCall(field='borderInlineEndColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineEndColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineEndStyle": [
        FieldCall(field='borderInlineEndStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineEndStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineEndWidth": [
        FieldCall(field='borderInlineEndWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineEndWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineStart": [
        FieldCall(field='borderInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineStartColor": [
        FieldCall(field='borderInlineStartColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineStartColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineStartStyle": [
        FieldCall(field='borderInlineStartStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineStartStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineStartWidth": [
        FieldCall(field='borderInlineStartWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineStartWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineStyle": [
        FieldCall(field='borderInlineStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderInlineWidth": [
        FieldCall(field='borderInlineWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderInlineWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderLeft": [
        FieldCall(field='borderLeft', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderLeft', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderLeftColor": [
        FieldCall(field='borderLeftColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderLeftColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderLeftStyle": [
        FieldCall(field='borderLeftStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderLeftStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderLeftWidth": [
        FieldCall(field='borderLeftWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderLeftWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderRadius": [
        FieldCall(field='borderRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderRight": [
        FieldCall(field='borderRight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderRight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderRightColor": [
        FieldCall(field='borderRightColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderRightColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderRightStyle": [
        FieldCall(field='borderRightStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderRightStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderRightWidth": [
        FieldCall(field='borderRightWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderRightWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderSpacing": [
        FieldCall(field='borderSpacing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderSpacing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderStartEndRadius": [
        FieldCall(field='borderStartEndRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderStartEndRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderStartStartRadius": [
        FieldCall(field='borderStartStartRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderStartStartRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderStyle": [
        FieldCall(field='borderStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTop": [
        FieldCall(field='borderTop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTopColor": [
        FieldCall(field='borderTopColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTopColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTopLeftRadius": [
        FieldCall(field='borderTopLeftRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTopLeftRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTopRightRadius": [
        FieldCall(field='borderTopRightRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTopRightRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTopStyle": [
        FieldCall(field='borderTopStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTopStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderTopWidth": [
        FieldCall(field='borderTopWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderTopWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "borderWidth": [
        FieldCall(field='borderWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='borderWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "bottom": [
        FieldCall(field='bottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='bottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='bottom', demands=['DOMRectReadOnly'], returns='float'),
    ],
    "boundary": [
        FieldCall(field='boundary', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='boundary', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
    ],
    "boundingClientRect": [
        FieldCall(field='boundingClientRect', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "box": [
        FieldCall(field='box', demands=['ResizeObserverOptions'], returns='ResizeObserverBoxOptions'),
        FieldCall(field='box', demands=['ResizeObserverOptions', 'ResizeObserverBoxOptions'], returns='None'),
    ],
    "boxDecorationBreak": [
        FieldCall(field='boxDecorationBreak', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='boxDecorationBreak', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "boxShadow": [
        FieldCall(field='boxShadow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='boxShadow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "boxSizing": [
        FieldCall(field='boxSizing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='boxSizing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "br": [
        FieldCall(field='br', demands=['HTMLElementTagNameMap'], returns='HTMLBRElement'),
        FieldCall(field='br', demands=['HTMLElementTagNameMap', 'HTMLBRElement'], returns='None'),
    ],
    "breakAfter": [
        FieldCall(field='breakAfter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='breakAfter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "breakBefore": [
        FieldCall(field='breakBefore', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='breakBefore', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "breakInside": [
        FieldCall(field='breakInside', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='breakInside', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "btoa": [
        DirectCall(fn='btoa', receiver=None, demands=['str'], returns='str'),
    ],
    "bubbles": [
        FieldCall(field='bubbles', demands=['EventInit'], returns='bool'),
        FieldCall(field='bubbles', demands=['EventInit', 'bool'], returns='None'),
        FieldCall(field='bubbles', demands=['Event'], returns='bool'),
    ],
    "buffer": [
        FieldCall(field='buffer', demands=['AudioBufferSourceOptions'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['AudioBufferSourceOptions', 'AudioBuffer'], returns='None'),
        FieldCall(field='buffer', demands=['ConvolverOptions'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['ConvolverOptions', 'AudioBuffer'], returns='None'),
        FieldCall(field='buffer', demands=['AudioBufferSourceNode'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['AudioBufferSourceNode', 'AudioBuffer'], returns='None'),
        FieldCall(field='buffer', demands=['ConvolverNode'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['ConvolverNode', 'AudioBuffer'], returns='None'),
        FieldCall(field='buffer', demands=['BigInt64Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['BigUint64Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['GPUBufferBinding'], returns='GPUBuffer'),
        FieldCall(field='buffer', demands=['GPUBufferBinding', 'GPUBuffer'], returns='None'),
        FieldCall(field='buffer', demands=['ArrayBufferView'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['DataView'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Int8Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Uint8Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Uint8ClampedArray'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Int16Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Uint16Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Int32Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Uint32Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Float32Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Float64Array'], returns='TArrayBuffer'),
        FieldCall(field='buffer', demands=['Float16Array'], returns='TArrayBuffer'),
    ],
    "bufferData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizeiptr', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'AllowSharedBufferSource', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'ArrayBufferView', 'GLenum', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'ArrayBufferView', 'GLenum', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferData', demands=['WebGLRenderingContext', 'GLenum', 'GLsizeiptr', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferData', demands=['WebGLRenderingContext', 'GLenum', 'AllowSharedBufferSource', 'GLenum'], returns='None'),
    ],
    "bufferSize": [
        FieldCall(field='bufferSize', demands=['ScriptProcessorNode'], returns='float'),
    ],
    "bufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferSubData', demands=['WebGLRenderingContext', 'GLenum', 'GLintptr', 'AllowSharedBufferSource'], returns='None'),
    ],
    "buffered": [
        FieldCall(field='buffered', demands=['PerformanceObserverInit'], returns='bool'),
        FieldCall(field='buffered', demands=['PerformanceObserverInit', 'bool'], returns='None'),
        FieldCall(field='buffered', demands=['ReportingObserverOptions'], returns='bool'),
        FieldCall(field='buffered', demands=['ReportingObserverOptions', 'bool'], returns='None'),
        FieldCall(field='buffered', demands=['HTMLMediaElement'], returns='TimeRanges'),
        FieldCall(field='buffered', demands=['SourceBuffer'], returns='TimeRanges'),
    ],
    "bufferedAmount": [
        FieldCall(field='bufferedAmount', demands=['RTCDataChannel'], returns='float'),
        FieldCall(field='bufferedAmount', demands=['WebSocket'], returns='float'),
    ],
    "bufferedAmountLowThreshold": [
        FieldCall(field='bufferedAmountLowThreshold', demands=['RTCDataChannel'], returns='float'),
        FieldCall(field='bufferedAmountLowThreshold', demands=['RTCDataChannel', 'float'], returns='None'),
    ],
    "bufferedamountlow": [
        FieldCall(field='bufferedamountlow', demands=['RTCDataChannelEventMap'], returns='Event'),
        FieldCall(field='bufferedamountlow', demands=['RTCDataChannelEventMap', 'Event'], returns='None'),
    ],
    "buffers": [
        FieldCall(field='buffers', demands=['GPUVertexState'], returns='(GPUVertexBufferLayout'),
        FieldCall(field='buffers', demands=['GPUVertexState', '(GPUVertexBufferLayout'], returns='None'),
    ],
    "bundlePolicy": [
        FieldCall(field='bundlePolicy', demands=['RTCConfiguration'], returns='RTCBundlePolicy'),
        FieldCall(field='bundlePolicy', demands=['RTCConfiguration', 'RTCBundlePolicy'], returns='None'),
    ],
    "button": [
        FieldCall(field='button', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='button', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='button', demands=['MouseEvent'], returns='float'),
        FieldCall(field='button', demands=['HTMLElementTagNameMap'], returns='HTMLButtonElement'),
        FieldCall(field='button', demands=['HTMLElementTagNameMap', 'HTMLButtonElement'], returns='None'),
    ],
    "buttons": [
        FieldCall(field='buttons', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='buttons', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='buttons', demands=['Gamepad'], returns='ReadonlyArray'),
        FieldCall(field='buttons', demands=['MouseEvent'], returns='float'),
    ],
    "byobRequest": [
        FieldCall(field='byobRequest', demands=['ReadableByteStreamController'], returns='ReadableStreamBYOBRequest'),
    ],
    "byteLength": [
        FieldCall(field='byteLength', demands=['EncodedAudioChunk'], returns='float'),
        FieldCall(field='byteLength', demands=['EncodedVideoChunk'], returns='float'),
        FieldCall(field='byteLength', demands=['BigInt64Array'], returns='float'),
        FieldCall(field='byteLength', demands=['BigUint64Array'], returns='float'),
        FieldCall(field='byteLength', demands=['ArrayBuffer'], returns='float'),
        FieldCall(field='byteLength', demands=['ArrayBufferView'], returns='float'),
        FieldCall(field='byteLength', demands=['DataView'], returns='float'),
        FieldCall(field='byteLength', demands=['Int8Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Uint8Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Uint8ClampedArray'], returns='float'),
        FieldCall(field='byteLength', demands=['Int16Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Uint16Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Int32Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Uint32Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Float32Array'], returns='float'),
        FieldCall(field='byteLength', demands=['Float64Array'], returns='float'),
        FieldCall(field='byteLength', demands=['SharedArrayBuffer'], returns='float'),
        FieldCall(field='byteLength', demands=['Float16Array'], returns='float'),
    ],
    "byteOffset": [
        FieldCall(field='byteOffset', demands=['BigInt64Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['BigUint64Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['ArrayBufferView'], returns='float'),
        FieldCall(field='byteOffset', demands=['DataView'], returns='float'),
        FieldCall(field='byteOffset', demands=['Int8Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Uint8Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Uint8ClampedArray'], returns='float'),
        FieldCall(field='byteOffset', demands=['Int16Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Uint16Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Int32Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Uint32Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Float32Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Float64Array'], returns='float'),
        FieldCall(field='byteOffset', demands=['Float16Array'], returns='float'),
    ],
    "bytes": [
        PrototypeCall(constructor='Blob', fn='bytes', demands=['Blob'], returns='Uint8Array'),
        PrototypeCall(constructor='File', fn='bytes', demands=['File'], returns='Uint8Array'),
        PrototypeCall(constructor='Request', fn='bytes', demands=['Request'], returns='Uint8Array'),
        PrototypeCall(constructor='Response', fn='bytes', demands=['Response'], returns='Uint8Array'),
    ],
    "bytesAcknowledged": [
        FieldCall(field='bytesAcknowledged', demands=['WebTransportSendStreamStats'], returns='float'),
        FieldCall(field='bytesAcknowledged', demands=['WebTransportSendStreamStats', 'float'], returns='None'),
    ],
    "bytesDiscardedOnSend": [
        FieldCall(field='bytesDiscardedOnSend', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='bytesDiscardedOnSend', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "bytesPerRow": [
        FieldCall(field='bytesPerRow', demands=['GPUTexelCopyBufferLayout'], returns='float'),
        FieldCall(field='bytesPerRow', demands=['GPUTexelCopyBufferLayout', 'float'], returns='None'),
    ],
    "bytesRead": [
        FieldCall(field='bytesRead', demands=['WebTransportReceiveStreamStats'], returns='float'),
        FieldCall(field='bytesRead', demands=['WebTransportReceiveStreamStats', 'float'], returns='None'),
    ],
    "bytesReceived": [
        FieldCall(field='bytesReceived', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='bytesReceived', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
        FieldCall(field='bytesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='bytesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='bytesReceived', demands=['RTCTransportStats'], returns='float'),
        FieldCall(field='bytesReceived', demands=['RTCTransportStats', 'float'], returns='None'),
        FieldCall(field='bytesReceived', demands=['WebTransportReceiveStreamStats'], returns='float'),
        FieldCall(field='bytesReceived', demands=['WebTransportReceiveStreamStats', 'float'], returns='None'),
    ],
    "bytesSent": [
        FieldCall(field='bytesSent', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='bytesSent', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
        FieldCall(field='bytesSent', demands=['RTCSentRtpStreamStats'], returns='float'),
        FieldCall(field='bytesSent', demands=['RTCSentRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='bytesSent', demands=['RTCTransportStats'], returns='float'),
        FieldCall(field='bytesSent', demands=['RTCTransportStats', 'float'], returns='None'),
        FieldCall(field='bytesSent', demands=['WebTransportSendStreamStats'], returns='float'),
        FieldCall(field='bytesSent', demands=['WebTransportSendStreamStats', 'float'], returns='None'),
    ],
    "bytesWritten": [
        FieldCall(field='bytesWritten', demands=['WebTransportSendStreamStats'], returns='float'),
        FieldCall(field='bytesWritten', demands=['WebTransportSendStreamStats', 'float'], returns='None'),
    ],
    "c": [
        FieldCall(field='c', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='c', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='c', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='c', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='c', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "cache": [
        FieldCall(field='cache', demands=['RequestInit'], returns='RequestCache'),
        FieldCall(field='cache', demands=['RequestInit', 'RequestCache'], returns='None'),
        FieldCall(field='cache', demands=['Request'], returns='RequestCache'),
    ],
    "cacheName": [
        FieldCall(field='cacheName', demands=['MultiCacheQueryOptions'], returns='str'),
        FieldCall(field='cacheName', demands=['MultiCacheQueryOptions', 'str'], returns='None'),
    ],
    "caches": [
        FieldCall(field='caches', demands=['WindowOrWorkerGlobalScope'], returns='CacheStorage'),
        FieldCall(field='caches', demands=['Window'], returns='CacheStorage'),
        FieldCall(field='caches', demands=['Window', 'CacheStorage'], returns='None'),
    ],
    "call": [
        PrototypeCall(constructor='Function', fn='call', demands=['*', '*', '*', '*'], returns='*'),
        PrototypeCall(constructor='CallableFunction', fn='call', demands=['CallableFunction', '(this:T,...args:A)=>R', 'T', '*'], returns='R'),
        PrototypeCall(constructor='NewableFunction', fn='call', demands=['NewableFunction', 'new(...args:A)=>T', 'T', '*'], returns='None'),
    ],
    "callee": [
        FieldCall(field='callee', demands=['IArguments'], returns='*'),
        FieldCall(field='callee', demands=['IArguments', '*'], returns='None'),
    ],
    "caller": [
        FieldCall(field='caller', demands=['*'], returns='*'),
        FieldCall(field='caller', demands=['*', '*'], returns='None'),
    ],
    "canInsertDTMF": [
        FieldCall(field='canInsertDTMF', demands=['RTCDTMFSender'], returns='bool'),
    ],
    "canMakePayment": [
        PrototypeCall(constructor='PaymentRequest', fn='canMakePayment', demands=['PaymentRequest'], returns='bool'),
    ],
    "canPlayType": [
        PrototypeCall(constructor='HTMLMediaElement', fn='canPlayType', demands=['HTMLMediaElement', 'str'], returns='CanPlayTypeResult'),
        PrototypeCall(constructor='HTMLAudioElement', fn='canPlayType', demands=['HTMLAudioElement', 'str'], returns='CanPlayTypeResult'),
        PrototypeCall(constructor='HTMLVideoElement', fn='canPlayType', demands=['HTMLVideoElement', 'str'], returns='CanPlayTypeResult'),
    ],
    "canShare": [
        PrototypeCall(constructor='Navigator', fn='canShare', demands=['Navigator'], returns='bool'),
        PrototypeCall(constructor='Navigator', fn='canShare', demands=['Navigator', 'ShareData'], returns='bool'),
    ],
    "canTrickleIceCandidates": [
        FieldCall(field='canTrickleIceCandidates', demands=['RTCPeerConnection'], returns='bool'),
    ],
    "cancel": [
        FieldCall(field='cancel', demands=['UnderlyingByteSource'], returns='UnderlyingSourceCancelCallback'),
        FieldCall(field='cancel', demands=['UnderlyingByteSource', 'UnderlyingSourceCancelCallback'], returns='None'),
        FieldCall(field='cancel', demands=['UnderlyingDefaultSource'], returns='UnderlyingSourceCancelCallback'),
        FieldCall(field='cancel', demands=['UnderlyingDefaultSource', 'UnderlyingSourceCancelCallback'], returns='None'),
        FieldCall(field='cancel', demands=['UnderlyingSource'], returns='UnderlyingSourceCancelCallback'),
        FieldCall(field='cancel', demands=['UnderlyingSource', 'UnderlyingSourceCancelCallback'], returns='None'),
        FieldCall(field='cancel', demands=['AnimationEventMap'], returns='AnimationPlaybackEvent'),
        FieldCall(field='cancel', demands=['AnimationEventMap', 'AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='Animation', fn='cancel', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='cancel', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='cancel', demands=['CSSTransition'], returns='None'),
        FieldCall(field='cancel', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='cancel', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='cancel', demands=['ReadableStream'], returns='None'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='cancel', demands=['WebTransportReceiveStream'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='cancel', demands=['ReadableStream', '*'], returns='None'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='cancel', demands=['WebTransportReceiveStream', '*'], returns='None'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='cancel', demands=['ReadableStreamBYOBReader'], returns='None'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='cancel', demands=['ReadableStreamBYOBReader', '*'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='cancel', demands=['SpeechSynthesis'], returns='None'),
        FieldCall(field='cancel', demands=['Transformer'], returns='TransformerCancelCallback'),
        FieldCall(field='cancel', demands=['Transformer', 'TransformerCancelCallback'], returns='None'),
    ],
    "cancelAndHoldAtTime": [
        PrototypeCall(constructor='AudioParam', fn='cancelAndHoldAtTime', demands=['AudioParam', 'float'], returns='AudioParam'),
    ],
    "cancelAnimationFrame": [
        PrototypeCall(constructor='Window', fn='cancelAnimationFrame', demands=['Window', 'float'], returns='None'),
    ],
    "cancelBubble": [
        FieldCall(field='cancelBubble', demands=['Event'], returns='bool'),
        FieldCall(field='cancelBubble', demands=['Event', 'bool'], returns='None'),
    ],
    "cancelIdleCallback": [
        DirectCall(fn='cancelIdleCallback', receiver=None, demands=['float'], returns='None'),
    ],
    "cancelScheduledValues": [
        PrototypeCall(constructor='AudioParam', fn='cancelScheduledValues', demands=['AudioParam', 'float'], returns='AudioParam'),
    ],
    "cancelVideoFrameCallback": [
        PrototypeCall(constructor='HTMLVideoElement', fn='cancelVideoFrameCallback', demands=['HTMLVideoElement', 'float'], returns='None'),
    ],
    "cancelWatchAvailability": [
        PrototypeCall(constructor='RemotePlayback', fn='cancelWatchAvailability', demands=['RemotePlayback'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='cancelWatchAvailability', demands=['RemotePlayback', 'float'], returns='None'),
    ],
    "cancelable": [
        FieldCall(field='cancelable', demands=['EventInit'], returns='bool'),
        FieldCall(field='cancelable', demands=['EventInit', 'bool'], returns='None'),
        FieldCall(field='cancelable', demands=['Event'], returns='bool'),
        FieldCall(field='cancelable', demands=['PerformanceEventTiming'], returns='bool'),
    ],
    "candidate": [
        FieldCall(field='candidate', demands=['RTCIceCandidateInit'], returns='str'),
        FieldCall(field='candidate', demands=['RTCIceCandidateInit', 'str'], returns='None'),
        FieldCall(field='candidate', demands=['RTCPeerConnectionIceEventInit'], returns='RTCIceCandidate'),
        FieldCall(field='candidate', demands=['RTCPeerConnectionIceEventInit', 'RTCIceCandidate'], returns='None'),
        FieldCall(field='candidate', demands=['RTCIceCandidate'], returns='str'),
        FieldCall(field='candidate', demands=['RTCPeerConnectionIceEvent'], returns='RTCIceCandidate'),
    ],
    "canplay": [
        FieldCall(field='canplay', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='canplay', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "canplaythrough": [
        FieldCall(field='canplaythrough', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='canplaythrough', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "canvas": [
        FieldCall(field='canvas', demands=['CanvasCaptureMediaStreamTrack'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['CanvasRenderingContext2D'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['ImageBitmapRenderingContext'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['OffscreenCanvasRenderingContext2D'], returns='OffscreenCanvas'),
        FieldCall(field='canvas', demands=['WebGLRenderingContextBase'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['HTMLElementTagNameMap'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['HTMLElementTagNameMap', 'HTMLCanvasElement'], returns='None'),
    ],
    "caption": [
        FieldCall(field='caption', demands=['HTMLTableElement'], returns='HTMLTableCaptionElement'),
        FieldCall(field='caption', demands=['HTMLTableElement', 'HTMLTableCaptionElement'], returns='None'),
        FieldCall(field='caption', demands=['HTMLElementTagNameMap'], returns='HTMLTableCaptionElement'),
        FieldCall(field='caption', demands=['HTMLElementTagNameMap', 'HTMLTableCaptionElement'], returns='None'),
    ],
    "captionSide": [
        FieldCall(field='captionSide', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='captionSide', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "capture": [
        FieldCall(field='capture', demands=['EventListenerOptions'], returns='bool'),
        FieldCall(field='capture', demands=['EventListenerOptions', 'bool'], returns='None'),
        FieldCall(field='capture', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='capture', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "captureEvents": [
        PrototypeCall(constructor='Document', fn='captureEvents', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='captureEvents', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='captureEvents', demands=['XMLDocument'], returns='None'),
        DirectCall(fn='captureEvents', receiver=None, demands=[], returns='None'),
    ],
    "captureStackTrace": [
        PrototypeCall(constructor='ErrorConstructor', fn='captureStackTrace', demands=['ErrorConstructor', 'Object'], returns='None'),
        PrototypeCall(constructor='ErrorConstructor', fn='captureStackTrace', demands=['ErrorConstructor', 'Object', '*'], returns='None'),
    ],
    "captureStream": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='captureStream', demands=['HTMLCanvasElement'], returns='MediaStream'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='captureStream', demands=['HTMLCanvasElement', 'float'], returns='MediaStream'),
    ],
    "captureTime": [
        FieldCall(field='captureTime', demands=['VideoFrameCallbackMetadata'], returns='DOMHighResTimeStamp'),
        FieldCall(field='captureTime', demands=['VideoFrameCallbackMetadata', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "caretColor": [
        FieldCall(field='caretColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='caretColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "caretPositionFromPoint": [
        PrototypeCall(constructor='Document', fn='caretPositionFromPoint', demands=['Document', 'float', 'float'], returns='CaretPosition'),
        PrototypeCall(constructor='HTMLDocument', fn='caretPositionFromPoint', demands=['HTMLDocument', 'float', 'float'], returns='CaretPosition'),
        PrototypeCall(constructor='XMLDocument', fn='caretPositionFromPoint', demands=['XMLDocument', 'float', 'float'], returns='CaretPosition'),
        PrototypeCall(constructor='Document', fn='caretPositionFromPoint', demands=['Document', 'float', 'float', 'CaretPositionFromPointOptions'], returns='CaretPosition'),
        PrototypeCall(constructor='HTMLDocument', fn='caretPositionFromPoint', demands=['HTMLDocument', 'float', 'float', 'CaretPositionFromPointOptions'], returns='CaretPosition'),
        PrototypeCall(constructor='XMLDocument', fn='caretPositionFromPoint', demands=['XMLDocument', 'float', 'float', 'CaretPositionFromPointOptions'], returns='CaretPosition'),
    ],
    "caretRangeFromPoint": [
        PrototypeCall(constructor='Document', fn='caretRangeFromPoint', demands=['Document', 'float', 'float'], returns='Range'),
        PrototypeCall(constructor='HTMLDocument', fn='caretRangeFromPoint', demands=['HTMLDocument', 'float', 'float'], returns='Range'),
        PrototypeCall(constructor='XMLDocument', fn='caretRangeFromPoint', demands=['XMLDocument', 'float', 'float'], returns='Range'),
    ],
    "catch": [
        PrototypeCall(constructor='Promise', fn='catch', demands=['Promise'], returns='Promise<T'),
        PrototypeCall(constructor='Promise', fn='catch', demands=['Promise', '((reason:any)=>TResult'], returns='Promise<T'),
    ],
    "cause": [
        FieldCall(field='cause', demands=['ErrorOptions'], returns='*'),
        FieldCall(field='cause', demands=['ErrorOptions', '*'], returns='None'),
        FieldCall(field='cause', demands=['Error'], returns='*'),
        FieldCall(field='cause', demands=['Error', '*'], returns='None'),
    ],
    "cbrt": [
        PrototypeCall(constructor='Math', fn='cbrt', demands=['Math', 'float'], returns='float'),
    ],
    "ceil": [
        PrototypeCall(constructor='Math', fn='ceil', demands=['Math', 'float'], returns='float'),
    ],
    "cellIndex": [
        FieldCall(field='cellIndex', demands=['HTMLTableCellElement'], returns='float'),
    ],
    "cellPadding": [
        FieldCall(field='cellPadding', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='cellPadding', demands=['HTMLTableElement', 'str'], returns='None'),
    ],
    "cellSpacing": [
        FieldCall(field='cellSpacing', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='cellSpacing', demands=['HTMLTableElement', 'str'], returns='None'),
    ],
    "cells": [
        FieldCall(field='cells', demands=['HTMLTableRowElement'], returns='HTMLCollectionOf'),
    ],
    "center": [
        FieldCall(field='center', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='center', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "certificates": [
        FieldCall(field='certificates', demands=['RTCConfiguration'], returns='list'),
        FieldCall(field='certificates', demands=['RTCConfiguration', 'list'], returns='None'),
    ],
    "ch": [
        FieldCall(field='ch', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='ch', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='ch', demands=['HTMLTableColElement'], returns='str'),
        FieldCall(field='ch', demands=['HTMLTableColElement', 'str'], returns='None'),
        FieldCall(field='ch', demands=['HTMLTableRowElement'], returns='str'),
        FieldCall(field='ch', demands=['HTMLTableRowElement', 'str'], returns='None'),
        FieldCall(field='ch', demands=['HTMLTableSectionElement'], returns='str'),
        FieldCall(field='ch', demands=['HTMLTableSectionElement', 'str'], returns='None'),
    ],
    "chOff": [
        FieldCall(field='chOff', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='chOff', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='chOff', demands=['HTMLTableColElement'], returns='str'),
        FieldCall(field='chOff', demands=['HTMLTableColElement', 'str'], returns='None'),
        FieldCall(field='chOff', demands=['HTMLTableRowElement'], returns='str'),
        FieldCall(field='chOff', demands=['HTMLTableRowElement', 'str'], returns='None'),
        FieldCall(field='chOff', demands=['HTMLTableSectionElement'], returns='str'),
        FieldCall(field='chOff', demands=['HTMLTableSectionElement', 'str'], returns='None'),
    ],
    "challenge": [
        FieldCall(field='challenge', demands=['PublicKeyCredentialCreationOptions'], returns='BufferSource'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialCreationOptions', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='Base64URLString'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialCreationOptionsJSON', 'Base64URLString'], returns='None'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialRequestOptions'], returns='BufferSource'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialRequestOptions', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='Base64URLString'),
        FieldCall(field='challenge', demands=['PublicKeyCredentialRequestOptionsJSON', 'Base64URLString'], returns='None'),
    ],
    "change": [
        FieldCall(field='change', demands=['CookieStoreEventMap'], returns='CookieChangeEvent'),
        FieldCall(field='change', demands=['CookieStoreEventMap', 'CookieChangeEvent'], returns='None'),
        FieldCall(field='change', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='change', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='change', demands=['MediaQueryListEventMap'], returns='MediaQueryListEvent'),
        FieldCall(field='change', demands=['MediaQueryListEventMap', 'MediaQueryListEvent'], returns='None'),
        FieldCall(field='change', demands=['PermissionStatusEventMap'], returns='Event'),
        FieldCall(field='change', demands=['PermissionStatusEventMap', 'Event'], returns='None'),
        FieldCall(field='change', demands=['ScreenOrientationEventMap'], returns='Event'),
        FieldCall(field='change', demands=['ScreenOrientationEventMap', 'Event'], returns='None'),
        FieldCall(field='change', demands=['TextTrackListEventMap'], returns='Event'),
        FieldCall(field='change', demands=['TextTrackListEventMap', 'Event'], returns='None'),
    ],
    "changeType": [
        PrototypeCall(constructor='SourceBuffer', fn='changeType', demands=['SourceBuffer', 'str'], returns='None'),
    ],
    "changed": [
        FieldCall(field='changed', demands=['CookieChangeEventInit'], returns='CookieList'),
        FieldCall(field='changed', demands=['CookieChangeEventInit', 'CookieList'], returns='None'),
        FieldCall(field='changed', demands=['CookieChangeEvent'], returns='ReadonlyArray'),
    ],
    "changedTouches": [
        FieldCall(field='changedTouches', demands=['TouchEventInit'], returns='list'),
        FieldCall(field='changedTouches', demands=['TouchEventInit', 'list'], returns='None'),
        FieldCall(field='changedTouches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "channel": [
        FieldCall(field='channel', demands=['RTCDataChannelEventInit'], returns='RTCDataChannel'),
        FieldCall(field='channel', demands=['RTCDataChannelEventInit', 'RTCDataChannel'], returns='None'),
        FieldCall(field='channel', demands=['RTCDataChannelEvent'], returns='RTCDataChannel'),
    ],
    "channelCount": [
        FieldCall(field='channelCount', demands=['AudioNodeOptions'], returns='float'),
        FieldCall(field='channelCount', demands=['AudioNodeOptions', 'float'], returns='None'),
        FieldCall(field='channelCount', demands=['MediaTrackCapabilities'], returns='ULongRange'),
        FieldCall(field='channelCount', demands=['MediaTrackCapabilities', 'ULongRange'], returns='None'),
        FieldCall(field='channelCount', demands=['MediaTrackConstraintSet'], returns='ConstrainULong'),
        FieldCall(field='channelCount', demands=['MediaTrackConstraintSet', 'ConstrainULong'], returns='None'),
        FieldCall(field='channelCount', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='channelCount', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='channelCount', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='channelCount', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='channelCount', demands=['AudioNode'], returns='float'),
        FieldCall(field='channelCount', demands=['AudioNode', 'float'], returns='None'),
    ],
    "channelCountMode": [
        FieldCall(field='channelCountMode', demands=['AudioNodeOptions'], returns='ChannelCountMode'),
        FieldCall(field='channelCountMode', demands=['AudioNodeOptions', 'ChannelCountMode'], returns='None'),
        FieldCall(field='channelCountMode', demands=['AudioNode'], returns='ChannelCountMode'),
        FieldCall(field='channelCountMode', demands=['AudioNode', 'ChannelCountMode'], returns='None'),
    ],
    "channelInterpretation": [
        FieldCall(field='channelInterpretation', demands=['AudioNodeOptions'], returns='ChannelInterpretation'),
        FieldCall(field='channelInterpretation', demands=['AudioNodeOptions', 'ChannelInterpretation'], returns='None'),
        FieldCall(field='channelInterpretation', demands=['AudioNode'], returns='ChannelInterpretation'),
        FieldCall(field='channelInterpretation', demands=['AudioNode', 'ChannelInterpretation'], returns='None'),
    ],
    "channels": [
        FieldCall(field='channels', demands=['AudioConfiguration'], returns='str'),
        FieldCall(field='channels', demands=['AudioConfiguration', 'str'], returns='None'),
        FieldCall(field='channels', demands=['RTCRtpCodec'], returns='float'),
        FieldCall(field='channels', demands=['RTCRtpCodec', 'float'], returns='None'),
    ],
    "charAt": [
        PrototypeCall(constructor='String', fn='charAt', demands=['str', 'float'], returns='str'),
    ],
    "charCode": [
        FieldCall(field='charCode', demands=['KeyboardEventInit'], returns='float'),
        FieldCall(field='charCode', demands=['KeyboardEventInit', 'float'], returns='None'),
        FieldCall(field='charCode', demands=['KeyboardEvent'], returns='float'),
    ],
    "charCodeAt": [
        PrototypeCall(constructor='String', fn='charCodeAt', demands=['str', 'float'], returns='float'),
    ],
    "charIndex": [
        FieldCall(field='charIndex', demands=['SpeechSynthesisEventInit'], returns='float'),
        FieldCall(field='charIndex', demands=['SpeechSynthesisEventInit', 'float'], returns='None'),
        FieldCall(field='charIndex', demands=['SpeechSynthesisEvent'], returns='float'),
    ],
    "charLength": [
        FieldCall(field='charLength', demands=['SpeechSynthesisEventInit'], returns='float'),
        FieldCall(field='charLength', demands=['SpeechSynthesisEventInit', 'float'], returns='None'),
        FieldCall(field='charLength', demands=['SpeechSynthesisEvent'], returns='float'),
    ],
    "characterData": [
        FieldCall(field='characterData', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='characterData', demands=['MutationObserverInit', 'bool'], returns='None'),
    ],
    "characterDataOldValue": [
        FieldCall(field='characterDataOldValue', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='characterDataOldValue', demands=['MutationObserverInit', 'bool'], returns='None'),
    ],
    "characterSet": [
        FieldCall(field='characterSet', demands=['Document'], returns='str'),
    ],
    "charset": [
        FieldCall(field='charset', demands=['Document'], returns='str'),
        FieldCall(field='charset', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='charset', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='charset', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='charset', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='charset', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='charset', demands=['HTMLScriptElement', 'str'], returns='None'),
    ],
    "check": [
        PrototypeCall(constructor='FontFaceSet', fn='check', demands=['FontFaceSet', 'str'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='check', demands=['FontFaceSet', 'str', 'str'], returns='bool'),
    ],
    "checkEnclosure": [
        PrototypeCall(constructor='SVGSVGElement', fn='checkEnclosure', demands=['SVGSVGElement', 'SVGElement', 'DOMRectReadOnly'], returns='bool'),
    ],
    "checkFramebufferStatus": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='checkFramebufferStatus', demands=['WebGLRenderingContext', 'GLenum'], returns='GLenum'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='checkFramebufferStatus', demands=['WebGL2RenderingContext', 'GLenum'], returns='GLenum'),
    ],
    "checkIntersection": [
        PrototypeCall(constructor='SVGSVGElement', fn='checkIntersection', demands=['SVGSVGElement', 'SVGElement', 'DOMRectReadOnly'], returns='bool'),
    ],
    "checkOpacity": [
        FieldCall(field='checkOpacity', demands=['CheckVisibilityOptions'], returns='bool'),
        FieldCall(field='checkOpacity', demands=['CheckVisibilityOptions', 'bool'], returns='None'),
    ],
    "checkValidity": [
        PrototypeCall(constructor='ElementInternals', fn='checkValidity', demands=['ElementInternals'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='checkValidity', demands=['HTMLButtonElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='checkValidity', demands=['HTMLFieldSetElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='checkValidity', demands=['HTMLFormElement'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='checkValidity', demands=['HTMLInputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLObjectElement', fn='checkValidity', demands=['HTMLObjectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='checkValidity', demands=['HTMLOutputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='checkValidity', demands=['HTMLSelectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='checkValidity', demands=['HTMLTextAreaElement'], returns='bool'),
    ],
    "checkVisibility": [
        PrototypeCall(constructor='Element', fn='checkVisibility', demands=['Element'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='checkVisibility', demands=['MathMLElement'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='checkVisibility', demands=['SVGElement'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='checkVisibility', demands=['HTMLElement'], returns='bool'),
        PrototypeCall(constructor='Element', fn='checkVisibility', demands=['Element', 'CheckVisibilityOptions'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='checkVisibility', demands=['MathMLElement', 'CheckVisibilityOptions'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='checkVisibility', demands=['SVGElement', 'CheckVisibilityOptions'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='checkVisibility', demands=['HTMLElement', 'CheckVisibilityOptions'], returns='bool'),
    ],
    "checkVisibilityCSS": [
        FieldCall(field='checkVisibilityCSS', demands=['CheckVisibilityOptions'], returns='bool'),
        FieldCall(field='checkVisibilityCSS', demands=['CheckVisibilityOptions', 'bool'], returns='None'),
    ],
    "checked": [
        FieldCall(field='checked', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='checked', demands=['HTMLInputElement', 'bool'], returns='None'),
    ],
    "childElementCount": [
        FieldCall(field='childElementCount', demands=['ParentNode'], returns='float'),
    ],
    "childList": [
        FieldCall(field='childList', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='childList', demands=['MutationObserverInit', 'bool'], returns='None'),
    ],
    "childNodes": [
        FieldCall(field='childNodes', demands=['Node'], returns='NodeListOf'),
    ],
    "children": [
        FieldCall(field='children', demands=['ParentNode'], returns='HTMLCollection'),
    ],
    "circle": [
        FieldCall(field='circle', demands=['SVGElementTagNameMap'], returns='SVGCircleElement'),
        FieldCall(field='circle', demands=['SVGElementTagNameMap', 'SVGCircleElement'], returns='None'),
    ],
    "cite": [
        FieldCall(field='cite', demands=['HTMLModElement'], returns='str'),
        FieldCall(field='cite', demands=['HTMLModElement', 'str'], returns='None'),
        FieldCall(field='cite', demands=['HTMLQuoteElement'], returns='str'),
        FieldCall(field='cite', demands=['HTMLQuoteElement', 'str'], returns='None'),
        FieldCall(field='cite', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='cite', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "city": [
        FieldCall(field='city', demands=['AddressErrors'], returns='str'),
        FieldCall(field='city', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='city', demands=['PaymentAddress'], returns='str'),
    ],
    "classList": [
        PrototypeCall(constructor='Element', fn='classList', demands=['Element'], returns='DOMTokenList'),
        PrototypeCall(constructor='MathMLElement', fn='classList', demands=['MathMLElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='SVGElement', fn='classList', demands=['SVGElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLElement', fn='classList', demands=['HTMLElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='Element', fn='classList', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='classList', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='classList', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='classList', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "className": [
        FieldCall(field='className', demands=['Element'], returns='str'),
        FieldCall(field='className', demands=['Element', 'str'], returns='None'),
        FieldCall(field='className', demands=['SVGElement'], returns='*'),
    ],
    "clear": [
        FieldCall(field='clear', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='clear', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='clear', demands=['DataTransferItemList'], returns='None'),
        PrototypeCall(constructor='Document', fn='clear', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='clear', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='clear', demands=['XMLDocument'], returns='None'),
        FieldCall(field='clear', demands=['HTMLBRElement'], returns='str'),
        FieldCall(field='clear', demands=['HTMLBRElement', 'str'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='clear', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='SVGLengthList', fn='clear', demands=['SVGLengthList'], returns='None'),
        PrototypeCall(constructor='SVGNumberList', fn='clear', demands=['SVGNumberList'], returns='None'),
        PrototypeCall(constructor='SVGPointList', fn='clear', demands=['SVGPointList'], returns='None'),
        PrototypeCall(constructor='SVGStringList', fn='clear', demands=['SVGStringList'], returns='None'),
        PrototypeCall(constructor='SVGTransformList', fn='clear', demands=['SVGTransformList'], returns='None'),
        PrototypeCall(constructor='Storage', fn='clear', demands=['Storage'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='clear', demands=['StylePropertyMap'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='clear', demands=['WebGLRenderingContext', 'GLbitfield'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clear', demands=['WebGL2RenderingContext', 'GLbitfield'], returns='None'),
        PrototypeCall(constructor='Console', fn='clear', demands=['Console'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='clear', demands=['HighlightRegistry'], returns='None'),
        PrototypeCall(constructor='Highlight', fn='clear', demands=['Highlight'], returns='None'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='clear', demands=['ViewTransitionTypeSet'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='clear', demands=['FontFaceSet'], returns='None'),
        PrototypeCall(constructor='CustomStateSet', fn='clear', demands=['CustomStateSet'], returns='None'),
    ],
    "clearAppBadge": [
        PrototypeCall(constructor='Navigator', fn='clearAppBadge', demands=['Navigator'], returns='None'),
    ],
    "clearBufferfi": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfi', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLfloat', 'GLint'], returns='None'),
    ],
    "clearBufferfv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable', 'float'], returns='None'),
    ],
    "clearBufferiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Int32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable', 'float'], returns='None'),
    ],
    "clearBufferuiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Uint32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Iterable', 'float'], returns='None'),
    ],
    "clearColor": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearColor', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearColor', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "clearData": [
        PrototypeCall(constructor='DataTransfer', fn='clearData', demands=['DataTransfer'], returns='None'),
        PrototypeCall(constructor='DataTransfer', fn='clearData', demands=['DataTransfer', 'str'], returns='None'),
    ],
    "clearDepth": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearDepth', demands=['WebGLRenderingContext', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearDepth', demands=['WebGL2RenderingContext', 'GLclampf'], returns='None'),
    ],
    "clearInterval": [
        DirectCall(fn='clearInterval', receiver=None, demands=['float'], returns='None'),
    ],
    "clearLiveSeekableRange": [
        PrototypeCall(constructor='MediaSource', fn='clearLiveSeekableRange', demands=['MediaSource'], returns='None'),
    ],
    "clearMarks": [
        PrototypeCall(constructor='Performance', fn='clearMarks', demands=['Performance'], returns='None'),
        PrototypeCall(constructor='Performance', fn='clearMarks', demands=['Performance', 'str'], returns='None'),
    ],
    "clearMeasures": [
        PrototypeCall(constructor='Performance', fn='clearMeasures', demands=['Performance'], returns='None'),
        PrototypeCall(constructor='Performance', fn='clearMeasures', demands=['Performance', 'str'], returns='None'),
    ],
    "clearParameters": [
        PrototypeCall(constructor='XSLTProcessor', fn='clearParameters', demands=['XSLTProcessor'], returns='None'),
    ],
    "clearRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clearRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clearRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "clearResourceTimings": [
        PrototypeCall(constructor='Performance', fn='clearResourceTimings', demands=['Performance'], returns='None'),
    ],
    "clearStencil": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearStencil', demands=['WebGLRenderingContext', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearStencil', demands=['WebGL2RenderingContext', 'GLint'], returns='None'),
    ],
    "clearTimeout": [
        DirectCall(fn='clearTimeout', receiver=None, demands=['float'], returns='None'),
    ],
    "clearWatch": [
        PrototypeCall(constructor='Geolocation', fn='clearWatch', demands=['Geolocation', 'float'], returns='None'),
    ],
    "click": [
        FieldCall(field='click', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='click', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='click', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='click', demands=['HTMLHeadElement'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='click', demands=['HTMLModElement'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='click', demands=['HTMLDetailsElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='click', demands=['HTMLTableElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='click', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='click', demands=['HTMLImageElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='click', demands=['HTMLOptGroupElement'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='click', demands=['HTMLDListElement'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='click', demands=['HTMLTemplateElement'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='click', demands=['HTMLTitleElement'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='click', demands=['HTMLPreElement'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='click', demands=['HTMLAnchorElement'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='click', demands=['HTMLPictureElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='click', demands=['HTMLTableRowElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='click', demands=['HTMLTableSectionElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='click', demands=['HTMLFrameSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='click', demands=['HTMLBaseElement'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='click', demands=['HTMLFontElement'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='click', demands=['HTMLAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='click', demands=['HTMLOListElement'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='click', demands=['HTMLBodyElement'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='click', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='click', demands=['HTMLSelectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='click', demands=['HTMLTableCaptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='click', demands=['HTMLScriptElement'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='click', demands=['HTMLLIElement'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='click', demands=['HTMLStyleElement'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='click', demands=['HTMLTextAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='click', demands=['HTMLDivElement'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='click', demands=['HTMLProgressElement'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='click', demands=['HTMLIFrameElement'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='click', demands=['HTMLMeterElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='click', demands=['HTMLHeadingElement'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='click', demands=['HTMLObjectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='click', demands=['HTMLTableCellElement'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='click', demands=['HTMLLegendElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='click', demands=['HTMLDataListElement'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='click', demands=['HTMLUListElement'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='click', demands=['HTMLLabelElement'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='click', demands=['HTMLButtonElement'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='click', demands=['HTMLParagraphElement'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='click', demands=['HTMLDirectoryElement'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='click', demands=['HTMLSourceElement'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='click', demands=['HTMLMenuElement'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='click', demands=['HTMLTrackElement'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='click', demands=['HTMLQuoteElement'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='click', demands=['HTMLSpanElement'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='click', demands=['HTMLOutputElement'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='click', demands=['HTMLMarqueeElement'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='click', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='click', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='click', demands=['HTMLCanvasElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='click', demands=['HTMLTableColElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='click', demands=['HTMLDataElement'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='click', demands=['HTMLParamElement'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='click', demands=['HTMLMapElement'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='click', demands=['HTMLUnknownElement'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='click', demands=['HTMLHRElement'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='click', demands=['HTMLFieldSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='click', demands=['HTMLBRElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='click', demands=['HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='click', demands=['HTMLLinkElement'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='click', demands=['HTMLMetaElement'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='click', demands=['HTMLHtmlElement'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='click', demands=['HTMLTimeElement'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='click', demands=['HTMLSlotElement'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='click', demands=['HTMLEmbedElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='click', demands=['HTMLFrameElement'], returns='None'),
        FieldCall(field='click', demands=['NotificationEventMap'], returns='Event'),
        FieldCall(field='click', demands=['NotificationEventMap', 'Event'], returns='None'),
        FieldCall(field='click', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='click', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "clientDataJSON": [
        FieldCall(field='clientDataJSON', demands=['AuthenticatorResponse'], returns='ArrayBuffer'),
    ],
    "clientHeight": [
        FieldCall(field='clientHeight', demands=['Element'], returns='float'),
    ],
    "clientId": [
        FieldCall(field='clientId', demands=['LockInfo'], returns='str'),
        FieldCall(field='clientId', demands=['LockInfo', 'str'], returns='None'),
    ],
    "clientInformation": [
        FieldCall(field='clientInformation', demands=['Window'], returns='Navigator'),
    ],
    "clientLeft": [
        FieldCall(field='clientLeft', demands=['Element'], returns='float'),
    ],
    "clientTop": [
        FieldCall(field='clientTop', demands=['Element'], returns='float'),
    ],
    "clientWaitSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clientWaitSync', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLbitfield', 'GLuint64'], returns='GLenum'),
    ],
    "clientWidth": [
        FieldCall(field='clientWidth', demands=['Element'], returns='float'),
    ],
    "clientX": [
        FieldCall(field='clientX', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='clientX', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='clientX', demands=['TouchInit'], returns='float'),
        FieldCall(field='clientX', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='clientX', demands=['MouseEvent'], returns='float'),
        FieldCall(field='clientX', demands=['Touch'], returns='float'),
    ],
    "clientY": [
        FieldCall(field='clientY', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='clientY', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='clientY', demands=['TouchInit'], returns='float'),
        FieldCall(field='clientY', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='clientY', demands=['MouseEvent'], returns='float'),
        FieldCall(field='clientY', demands=['Touch'], returns='float'),
    ],
    "clip": [
        FieldCall(field='clip', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='clip', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
    ],
    "clipPath": [
        FieldCall(field='clipPath', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='clipPath', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='clipPath', demands=['SVGElementTagNameMap'], returns='SVGClipPathElement'),
        FieldCall(field='clipPath', demands=['SVGElementTagNameMap', 'SVGClipPathElement'], returns='None'),
    ],
    "clipPathUnits": [
        FieldCall(field='clipPathUnits', demands=['SVGClipPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "clipRule": [
        FieldCall(field='clipRule', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='clipRule', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "clipboard": [
        FieldCall(field='clipboard', demands=['Navigator'], returns='Clipboard'),
    ],
    "clipboardData": [
        FieldCall(field='clipboardData', demands=['ClipboardEventInit'], returns='DataTransfer'),
        FieldCall(field='clipboardData', demands=['ClipboardEventInit', 'DataTransfer'], returns='None'),
        FieldCall(field='clipboardData', demands=['ClipboardEvent'], returns='DataTransfer'),
    ],
    "clipped": [
        FieldCall(field='clipped', demands=['SVGBoundingBoxOptions'], returns='bool'),
        FieldCall(field='clipped', demands=['SVGBoundingBoxOptions', 'bool'], returns='None'),
    ],
    "clockRate": [
        FieldCall(field='clockRate', demands=['RTCRtpCodec'], returns='float'),
        FieldCall(field='clockRate', demands=['RTCRtpCodec', 'float'], returns='None'),
    ],
    "clonable": [
        FieldCall(field='clonable', demands=['ShadowRootInit'], returns='bool'),
        FieldCall(field='clonable', demands=['ShadowRootInit', 'bool'], returns='None'),
        FieldCall(field='clonable', demands=['ShadowRoot'], returns='bool'),
    ],
    "clone": [
        PrototypeCall(constructor='AudioData', fn='clone', demands=['AudioData'], returns='AudioData'),
        PrototypeCall(constructor='MediaStream', fn='clone', demands=['MediaStream'], returns='MediaStream'),
        PrototypeCall(constructor='MediaStreamTrack', fn='clone', demands=['MediaStreamTrack'], returns='MediaStreamTrack'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='clone', demands=['CanvasCaptureMediaStreamTrack'], returns='MediaStreamTrack'),
        PrototypeCall(constructor='Request', fn='clone', demands=['Request'], returns='Request'),
        PrototypeCall(constructor='Response', fn='clone', demands=['Response'], returns='Response'),
        PrototypeCall(constructor='VideoFrame', fn='clone', demands=['VideoFrame'], returns='VideoFrame'),
    ],
    "cloneContents": [
        PrototypeCall(constructor='Range', fn='cloneContents', demands=['Range'], returns='DocumentFragment'),
    ],
    "cloneNode": [
        PrototypeCall(constructor='Node', fn='cloneNode', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='DocumentType', fn='cloneNode', demands=['DocumentType'], returns='Node'),
        PrototypeCall(constructor='CharacterData', fn='cloneNode', demands=['CharacterData'], returns='Node'),
        PrototypeCall(constructor='Element', fn='cloneNode', demands=['Element'], returns='Node'),
        PrototypeCall(constructor='Attr', fn='cloneNode', demands=['Attr'], returns='Node'),
        PrototypeCall(constructor='Document', fn='cloneNode', demands=['Document'], returns='Node'),
        PrototypeCall(constructor='DocumentFragment', fn='cloneNode', demands=['DocumentFragment'], returns='Node'),
        PrototypeCall(constructor='Node', fn='cloneNode', demands=['Node', 'bool'], returns='Node'),
        PrototypeCall(constructor='DocumentType', fn='cloneNode', demands=['DocumentType', 'bool'], returns='Node'),
        PrototypeCall(constructor='CharacterData', fn='cloneNode', demands=['CharacterData', 'bool'], returns='Node'),
        PrototypeCall(constructor='Element', fn='cloneNode', demands=['Element', 'bool'], returns='Node'),
        PrototypeCall(constructor='Attr', fn='cloneNode', demands=['Attr', 'bool'], returns='Node'),
        PrototypeCall(constructor='Document', fn='cloneNode', demands=['Document', 'bool'], returns='Node'),
        PrototypeCall(constructor='DocumentFragment', fn='cloneNode', demands=['DocumentFragment', 'bool'], returns='Node'),
    ],
    "cloneRange": [
        PrototypeCall(constructor='Range', fn='cloneRange', demands=['Range'], returns='Range'),
    ],
    "close": [
        FieldCall(field='close', demands=['UnderlyingSink'], returns='UnderlyingSinkCloseCallback'),
        FieldCall(field='close', demands=['UnderlyingSink', 'UnderlyingSinkCloseCallback'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='close', demands=['AudioContext'], returns='None'),
        PrototypeCall(constructor='AudioData', fn='close', demands=['AudioData'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='close', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='close', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='close', demands=['BroadcastChannel'], returns='None'),
        PrototypeCall(constructor='Document', fn='close', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='close', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='close', demands=['XMLDocument'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='close', demands=['EventSource'], returns='None'),
        FieldCall(field='close', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='close', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='close', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='close', demands=['HTMLDialogElement', 'str'], returns='None'),
        FieldCall(field='close', demands=['IDBDatabaseEventMap'], returns='Event'),
        FieldCall(field='close', demands=['IDBDatabaseEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='close', demands=['IDBDatabase'], returns='None'),
        PrototypeCall(constructor='ImageBitmap', fn='close', demands=['ImageBitmap'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='close', demands=['ImageDecoder'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='close', demands=['MIDIPort'], returns='MIDIPort'),
        PrototypeCall(constructor='MIDIOutput', fn='close', demands=['MIDIOutput'], returns='MIDIPort'),
        PrototypeCall(constructor='MIDIInput', fn='close', demands=['MIDIInput'], returns='MIDIPort'),
        PrototypeCall(constructor='MediaKeySession', fn='close', demands=['MediaKeySession'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='close', demands=['MessagePort'], returns='None'),
        FieldCall(field='close', demands=['NotificationEventMap'], returns='Event'),
        FieldCall(field='close', demands=['NotificationEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='Notification', fn='close', demands=['Notification'], returns='None'),
        FieldCall(field='close', demands=['RTCDataChannelEventMap'], returns='Event'),
        FieldCall(field='close', demands=['RTCDataChannelEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='close', demands=['RTCDataChannel'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='close', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='close', demands=['ReadableByteStreamController'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='close', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='close', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='close', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='VideoFrame', fn='close', demands=['VideoFrame'], returns='None'),
        FieldCall(field='close', demands=['WebSocketEventMap'], returns='CloseEvent'),
        FieldCall(field='close', demands=['WebSocketEventMap', 'CloseEvent'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket', 'float'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='WebTransport', fn='close', demands=['WebTransport'], returns='None'),
        PrototypeCall(constructor='WebTransport', fn='close', demands=['WebTransport', 'WebTransportCloseInfo'], returns='None'),
        DirectCall(fn='close', receiver=None, demands=[], returns='None'),
        PrototypeCall(constructor='WebTransportSendStream', fn='close', demands=['WebTransportSendStream'], returns='None'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='close', demands=['FileSystemWritableFileStream'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='close', demands=['WebTransportWriter'], returns='None'),
        FieldCall(field='close', demands=['Window'], returns='()=>void'),
        FieldCall(field='close', demands=['Window', '()=>void'], returns='None'),
    ],
    "closeCode": [
        FieldCall(field='closeCode', demands=['WebTransportCloseInfo'], returns='float'),
        FieldCall(field='closeCode', demands=['WebTransportCloseInfo', 'float'], returns='None'),
        FieldCall(field='closeCode', demands=['WebSocketError'], returns='float'),
    ],
    "closePath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='closePath', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='closePath', demands=['Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='closePath', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
    ],
    "closed": [
        FieldCall(field='closed', demands=['MediaKeySession'], returns='MediaKeySessionClosedReason'),
        FieldCall(field='closed', demands=['ReadableStreamGenericReader'], returns='None'),
        FieldCall(field='closed', demands=['WebTransport'], returns='WebTransportCloseInfo'),
        FieldCall(field='closed', demands=['Window'], returns='bool'),
        FieldCall(field='closed', demands=['WritableStreamDefaultWriter'], returns='None'),
    ],
    "closest": [
        PrototypeCall(constructor='Element', fn='closest', demands=['Element', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='MathMLElement', fn='closest', demands=['MathMLElement', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='SVGElement', fn='closest', demands=['SVGElement', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLElement', fn='closest', demands=['HTMLElement', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='closest', demands=['Element', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='MathMLElement', fn='closest', demands=['MathMLElement', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='SVGElement', fn='closest', demands=['SVGElement', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLElement', fn='closest', demands=['HTMLElement', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='closest', demands=['Element', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='MathMLElement', fn='closest', demands=['MathMLElement', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='SVGElement', fn='closest', demands=['SVGElement', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLElement', fn='closest', demands=['HTMLElement', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='closest', demands=['Element', 'str'], returns='E'),
        PrototypeCall(constructor='MathMLElement', fn='closest', demands=['MathMLElement', 'str'], returns='E'),
        PrototypeCall(constructor='SVGElement', fn='closest', demands=['SVGElement', 'str'], returns='E'),
        PrototypeCall(constructor='HTMLElement', fn='closest', demands=['HTMLElement', 'str'], returns='E'),
    ],
    "closing": [
        FieldCall(field='closing', demands=['RTCDataChannelEventMap'], returns='Event'),
        FieldCall(field='closing', demands=['RTCDataChannelEventMap', 'Event'], returns='None'),
    ],
    "clz32": [
        PrototypeCall(constructor='Math', fn='clz32', demands=['Math', 'float'], returns='float'),
    ],
    "cmp": [
        PrototypeCall(constructor='IDBFactory', fn='cmp', demands=['IDBFactory', '*', '*'], returns='float'),
    ],
    "cname": [
        FieldCall(field='cname', demands=['RTCRtcpParameters'], returns='str'),
        FieldCall(field='cname', demands=['RTCRtcpParameters', 'str'], returns='None'),
    ],
    "coalescedEvents": [
        FieldCall(field='coalescedEvents', demands=['PointerEventInit'], returns='list'),
        FieldCall(field='coalescedEvents', demands=['PointerEventInit', 'list'], returns='None'),
    ],
    "code": [
        FieldCall(field='code', demands=['CloseEventInit'], returns='float'),
        FieldCall(field='code', demands=['CloseEventInit', 'float'], returns='None'),
        FieldCall(field='code', demands=['KeyboardEventInit'], returns='str'),
        FieldCall(field='code', demands=['KeyboardEventInit', 'str'], returns='None'),
        FieldCall(field='code', demands=['CloseEvent'], returns='float'),
        FieldCall(field='code', demands=['DOMException'], returns='float'),
        FieldCall(field='code', demands=['GeolocationPositionError'], returns='float'),
        FieldCall(field='code', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='code', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='code', demands=['KeyboardEvent'], returns='str'),
        FieldCall(field='code', demands=['MediaError'], returns='float'),
        FieldCall(field='code', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='code', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "codeBase": [
        FieldCall(field='codeBase', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='codeBase', demands=['HTMLObjectElement', 'str'], returns='None'),
    ],
    "codePointAt": [
        PrototypeCall(constructor='String', fn='codePointAt', demands=['str', 'float'], returns='float'),
    ],
    "codeType": [
        FieldCall(field='codeType', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='codeType', demands=['HTMLObjectElement', 'str'], returns='None'),
    ],
    "codec": [
        FieldCall(field='codec', demands=['AudioDecoderConfig'], returns='str'),
        FieldCall(field='codec', demands=['AudioDecoderConfig', 'str'], returns='None'),
        FieldCall(field='codec', demands=['AudioEncoderConfig'], returns='str'),
        FieldCall(field='codec', demands=['AudioEncoderConfig', 'str'], returns='None'),
        FieldCall(field='codec', demands=['VideoDecoderConfig'], returns='str'),
        FieldCall(field='codec', demands=['VideoDecoderConfig', 'str'], returns='None'),
        FieldCall(field='codec', demands=['VideoEncoderConfig'], returns='str'),
        FieldCall(field='codec', demands=['VideoEncoderConfig', 'str'], returns='None'),
    ],
    "codecId": [
        FieldCall(field='codecId', demands=['RTCRtpStreamStats'], returns='str'),
        FieldCall(field='codecId', demands=['RTCRtpStreamStats', 'str'], returns='None'),
    ],
    "codecs": [
        FieldCall(field='codecs', demands=['RTCRtpCapabilities'], returns='list'),
        FieldCall(field='codecs', demands=['RTCRtpCapabilities', 'list'], returns='None'),
        FieldCall(field='codecs', demands=['RTCRtpParameters'], returns='list'),
        FieldCall(field='codecs', demands=['RTCRtpParameters', 'list'], returns='None'),
    ],
    "codedHeight": [
        FieldCall(field='codedHeight', demands=['VideoDecoderConfig'], returns='float'),
        FieldCall(field='codedHeight', demands=['VideoDecoderConfig', 'float'], returns='None'),
        FieldCall(field='codedHeight', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='codedHeight', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='codedHeight', demands=['VideoFrame'], returns='float'),
    ],
    "codedRect": [
        FieldCall(field='codedRect', demands=['VideoFrame'], returns='DOMRectReadOnly'),
    ],
    "codedWidth": [
        FieldCall(field='codedWidth', demands=['VideoDecoderConfig'], returns='float'),
        FieldCall(field='codedWidth', demands=['VideoDecoderConfig', 'float'], returns='None'),
        FieldCall(field='codedWidth', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='codedWidth', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='codedWidth', demands=['VideoFrame'], returns='float'),
    ],
    "col": [
        FieldCall(field='col', demands=['HTMLElementTagNameMap'], returns='HTMLTableColElement'),
        FieldCall(field='col', demands=['HTMLElementTagNameMap', 'HTMLTableColElement'], returns='None'),
    ],
    "colSpan": [
        FieldCall(field='colSpan', demands=['HTMLTableCellElement'], returns='float'),
        FieldCall(field='colSpan', demands=['HTMLTableCellElement', 'float'], returns='None'),
    ],
    "colgroup": [
        FieldCall(field='colgroup', demands=['HTMLElementTagNameMap'], returns='HTMLTableColElement'),
        FieldCall(field='colgroup', demands=['HTMLElementTagNameMap', 'HTMLTableColElement'], returns='None'),
    ],
    "collapse": [
        PrototypeCall(constructor='Range', fn='collapse', demands=['Range'], returns='None'),
        PrototypeCall(constructor='Range', fn='collapse', demands=['Range', 'bool'], returns='None'),
        PrototypeCall(constructor='Selection', fn='collapse', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='collapse', demands=['Selection', 'Node', 'float'], returns='None'),
    ],
    "collapseToEnd": [
        PrototypeCall(constructor='Selection', fn='collapseToEnd', demands=['Selection'], returns='None'),
    ],
    "collapseToStart": [
        PrototypeCall(constructor='Selection', fn='collapseToStart', demands=['Selection'], returns='None'),
    ],
    "collapsed": [
        FieldCall(field='collapsed', demands=['AbstractRange'], returns='bool'),
    ],
    "colno": [
        FieldCall(field='colno', demands=['ErrorEventInit'], returns='float'),
        FieldCall(field='colno', demands=['ErrorEventInit', 'float'], returns='None'),
        FieldCall(field='colno', demands=['ErrorEvent'], returns='float'),
    ],
    "color": [
        FieldCall(field='color', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='color', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='color', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='color', demands=['HTMLFontElement', 'str'], returns='None'),
        FieldCall(field='color', demands=['HTMLHRElement'], returns='str'),
        FieldCall(field='color', demands=['HTMLHRElement', 'str'], returns='None'),
        FieldCall(field='color', demands=['GPUBlendState'], returns='GPUBlendComponent'),
        FieldCall(field='color', demands=['GPUBlendState', 'GPUBlendComponent'], returns='None'),
    ],
    "colorDepth": [
        FieldCall(field='colorDepth', demands=['Screen'], returns='float'),
    ],
    "colorGamut": [
        FieldCall(field='colorGamut', demands=['VideoConfiguration'], returns='ColorGamut'),
        FieldCall(field='colorGamut', demands=['VideoConfiguration', 'ColorGamut'], returns='None'),
    ],
    "colorInterpolation": [
        FieldCall(field='colorInterpolation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='colorInterpolation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "colorInterpolationFilters": [
        FieldCall(field='colorInterpolationFilters', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='colorInterpolationFilters', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "colorMask": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='colorMask', demands=['WebGLRenderingContext', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='colorMask', demands=['WebGL2RenderingContext', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
    ],
    "colorMaskiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='colorMaskiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
    ],
    "colorScheme": [
        FieldCall(field='colorScheme', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='colorScheme', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "colorSpace": [
        FieldCall(field='colorSpace', demands=['CanvasRenderingContext2DSettings'], returns='PredefinedColorSpace'),
        FieldCall(field='colorSpace', demands=['CanvasRenderingContext2DSettings', 'PredefinedColorSpace'], returns='None'),
        FieldCall(field='colorSpace', demands=['ImageDataSettings'], returns='PredefinedColorSpace'),
        FieldCall(field='colorSpace', demands=['ImageDataSettings', 'PredefinedColorSpace'], returns='None'),
        FieldCall(field='colorSpace', demands=['VideoDecoderConfig'], returns='VideoColorSpaceInit'),
        FieldCall(field='colorSpace', demands=['VideoDecoderConfig', 'VideoColorSpaceInit'], returns='None'),
        FieldCall(field='colorSpace', demands=['VideoFrameBufferInit'], returns='VideoColorSpaceInit'),
        FieldCall(field='colorSpace', demands=['VideoFrameBufferInit', 'VideoColorSpaceInit'], returns='None'),
        FieldCall(field='colorSpace', demands=['VideoFrameCopyToOptions'], returns='PredefinedColorSpace'),
        FieldCall(field='colorSpace', demands=['VideoFrameCopyToOptions', 'PredefinedColorSpace'], returns='None'),
        FieldCall(field='colorSpace', demands=['ImageData'], returns='PredefinedColorSpace'),
        FieldCall(field='colorSpace', demands=['VideoFrame'], returns='VideoColorSpace'),
        FieldCall(field='colorSpace', demands=['GPUCanvasConfiguration'], returns='"srgb"'),
        FieldCall(field='colorSpace', demands=['GPUCanvasConfiguration', '"srgb"'], returns='None'),
    ],
    "colorSpaceConversion": [
        FieldCall(field='colorSpaceConversion', demands=['ImageBitmapOptions'], returns='ColorSpaceConversion'),
        FieldCall(field='colorSpaceConversion', demands=['ImageBitmapOptions', 'ColorSpaceConversion'], returns='None'),
        FieldCall(field='colorSpaceConversion', demands=['ImageDecoderInit'], returns='ColorSpaceConversion'),
        FieldCall(field='colorSpaceConversion', demands=['ImageDecoderInit', 'ColorSpaceConversion'], returns='None'),
    ],
    "cols": [
        FieldCall(field='cols', demands=['HTMLFrameSetElement'], returns='str'),
        FieldCall(field='cols', demands=['HTMLFrameSetElement', 'str'], returns='None'),
        FieldCall(field='cols', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='cols', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "columnCount": [
        FieldCall(field='columnCount', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnCount', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnFill": [
        FieldCall(field='columnFill', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnFill', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnGap": [
        FieldCall(field='columnGap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnGap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnNumber": [
        FieldCall(field='columnNumber', demands=['SecurityPolicyViolationEventInit'], returns='float'),
        FieldCall(field='columnNumber', demands=['SecurityPolicyViolationEventInit', 'float'], returns='None'),
        FieldCall(field='columnNumber', demands=['CSPViolationReportBody'], returns='float'),
        FieldCall(field='columnNumber', demands=['SecurityPolicyViolationEvent'], returns='float'),
    ],
    "columnRule": [
        FieldCall(field='columnRule', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnRule', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnRuleColor": [
        FieldCall(field='columnRuleColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnRuleColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnRuleStyle": [
        FieldCall(field='columnRuleStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnRuleStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnRuleWidth": [
        FieldCall(field='columnRuleWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnRuleWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnSpan": [
        FieldCall(field='columnSpan', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnSpan', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columnWidth": [
        FieldCall(field='columnWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columnWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "columns": [
        FieldCall(field='columns', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='columns', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "commit": [
        PrototypeCall(constructor='IDBTransaction', fn='commit', demands=['IDBTransaction'], returns='None'),
    ],
    "commitStyles": [
        PrototypeCall(constructor='Animation', fn='commitStyles', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='commitStyles', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='commitStyles', demands=['CSSTransition'], returns='None'),
    ],
    "commonAncestorContainer": [
        FieldCall(field='commonAncestorContainer', demands=['Range'], returns='Node'),
    ],
    "compact": [
        FieldCall(field='compact', demands=['HTMLDListElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLDListElement', 'bool'], returns='None'),
        FieldCall(field='compact', demands=['HTMLDirectoryElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLDirectoryElement', 'bool'], returns='None'),
        FieldCall(field='compact', demands=['HTMLMenuElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLMenuElement', 'bool'], returns='None'),
        FieldCall(field='compact', demands=['HTMLOListElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLOListElement', 'bool'], returns='None'),
        FieldCall(field='compact', demands=['HTMLUListElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLUListElement', 'bool'], returns='None'),
    ],
    "compactDisplay": [
        FieldCall(field='compactDisplay', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='compactDisplay', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "compare": [
        FieldCall(field='compare', demands=['GPUStencilFaceState'], returns='GPUCompareFunction'),
        FieldCall(field='compare', demands=['GPUStencilFaceState', 'GPUCompareFunction'], returns='None'),
    ],
    "compareBoundaryPoints": [
        PrototypeCall(constructor='Range', fn='compareBoundaryPoints', demands=['Range', 'float', 'Range'], returns='float'),
    ],
    "compareDocumentPosition": [
        PrototypeCall(constructor='Node', fn='compareDocumentPosition', demands=['Node', 'Node'], returns='float'),
        PrototypeCall(constructor='DocumentType', fn='compareDocumentPosition', demands=['DocumentType', 'Node'], returns='float'),
        PrototypeCall(constructor='CharacterData', fn='compareDocumentPosition', demands=['CharacterData', 'Node'], returns='float'),
        PrototypeCall(constructor='Element', fn='compareDocumentPosition', demands=['Element', 'Node'], returns='float'),
        PrototypeCall(constructor='Attr', fn='compareDocumentPosition', demands=['Attr', 'Node'], returns='float'),
        PrototypeCall(constructor='Document', fn='compareDocumentPosition', demands=['Document', 'Node'], returns='float'),
        PrototypeCall(constructor='DocumentFragment', fn='compareDocumentPosition', demands=['DocumentFragment', 'Node'], returns='float'),
    ],
    "compareExchange": [
        PrototypeCall(constructor='Atomics', fn='compareExchange', demands=['Atomics', 'BigInt64Array', 'float', 'bigint', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='compareExchange', demands=['Atomics', 'Int8Array', 'float', 'float', 'float'], returns='float'),
    ],
    "comparePoint": [
        PrototypeCall(constructor='Range', fn='comparePoint', demands=['Range', 'Node', 'float'], returns='float'),
    ],
    "compatMode": [
        FieldCall(field='compatMode', demands=['Document'], returns='str'),
    ],
    "compile": [
        PrototypeCall(constructor='RegExp', fn='compile', demands=['regex', 'str'], returns='regex'),
        PrototypeCall(constructor='RegExp', fn='compile', demands=['regex', 'str', 'str'], returns='regex'),
    ],
    "compileShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='compileShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compileShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='None'),
    ],
    "complete": [
        FieldCall(field='complete', demands=['ImageDecodeResult'], returns='bool'),
        FieldCall(field='complete', demands=['ImageDecodeResult', 'bool'], returns='None'),
        FieldCall(field='complete', demands=['HTMLImageElement'], returns='bool'),
        FieldCall(field='complete', demands=['IDBTransactionEventMap'], returns='Event'),
        FieldCall(field='complete', demands=['IDBTransactionEventMap', 'Event'], returns='None'),
        FieldCall(field='complete', demands=['ImageDecoder'], returns='bool'),
        FieldCall(field='complete', demands=['OfflineAudioContextEventMap'], returns='OfflineAudioCompletionEvent'),
        FieldCall(field='complete', demands=['OfflineAudioContextEventMap', 'OfflineAudioCompletionEvent'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='complete', demands=['PaymentResponse'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='complete', demands=['PaymentResponse', 'PaymentComplete'], returns='None'),
    ],
    "completeFramesOnly": [
        FieldCall(field='completeFramesOnly', demands=['ImageDecodeOptions'], returns='bool'),
        FieldCall(field='completeFramesOnly', demands=['ImageDecodeOptions', 'bool'], returns='None'),
    ],
    "completed": [
        FieldCall(field='completed', demands=['ImageDecoder'], returns='None'),
    ],
    "complexity": [
        FieldCall(field='complexity', demands=['OpusEncoderConfig'], returns='float'),
        FieldCall(field='complexity', demands=['OpusEncoderConfig', 'float'], returns='None'),
    ],
    "component": [
        FieldCall(field='component', demands=['RTCIceCandidate'], returns='RTCIceComponent'),
    ],
    "composed": [
        FieldCall(field='composed', demands=['EventInit'], returns='bool'),
        FieldCall(field='composed', demands=['EventInit', 'bool'], returns='None'),
        FieldCall(field='composed', demands=['GetRootNodeOptions'], returns='bool'),
        FieldCall(field='composed', demands=['GetRootNodeOptions', 'bool'], returns='None'),
        FieldCall(field='composed', demands=['Event'], returns='bool'),
    ],
    "composedPath": [
        PrototypeCall(constructor='Event', fn='composedPath', demands=['Event'], returns='list'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='composedPath', demands=['SpeechSynthesisEvent'], returns='list'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='composedPath', demands=['FontFaceSetLoadEvent'], returns='list'),
        PrototypeCall(constructor='UIEvent', fn='composedPath', demands=['UIEvent'], returns='list'),
        PrototypeCall(constructor='RTCErrorEvent', fn='composedPath', demands=['RTCErrorEvent'], returns='list'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='composedPath', demands=['BeforeUnloadEvent'], returns='list'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='composedPath', demands=['OfflineAudioCompletionEvent'], returns='list'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='composedPath', demands=['RTCPeerConnectionIceErrorEvent'], returns='list'),
        PrototypeCall(constructor='SubmitEvent', fn='composedPath', demands=['SubmitEvent'], returns='list'),
        PrototypeCall(constructor='PopStateEvent', fn='composedPath', demands=['PopStateEvent'], returns='list'),
        PrototypeCall(constructor='PageRevealEvent', fn='composedPath', demands=['PageRevealEvent'], returns='list'),
        PrototypeCall(constructor='FormDataEvent', fn='composedPath', demands=['FormDataEvent'], returns='list'),
        PrototypeCall(constructor='CookieChangeEvent', fn='composedPath', demands=['CookieChangeEvent'], returns='list'),
        PrototypeCall(constructor='ErrorEvent', fn='composedPath', demands=['ErrorEvent'], returns='list'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='composedPath', demands=['AnimationPlaybackEvent'], returns='list'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='composedPath', demands=['PaymentRequestUpdateEvent'], returns='list'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='composedPath', demands=['PromiseRejectionEvent'], returns='list'),
        PrototypeCall(constructor='ClipboardEvent', fn='composedPath', demands=['ClipboardEvent'], returns='list'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='composedPath', demands=['MediaEncryptedEvent'], returns='list'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='composedPath', demands=['MediaKeyMessageEvent'], returns='list'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='composedPath', demands=['RTCPeerConnectionIceEvent'], returns='list'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='composedPath', demands=['IDBVersionChangeEvent'], returns='list'),
        PrototypeCall(constructor='GamepadEvent', fn='composedPath', demands=['GamepadEvent'], returns='list'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='composedPath', demands=['MediaQueryListEvent'], returns='list'),
        PrototypeCall(constructor='TransitionEvent', fn='composedPath', demands=['TransitionEvent'], returns='list'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='composedPath', demands=['PictureInPictureEvent'], returns='list'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='composedPath', demands=['RTCDataChannelEvent'], returns='list'),
        PrototypeCall(constructor='TrackEvent', fn='composedPath', demands=['TrackEvent'], returns='list'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='composedPath', demands=['SecurityPolicyViolationEvent'], returns='list'),
        PrototypeCall(constructor='AnimationEvent', fn='composedPath', demands=['AnimationEvent'], returns='list'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='composedPath', demands=['MediaStreamTrackEvent'], returns='list'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='composedPath', demands=['RTCDTMFToneChangeEvent'], returns='list'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='composedPath', demands=['AudioProcessingEvent'], returns='list'),
        PrototypeCall(constructor='ToggleEvent', fn='composedPath', demands=['ToggleEvent'], returns='list'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='composedPath', demands=['DeviceOrientationEvent'], returns='list'),
        PrototypeCall(constructor='PageSwapEvent', fn='composedPath', demands=['PageSwapEvent'], returns='list'),
        PrototypeCall(constructor='StorageEvent', fn='composedPath', demands=['StorageEvent'], returns='list'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='composedPath', demands=['ContentVisibilityAutoStateChangeEvent'], returns='list'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='composedPath', demands=['MIDIMessageEvent'], returns='list'),
        PrototypeCall(constructor='CloseEvent', fn='composedPath', demands=['CloseEvent'], returns='list'),
        PrototypeCall(constructor='ProgressEvent', fn='composedPath', demands=['ProgressEvent'], returns='list'),
        PrototypeCall(constructor='HashChangeEvent', fn='composedPath', demands=['HashChangeEvent'], returns='list'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='composedPath', demands=['MIDIConnectionEvent'], returns='list'),
        PrototypeCall(constructor='PageTransitionEvent', fn='composedPath', demands=['PageTransitionEvent'], returns='list'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='composedPath', demands=['DeviceMotionEvent'], returns='list'),
        PrototypeCall(constructor='WebGLContextEvent', fn='composedPath', demands=['WebGLContextEvent'], returns='list'),
        PrototypeCall(constructor='BlobEvent', fn='composedPath', demands=['BlobEvent'], returns='list'),
        PrototypeCall(constructor='RTCTrackEvent', fn='composedPath', demands=['RTCTrackEvent'], returns='list'),
    ],
    "composite": [
        FieldCall(field='composite', demands=['ComputedKeyframe'], returns='CompositeOperationOrAuto'),
        FieldCall(field='composite', demands=['ComputedKeyframe', 'CompositeOperationOrAuto'], returns='None'),
        FieldCall(field='composite', demands=['Keyframe'], returns='CompositeOperationOrAuto'),
        FieldCall(field='composite', demands=['Keyframe', 'CompositeOperationOrAuto'], returns='None'),
        FieldCall(field='composite', demands=['KeyframeEffectOptions'], returns='CompositeOperation'),
        FieldCall(field='composite', demands=['KeyframeEffectOptions', 'CompositeOperation'], returns='None'),
        FieldCall(field='composite', demands=['PropertyIndexedKeyframes'], returns='CompositeOperationOrAuto'),
        FieldCall(field='composite', demands=['PropertyIndexedKeyframes', 'CompositeOperationOrAuto'], returns='None'),
        FieldCall(field='composite', demands=['KeyframeEffect'], returns='CompositeOperation'),
        FieldCall(field='composite', demands=['KeyframeEffect', 'CompositeOperation'], returns='None'),
    ],
    "compositionend": [
        FieldCall(field='compositionend', demands=['GlobalEventHandlersEventMap'], returns='CompositionEvent'),
        FieldCall(field='compositionend', demands=['GlobalEventHandlersEventMap', 'CompositionEvent'], returns='None'),
    ],
    "compositionstart": [
        FieldCall(field='compositionstart', demands=['GlobalEventHandlersEventMap'], returns='CompositionEvent'),
        FieldCall(field='compositionstart', demands=['GlobalEventHandlersEventMap', 'CompositionEvent'], returns='None'),
    ],
    "compositionupdate": [
        FieldCall(field='compositionupdate', demands=['GlobalEventHandlersEventMap'], returns='CompositionEvent'),
        FieldCall(field='compositionupdate', demands=['GlobalEventHandlersEventMap', 'CompositionEvent'], returns='None'),
    ],
    "compressedTexImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='compressedTexImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
    ],
    "compressedTexImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
    ],
    "compressedTexSubImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='compressedTexSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
    ],
    "compressedTexSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
    ],
    "computedOffset": [
        FieldCall(field='computedOffset', demands=['ComputedKeyframe'], returns='float'),
        FieldCall(field='computedOffset', demands=['ComputedKeyframe', 'float'], returns='None'),
    ],
    "computedStyleMap": [
        PrototypeCall(constructor='Element', fn='computedStyleMap', demands=['Element'], returns='StylePropertyMapReadOnly'),
        PrototypeCall(constructor='MathMLElement', fn='computedStyleMap', demands=['MathMLElement'], returns='StylePropertyMapReadOnly'),
        PrototypeCall(constructor='SVGElement', fn='computedStyleMap', demands=['SVGElement'], returns='StylePropertyMapReadOnly'),
        PrototypeCall(constructor='HTMLElement', fn='computedStyleMap', demands=['HTMLElement'], returns='StylePropertyMapReadOnly'),
    ],
    "concat": [
        PrototypeCall(constructor='String', fn='concat', demands=['str', '*'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='concat', demands=['ReadonlyArray', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='concat', demands=['list', '*'], returns='list'),
    ],
    "concealedSamples": [
        FieldCall(field='concealedSamples', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='concealedSamples', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "concealmentEvents": [
        FieldCall(field='concealmentEvents', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='concealmentEvents', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "conditionText": [
        FieldCall(field='conditionText', demands=['CSSConditionRule'], returns='str'),
    ],
    "coneInnerAngle": [
        FieldCall(field='coneInnerAngle', demands=['PannerOptions'], returns='float'),
        FieldCall(field='coneInnerAngle', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='coneInnerAngle', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneInnerAngle', demands=['PannerNode', 'float'], returns='None'),
    ],
    "coneOuterAngle": [
        FieldCall(field='coneOuterAngle', demands=['PannerOptions'], returns='float'),
        FieldCall(field='coneOuterAngle', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='coneOuterAngle', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneOuterAngle', demands=['PannerNode', 'float'], returns='None'),
    ],
    "coneOuterGain": [
        FieldCall(field='coneOuterGain', demands=['PannerOptions'], returns='float'),
        FieldCall(field='coneOuterGain', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='coneOuterGain', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneOuterGain', demands=['PannerNode', 'float'], returns='None'),
    ],
    "confidence": [
        FieldCall(field='confidence', demands=['SpeechRecognitionAlternative'], returns='float'),
    ],
    "config": [
        FieldCall(field='config', demands=['AudioDecoderSupport'], returns='AudioDecoderConfig'),
        FieldCall(field='config', demands=['AudioDecoderSupport', 'AudioDecoderConfig'], returns='None'),
        FieldCall(field='config', demands=['AudioEncoderSupport'], returns='AudioEncoderConfig'),
        FieldCall(field='config', demands=['AudioEncoderSupport', 'AudioEncoderConfig'], returns='None'),
        FieldCall(field='config', demands=['VideoDecoderSupport'], returns='VideoDecoderConfig'),
        FieldCall(field='config', demands=['VideoDecoderSupport', 'VideoDecoderConfig'], returns='None'),
        FieldCall(field='config', demands=['VideoEncoderSupport'], returns='VideoEncoderConfig'),
        FieldCall(field='config', demands=['VideoEncoderSupport', 'VideoEncoderConfig'], returns='None'),
    ],
    "configurable": [
        FieldCall(field='configurable', demands=['PropertyDescriptor'], returns='bool'),
        FieldCall(field='configurable', demands=['PropertyDescriptor', 'bool'], returns='None'),
        FieldCall(field='configurable', demands=['TypedPropertyDescriptor'], returns='bool'),
        FieldCall(field='configurable', demands=['TypedPropertyDescriptor', 'bool'], returns='None'),
    ],
    "configuration": [
        FieldCall(field='configuration', demands=['MediaCapabilitiesDecodingInfo'], returns='MediaDecodingConfiguration'),
        FieldCall(field='configuration', demands=['MediaCapabilitiesDecodingInfo', 'MediaDecodingConfiguration'], returns='None'),
        FieldCall(field='configuration', demands=['MediaCapabilitiesEncodingInfo'], returns='MediaEncodingConfiguration'),
        FieldCall(field='configuration', demands=['MediaCapabilitiesEncodingInfo', 'MediaEncodingConfiguration'], returns='None'),
    ],
    "configure": [
        PrototypeCall(constructor='AudioDecoder', fn='configure', demands=['AudioDecoder', 'AudioDecoderConfig'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='configure', demands=['AudioEncoder', 'AudioEncoderConfig'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='configure', demands=['VideoDecoder', 'VideoDecoderConfig'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='configure', demands=['VideoEncoder', 'VideoEncoderConfig'], returns='None'),
        PrototypeCall(constructor='GPUCanvasContext', fn='configure', demands=['GPUCanvasContext', 'GPUCanvasConfiguration'], returns='None'),
    ],
    "confirm": [
        DirectCall(fn='confirm', receiver=None, demands=[], returns='bool'),
        DirectCall(fn='confirm', receiver=None, demands=['str'], returns='bool'),
        FieldCall(field='confirm', demands=['Window'], returns='(message?:string)=>boolean'),
        FieldCall(field='confirm', demands=['Window', '(message?:string)=>boolean'], returns='None'),
    ],
    "congestionControl": [
        FieldCall(field='congestionControl', demands=['WebTransportOptions'], returns='WebTransportCongestionControl'),
        FieldCall(field='congestionControl', demands=['WebTransportOptions', 'WebTransportCongestionControl'], returns='None'),
    ],
    "connect": [
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='WaveShaperNode', fn='connect', demands=['WaveShaperNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='connect', demands=['ChannelSplitterNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='StereoPannerNode', fn='connect', demands=['StereoPannerNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AudioWorkletNode', fn='connect', demands=['AudioWorkletNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='IIRFilterNode', fn='connect', demands=['IIRFilterNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='connect', demands=['AudioScheduledSourceNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='connect', demands=['MediaStreamAudioSourceNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='PannerNode', fn='connect', demands=['PannerNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='connect', demands=['MediaStreamAudioDestinationNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='connect', demands=['ScriptProcessorNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='BiquadFilterNode', fn='connect', demands=['BiquadFilterNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='connect', demands=['DynamicsCompressorNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='ConvolverNode', fn='connect', demands=['ConvolverNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AnalyserNode', fn='connect', demands=['AnalyserNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelMergerNode', fn='connect', demands=['ChannelMergerNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='connect', demands=['MediaElementAudioSourceNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='GainNode', fn='connect', demands=['GainNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AudioDestinationNode', fn='connect', demands=['AudioDestinationNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='DelayNode', fn='connect', demands=['DelayNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='WaveShaperNode', fn='connect', demands=['WaveShaperNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='connect', demands=['ChannelSplitterNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='StereoPannerNode', fn='connect', demands=['StereoPannerNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioWorkletNode', fn='connect', demands=['AudioWorkletNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='IIRFilterNode', fn='connect', demands=['IIRFilterNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='connect', demands=['AudioScheduledSourceNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='connect', demands=['MediaStreamAudioSourceNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='PannerNode', fn='connect', demands=['PannerNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='connect', demands=['MediaStreamAudioDestinationNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='connect', demands=['ScriptProcessorNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='BiquadFilterNode', fn='connect', demands=['BiquadFilterNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='connect', demands=['DynamicsCompressorNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ConvolverNode', fn='connect', demands=['ConvolverNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AnalyserNode', fn='connect', demands=['AnalyserNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelMergerNode', fn='connect', demands=['ChannelMergerNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='connect', demands=['MediaElementAudioSourceNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='GainNode', fn='connect', demands=['GainNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioDestinationNode', fn='connect', demands=['AudioDestinationNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='DelayNode', fn='connect', demands=['DelayNode', 'AudioNode', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='WaveShaperNode', fn='connect', demands=['WaveShaperNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='connect', demands=['ChannelSplitterNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='StereoPannerNode', fn='connect', demands=['StereoPannerNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioWorkletNode', fn='connect', demands=['AudioWorkletNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='IIRFilterNode', fn='connect', demands=['IIRFilterNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='connect', demands=['AudioScheduledSourceNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='connect', demands=['MediaStreamAudioSourceNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='PannerNode', fn='connect', demands=['PannerNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='connect', demands=['MediaStreamAudioDestinationNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='connect', demands=['ScriptProcessorNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='BiquadFilterNode', fn='connect', demands=['BiquadFilterNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='connect', demands=['DynamicsCompressorNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ConvolverNode', fn='connect', demands=['ConvolverNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AnalyserNode', fn='connect', demands=['AnalyserNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='ChannelMergerNode', fn='connect', demands=['ChannelMergerNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='connect', demands=['MediaElementAudioSourceNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='GainNode', fn='connect', demands=['GainNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioDestinationNode', fn='connect', demands=['AudioDestinationNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='DelayNode', fn='connect', demands=['DelayNode', 'AudioNode', 'float', 'float'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='connect', demands=['WaveShaperNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='connect', demands=['ChannelSplitterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='connect', demands=['StereoPannerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='connect', demands=['AudioWorkletNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='connect', demands=['IIRFilterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='connect', demands=['AudioScheduledSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='connect', demands=['MediaStreamAudioSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='connect', demands=['PannerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='connect', demands=['MediaStreamAudioDestinationNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='connect', demands=['ScriptProcessorNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='connect', demands=['BiquadFilterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='connect', demands=['DynamicsCompressorNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='connect', demands=['ConvolverNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='connect', demands=['AnalyserNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='connect', demands=['ChannelMergerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='connect', demands=['MediaElementAudioSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='connect', demands=['GainNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='connect', demands=['AudioDestinationNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='connect', demands=['DelayNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='connect', demands=['WaveShaperNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='connect', demands=['ChannelSplitterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='connect', demands=['StereoPannerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='connect', demands=['AudioWorkletNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='connect', demands=['IIRFilterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='connect', demands=['AudioScheduledSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='connect', demands=['MediaStreamAudioSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='connect', demands=['PannerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='connect', demands=['MediaStreamAudioDestinationNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='connect', demands=['ScriptProcessorNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='connect', demands=['BiquadFilterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='connect', demands=['DynamicsCompressorNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='connect', demands=['ConvolverNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='connect', demands=['AnalyserNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='connect', demands=['ChannelMergerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='connect', demands=['MediaElementAudioSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='connect', demands=['GainNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='connect', demands=['AudioDestinationNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='connect', demands=['DelayNode', 'AudioParam', 'float'], returns='None'),
        FieldCall(field='connect', demands=['RemotePlaybackEventMap'], returns='Event'),
        FieldCall(field='connect', demands=['RemotePlaybackEventMap', 'Event'], returns='None'),
    ],
    "connectEnd": [
        FieldCall(field='connectEnd', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='connectEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "connectStart": [
        FieldCall(field='connectStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='connectStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "connected": [
        FieldCall(field='connected', demands=['Gamepad'], returns='bool'),
    ],
    "connecting": [
        FieldCall(field='connecting', demands=['RemotePlaybackEventMap'], returns='Event'),
        FieldCall(field='connecting', demands=['RemotePlaybackEventMap', 'Event'], returns='None'),
    ],
    "connection": [
        FieldCall(field='connection', demands=['MIDIPort'], returns='MIDIPortConnectionState'),
    ],
    "connectionState": [
        FieldCall(field='connectionState', demands=['RTCPeerConnection'], returns='RTCPeerConnectionState'),
    ],
    "connectionstatechange": [
        FieldCall(field='connectionstatechange', demands=['RTCPeerConnectionEventMap'], returns='Event'),
        FieldCall(field='connectionstatechange', demands=['RTCPeerConnectionEventMap', 'Event'], returns='None'),
    ],
    "consentRequestsSent": [
        FieldCall(field='consentRequestsSent', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='consentRequestsSent', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "consolidate": [
        PrototypeCall(constructor='SVGTransformList', fn='consolidate', demands=['SVGTransformList'], returns='SVGTransform'),
    ],
    "constants": [
        FieldCall(field='constants', demands=['GPUProgrammableStage'], returns='Record'),
        FieldCall(field='constants', demands=['GPUProgrammableStage', 'Record'], returns='None'),
    ],
    "constraint": [
        FieldCall(field='constraint', demands=['OverconstrainedError'], returns='str'),
    ],
    "construct": [
        PrototypeCall(constructor='ProxyHandler', fn='construct', demands=['ProxyHandler', 'T', 'list', '*'], returns='dict'),
    ],
    "constructor": [
        FieldCall(field='constructor', demands=['Object'], returns='*'),
        FieldCall(field='constructor', demands=['Object', '*'], returns='None'),
    ],
    "contain": [
        FieldCall(field='contain', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='contain', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containIntrinsicBlockSize": [
        FieldCall(field='containIntrinsicBlockSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containIntrinsicBlockSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containIntrinsicHeight": [
        FieldCall(field='containIntrinsicHeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containIntrinsicHeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containIntrinsicInlineSize": [
        FieldCall(field='containIntrinsicInlineSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containIntrinsicInlineSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containIntrinsicSize": [
        FieldCall(field='containIntrinsicSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containIntrinsicSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containIntrinsicWidth": [
        FieldCall(field='containIntrinsicWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containIntrinsicWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "container": [
        FieldCall(field='container', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='container', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containerName": [
        FieldCall(field='containerName', demands=['CSSContainerRule'], returns='str'),
        FieldCall(field='containerName', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containerName', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "containerQuery": [
        FieldCall(field='containerQuery', demands=['CSSContainerRule'], returns='str'),
    ],
    "containerType": [
        FieldCall(field='containerType', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='containerType', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "contains": [
        PrototypeCall(constructor='DOMStringList', fn='contains', demands=['DOMStringList', 'str'], returns='bool'),
        PrototypeCall(constructor='DOMTokenList', fn='contains', demands=['DOMTokenList', 'str'], returns='bool'),
        PrototypeCall(constructor='Node', fn='contains', demands=['Node', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentType', fn='contains', demands=['DocumentType', 'Node'], returns='bool'),
        PrototypeCall(constructor='CharacterData', fn='contains', demands=['CharacterData', 'Node'], returns='bool'),
        PrototypeCall(constructor='Element', fn='contains', demands=['Element', 'Node'], returns='bool'),
        PrototypeCall(constructor='Attr', fn='contains', demands=['Attr', 'Node'], returns='bool'),
        PrototypeCall(constructor='Document', fn='contains', demands=['Document', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentFragment', fn='contains', demands=['DocumentFragment', 'Node'], returns='bool'),
    ],
    "containsNode": [
        PrototypeCall(constructor='Selection', fn='containsNode', demands=['Selection', 'Node'], returns='bool'),
        PrototypeCall(constructor='Selection', fn='containsNode', demands=['Selection', 'Node', 'bool'], returns='bool'),
    ],
    "content": [
        FieldCall(field='content', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='content', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='content', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='content', demands=['HTMLMetaElement', 'str'], returns='None'),
        FieldCall(field='content', demands=['HTMLTemplateElement'], returns='DocumentFragment'),
    ],
    "contentBoxSize": [
        FieldCall(field='contentBoxSize', demands=['ResizeObserverEntry'], returns='ReadonlyArray'),
    ],
    "contentDocument": [
        FieldCall(field='contentDocument', demands=['HTMLFrameElement'], returns='Document'),
        FieldCall(field='contentDocument', demands=['HTMLIFrameElement'], returns='Document'),
        FieldCall(field='contentDocument', demands=['HTMLObjectElement'], returns='Document'),
    ],
    "contentEditable": [
        FieldCall(field='contentEditable', demands=['ElementContentEditable'], returns='str'),
        FieldCall(field='contentEditable', demands=['ElementContentEditable', 'str'], returns='None'),
    ],
    "contentHint": [
        FieldCall(field='contentHint', demands=['VideoEncoderConfig'], returns='str'),
        FieldCall(field='contentHint', demands=['VideoEncoderConfig', 'str'], returns='None'),
        FieldCall(field='contentHint', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='contentHint', demands=['MediaStreamTrack', 'str'], returns='None'),
    ],
    "contentRect": [
        FieldCall(field='contentRect', demands=['ResizeObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "contentType": [
        FieldCall(field='contentType', demands=['AudioConfiguration'], returns='str'),
        FieldCall(field='contentType', demands=['AudioConfiguration', 'str'], returns='None'),
        FieldCall(field='contentType', demands=['MediaKeySystemMediaCapability'], returns='str'),
        FieldCall(field='contentType', demands=['MediaKeySystemMediaCapability', 'str'], returns='None'),
        FieldCall(field='contentType', demands=['VideoConfiguration'], returns='str'),
        FieldCall(field='contentType', demands=['VideoConfiguration', 'str'], returns='None'),
        FieldCall(field='contentType', demands=['Document'], returns='str'),
    ],
    "contentVisibility": [
        FieldCall(field='contentVisibility', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='contentVisibility', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "contentVisibilityAuto": [
        FieldCall(field='contentVisibilityAuto', demands=['CheckVisibilityOptions'], returns='bool'),
        FieldCall(field='contentVisibilityAuto', demands=['CheckVisibilityOptions', 'bool'], returns='None'),
    ],
    "contentWindow": [
        FieldCall(field='contentWindow', demands=['HTMLFrameElement'], returns='WindowProxy'),
        FieldCall(field='contentWindow', demands=['HTMLIFrameElement'], returns='WindowProxy'),
        FieldCall(field='contentWindow', demands=['HTMLObjectElement'], returns='WindowProxy'),
    ],
    "context": [
        FieldCall(field='context', demands=['AudioNode'], returns='BaseAudioContext'),
    ],
    "contextTime": [
        FieldCall(field='contextTime', demands=['AudioTimestamp'], returns='float'),
        FieldCall(field='contextTime', demands=['AudioTimestamp', 'float'], returns='None'),
    ],
    "contextlost": [
        FieldCall(field='contextlost', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='contextlost', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='contextlost', demands=['OffscreenCanvasEventMap'], returns='Event'),
        FieldCall(field='contextlost', demands=['OffscreenCanvasEventMap', 'Event'], returns='None'),
    ],
    "contextmenu": [
        FieldCall(field='contextmenu', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='contextmenu', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
        FieldCall(field='contextmenu', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='contextmenu', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "contextrestored": [
        FieldCall(field='contextrestored', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='contextrestored', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='contextrestored', demands=['OffscreenCanvasEventMap'], returns='Event'),
        FieldCall(field='contextrestored', demands=['OffscreenCanvasEventMap', 'Event'], returns='None'),
    ],
    "continue": [
        PrototypeCall(constructor='IDBCursor', fn='continue', demands=['IDBCursor'], returns='None'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='continue', demands=['IDBCursorWithValue'], returns='None'),
        PrototypeCall(constructor='IDBCursor', fn='continue', demands=['IDBCursor', 'IDBValidKey'], returns='None'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='continue', demands=['IDBCursorWithValue', 'IDBValidKey'], returns='None'),
    ],
    "continuePrimaryKey": [
        PrototypeCall(constructor='IDBCursor', fn='continuePrimaryKey', demands=['IDBCursor', 'IDBValidKey', 'IDBValidKey'], returns='None'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='continuePrimaryKey', demands=['IDBCursorWithValue', 'IDBValidKey', 'IDBValidKey'], returns='None'),
    ],
    "contributingSources": [
        FieldCall(field='contributingSources', demands=['RTCEncodedFrameMetadata'], returns='list'),
        FieldCall(field='contributingSources', demands=['RTCEncodedFrameMetadata', 'list'], returns='None'),
        FieldCall(field='contributingSources', demands=['RTCEncodedAudioFrameMetadata'], returns='list'),
        FieldCall(field='contributingSources', demands=['RTCEncodedAudioFrameMetadata', 'list'], returns='None'),
        FieldCall(field='contributingSources', demands=['RTCEncodedVideoFrameMetadata'], returns='list'),
        FieldCall(field='contributingSources', demands=['RTCEncodedVideoFrameMetadata', 'list'], returns='None'),
    ],
    "control": [
        FieldCall(field='control', demands=['HTMLLabelElement'], returns='HTMLElement'),
    ],
    "controller": [
        FieldCall(field='controller', demands=['ServiceWorkerContainer'], returns='ServiceWorker'),
    ],
    "controllerchange": [
        FieldCall(field='controllerchange', demands=['ServiceWorkerContainerEventMap'], returns='Event'),
        FieldCall(field='controllerchange', demands=['ServiceWorkerContainerEventMap', 'Event'], returns='None'),
    ],
    "controls": [
        FieldCall(field='controls', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='controls', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "convertToBlob": [
        PrototypeCall(constructor='OffscreenCanvas', fn='convertToBlob', demands=['OffscreenCanvas'], returns='Blob'),
        PrototypeCall(constructor='OffscreenCanvas', fn='convertToBlob', demands=['OffscreenCanvas', 'ImageEncodeOptions'], returns='Blob'),
    ],
    "convertToSpecifiedUnits": [
        PrototypeCall(constructor='SVGAngle', fn='convertToSpecifiedUnits', demands=['SVGAngle', 'float'], returns='None'),
        PrototypeCall(constructor='SVGLength', fn='convertToSpecifiedUnits', demands=['SVGLength', 'float'], returns='None'),
    ],
    "cookie": [
        FieldCall(field='cookie', demands=['Document'], returns='str'),
        FieldCall(field='cookie', demands=['Document', 'str'], returns='None'),
    ],
    "cookieEnabled": [
        FieldCall(field='cookieEnabled', demands=['NavigatorCookies'], returns='bool'),
    ],
    "cookieStore": [
        FieldCall(field='cookieStore', demands=['Window'], returns='CookieStore'),
    ],
    "cookies": [
        FieldCall(field='cookies', demands=['ServiceWorkerRegistration'], returns='CookieStoreManager'),
    ],
    "coords": [
        FieldCall(field='coords', demands=['GeolocationPosition'], returns='GeolocationCoordinates'),
        FieldCall(field='coords', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='coords', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='coords', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='coords', demands=['HTMLAreaElement', 'str'], returns='None'),
    ],
    "copy": [
        FieldCall(field='copy', demands=['GlobalEventHandlersEventMap'], returns='ClipboardEvent'),
        FieldCall(field='copy', demands=['GlobalEventHandlersEventMap', 'ClipboardEvent'], returns='None'),
    ],
    "copyBufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLintptr', 'GLintptr', 'GLsizeiptr'], returns='None'),
    ],
    "copyFromChannel": [
        PrototypeCall(constructor='AudioBuffer', fn='copyFromChannel', demands=['AudioBuffer', 'Float32Array', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBuffer', fn='copyFromChannel', demands=['AudioBuffer', 'Float32Array', 'float', 'float'], returns='None'),
    ],
    "copyTexImage2D": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='copyTexImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint'], returns='None'),
    ],
    "copyTexSubImage2D": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='copyTexSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "copyTexSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "copyTo": [
        PrototypeCall(constructor='AudioData', fn='copyTo', demands=['AudioData', 'AllowSharedBufferSource', 'AudioDataCopyToOptions'], returns='None'),
        PrototypeCall(constructor='EncodedAudioChunk', fn='copyTo', demands=['EncodedAudioChunk', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='EncodedVideoChunk', fn='copyTo', demands=['EncodedVideoChunk', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='VideoFrame', fn='copyTo', demands=['VideoFrame', 'AllowSharedBufferSource'], returns='list'),
        PrototypeCall(constructor='VideoFrame', fn='copyTo', demands=['VideoFrame', 'AllowSharedBufferSource', 'VideoFrameCopyToOptions'], returns='list'),
    ],
    "copyToChannel": [
        PrototypeCall(constructor='AudioBuffer', fn='copyToChannel', demands=['AudioBuffer', 'Float32Array', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBuffer', fn='copyToChannel', demands=['AudioBuffer', 'Float32Array', 'float', 'float'], returns='None'),
    ],
    "copyWithin": [
        PrototypeCall(constructor='BigInt64Array', fn='copyWithin', demands=['BigInt64Array', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='copyWithin', demands=['BigInt64Array', 'float', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='copyWithin', demands=['BigUint64Array', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='copyWithin', demands=['BigUint64Array', 'float', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='Int8Array', fn='copyWithin', demands=['Int8Array', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='copyWithin', demands=['Int8Array', 'float', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='copyWithin', demands=['Uint8Array', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='copyWithin', demands=['Uint8Array', 'float', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='copyWithin', demands=['Uint8ClampedArray', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='copyWithin', demands=['Uint8ClampedArray', 'float', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='copyWithin', demands=['Int16Array', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='copyWithin', demands=['Int16Array', 'float', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='copyWithin', demands=['Uint16Array', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='copyWithin', demands=['Uint16Array', 'float', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='copyWithin', demands=['Int32Array', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='copyWithin', demands=['Int32Array', 'float', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='copyWithin', demands=['Uint32Array', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='copyWithin', demands=['Uint32Array', 'float', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='copyWithin', demands=['Float32Array', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='copyWithin', demands=['Float32Array', 'float', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='copyWithin', demands=['Float64Array', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='copyWithin', demands=['Float64Array', 'float', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Array', fn='copyWithin', demands=['list', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='copyWithin', demands=['list', 'float', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Float16Array', fn='copyWithin', demands=['Float16Array', 'float', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='copyWithin', demands=['Float16Array', 'float', 'float', 'float'], returns='Float16Array'),
    ],
    "corruptedVideoFrames": [
        FieldCall(field='corruptedVideoFrames', demands=['VideoPlaybackQuality'], returns='float'),
    ],
    "cos": [
        PrototypeCall(constructor='Math', fn='cos', demands=['Math', 'float'], returns='float'),
    ],
    "cosh": [
        PrototypeCall(constructor='Math', fn='cosh', demands=['Math', 'float'], returns='float'),
    ],
    "count": [
        PrototypeCall(constructor='IDBIndex', fn='count', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='count', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='count', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='count', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='Console', fn='count', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='count', demands=['Console', 'str'], returns='None'),
        FieldCall(field='count', demands=['GPUMultisampleState'], returns='float'),
        FieldCall(field='count', demands=['GPUMultisampleState', 'float'], returns='None'),
    ],
    "countReset": [
        PrototypeCall(constructor='Console', fn='countReset', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='countReset', demands=['Console', 'str'], returns='None'),
    ],
    "counter": [
        FieldCall(field='counter', demands=['AesCtrParams'], returns='BufferSource'),
        FieldCall(field='counter', demands=['AesCtrParams', 'AllowSharedBufferSource'], returns='None'),
    ],
    "counterIncrement": [
        FieldCall(field='counterIncrement', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='counterIncrement', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "counterReset": [
        FieldCall(field='counterReset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='counterReset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "counterSet": [
        FieldCall(field='counterSet', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='counterSet', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "country": [
        FieldCall(field='country', demands=['AddressErrors'], returns='str'),
        FieldCall(field='country', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='country', demands=['PaymentAddress'], returns='str'),
    ],
    "create": [
        FieldCall(field='create', demands=['FileSystemFlags'], returns='bool'),
        FieldCall(field='create', demands=['FileSystemFlags', 'bool'], returns='None'),
        FieldCall(field='create', demands=['FileSystemGetDirectoryOptions'], returns='bool'),
        FieldCall(field='create', demands=['FileSystemGetDirectoryOptions', 'bool'], returns='None'),
        FieldCall(field='create', demands=['FileSystemGetFileOptions'], returns='bool'),
        FieldCall(field='create', demands=['FileSystemGetFileOptions', 'bool'], returns='None'),
        PrototypeCall(constructor='CredentialsContainer', fn='create', demands=['CredentialsContainer'], returns='Promise<Credential'),
        PrototypeCall(constructor='CredentialsContainer', fn='create', demands=['CredentialsContainer', 'CredentialCreationOptions'], returns='Promise<Credential'),
        PrototypeCall(constructor='ObjectConstructor', fn='create', demands=['ObjectConstructor', 'dict'], returns='*'),
        PrototypeCall(constructor='ObjectConstructor', fn='create', demands=['ObjectConstructor', 'dict', 'PropertyDescriptorMap&ThisType'], returns='*'),
    ],
    "createAnalyser": [
        PrototypeCall(constructor='BaseAudioContext', fn='createAnalyser', demands=['BaseAudioContext'], returns='AnalyserNode'),
        PrototypeCall(constructor='AudioContext', fn='createAnalyser', demands=['AudioContext'], returns='AnalyserNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createAnalyser', demands=['OfflineAudioContext'], returns='AnalyserNode'),
    ],
    "createAnswer": [
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection'], returns='RTCSessionDescriptionInit'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection', 'RTCAnswerOptions'], returns='RTCSessionDescriptionInit'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "createAttribute": [
        PrototypeCall(constructor='Document', fn='createAttribute', demands=['Document', 'str'], returns='Attr'),
        PrototypeCall(constructor='HTMLDocument', fn='createAttribute', demands=['HTMLDocument', 'str'], returns='Attr'),
        PrototypeCall(constructor='XMLDocument', fn='createAttribute', demands=['XMLDocument', 'str'], returns='Attr'),
    ],
    "createAttributeNS": [
        PrototypeCall(constructor='Document', fn='createAttributeNS', demands=['Document', 'str', 'str'], returns='Attr'),
        PrototypeCall(constructor='HTMLDocument', fn='createAttributeNS', demands=['HTMLDocument', 'str', 'str'], returns='Attr'),
        PrototypeCall(constructor='XMLDocument', fn='createAttributeNS', demands=['XMLDocument', 'str', 'str'], returns='Attr'),
    ],
    "createBidirectionalStream": [
        PrototypeCall(constructor='WebTransport', fn='createBidirectionalStream', demands=['WebTransport'], returns='WebTransportBidirectionalStream'),
        PrototypeCall(constructor='WebTransport', fn='createBidirectionalStream', demands=['WebTransport', 'WebTransportSendStreamOptions'], returns='WebTransportBidirectionalStream'),
    ],
    "createBiquadFilter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createBiquadFilter', demands=['BaseAudioContext'], returns='BiquadFilterNode'),
        PrototypeCall(constructor='AudioContext', fn='createBiquadFilter', demands=['AudioContext'], returns='BiquadFilterNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createBiquadFilter', demands=['OfflineAudioContext'], returns='BiquadFilterNode'),
    ],
    "createBuffer": [
        PrototypeCall(constructor='BaseAudioContext', fn='createBuffer', demands=['BaseAudioContext', 'float', 'float', 'float'], returns='AudioBuffer'),
        PrototypeCall(constructor='AudioContext', fn='createBuffer', demands=['AudioContext', 'float', 'float', 'float'], returns='AudioBuffer'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createBuffer', demands=['OfflineAudioContext', 'float', 'float', 'float'], returns='AudioBuffer'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createBuffer', demands=['WebGLRenderingContext'], returns='WebGLBuffer'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createBuffer', demands=['WebGL2RenderingContext'], returns='WebGLBuffer'),
    ],
    "createBufferSource": [
        PrototypeCall(constructor='BaseAudioContext', fn='createBufferSource', demands=['BaseAudioContext'], returns='AudioBufferSourceNode'),
        PrototypeCall(constructor='AudioContext', fn='createBufferSource', demands=['AudioContext'], returns='AudioBufferSourceNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createBufferSource', demands=['OfflineAudioContext'], returns='AudioBufferSourceNode'),
    ],
    "createCDATASection": [
        PrototypeCall(constructor='Document', fn='createCDATASection', demands=['Document', 'str'], returns='CDATASection'),
        PrototypeCall(constructor='HTMLDocument', fn='createCDATASection', demands=['HTMLDocument', 'str'], returns='CDATASection'),
        PrototypeCall(constructor='XMLDocument', fn='createCDATASection', demands=['XMLDocument', 'str'], returns='CDATASection'),
    ],
    "createCaption": [
        PrototypeCall(constructor='HTMLTableElement', fn='createCaption', demands=['HTMLTableElement'], returns='HTMLTableCaptionElement'),
    ],
    "createChannelMerger": [
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelMerger', demands=['BaseAudioContext'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='AudioContext', fn='createChannelMerger', demands=['AudioContext'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createChannelMerger', demands=['OfflineAudioContext'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelMerger', demands=['BaseAudioContext', 'float'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='AudioContext', fn='createChannelMerger', demands=['AudioContext', 'float'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createChannelMerger', demands=['OfflineAudioContext', 'float'], returns='ChannelMergerNode'),
    ],
    "createChannelSplitter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelSplitter', demands=['BaseAudioContext'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='AudioContext', fn='createChannelSplitter', demands=['AudioContext'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createChannelSplitter', demands=['OfflineAudioContext'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelSplitter', demands=['BaseAudioContext', 'float'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='AudioContext', fn='createChannelSplitter', demands=['AudioContext', 'float'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createChannelSplitter', demands=['OfflineAudioContext', 'float'], returns='ChannelSplitterNode'),
    ],
    "createComment": [
        PrototypeCall(constructor='Document', fn='createComment', demands=['Document', 'str'], returns='Comment'),
        PrototypeCall(constructor='HTMLDocument', fn='createComment', demands=['HTMLDocument', 'str'], returns='Comment'),
        PrototypeCall(constructor='XMLDocument', fn='createComment', demands=['XMLDocument', 'str'], returns='Comment'),
    ],
    "createConicGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createConicGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createConicGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createConstantSource": [
        PrototypeCall(constructor='BaseAudioContext', fn='createConstantSource', demands=['BaseAudioContext'], returns='ConstantSourceNode'),
        PrototypeCall(constructor='AudioContext', fn='createConstantSource', demands=['AudioContext'], returns='ConstantSourceNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createConstantSource', demands=['OfflineAudioContext'], returns='ConstantSourceNode'),
    ],
    "createContextualFragment": [
        PrototypeCall(constructor='Range', fn='createContextualFragment', demands=['Range', 'str'], returns='DocumentFragment'),
    ],
    "createConvolver": [
        PrototypeCall(constructor='BaseAudioContext', fn='createConvolver', demands=['BaseAudioContext'], returns='ConvolverNode'),
        PrototypeCall(constructor='AudioContext', fn='createConvolver', demands=['AudioContext'], returns='ConvolverNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createConvolver', demands=['OfflineAudioContext'], returns='ConvolverNode'),
    ],
    "createDataChannel": [
        PrototypeCall(constructor='RTCPeerConnection', fn='createDataChannel', demands=['RTCPeerConnection', 'str'], returns='RTCDataChannel'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createDataChannel', demands=['RTCPeerConnection', 'str', 'RTCDataChannelInit'], returns='RTCDataChannel'),
    ],
    "createDelay": [
        PrototypeCall(constructor='BaseAudioContext', fn='createDelay', demands=['BaseAudioContext'], returns='DelayNode'),
        PrototypeCall(constructor='AudioContext', fn='createDelay', demands=['AudioContext'], returns='DelayNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createDelay', demands=['OfflineAudioContext'], returns='DelayNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createDelay', demands=['BaseAudioContext', 'float'], returns='DelayNode'),
        PrototypeCall(constructor='AudioContext', fn='createDelay', demands=['AudioContext', 'float'], returns='DelayNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createDelay', demands=['OfflineAudioContext', 'float'], returns='DelayNode'),
    ],
    "createDocument": [
        PrototypeCall(constructor='DOMImplementation', fn='createDocument', demands=['DOMImplementation', 'str', 'str'], returns='XMLDocument'),
        PrototypeCall(constructor='DOMImplementation', fn='createDocument', demands=['DOMImplementation', 'str', 'str', 'DocumentType'], returns='XMLDocument'),
    ],
    "createDocumentFragment": [
        PrototypeCall(constructor='Document', fn='createDocumentFragment', demands=['Document'], returns='DocumentFragment'),
        PrototypeCall(constructor='HTMLDocument', fn='createDocumentFragment', demands=['HTMLDocument'], returns='DocumentFragment'),
        PrototypeCall(constructor='XMLDocument', fn='createDocumentFragment', demands=['XMLDocument'], returns='DocumentFragment'),
    ],
    "createDocumentType": [
        PrototypeCall(constructor='DOMImplementation', fn='createDocumentType', demands=['DOMImplementation', 'str', 'str', 'str'], returns='DocumentType'),
    ],
    "createDynamicsCompressor": [
        PrototypeCall(constructor='BaseAudioContext', fn='createDynamicsCompressor', demands=['BaseAudioContext'], returns='DynamicsCompressorNode'),
        PrototypeCall(constructor='AudioContext', fn='createDynamicsCompressor', demands=['AudioContext'], returns='DynamicsCompressorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createDynamicsCompressor', demands=['OfflineAudioContext'], returns='DynamicsCompressorNode'),
    ],
    "createElement": [
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'K', 'ElementCreationOptions'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'K', 'ElementCreationOptions'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'K', 'ElementCreationOptions'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'K', 'ElementCreationOptions'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'K', 'ElementCreationOptions'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'K', 'ElementCreationOptions'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'str', 'ElementCreationOptions'], returns='HTMLElement'),
        PrototypeCall(constructor='HTMLDocument', fn='createElement', demands=['HTMLDocument', 'str', 'ElementCreationOptions'], returns='HTMLElement'),
        PrototypeCall(constructor='XMLDocument', fn='createElement', demands=['XMLDocument', 'str', 'ElementCreationOptions'], returns='HTMLElement'),
    ],
    "createElementNS": [
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', '"http://www.w3.org/2000/svg"', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', '"http://www.w3.org/2000/svg"', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', '"http://www.w3.org/2000/svg"', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', '"http://www.w3.org/2000/svg"', 'str'], returns='SVGElement'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', '"http://www.w3.org/2000/svg"', 'str'], returns='SVGElement'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', '"http://www.w3.org/2000/svg"', 'str'], returns='SVGElement'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', '"http://www.w3.org/1998/Math/MathML"', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='MathMLElement'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='MathMLElement'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='MathMLElement'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str', 'ElementCreationOptions'], returns='Element'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', 'str', 'str', 'ElementCreationOptions'], returns='Element'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', 'str', 'str', 'ElementCreationOptions'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='HTMLDocument', fn='createElementNS', demands=['HTMLDocument', 'str', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='XMLDocument', fn='createElementNS', demands=['XMLDocument', 'str', 'str', 'str'], returns='Element'),
    ],
    "createEvent": [
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"AnimationEvent"'], returns='AnimationEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"AnimationEvent"'], returns='AnimationEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"AnimationEvent"'], returns='AnimationEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"AnimationPlaybackEvent"'], returns='AnimationPlaybackEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"AnimationPlaybackEvent"'], returns='AnimationPlaybackEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"AnimationPlaybackEvent"'], returns='AnimationPlaybackEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"AudioProcessingEvent"'], returns='AudioProcessingEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"AudioProcessingEvent"'], returns='AudioProcessingEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"AudioProcessingEvent"'], returns='AudioProcessingEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"BeforeUnloadEvent"'], returns='BeforeUnloadEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"BeforeUnloadEvent"'], returns='BeforeUnloadEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"BeforeUnloadEvent"'], returns='BeforeUnloadEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"BlobEvent"'], returns='BlobEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"BlobEvent"'], returns='BlobEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"BlobEvent"'], returns='BlobEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"ClipboardEvent"'], returns='ClipboardEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"ClipboardEvent"'], returns='ClipboardEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"ClipboardEvent"'], returns='ClipboardEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"CloseEvent"'], returns='CloseEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"CloseEvent"'], returns='CloseEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"CloseEvent"'], returns='CloseEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"CompositionEvent"'], returns='CompositionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"CompositionEvent"'], returns='CompositionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"CompositionEvent"'], returns='CompositionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"ContentVisibilityAutoStateChangeEvent"'], returns='ContentVisibilityAutoStateChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"ContentVisibilityAutoStateChangeEvent"'], returns='ContentVisibilityAutoStateChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"ContentVisibilityAutoStateChangeEvent"'], returns='ContentVisibilityAutoStateChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"CookieChangeEvent"'], returns='CookieChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"CookieChangeEvent"'], returns='CookieChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"CookieChangeEvent"'], returns='CookieChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"CustomEvent"'], returns='CustomEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"CustomEvent"'], returns='CustomEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"CustomEvent"'], returns='CustomEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"DeviceMotionEvent"'], returns='DeviceMotionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"DeviceMotionEvent"'], returns='DeviceMotionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"DeviceMotionEvent"'], returns='DeviceMotionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"DeviceOrientationEvent"'], returns='DeviceOrientationEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"DeviceOrientationEvent"'], returns='DeviceOrientationEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"DeviceOrientationEvent"'], returns='DeviceOrientationEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"DragEvent"'], returns='DragEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"DragEvent"'], returns='DragEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"DragEvent"'], returns='DragEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"ErrorEvent"'], returns='ErrorEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"ErrorEvent"'], returns='ErrorEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"ErrorEvent"'], returns='ErrorEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"Event"'], returns='Event'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"Event"'], returns='Event'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"Event"'], returns='Event'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"Events"'], returns='Event'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"Events"'], returns='Event'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"Events"'], returns='Event'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"FocusEvent"'], returns='FocusEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"FocusEvent"'], returns='FocusEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"FocusEvent"'], returns='FocusEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"FontFaceSetLoadEvent"'], returns='FontFaceSetLoadEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"FontFaceSetLoadEvent"'], returns='FontFaceSetLoadEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"FontFaceSetLoadEvent"'], returns='FontFaceSetLoadEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"FormDataEvent"'], returns='FormDataEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"FormDataEvent"'], returns='FormDataEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"FormDataEvent"'], returns='FormDataEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"GamepadEvent"'], returns='GamepadEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"GamepadEvent"'], returns='GamepadEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"GamepadEvent"'], returns='GamepadEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"HashChangeEvent"'], returns='HashChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"HashChangeEvent"'], returns='HashChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"HashChangeEvent"'], returns='HashChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"IDBVersionChangeEvent"'], returns='IDBVersionChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"IDBVersionChangeEvent"'], returns='IDBVersionChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"IDBVersionChangeEvent"'], returns='IDBVersionChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"InputEvent"'], returns='InputEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"InputEvent"'], returns='InputEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"InputEvent"'], returns='InputEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"KeyboardEvent"'], returns='KeyboardEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"KeyboardEvent"'], returns='KeyboardEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"KeyboardEvent"'], returns='KeyboardEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MIDIConnectionEvent"'], returns='MIDIConnectionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MIDIConnectionEvent"'], returns='MIDIConnectionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MIDIConnectionEvent"'], returns='MIDIConnectionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MIDIMessageEvent"'], returns='MIDIMessageEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MIDIMessageEvent"'], returns='MIDIMessageEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MIDIMessageEvent"'], returns='MIDIMessageEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MediaEncryptedEvent"'], returns='MediaEncryptedEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MediaEncryptedEvent"'], returns='MediaEncryptedEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MediaEncryptedEvent"'], returns='MediaEncryptedEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MediaKeyMessageEvent"'], returns='MediaKeyMessageEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MediaKeyMessageEvent"'], returns='MediaKeyMessageEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MediaKeyMessageEvent"'], returns='MediaKeyMessageEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MediaQueryListEvent"'], returns='MediaQueryListEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MediaQueryListEvent"'], returns='MediaQueryListEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MediaQueryListEvent"'], returns='MediaQueryListEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MediaStreamTrackEvent"'], returns='MediaStreamTrackEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MediaStreamTrackEvent"'], returns='MediaStreamTrackEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MediaStreamTrackEvent"'], returns='MediaStreamTrackEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MessageEvent"'], returns='MessageEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MessageEvent"'], returns='MessageEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MessageEvent"'], returns='MessageEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MouseEvent"'], returns='MouseEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MouseEvent"'], returns='MouseEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MouseEvent"'], returns='MouseEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"MouseEvents"'], returns='MouseEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"MouseEvents"'], returns='MouseEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"MouseEvents"'], returns='MouseEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"OfflineAudioCompletionEvent"'], returns='OfflineAudioCompletionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"OfflineAudioCompletionEvent"'], returns='OfflineAudioCompletionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"OfflineAudioCompletionEvent"'], returns='OfflineAudioCompletionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PageRevealEvent"'], returns='PageRevealEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PageRevealEvent"'], returns='PageRevealEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PageRevealEvent"'], returns='PageRevealEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PageSwapEvent"'], returns='PageSwapEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PageSwapEvent"'], returns='PageSwapEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PageSwapEvent"'], returns='PageSwapEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PageTransitionEvent"'], returns='PageTransitionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PageTransitionEvent"'], returns='PageTransitionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PageTransitionEvent"'], returns='PageTransitionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PaymentMethodChangeEvent"'], returns='PaymentMethodChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PaymentMethodChangeEvent"'], returns='PaymentMethodChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PaymentMethodChangeEvent"'], returns='PaymentMethodChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PaymentRequestUpdateEvent"'], returns='PaymentRequestUpdateEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PaymentRequestUpdateEvent"'], returns='PaymentRequestUpdateEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PaymentRequestUpdateEvent"'], returns='PaymentRequestUpdateEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PictureInPictureEvent"'], returns='PictureInPictureEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PictureInPictureEvent"'], returns='PictureInPictureEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PictureInPictureEvent"'], returns='PictureInPictureEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PointerEvent"'], returns='PointerEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PointerEvent"'], returns='PointerEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PointerEvent"'], returns='PointerEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PopStateEvent"'], returns='PopStateEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PopStateEvent"'], returns='PopStateEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PopStateEvent"'], returns='PopStateEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"ProgressEvent"'], returns='ProgressEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"ProgressEvent"'], returns='ProgressEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"ProgressEvent"'], returns='ProgressEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"PromiseRejectionEvent"'], returns='PromiseRejectionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"PromiseRejectionEvent"'], returns='PromiseRejectionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"PromiseRejectionEvent"'], returns='PromiseRejectionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCDTMFToneChangeEvent"'], returns='RTCDTMFToneChangeEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCDTMFToneChangeEvent"'], returns='RTCDTMFToneChangeEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCDTMFToneChangeEvent"'], returns='RTCDTMFToneChangeEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCDataChannelEvent"'], returns='RTCDataChannelEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCDataChannelEvent"'], returns='RTCDataChannelEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCDataChannelEvent"'], returns='RTCDataChannelEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCErrorEvent"'], returns='RTCErrorEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCErrorEvent"'], returns='RTCErrorEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCErrorEvent"'], returns='RTCErrorEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCPeerConnectionIceErrorEvent"'], returns='RTCPeerConnectionIceErrorEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCPeerConnectionIceErrorEvent"'], returns='RTCPeerConnectionIceErrorEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCPeerConnectionIceErrorEvent"'], returns='RTCPeerConnectionIceErrorEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCPeerConnectionIceEvent"'], returns='RTCPeerConnectionIceEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCPeerConnectionIceEvent"'], returns='RTCPeerConnectionIceEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCPeerConnectionIceEvent"'], returns='RTCPeerConnectionIceEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"RTCTrackEvent"'], returns='RTCTrackEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"RTCTrackEvent"'], returns='RTCTrackEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"RTCTrackEvent"'], returns='RTCTrackEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"SecurityPolicyViolationEvent"'], returns='SecurityPolicyViolationEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"SecurityPolicyViolationEvent"'], returns='SecurityPolicyViolationEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"SecurityPolicyViolationEvent"'], returns='SecurityPolicyViolationEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"SpeechSynthesisErrorEvent"'], returns='SpeechSynthesisErrorEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"SpeechSynthesisErrorEvent"'], returns='SpeechSynthesisErrorEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"SpeechSynthesisErrorEvent"'], returns='SpeechSynthesisErrorEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"SpeechSynthesisEvent"'], returns='SpeechSynthesisEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"SpeechSynthesisEvent"'], returns='SpeechSynthesisEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"SpeechSynthesisEvent"'], returns='SpeechSynthesisEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"StorageEvent"'], returns='StorageEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"StorageEvent"'], returns='StorageEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"StorageEvent"'], returns='StorageEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"SubmitEvent"'], returns='SubmitEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"SubmitEvent"'], returns='SubmitEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"SubmitEvent"'], returns='SubmitEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"TextEvent"'], returns='TextEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"TextEvent"'], returns='TextEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"TextEvent"'], returns='TextEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"ToggleEvent"'], returns='ToggleEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"ToggleEvent"'], returns='ToggleEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"ToggleEvent"'], returns='ToggleEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"TouchEvent"'], returns='TouchEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"TouchEvent"'], returns='TouchEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"TouchEvent"'], returns='TouchEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"TrackEvent"'], returns='TrackEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"TrackEvent"'], returns='TrackEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"TrackEvent"'], returns='TrackEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"TransitionEvent"'], returns='TransitionEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"TransitionEvent"'], returns='TransitionEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"TransitionEvent"'], returns='TransitionEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"UIEvent"'], returns='UIEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"UIEvent"'], returns='UIEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"UIEvent"'], returns='UIEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"UIEvents"'], returns='UIEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"UIEvents"'], returns='UIEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"UIEvents"'], returns='UIEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"WebGLContextEvent"'], returns='WebGLContextEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"WebGLContextEvent"'], returns='WebGLContextEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"WebGLContextEvent"'], returns='WebGLContextEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', '"WheelEvent"'], returns='WheelEvent'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', '"WheelEvent"'], returns='WheelEvent'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', '"WheelEvent"'], returns='WheelEvent'),
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', 'str'], returns='Event'),
        PrototypeCall(constructor='HTMLDocument', fn='createEvent', demands=['HTMLDocument', 'str'], returns='Event'),
        PrototypeCall(constructor='XMLDocument', fn='createEvent', demands=['XMLDocument', 'str'], returns='Event'),
    ],
    "createExpression": [
        PrototypeCall(constructor='XPathEvaluator', fn='createExpression', demands=['XPathEvaluator', 'str'], returns='XPathExpression'),
        PrototypeCall(constructor='Document', fn='createExpression', demands=['Document', 'str'], returns='XPathExpression'),
        PrototypeCall(constructor='XPathEvaluator', fn='createExpression', demands=['XPathEvaluator', 'str', 'XPathNSResolver'], returns='XPathExpression'),
        PrototypeCall(constructor='Document', fn='createExpression', demands=['Document', 'str', 'XPathNSResolver'], returns='XPathExpression'),
    ],
    "createFramebuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='createFramebuffer', demands=['WebGLRenderingContext'], returns='WebGLFramebuffer'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createFramebuffer', demands=['WebGL2RenderingContext'], returns='WebGLFramebuffer'),
    ],
    "createGain": [
        PrototypeCall(constructor='BaseAudioContext', fn='createGain', demands=['BaseAudioContext'], returns='GainNode'),
        PrototypeCall(constructor='AudioContext', fn='createGain', demands=['AudioContext'], returns='GainNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createGain', demands=['OfflineAudioContext'], returns='GainNode'),
    ],
    "createHTMLDocument": [
        PrototypeCall(constructor='DOMImplementation', fn='createHTMLDocument', demands=['DOMImplementation'], returns='Document'),
        PrototypeCall(constructor='DOMImplementation', fn='createHTMLDocument', demands=['DOMImplementation', 'str'], returns='Document'),
    ],
    "createIIRFilter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createIIRFilter', demands=['BaseAudioContext', 'list', 'list'], returns='IIRFilterNode'),
        PrototypeCall(constructor='AudioContext', fn='createIIRFilter', demands=['AudioContext', 'list', 'list'], returns='IIRFilterNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createIIRFilter', demands=['OfflineAudioContext', 'list', 'list'], returns='IIRFilterNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createIIRFilter', demands=['BaseAudioContext', 'Iterable', 'Iterable'], returns='IIRFilterNode'),
        PrototypeCall(constructor='AudioContext', fn='createIIRFilter', demands=['AudioContext', 'Iterable', 'Iterable'], returns='IIRFilterNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createIIRFilter', demands=['OfflineAudioContext', 'Iterable', 'Iterable'], returns='IIRFilterNode'),
    ],
    "createImageBitmap": [
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'ImageBitmapOptions'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'float', 'float', 'float', 'float'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'float', 'float', 'float', 'float', 'ImageBitmapOptions'], returns='ImageBitmap'),
    ],
    "createImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'float', 'float', 'ImageDataSettings'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'ImageDataSettings'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'ImageData'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData'], returns='ImageData'),
    ],
    "createIndex": [
        PrototypeCall(constructor='IDBObjectStore', fn='createIndex', demands=['IDBObjectStore', 'str', 'str'], returns='IDBIndex'),
        PrototypeCall(constructor='IDBObjectStore', fn='createIndex', demands=['IDBObjectStore', 'str', 'str', 'IDBIndexParameters'], returns='IDBIndex'),
    ],
    "createLinearGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createLinearGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createLinearGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createMediaElementSource": [
        PrototypeCall(constructor='AudioContext', fn='createMediaElementSource', demands=['AudioContext', 'HTMLMediaElement'], returns='MediaElementAudioSourceNode'),
    ],
    "createMediaKeys": [
        PrototypeCall(constructor='MediaKeySystemAccess', fn='createMediaKeys', demands=['MediaKeySystemAccess'], returns='MediaKeys'),
    ],
    "createMediaStreamDestination": [
        PrototypeCall(constructor='AudioContext', fn='createMediaStreamDestination', demands=['AudioContext'], returns='MediaStreamAudioDestinationNode'),
    ],
    "createMediaStreamSource": [
        PrototypeCall(constructor='AudioContext', fn='createMediaStreamSource', demands=['AudioContext', 'MediaStream'], returns='MediaStreamAudioSourceNode'),
    ],
    "createNSResolver": [
        PrototypeCall(constructor='XPathEvaluator', fn='createNSResolver', demands=['XPathEvaluator', 'Node'], returns='Node'),
        PrototypeCall(constructor='Document', fn='createNSResolver', demands=['Document', 'Node'], returns='Node'),
    ],
    "createNodeIterator": [
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node'], returns='NodeIterator'),
        PrototypeCall(constructor='HTMLDocument', fn='createNodeIterator', demands=['HTMLDocument', 'Node'], returns='NodeIterator'),
        PrototypeCall(constructor='XMLDocument', fn='createNodeIterator', demands=['XMLDocument', 'Node'], returns='NodeIterator'),
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node', 'float'], returns='NodeIterator'),
        PrototypeCall(constructor='HTMLDocument', fn='createNodeIterator', demands=['HTMLDocument', 'Node', 'float'], returns='NodeIterator'),
        PrototypeCall(constructor='XMLDocument', fn='createNodeIterator', demands=['XMLDocument', 'Node', 'float'], returns='NodeIterator'),
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node', 'float', 'NodeFilter'], returns='NodeIterator'),
        PrototypeCall(constructor='HTMLDocument', fn='createNodeIterator', demands=['HTMLDocument', 'Node', 'float', 'NodeFilter'], returns='NodeIterator'),
        PrototypeCall(constructor='XMLDocument', fn='createNodeIterator', demands=['XMLDocument', 'Node', 'float', 'NodeFilter'], returns='NodeIterator'),
    ],
    "createObjectStore": [
        PrototypeCall(constructor='IDBDatabase', fn='createObjectStore', demands=['IDBDatabase', 'str'], returns='IDBObjectStore'),
        PrototypeCall(constructor='IDBDatabase', fn='createObjectStore', demands=['IDBDatabase', 'str', 'IDBObjectStoreParameters'], returns='IDBObjectStore'),
    ],
    "createOffer": [
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection'], returns='RTCSessionDescriptionInit'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'RTCOfferOptions'], returns='RTCSessionDescriptionInit'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback', 'RTCOfferOptions'], returns='None'),
    ],
    "createOscillator": [
        PrototypeCall(constructor='BaseAudioContext', fn='createOscillator', demands=['BaseAudioContext'], returns='OscillatorNode'),
        PrototypeCall(constructor='AudioContext', fn='createOscillator', demands=['AudioContext'], returns='OscillatorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createOscillator', demands=['OfflineAudioContext'], returns='OscillatorNode'),
    ],
    "createPanner": [
        PrototypeCall(constructor='BaseAudioContext', fn='createPanner', demands=['BaseAudioContext'], returns='PannerNode'),
        PrototypeCall(constructor='AudioContext', fn='createPanner', demands=['AudioContext'], returns='PannerNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createPanner', demands=['OfflineAudioContext'], returns='PannerNode'),
    ],
    "createPattern": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createPattern', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'str'], returns='CanvasPattern'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createPattern', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'str'], returns='CanvasPattern'),
    ],
    "createPeriodicWave": [
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'list', 'list'], returns='PeriodicWave'),
        PrototypeCall(constructor='AudioContext', fn='createPeriodicWave', demands=['AudioContext', 'list', 'list'], returns='PeriodicWave'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createPeriodicWave', demands=['OfflineAudioContext', 'list', 'list'], returns='PeriodicWave'),
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'list', 'list', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
        PrototypeCall(constructor='AudioContext', fn='createPeriodicWave', demands=['AudioContext', 'list', 'list', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createPeriodicWave', demands=['OfflineAudioContext', 'list', 'list', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'Iterable', 'Iterable'], returns='PeriodicWave'),
        PrototypeCall(constructor='AudioContext', fn='createPeriodicWave', demands=['AudioContext', 'Iterable', 'Iterable'], returns='PeriodicWave'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createPeriodicWave', demands=['OfflineAudioContext', 'Iterable', 'Iterable'], returns='PeriodicWave'),
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'Iterable', 'Iterable', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
        PrototypeCall(constructor='AudioContext', fn='createPeriodicWave', demands=['AudioContext', 'Iterable', 'Iterable', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createPeriodicWave', demands=['OfflineAudioContext', 'Iterable', 'Iterable', 'PeriodicWaveConstraints'], returns='PeriodicWave'),
    ],
    "createProcessingInstruction": [
        PrototypeCall(constructor='Document', fn='createProcessingInstruction', demands=['Document', 'str', 'str'], returns='ProcessingInstruction'),
        PrototypeCall(constructor='HTMLDocument', fn='createProcessingInstruction', demands=['HTMLDocument', 'str', 'str'], returns='ProcessingInstruction'),
        PrototypeCall(constructor='XMLDocument', fn='createProcessingInstruction', demands=['XMLDocument', 'str', 'str'], returns='ProcessingInstruction'),
    ],
    "createProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='createProgram', demands=['WebGLRenderingContext'], returns='WebGLProgram'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createProgram', demands=['WebGL2RenderingContext'], returns='WebGLProgram'),
    ],
    "createQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createQuery', demands=['WebGL2RenderingContext'], returns='WebGLQuery'),
    ],
    "createRadialGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createRadialGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createRadialGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createRange": [
        PrototypeCall(constructor='Document', fn='createRange', demands=['Document'], returns='Range'),
        PrototypeCall(constructor='HTMLDocument', fn='createRange', demands=['HTMLDocument'], returns='Range'),
        PrototypeCall(constructor='XMLDocument', fn='createRange', demands=['XMLDocument'], returns='Range'),
    ],
    "createReader": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='createReader', demands=['FileSystemDirectoryEntry'], returns='FileSystemDirectoryReader'),
    ],
    "createRenderbuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='createRenderbuffer', demands=['WebGLRenderingContext'], returns='WebGLRenderbuffer'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createRenderbuffer', demands=['WebGL2RenderingContext'], returns='WebGLRenderbuffer'),
    ],
    "createSVGAngle": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGAngle', demands=['SVGSVGElement'], returns='SVGAngle'),
    ],
    "createSVGLength": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGLength', demands=['SVGSVGElement'], returns='SVGLength'),
    ],
    "createSVGMatrix": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGMatrix', demands=['SVGSVGElement'], returns='DOMMatrix'),
    ],
    "createSVGNumber": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGNumber', demands=['SVGSVGElement'], returns='SVGNumber'),
    ],
    "createSVGPoint": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGPoint', demands=['SVGSVGElement'], returns='DOMPoint'),
    ],
    "createSVGRect": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGRect', demands=['SVGSVGElement'], returns='DOMRect'),
    ],
    "createSVGTransform": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransform', demands=['SVGSVGElement'], returns='SVGTransform'),
    ],
    "createSVGTransformFromMatrix": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransformFromMatrix', demands=['SVGSVGElement'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransformFromMatrix', demands=['SVGSVGElement', 'DOMMatrix2DInit'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGTransformList', fn='createSVGTransformFromMatrix', demands=['SVGTransformList'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGTransformList', fn='createSVGTransformFromMatrix', demands=['SVGTransformList', 'DOMMatrix2DInit'], returns='SVGTransform'),
    ],
    "createSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createSampler', demands=['WebGL2RenderingContext'], returns='WebGLSampler'),
    ],
    "createScriptProcessor": [
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='AudioContext', fn='createScriptProcessor', demands=['AudioContext'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createScriptProcessor', demands=['OfflineAudioContext'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='AudioContext', fn='createScriptProcessor', demands=['AudioContext', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createScriptProcessor', demands=['OfflineAudioContext', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'float', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='AudioContext', fn='createScriptProcessor', demands=['AudioContext', 'float', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createScriptProcessor', demands=['OfflineAudioContext', 'float', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'float', 'float', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='AudioContext', fn='createScriptProcessor', demands=['AudioContext', 'float', 'float', 'float'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createScriptProcessor', demands=['OfflineAudioContext', 'float', 'float', 'float'], returns='ScriptProcessorNode'),
    ],
    "createSendGroup": [
        PrototypeCall(constructor='WebTransport', fn='createSendGroup', demands=['WebTransport'], returns='WebTransportSendGroup'),
    ],
    "createSession": [
        PrototypeCall(constructor='MediaKeys', fn='createSession', demands=['MediaKeys'], returns='MediaKeySession'),
        PrototypeCall(constructor='MediaKeys', fn='createSession', demands=['MediaKeys', 'MediaKeySessionType'], returns='MediaKeySession'),
    ],
    "createShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='createShader', demands=['WebGLRenderingContext', 'GLenum'], returns='WebGLShader'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createShader', demands=['WebGL2RenderingContext', 'GLenum'], returns='WebGLShader'),
    ],
    "createStereoPanner": [
        PrototypeCall(constructor='BaseAudioContext', fn='createStereoPanner', demands=['BaseAudioContext'], returns='StereoPannerNode'),
        PrototypeCall(constructor='AudioContext', fn='createStereoPanner', demands=['AudioContext'], returns='StereoPannerNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createStereoPanner', demands=['OfflineAudioContext'], returns='StereoPannerNode'),
    ],
    "createTBody": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTBody', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "createTFoot": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTFoot', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "createTHead": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTHead', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "createTextNode": [
        PrototypeCall(constructor='Document', fn='createTextNode', demands=['Document', 'str'], returns='Text'),
        PrototypeCall(constructor='HTMLDocument', fn='createTextNode', demands=['HTMLDocument', 'str'], returns='Text'),
        PrototypeCall(constructor='XMLDocument', fn='createTextNode', demands=['XMLDocument', 'str'], returns='Text'),
    ],
    "createTexture": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='createTexture', demands=['WebGLRenderingContext'], returns='WebGLTexture'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createTexture', demands=['WebGL2RenderingContext'], returns='WebGLTexture'),
    ],
    "createTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createTransformFeedback', demands=['WebGL2RenderingContext'], returns='WebGLTransformFeedback'),
    ],
    "createTreeWalker": [
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node'], returns='TreeWalker'),
        PrototypeCall(constructor='HTMLDocument', fn='createTreeWalker', demands=['HTMLDocument', 'Node'], returns='TreeWalker'),
        PrototypeCall(constructor='XMLDocument', fn='createTreeWalker', demands=['XMLDocument', 'Node'], returns='TreeWalker'),
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node', 'float'], returns='TreeWalker'),
        PrototypeCall(constructor='HTMLDocument', fn='createTreeWalker', demands=['HTMLDocument', 'Node', 'float'], returns='TreeWalker'),
        PrototypeCall(constructor='XMLDocument', fn='createTreeWalker', demands=['XMLDocument', 'Node', 'float'], returns='TreeWalker'),
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node', 'float', 'NodeFilter'], returns='TreeWalker'),
        PrototypeCall(constructor='HTMLDocument', fn='createTreeWalker', demands=['HTMLDocument', 'Node', 'float', 'NodeFilter'], returns='TreeWalker'),
        PrototypeCall(constructor='XMLDocument', fn='createTreeWalker', demands=['XMLDocument', 'Node', 'float', 'NodeFilter'], returns='TreeWalker'),
    ],
    "createUnidirectionalStream": [
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport'], returns='WritableStream'),
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport', 'WebTransportSendStreamOptions'], returns='WritableStream'),
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport'], returns='WebTransportSendStream'),
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport', 'WebTransportSendStreamOptions'], returns='WebTransportSendStream'),
    ],
    "createVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createVertexArray', demands=['WebGL2RenderingContext'], returns='WebGLVertexArrayObject'),
    ],
    "createVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='createVertexArrayOES', demands=['OES_vertex_array_object'], returns='WebGLVertexArrayObjectOES'),
    ],
    "createWaveShaper": [
        PrototypeCall(constructor='BaseAudioContext', fn='createWaveShaper', demands=['BaseAudioContext'], returns='WaveShaperNode'),
        PrototypeCall(constructor='AudioContext', fn='createWaveShaper', demands=['AudioContext'], returns='WaveShaperNode'),
        PrototypeCall(constructor='OfflineAudioContext', fn='createWaveShaper', demands=['OfflineAudioContext'], returns='WaveShaperNode'),
    ],
    "createWritable": [
        PrototypeCall(constructor='FileSystemFileHandle', fn='createWritable', demands=['FileSystemFileHandle'], returns='FileSystemWritableFileStream'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='createWritable', demands=['FileSystemFileHandle', 'FileSystemCreateWritableOptions'], returns='FileSystemWritableFileStream'),
    ],
    "creationTime": [
        FieldCall(field='creationTime', demands=['VideoPlaybackQuality'], returns='DOMHighResTimeStamp'),
    ],
    "credProps": [
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientInputs'], returns='bool'),
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientInputs', 'bool'], returns='None'),
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientInputsJSON'], returns='bool'),
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientInputsJSON', 'bool'], returns='None'),
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientOutputs'], returns='CredentialPropertiesOutput'),
        FieldCall(field='credProps', demands=['AuthenticationExtensionsClientOutputs', 'CredentialPropertiesOutput'], returns='None'),
    ],
    "credential": [
        FieldCall(field='credential', demands=['RTCIceServer'], returns='str'),
        FieldCall(field='credential', demands=['RTCIceServer', 'str'], returns='None'),
    ],
    "credentialProtectionPolicy": [
        FieldCall(field='credentialProtectionPolicy', demands=['AuthenticationExtensionsClientInputs'], returns='str'),
        FieldCall(field='credentialProtectionPolicy', demands=['AuthenticationExtensionsClientInputs', 'str'], returns='None'),
    ],
    "credentials": [
        FieldCall(field='credentials', demands=['RequestInit'], returns='RequestCredentials'),
        FieldCall(field='credentials', demands=['RequestInit', 'RequestCredentials'], returns='None'),
        FieldCall(field='credentials', demands=['WorkerOptions'], returns='RequestCredentials'),
        FieldCall(field='credentials', demands=['WorkerOptions', 'RequestCredentials'], returns='None'),
        FieldCall(field='credentials', demands=['WorkletOptions'], returns='RequestCredentials'),
        FieldCall(field='credentials', demands=['WorkletOptions', 'RequestCredentials'], returns='None'),
        FieldCall(field='credentials', demands=['Navigator'], returns='CredentialsContainer'),
        FieldCall(field='credentials', demands=['Request'], returns='RequestCredentials'),
    ],
    "crossOrigin": [
        FieldCall(field='crossOrigin', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='crossOrigin', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='crossOrigin', demands=['HTMLMediaElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLMediaElement', 'str'], returns='None'),
        FieldCall(field='crossOrigin', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='crossOrigin', demands=['SVGImageElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGImageElement', 'str'], returns='None'),
    ],
    "crossOriginIsolated": [
        FieldCall(field='crossOriginIsolated', demands=['WindowOrWorkerGlobalScope'], returns='bool'),
    ],
    "crv": [
        FieldCall(field='crv', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='crv', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "crypto": [
        FieldCall(field='crypto', demands=['WindowOrWorkerGlobalScope'], returns='Crypto'),
    ],
    "cssFloat": [
        FieldCall(field='cssFloat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='cssFloat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "cssRules": [
        FieldCall(field='cssRules', demands=['CSSGroupingRule'], returns='CSSRuleList'),
        FieldCall(field='cssRules', demands=['CSSKeyframesRule'], returns='CSSRuleList'),
        FieldCall(field='cssRules', demands=['CSSStyleSheet'], returns='CSSRuleList'),
    ],
    "cssText": [
        FieldCall(field='cssText', demands=['CSSRule'], returns='str'),
        FieldCall(field='cssText', demands=['CSSRule', 'str'], returns='None'),
        FieldCall(field='cssText', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='cssText', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "ctrlKey": [
        FieldCall(field='ctrlKey', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='ctrlKey', demands=['EventModifierInit', 'bool'], returns='None'),
        FieldCall(field='ctrlKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='ctrlKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='ctrlKey', demands=['TouchEvent'], returns='bool'),
    ],
    "cuechange": [
        FieldCall(field='cuechange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='cuechange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='cuechange', demands=['TextTrackEventMap'], returns='Event'),
        FieldCall(field='cuechange', demands=['TextTrackEventMap', 'Event'], returns='None'),
    ],
    "cues": [
        FieldCall(field='cues', demands=['TextTrack'], returns='TextTrackCueList'),
    ],
    "cullFace": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='cullFace', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='cullFace', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "currency": [
        FieldCall(field='currency', demands=['PaymentCurrencyAmount'], returns='str'),
        FieldCall(field='currency', demands=['PaymentCurrencyAmount', 'str'], returns='None'),
        FieldCall(field='currency', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='currency', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "currencyDisplay": [
        FieldCall(field='currencyDisplay', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='currencyDisplay', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "currentCSSZoom": [
        FieldCall(field='currentCSSZoom', demands=['Element'], returns='float'),
    ],
    "currentDirection": [
        FieldCall(field='currentDirection', demands=['RTCRtpTransceiver'], returns='RTCRtpTransceiverDirection'),
    ],
    "currentIteration": [
        FieldCall(field='currentIteration', demands=['ComputedEffectTiming'], returns='float'),
        FieldCall(field='currentIteration', demands=['ComputedEffectTiming', 'float'], returns='None'),
    ],
    "currentLocalDescription": [
        FieldCall(field='currentLocalDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "currentNode": [
        FieldCall(field='currentNode', demands=['TreeWalker'], returns='Node'),
        FieldCall(field='currentNode', demands=['TreeWalker', 'Node'], returns='None'),
    ],
    "currentRemoteDescription": [
        FieldCall(field='currentRemoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "currentRoundTripTime": [
        FieldCall(field='currentRoundTripTime', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='currentRoundTripTime', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "currentScale": [
        FieldCall(field='currentScale', demands=['SVGSVGElement'], returns='float'),
        FieldCall(field='currentScale', demands=['SVGSVGElement', 'float'], returns='None'),
    ],
    "currentScript": [
        FieldCall(field='currentScript', demands=['Document'], returns='HTMLOrSVGScriptElement'),
    ],
    "currentSrc": [
        FieldCall(field='currentSrc', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='currentSrc', demands=['HTMLMediaElement'], returns='str'),
    ],
    "currentTarget": [
        FieldCall(field='currentTarget', demands=['Event'], returns='EventTarget'),
    ],
    "currentTime": [
        FieldCall(field='currentTime', demands=['AnimationPlaybackEventInit'], returns='CSSNumberish'),
        FieldCall(field='currentTime', demands=['AnimationPlaybackEventInit', 'CSSNumberish'], returns='None'),
        FieldCall(field='currentTime', demands=['Animation'], returns='CSSNumberish'),
        FieldCall(field='currentTime', demands=['Animation', 'CSSNumberish'], returns='None'),
        FieldCall(field='currentTime', demands=['AnimationPlaybackEvent'], returns='CSSNumberish'),
        FieldCall(field='currentTime', demands=['AnimationTimeline'], returns='CSSNumberish'),
        FieldCall(field='currentTime', demands=['BaseAudioContext'], returns='float'),
        FieldCall(field='currentTime', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='currentTime', demands=['HTMLMediaElement', 'float'], returns='None'),
    ],
    "currentTranslate": [
        FieldCall(field='currentTranslate', demands=['SVGSVGElement'], returns='DOMPointReadOnly'),
    ],
    "cursor": [
        FieldCall(field='cursor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='cursor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "curve": [
        FieldCall(field='curve', demands=['WaveShaperOptions'], returns='number[]'),
        FieldCall(field='curve', demands=['WaveShaperOptions', 'list'], returns='None'),
        FieldCall(field='curve', demands=['WaveShaperNode'], returns='Float32Array<ArrayBuffer>'),
        FieldCall(field='curve', demands=['WaveShaperNode', 'Float32Array'], returns='None'),
        FieldCall(field='curve', demands=['WaveShaperNode'], returns='Float32Array'),
    ],
    "customElementRegistry": [
        FieldCall(field='customElementRegistry', demands=['ElementCreationOptions'], returns='CustomElementRegistry'),
        FieldCall(field='customElementRegistry', demands=['ElementCreationOptions', 'CustomElementRegistry'], returns='None'),
        FieldCall(field='customElementRegistry', demands=['ImportNodeOptions'], returns='CustomElementRegistry'),
        FieldCall(field='customElementRegistry', demands=['ImportNodeOptions', 'CustomElementRegistry'], returns='None'),
        FieldCall(field='customElementRegistry', demands=['ShadowRootInit'], returns='CustomElementRegistry'),
        FieldCall(field='customElementRegistry', demands=['ShadowRootInit', 'CustomElementRegistry'], returns='None'),
    ],
    "customElements": [
        FieldCall(field='customElements', demands=['Window'], returns='CustomElementRegistry'),
    ],
    "customError": [
        FieldCall(field='customError', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='customError', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='customError', demands=['ValidityState'], returns='bool'),
    ],
    "cut": [
        FieldCall(field='cut', demands=['GlobalEventHandlersEventMap'], returns='ClipboardEvent'),
        FieldCall(field='cut', demands=['GlobalEventHandlersEventMap', 'ClipboardEvent'], returns='None'),
    ],
    "cx": [
        FieldCall(field='cx', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='cx', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='cx', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cx', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cx', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "cy": [
        FieldCall(field='cy', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='cy', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='cy', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cy', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cy', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "d": [
        FieldCall(field='d', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='d', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='d', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='d', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='d', demands=['RsaOtherPrimesInfo'], returns='str'),
        FieldCall(field='d', demands=['RsaOtherPrimesInfo', 'str'], returns='None'),
        FieldCall(field='d', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='d', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='d', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='d', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='d', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "data": [
        FieldCall(field='data', demands=['AudioDataInit'], returns='BufferSource'),
        FieldCall(field='data', demands=['AudioDataInit', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='data', demands=['BlobEventInit'], returns='Blob'),
        FieldCall(field='data', demands=['BlobEventInit', 'Blob'], returns='None'),
        FieldCall(field='data', demands=['CompositionEventInit'], returns='str'),
        FieldCall(field='data', demands=['CompositionEventInit', 'str'], returns='None'),
        FieldCall(field='data', demands=['EncodedAudioChunkInit'], returns='AllowSharedBufferSource'),
        FieldCall(field='data', demands=['EncodedAudioChunkInit', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='data', demands=['EncodedVideoChunkInit'], returns='AllowSharedBufferSource'),
        FieldCall(field='data', demands=['EncodedVideoChunkInit', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='data', demands=['ImageDecoderInit'], returns='ImageBufferSource'),
        FieldCall(field='data', demands=['ImageDecoderInit', 'ImageBufferSource'], returns='None'),
        FieldCall(field='data', demands=['InputEventInit'], returns='str'),
        FieldCall(field='data', demands=['InputEventInit', 'str'], returns='None'),
        FieldCall(field='data', demands=['MIDIMessageEventInit'], returns='Uint8Array'),
        FieldCall(field='data', demands=['MIDIMessageEventInit', 'Uint8Array'], returns='None'),
        FieldCall(field='data', demands=['MessageEventInit'], returns='T'),
        FieldCall(field='data', demands=['MessageEventInit', 'T'], returns='None'),
        FieldCall(field='data', demands=['NotificationOptions'], returns='*'),
        FieldCall(field='data', demands=['NotificationOptions', '*'], returns='None'),
        FieldCall(field='data', demands=['PaymentDetailsModifier'], returns='*'),
        FieldCall(field='data', demands=['PaymentDetailsModifier', '*'], returns='None'),
        FieldCall(field='data', demands=['PaymentMethodData'], returns='*'),
        FieldCall(field='data', demands=['PaymentMethodData', '*'], returns='None'),
        FieldCall(field='data', demands=['WriteParams'], returns='BufferSource'),
        FieldCall(field='data', demands=['WriteParams', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='data', demands=['BlobEvent'], returns='Blob'),
        FieldCall(field='data', demands=['CharacterData'], returns='str'),
        FieldCall(field='data', demands=['CharacterData', 'str'], returns='None'),
        FieldCall(field='data', demands=['CompositionEvent'], returns='str'),
        FieldCall(field='data', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='data', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='data', demands=['ImageData'], returns='ImageDataArray'),
        FieldCall(field='data', demands=['InputEvent'], returns='str'),
        FieldCall(field='data', demands=['MIDIMessageEvent'], returns='Uint8Array<ArrayBuffer>'),
        FieldCall(field='data', demands=['MessageEvent'], returns='T'),
        FieldCall(field='data', demands=['Notification'], returns='*'),
        FieldCall(field='data', demands=['RTCEncodedAudioFrame'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['RTCEncodedAudioFrame', 'ArrayBuffer'], returns='None'),
        FieldCall(field='data', demands=['RTCEncodedVideoFrame'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['RTCEncodedVideoFrame', 'ArrayBuffer'], returns='None'),
        FieldCall(field='data', demands=['TextEvent'], returns='str'),
        FieldCall(field='data', demands=['HTMLElementTagNameMap'], returns='HTMLDataElement'),
        FieldCall(field='data', demands=['HTMLElementTagNameMap', 'HTMLDataElement'], returns='None'),
        FieldCall(field='data', demands=['ImageData'], returns='Uint8ClampedArray'),
        FieldCall(field='data', demands=['MIDIMessageEvent'], returns='Uint8Array'),
    ],
    "dataTransfer": [
        FieldCall(field='dataTransfer', demands=['DragEventInit'], returns='DataTransfer'),
        FieldCall(field='dataTransfer', demands=['DragEventInit', 'DataTransfer'], returns='None'),
        FieldCall(field='dataTransfer', demands=['InputEventInit'], returns='DataTransfer'),
        FieldCall(field='dataTransfer', demands=['InputEventInit', 'DataTransfer'], returns='None'),
        FieldCall(field='dataTransfer', demands=['DragEvent'], returns='DataTransfer'),
        FieldCall(field='dataTransfer', demands=['InputEvent'], returns='DataTransfer'),
    ],
    "dataavailable": [
        FieldCall(field='dataavailable', demands=['MediaRecorderEventMap'], returns='BlobEvent'),
        FieldCall(field='dataavailable', demands=['MediaRecorderEventMap', 'BlobEvent'], returns='None'),
    ],
    "databases": [
        PrototypeCall(constructor='IDBFactory', fn='databases', demands=['IDBFactory'], returns='list'),
    ],
    "datachannel": [
        FieldCall(field='datachannel', demands=['RTCPeerConnectionEventMap'], returns='RTCDataChannelEvent'),
        FieldCall(field='datachannel', demands=['RTCPeerConnectionEventMap', 'RTCDataChannelEvent'], returns='None'),
    ],
    "datagrams": [
        FieldCall(field='datagrams', demands=['WebTransport'], returns='WebTransportDatagramDuplexStream'),
    ],
    "datalist": [
        FieldCall(field='datalist', demands=['HTMLElementTagNameMap'], returns='HTMLDataListElement'),
        FieldCall(field='datalist', demands=['HTMLElementTagNameMap', 'HTMLDataListElement'], returns='None'),
    ],
    "dataset": [
        FieldCall(field='dataset', demands=['HTMLOrSVGElement'], returns='DOMStringMap'),
    ],
    "dateTime": [
        FieldCall(field='dateTime', demands=['HTMLModElement'], returns='str'),
        FieldCall(field='dateTime', demands=['HTMLModElement', 'str'], returns='None'),
        FieldCall(field='dateTime', demands=['HTMLTimeElement'], returns='str'),
        FieldCall(field='dateTime', demands=['HTMLTimeElement', 'str'], returns='None'),
    ],
    "db": [
        FieldCall(field='db', demands=['IDBTransaction'], returns='IDBDatabase'),
    ],
    "dblclick": [
        FieldCall(field='dblclick', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='dblclick', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "dd": [
        FieldCall(field='dd', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='dd', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "debug": [
        PrototypeCall(constructor='Console', fn='debug', demands=['Console', '*'], returns='None'),
    ],
    "declare": [
        FieldCall(field='declare', demands=['HTMLObjectElement'], returns='bool'),
        FieldCall(field='declare', demands=['HTMLObjectElement', 'bool'], returns='None'),
    ],
    "decode": [
        PrototypeCall(constructor='AudioDecoder', fn='decode', demands=['AudioDecoder', 'EncodedAudioChunk'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='decode', demands=['HTMLImageElement'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='decode', demands=['ImageDecoder'], returns='ImageDecodeResult'),
        PrototypeCall(constructor='ImageDecoder', fn='decode', demands=['ImageDecoder', 'ImageDecodeOptions'], returns='ImageDecodeResult'),
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder'], returns='str'),
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder', 'AllowSharedBufferSource'], returns='str'),
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder', 'AllowSharedBufferSource', 'TextDecodeOptions'], returns='str'),
        PrototypeCall(constructor='VideoDecoder', fn='decode', demands=['VideoDecoder', 'EncodedVideoChunk'], returns='None'),
    ],
    "decodeAudioData": [
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer'], returns='AudioBuffer'),
        PrototypeCall(constructor='AudioContext', fn='decodeAudioData', demands=['AudioContext', 'ArrayBuffer'], returns='AudioBuffer'),
        PrototypeCall(constructor='OfflineAudioContext', fn='decodeAudioData', demands=['OfflineAudioContext', 'ArrayBuffer'], returns='AudioBuffer'),
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='AudioContext', fn='decodeAudioData', demands=['AudioContext', 'ArrayBuffer', 'DecodeSuccessCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='OfflineAudioContext', fn='decodeAudioData', demands=['OfflineAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback', 'DecodeErrorCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='AudioContext', fn='decodeAudioData', demands=['AudioContext', 'ArrayBuffer', 'DecodeSuccessCallback', 'DecodeErrorCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='OfflineAudioContext', fn='decodeAudioData', demands=['OfflineAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback', 'DecodeErrorCallback'], returns='AudioBuffer'),
    ],
    "decodeQueueSize": [
        FieldCall(field='decodeQueueSize', demands=['AudioDecoder'], returns='float'),
        FieldCall(field='decodeQueueSize', demands=['VideoDecoder'], returns='float'),
    ],
    "decodedBodySize": [
        FieldCall(field='decodedBodySize', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "decoderConfig": [
        FieldCall(field='decoderConfig', demands=['EncodedAudioChunkMetadata'], returns='AudioDecoderConfig'),
        FieldCall(field='decoderConfig', demands=['EncodedAudioChunkMetadata', 'AudioDecoderConfig'], returns='None'),
        FieldCall(field='decoderConfig', demands=['EncodedVideoChunkMetadata'], returns='VideoDecoderConfig'),
        FieldCall(field='decoderConfig', demands=['EncodedVideoChunkMetadata', 'VideoDecoderConfig'], returns='None'),
    ],
    "decoderImplementation": [
        FieldCall(field='decoderImplementation', demands=['RTCInboundRtpStreamStats'], returns='str'),
        FieldCall(field='decoderImplementation', demands=['RTCInboundRtpStreamStats', 'str'], returns='None'),
    ],
    "decoding": [
        FieldCall(field='decoding', demands=['HTMLImageElement'], returns='"async"'),
        FieldCall(field='decoding', demands=['HTMLImageElement', '"async"'], returns='None'),
    ],
    "decodingInfo": [
        PrototypeCall(constructor='MediaCapabilities', fn='decodingInfo', demands=['MediaCapabilities', 'MediaDecodingConfiguration'], returns='MediaCapabilitiesDecodingInfo'),
    ],
    "decrypt": [
        PrototypeCall(constructor='SubtleCrypto', fn='decrypt', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='decrypt', demands=['SubtleCrypto', '', 'CryptoKey', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
    ],
    "default": [
        FieldCall(field='default', demands=['HTMLTrackElement'], returns='bool'),
        FieldCall(field='default', demands=['HTMLTrackElement', 'bool'], returns='None'),
        FieldCall(field='default', demands=['SpeechSynthesisVoice'], returns='bool'),
    ],
    "defaultChecked": [
        FieldCall(field='defaultChecked', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='defaultChecked', demands=['HTMLInputElement', 'bool'], returns='None'),
    ],
    "defaultMuted": [
        FieldCall(field='defaultMuted', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='defaultMuted', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "defaultPlaybackRate": [
        FieldCall(field='defaultPlaybackRate', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='defaultPlaybackRate', demands=['HTMLMediaElement', 'float'], returns='None'),
    ],
    "defaultPrevented": [
        FieldCall(field='defaultPrevented', demands=['Event'], returns='bool'),
    ],
    "defaultSelected": [
        FieldCall(field='defaultSelected', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='defaultSelected', demands=['HTMLOptionElement', 'bool'], returns='None'),
    ],
    "defaultValue": [
        FieldCall(field='defaultValue', demands=['AudioParam'], returns='float'),
        FieldCall(field='defaultValue', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='defaultValue', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLOutputElement', 'str'], returns='None'),
        FieldCall(field='defaultValue', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLTextAreaElement', 'str'], returns='None'),
    ],
    "defaultView": [
        FieldCall(field='defaultView', demands=['Document'], returns='(WindowProxy&typeofglobalThis)'),
    ],
    "defer": [
        FieldCall(field='defer', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='defer', demands=['HTMLScriptElement', 'bool'], returns='None'),
        PrototypeCall(constructor='DisposableStack', fn='defer', demands=['DisposableStack', '()=>void'], returns='None'),
        PrototypeCall(constructor='AsyncDisposableStack', fn='defer', demands=['AsyncDisposableStack', '()=>PromiseLike'], returns='None'),
    ],
    "define": [
        PrototypeCall(constructor='CustomElementRegistry', fn='define', demands=['CustomElementRegistry', 'str', 'CustomElementConstructor'], returns='None'),
        PrototypeCall(constructor='CustomElementRegistry', fn='define', demands=['CustomElementRegistry', 'str', 'CustomElementConstructor', 'ElementDefinitionOptions'], returns='None'),
    ],
    "defineProperties": [
        PrototypeCall(constructor='ObjectConstructor', fn='defineProperties', demands=['ObjectConstructor', 'T', 'PropertyDescriptorMap&ThisType'], returns='T'),
    ],
    "defineProperty": [
        PrototypeCall(constructor='ObjectConstructor', fn='defineProperty', demands=['ObjectConstructor', 'T', 'PropertyKey', 'PropertyDescriptor&ThisType'], returns='T'),
        PrototypeCall(constructor='ProxyHandler', fn='defineProperty', demands=['ProxyHandler', 'T', 'str', 'PropertyDescriptor'], returns='bool'),
    ],
    "defs": [
        FieldCall(field='defs', demands=['SVGElementTagNameMap'], returns='SVGDefsElement'),
        FieldCall(field='defs', demands=['SVGElementTagNameMap', 'SVGDefsElement'], returns='None'),
    ],
    "degradationPreference": [
        FieldCall(field='degradationPreference', demands=['RTCRtpSendParameters'], returns='RTCDegradationPreference'),
        FieldCall(field='degradationPreference', demands=['RTCRtpSendParameters', 'RTCDegradationPreference'], returns='None'),
    ],
    "del": [
        FieldCall(field='del', demands=['HTMLElementTagNameMap'], returns='HTMLModElement'),
        FieldCall(field='del', demands=['HTMLElementTagNameMap', 'HTMLModElement'], returns='None'),
    ],
    "delay": [
        FieldCall(field='delay', demands=['EffectTiming'], returns='float'),
        FieldCall(field='delay', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='delay', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='delay', demands=['OptionalEffectTiming', 'float'], returns='None'),
    ],
    "delayTime": [
        FieldCall(field='delayTime', demands=['DelayOptions'], returns='float'),
        FieldCall(field='delayTime', demands=['DelayOptions', 'float'], returns='None'),
        FieldCall(field='delayTime', demands=['DelayNode'], returns='AudioParam'),
    ],
    "delegatesFocus": [
        FieldCall(field='delegatesFocus', demands=['ShadowRootInit'], returns='bool'),
        FieldCall(field='delegatesFocus', demands=['ShadowRootInit', 'bool'], returns='None'),
        FieldCall(field='delegatesFocus', demands=['ShadowRoot'], returns='bool'),
    ],
    "delete": [
        PrototypeCall(constructor='Cache', fn='delete', demands=['Cache', 'RequestInfo'], returns='bool'),
        PrototypeCall(constructor='Cache', fn='delete', demands=['Cache', 'RequestInfo', 'CacheQueryOptions'], returns='bool'),
        PrototypeCall(constructor='CacheStorage', fn='delete', demands=['CacheStorage', 'str'], returns='bool'),
        PrototypeCall(constructor='CookieStore', fn='delete', demands=['CookieStore', 'str'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='delete', demands=['CookieStore', 'CookieStoreDeleteOptions'], returns='None'),
        PrototypeCall(constructor='FormData', fn='delete', demands=['FormData', 'str'], returns='None'),
        PrototypeCall(constructor='Headers', fn='delete', demands=['Headers', 'str'], returns='None'),
        PrototypeCall(constructor='IDBCursor', fn='delete', demands=['IDBCursor'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='delete', demands=['IDBCursorWithValue'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='delete', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='StylePropertyMap', fn='delete', demands=['StylePropertyMap', 'str'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='delete', demands=['URLSearchParams', 'str'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='delete', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='delete', demands=['HighlightRegistry', 'K'], returns='bool'),
        PrototypeCall(constructor='WeakMap', fn='delete', demands=['WeakMap', 'K'], returns='bool'),
        PrototypeCall(constructor='Highlight', fn='delete', demands=['Highlight', 'T'], returns='bool'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='delete', demands=['ViewTransitionTypeSet', 'T'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='delete', demands=['FontFaceSet', 'T'], returns='bool'),
        PrototypeCall(constructor='CustomStateSet', fn='delete', demands=['CustomStateSet', 'T'], returns='bool'),
        PrototypeCall(constructor='WeakSet', fn='delete', demands=['WeakSet', 'T'], returns='bool'),
    ],
    "deleteBuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteBuffer', demands=['WebGLRenderingContext', 'WebGLBuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteBuffer', demands=['WebGL2RenderingContext', 'WebGLBuffer'], returns='None'),
    ],
    "deleteCaption": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteCaption', demands=['HTMLTableElement'], returns='None'),
    ],
    "deleteCell": [
        PrototypeCall(constructor='HTMLTableRowElement', fn='deleteCell', demands=['HTMLTableRowElement', 'float'], returns='None'),
    ],
    "deleteContents": [
        PrototypeCall(constructor='Range', fn='deleteContents', demands=['Range'], returns='None'),
    ],
    "deleteData": [
        PrototypeCall(constructor='CharacterData', fn='deleteData', demands=['CharacterData', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Text', fn='deleteData', demands=['Text', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='ProcessingInstruction', fn='deleteData', demands=['ProcessingInstruction', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Comment', fn='deleteData', demands=['Comment', 'float', 'float'], returns='None'),
    ],
    "deleteDatabase": [
        PrototypeCall(constructor='IDBFactory', fn='deleteDatabase', demands=['IDBFactory', 'str'], returns='IDBOpenDBRequest'),
    ],
    "deleteFramebuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteFramebuffer', demands=['WebGLRenderingContext', 'WebGLFramebuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteFramebuffer', demands=['WebGL2RenderingContext', 'WebGLFramebuffer'], returns='None'),
    ],
    "deleteFromDocument": [
        PrototypeCall(constructor='Selection', fn='deleteFromDocument', demands=['Selection'], returns='None'),
    ],
    "deleteIndex": [
        PrototypeCall(constructor='IDBObjectStore', fn='deleteIndex', demands=['IDBObjectStore', 'str'], returns='None'),
    ],
    "deleteMedium": [
        PrototypeCall(constructor='MediaList', fn='deleteMedium', demands=['MediaList', 'str'], returns='None'),
    ],
    "deleteObjectStore": [
        PrototypeCall(constructor='IDBDatabase', fn='deleteObjectStore', demands=['IDBDatabase', 'str'], returns='None'),
    ],
    "deleteProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "deleteProperty": [
        PrototypeCall(constructor='ProxyHandler', fn='deleteProperty', demands=['ProxyHandler', 'T', 'str'], returns='bool'),
    ],
    "deleteQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteQuery', demands=['WebGL2RenderingContext', 'WebGLQuery'], returns='None'),
    ],
    "deleteRenderbuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteRenderbuffer', demands=['WebGLRenderingContext', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteRenderbuffer', demands=['WebGL2RenderingContext', 'WebGLRenderbuffer'], returns='None'),
    ],
    "deleteRow": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteRow', demands=['HTMLTableElement', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='deleteRow', demands=['HTMLTableSectionElement', 'float'], returns='None'),
    ],
    "deleteRule": [
        PrototypeCall(constructor='CSSGroupingRule', fn='deleteRule', demands=['CSSGroupingRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSStartingStyleRule', fn='deleteRule', demands=['CSSStartingStyleRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSPageRule', fn='deleteRule', demands=['CSSPageRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSStyleRule', fn='deleteRule', demands=['CSSStyleRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSConditionRule', fn='deleteRule', demands=['CSSConditionRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSScopeRule', fn='deleteRule', demands=['CSSScopeRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSLayerBlockRule', fn='deleteRule', demands=['CSSLayerBlockRule', 'float'], returns='None'),
        PrototypeCall(constructor='CSSKeyframesRule', fn='deleteRule', demands=['CSSKeyframesRule', 'str'], returns='None'),
        PrototypeCall(constructor='CSSStyleSheet', fn='deleteRule', demands=['CSSStyleSheet', 'float'], returns='None'),
    ],
    "deleteSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteSampler', demands=['WebGL2RenderingContext', 'WebGLSampler'], returns='None'),
    ],
    "deleteShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='None'),
    ],
    "deleteSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteSync', demands=['WebGL2RenderingContext', 'WebGLSync'], returns='None'),
    ],
    "deleteTFoot": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteTFoot', demands=['HTMLTableElement'], returns='None'),
    ],
    "deleteTHead": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteTHead', demands=['HTMLTableElement'], returns='None'),
    ],
    "deleteTexture": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteTexture', demands=['WebGLRenderingContext', 'WebGLTexture'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteTexture', demands=['WebGL2RenderingContext', 'WebGLTexture'], returns='None'),
    ],
    "deleteTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteTransformFeedback', demands=['WebGL2RenderingContext', 'WebGLTransformFeedback'], returns='None'),
    ],
    "deleteVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='None'),
    ],
    "deleteVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='deleteVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='None'),
    ],
    "deleted": [
        FieldCall(field='deleted', demands=['CookieChangeEventInit'], returns='CookieList'),
        FieldCall(field='deleted', demands=['CookieChangeEventInit', 'CookieList'], returns='None'),
        FieldCall(field='deleted', demands=['CookieChangeEvent'], returns='ReadonlyArray'),
    ],
    "deltaMode": [
        FieldCall(field='deltaMode', demands=['WheelEventInit'], returns='float'),
        FieldCall(field='deltaMode', demands=['WheelEventInit', 'float'], returns='None'),
        FieldCall(field='deltaMode', demands=['WheelEvent'], returns='float'),
    ],
    "deltaX": [
        FieldCall(field='deltaX', demands=['WheelEventInit'], returns='float'),
        FieldCall(field='deltaX', demands=['WheelEventInit', 'float'], returns='None'),
        FieldCall(field='deltaX', demands=['WheelEvent'], returns='float'),
    ],
    "deltaY": [
        FieldCall(field='deltaY', demands=['WheelEventInit'], returns='float'),
        FieldCall(field='deltaY', demands=['WheelEventInit', 'float'], returns='None'),
        FieldCall(field='deltaY', demands=['WheelEvent'], returns='float'),
    ],
    "deltaZ": [
        FieldCall(field='deltaZ', demands=['WheelEventInit'], returns='float'),
        FieldCall(field='deltaZ', demands=['WheelEventInit', 'float'], returns='None'),
        FieldCall(field='deltaZ', demands=['WheelEvent'], returns='float'),
    ],
    "dependencies": [
        FieldCall(field='dependencies', demands=['RTCEncodedVideoFrameMetadata'], returns='list'),
        FieldCall(field='dependencies', demands=['RTCEncodedVideoFrameMetadata', 'list'], returns='None'),
    ],
    "dependentLocality": [
        FieldCall(field='dependentLocality', demands=['AddressErrors'], returns='str'),
        FieldCall(field='dependentLocality', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='dependentLocality', demands=['PaymentAddress'], returns='str'),
    ],
    "depth": [
        FieldCall(field='depth', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='depth', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "depthBias": [
        FieldCall(field='depthBias', demands=['GPUDepthStencilState'], returns='float'),
        FieldCall(field='depthBias', demands=['GPUDepthStencilState', 'float'], returns='None'),
    ],
    "depthBiasClamp": [
        FieldCall(field='depthBiasClamp', demands=['GPUDepthStencilState'], returns='float'),
        FieldCall(field='depthBiasClamp', demands=['GPUDepthStencilState', 'float'], returns='None'),
    ],
    "depthBiasSlopeScale": [
        FieldCall(field='depthBiasSlopeScale', demands=['GPUDepthStencilState'], returns='float'),
        FieldCall(field='depthBiasSlopeScale', demands=['GPUDepthStencilState', 'float'], returns='None'),
    ],
    "depthCompare": [
        FieldCall(field='depthCompare', demands=['GPUDepthStencilState'], returns='GPUCompareFunction'),
        FieldCall(field='depthCompare', demands=['GPUDepthStencilState', 'GPUCompareFunction'], returns='None'),
    ],
    "depthFailOp": [
        FieldCall(field='depthFailOp', demands=['GPUStencilFaceState'], returns='GPUStencilOperation'),
        FieldCall(field='depthFailOp', demands=['GPUStencilFaceState', 'GPUStencilOperation'], returns='None'),
    ],
    "depthFunc": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthFunc', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthFunc', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "depthMask": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthMask', demands=['WebGLRenderingContext', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthMask', demands=['WebGL2RenderingContext', 'GLboolean'], returns='None'),
    ],
    "depthOrArrayLayers": [
        FieldCall(field='depthOrArrayLayers', demands=['GPUExtent3DDict'], returns='float'),
        FieldCall(field='depthOrArrayLayers', demands=['GPUExtent3DDict', 'float'], returns='None'),
    ],
    "depthRange": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthRange', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthRange', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "depthWriteEnabled": [
        FieldCall(field='depthWriteEnabled', demands=['GPUDepthStencilState'], returns='bool'),
        FieldCall(field='depthWriteEnabled', demands=['GPUDepthStencilState', 'bool'], returns='None'),
    ],
    "dequeue": [
        FieldCall(field='dequeue', demands=['AudioDecoderEventMap'], returns='Event'),
        FieldCall(field='dequeue', demands=['AudioDecoderEventMap', 'Event'], returns='None'),
        FieldCall(field='dequeue', demands=['AudioEncoderEventMap'], returns='Event'),
        FieldCall(field='dequeue', demands=['AudioEncoderEventMap', 'Event'], returns='None'),
        FieldCall(field='dequeue', demands=['VideoDecoderEventMap'], returns='Event'),
        FieldCall(field='dequeue', demands=['VideoDecoderEventMap', 'Event'], returns='None'),
        FieldCall(field='dequeue', demands=['VideoEncoderEventMap'], returns='Event'),
        FieldCall(field='dequeue', demands=['VideoEncoderEventMap', 'Event'], returns='None'),
    ],
    "deref": [
        PrototypeCall(constructor='WeakRef', fn='deref', demands=['WeakRef'], returns='T'),
    ],
    "deriveBits": [
        PrototypeCall(constructor='SubtleCrypto', fn='deriveBits', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='deriveBits', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'float'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='deriveBits', demands=['SubtleCrypto', '', 'CryptoKey', 'float'], returns='ArrayBuffer'),
    ],
    "deriveKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='deriveKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AlgorithmIdentifier', 'bool', 'list'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='deriveKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AlgorithmIdentifier', 'bool', 'Iterable'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='deriveKey', demands=['SubtleCrypto', '', 'CryptoKey', '', 'bool', 'list'], returns='CryptoKey'),
    ],
    "desc": [
        FieldCall(field='desc', demands=['SVGElementTagNameMap'], returns='SVGDescElement'),
        FieldCall(field='desc', demands=['SVGElementTagNameMap', 'SVGDescElement'], returns='None'),
    ],
    "descentOverride": [
        FieldCall(field='descentOverride', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='descentOverride', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='descentOverride', demands=['FontFace'], returns='str'),
        FieldCall(field='descentOverride', demands=['FontFace', 'str'], returns='None'),
    ],
    "description": [
        FieldCall(field='description', demands=['AudioDecoderConfig'], returns='AllowSharedBufferSource'),
        FieldCall(field='description', demands=['AudioDecoderConfig', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='description', demands=['VideoDecoderConfig'], returns='AllowSharedBufferSource'),
        FieldCall(field='description', demands=['VideoDecoderConfig', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='description', demands=['MimeType'], returns='str'),
        FieldCall(field='description', demands=['PerformanceServerTiming'], returns='str'),
        FieldCall(field='description', demands=['Plugin'], returns='str'),
        FieldCall(field='description', demands=['AudioDecoderConfig'], returns='BufferSource'),
        FieldCall(field='description', demands=['Symbol'], returns='str'),
    ],
    "deselectAll": [
        PrototypeCall(constructor='SVGSVGElement', fn='deselectAll', demands=['SVGSVGElement'], returns='None'),
    ],
    "designMode": [
        FieldCall(field='designMode', demands=['Document'], returns='str'),
        FieldCall(field='designMode', demands=['Document', 'str'], returns='None'),
    ],
    "desiredHeight": [
        FieldCall(field='desiredHeight', demands=['ImageDecoderInit'], returns='float'),
        FieldCall(field='desiredHeight', demands=['ImageDecoderInit', 'float'], returns='None'),
    ],
    "desiredSize": [
        FieldCall(field='desiredSize', demands=['ReadableByteStreamController'], returns='float'),
        FieldCall(field='desiredSize', demands=['ReadableStreamDefaultController'], returns='float'),
        FieldCall(field='desiredSize', demands=['TransformStreamDefaultController'], returns='float'),
        FieldCall(field='desiredSize', demands=['WritableStreamDefaultWriter'], returns='float'),
    ],
    "desiredWidth": [
        FieldCall(field='desiredWidth', demands=['ImageDecoderInit'], returns='float'),
        FieldCall(field='desiredWidth', demands=['ImageDecoderInit', 'float'], returns='None'),
    ],
    "destination": [
        FieldCall(field='destination', demands=['BaseAudioContext'], returns='AudioDestinationNode'),
        FieldCall(field='destination', demands=['Request'], returns='RequestDestination'),
    ],
    "desynchronized": [
        FieldCall(field='desynchronized', demands=['CanvasRenderingContext2DSettings'], returns='bool'),
        FieldCall(field='desynchronized', demands=['CanvasRenderingContext2DSettings', 'bool'], returns='None'),
        FieldCall(field='desynchronized', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='desynchronized', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "detach": [
        PrototypeCall(constructor='NodeIterator', fn='detach', demands=['NodeIterator'], returns='None'),
        PrototypeCall(constructor='Range', fn='detach', demands=['Range'], returns='None'),
    ],
    "detachShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='detachShader', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='detachShader', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
    ],
    "detached": [
        PrototypeCall(constructor='ArrayBuffer', fn='detached', demands=['ArrayBuffer'], returns='bool'),
    ],
    "detail": [
        FieldCall(field='detail', demands=['CustomEventInit'], returns='T'),
        FieldCall(field='detail', demands=['CustomEventInit', 'T'], returns='None'),
        FieldCall(field='detail', demands=['PerformanceMarkOptions'], returns='*'),
        FieldCall(field='detail', demands=['PerformanceMarkOptions', '*'], returns='None'),
        FieldCall(field='detail', demands=['PerformanceMeasureOptions'], returns='*'),
        FieldCall(field='detail', demands=['PerformanceMeasureOptions', '*'], returns='None'),
        FieldCall(field='detail', demands=['UIEventInit'], returns='float'),
        FieldCall(field='detail', demands=['UIEventInit', 'float'], returns='None'),
        FieldCall(field='detail', demands=['CustomEvent'], returns='T'),
        FieldCall(field='detail', demands=['PerformanceMark'], returns='*'),
        FieldCall(field='detail', demands=['PerformanceMeasure'], returns='*'),
        FieldCall(field='detail', demands=['UIEvent'], returns='float'),
    ],
    "details": [
        FieldCall(field='details', demands=['PaymentResponse'], returns='*'),
        FieldCall(field='details', demands=['HTMLElementTagNameMap'], returns='HTMLDetailsElement'),
        FieldCall(field='details', demands=['HTMLElementTagNameMap', 'HTMLDetailsElement'], returns='None'),
    ],
    "detune": [
        FieldCall(field='detune', demands=['AudioBufferSourceOptions'], returns='float'),
        FieldCall(field='detune', demands=['AudioBufferSourceOptions', 'float'], returns='None'),
        FieldCall(field='detune', demands=['BiquadFilterOptions'], returns='float'),
        FieldCall(field='detune', demands=['BiquadFilterOptions', 'float'], returns='None'),
        FieldCall(field='detune', demands=['OscillatorOptions'], returns='float'),
        FieldCall(field='detune', demands=['OscillatorOptions', 'float'], returns='None'),
        FieldCall(field='detune', demands=['AudioBufferSourceNode'], returns='AudioParam'),
        FieldCall(field='detune', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='detune', demands=['OscillatorNode'], returns='AudioParam'),
    ],
    "device": [
        FieldCall(field='device', demands=['GPUCanvasConfiguration'], returns='GPUDevice'),
        FieldCall(field='device', demands=['GPUCanvasConfiguration', 'GPUDevice'], returns='None'),
    ],
    "deviceId": [
        FieldCall(field='deviceId', demands=['MediaTrackCapabilities'], returns='str'),
        FieldCall(field='deviceId', demands=['MediaTrackCapabilities', 'str'], returns='None'),
        FieldCall(field='deviceId', demands=['MediaTrackConstraintSet'], returns='ConstrainDOMString'),
        FieldCall(field='deviceId', demands=['MediaTrackConstraintSet', 'ConstrainDOMString'], returns='None'),
        FieldCall(field='deviceId', demands=['MediaTrackSettings'], returns='str'),
        FieldCall(field='deviceId', demands=['MediaTrackSettings', 'str'], returns='None'),
        FieldCall(field='deviceId', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='deviceId', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='deviceId', demands=['MediaDeviceInfo'], returns='str'),
    ],
    "devicePixelContentBoxSize": [
        FieldCall(field='devicePixelContentBoxSize', demands=['ResizeObserverEntry'], returns='ReadonlyArray'),
    ],
    "devicePixelRatio": [
        FieldCall(field='devicePixelRatio', demands=['Window'], returns='float'),
    ],
    "devicechange": [
        FieldCall(field='devicechange', demands=['MediaDevicesEventMap'], returns='Event'),
        FieldCall(field='devicechange', demands=['MediaDevicesEventMap', 'Event'], returns='None'),
    ],
    "devicemotion": [
        FieldCall(field='devicemotion', demands=['WindowEventMap'], returns='DeviceMotionEvent'),
        FieldCall(field='devicemotion', demands=['WindowEventMap', 'DeviceMotionEvent'], returns='None'),
    ],
    "deviceorientation": [
        FieldCall(field='deviceorientation', demands=['WindowEventMap'], returns='DeviceOrientationEvent'),
        FieldCall(field='deviceorientation', demands=['WindowEventMap', 'DeviceOrientationEvent'], returns='None'),
    ],
    "deviceorientationabsolute": [
        FieldCall(field='deviceorientationabsolute', demands=['WindowEventMap'], returns='DeviceOrientationEvent'),
        FieldCall(field='deviceorientationabsolute', demands=['WindowEventMap', 'DeviceOrientationEvent'], returns='None'),
    ],
    "dfn": [
        FieldCall(field='dfn', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='dfn', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "dialog": [
        FieldCall(field='dialog', demands=['HTMLElementTagNameMap'], returns='HTMLDialogElement'),
        FieldCall(field='dialog', demands=['HTMLElementTagNameMap', 'HTMLDialogElement'], returns='None'),
    ],
    "didTimeout": [
        FieldCall(field='didTimeout', demands=['IdleDeadline'], returns='bool'),
    ],
    "difference": [
        PrototypeCall(constructor='Highlight', fn='difference', demands=['Highlight', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='difference', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='FontFaceSet', fn='difference', demands=['FontFaceSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='CustomStateSet', fn='difference', demands=['CustomStateSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='ReadonlySet', fn='difference', demands=['ReadonlySet', 'ReadonlySetLike'], returns='Set'),
    ],
    "diffuseConstant": [
        FieldCall(field='diffuseConstant', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "digest": [
        PrototypeCall(constructor='SubtleCrypto', fn='digest', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
    ],
    "dimensions": [
        PrototypeCall(constructor='VBArray', fn='dimensions', demands=['VBArray'], returns='float'),
    ],
    "dir": [
        FieldCall(field='dir', demands=['NotificationOptions'], returns='NotificationDirection'),
        FieldCall(field='dir', demands=['NotificationOptions', 'NotificationDirection'], returns='None'),
        FieldCall(field='dir', demands=['Document'], returns='str'),
        FieldCall(field='dir', demands=['Document', 'str'], returns='None'),
        FieldCall(field='dir', demands=['HTMLElement'], returns='str'),
        FieldCall(field='dir', demands=['HTMLElement', 'str'], returns='None'),
        FieldCall(field='dir', demands=['Notification'], returns='NotificationDirection'),
        FieldCall(field='dir', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLDirectoryElement'),
        FieldCall(field='dir', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLDirectoryElement'], returns='None'),
        PrototypeCall(constructor='Console', fn='dir', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='dir', demands=['Console', '*'], returns='None'),
        PrototypeCall(constructor='Console', fn='dir', demands=['Console', '*', '*'], returns='None'),
    ],
    "dirName": [
        FieldCall(field='dirName', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='dirName', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='dirName', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='dirName', demands=['HTMLTextAreaElement', 'str'], returns='None'),
    ],
    "direction": [
        FieldCall(field='direction', demands=['EffectTiming'], returns='PlaybackDirection'),
        FieldCall(field='direction', demands=['EffectTiming', 'PlaybackDirection'], returns='None'),
        FieldCall(field='direction', demands=['OptionalEffectTiming'], returns='PlaybackDirection'),
        FieldCall(field='direction', demands=['OptionalEffectTiming', 'PlaybackDirection'], returns='None'),
        FieldCall(field='direction', demands=['RTCRtpTransceiverInit'], returns='RTCRtpTransceiverDirection'),
        FieldCall(field='direction', demands=['RTCRtpTransceiverInit', 'RTCRtpTransceiverDirection'], returns='None'),
        FieldCall(field='direction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='direction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='direction', demands=['CanvasTextDrawingStyles'], returns='CanvasDirection'),
        FieldCall(field='direction', demands=['CanvasTextDrawingStyles', 'CanvasDirection'], returns='None'),
        FieldCall(field='direction', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='direction', demands=['HTMLMarqueeElement', 'str'], returns='None'),
        FieldCall(field='direction', demands=['IDBCursor'], returns='IDBCursorDirection'),
        FieldCall(field='direction', demands=['RTCRtpTransceiver'], returns='RTCRtpTransceiverDirection'),
        FieldCall(field='direction', demands=['RTCRtpTransceiver', 'RTCRtpTransceiverDirection'], returns='None'),
        FieldCall(field='direction', demands=['Selection'], returns='str'),
    ],
    "dirname": [
        FieldCall(field='dirname', demands=['ImportMeta'], returns='str'),
        FieldCall(field='dirname', demands=['ImportMeta', 'str'], returns='None'),
    ],
    "dirxml": [
        PrototypeCall(constructor='Console', fn='dirxml', demands=['Console', '*'], returns='None'),
    ],
    "disable": [
        PrototypeCall(constructor='NavigationPreloadManager', fn='disable', demands=['NavigationPreloadManager'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='disable', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='disable', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "disableNormalization": [
        FieldCall(field='disableNormalization', demands=['ConvolverOptions'], returns='bool'),
        FieldCall(field='disableNormalization', demands=['ConvolverOptions', 'bool'], returns='None'),
        FieldCall(field='disableNormalization', demands=['PeriodicWaveConstraints'], returns='bool'),
        FieldCall(field='disableNormalization', demands=['PeriodicWaveConstraints', 'bool'], returns='None'),
    ],
    "disablePictureInPicture": [
        FieldCall(field='disablePictureInPicture', demands=['HTMLVideoElement'], returns='bool'),
        FieldCall(field='disablePictureInPicture', demands=['HTMLVideoElement', 'bool'], returns='None'),
    ],
    "disableRemotePlayback": [
        FieldCall(field='disableRemotePlayback', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='disableRemotePlayback', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "disableVertexAttribArray": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='disableVertexAttribArray', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='disableVertexAttribArray', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
    ],
    "disabled": [
        FieldCall(field='disabled', demands=['CSSStyleSheetInit'], returns='bool'),
        FieldCall(field='disabled', demands=['CSSStyleSheetInit', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLButtonElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLFieldSetElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLFieldSetElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLInputElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLLinkElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLLinkElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLOptGroupElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptGroupElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptionElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLSelectElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLStyleElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLStyleElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLTextAreaElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['SVGStyleElement'], returns='bool'),
        FieldCall(field='disabled', demands=['SVGStyleElement', 'bool'], returns='None'),
        FieldCall(field='disabled', demands=['StyleSheet'], returns='bool'),
        FieldCall(field='disabled', demands=['StyleSheet', 'bool'], returns='None'),
    ],
    "disableiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='disableiOES', demands=['OES_draw_buffers_indexed', 'GLenum', 'GLuint'], returns='None'),
    ],
    "disconnect": [
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'float'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'float'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'float'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'float'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'float'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'float'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'float'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'float'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'AudioNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'AudioNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='WaveShaperNode', fn='disconnect', demands=['WaveShaperNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelSplitterNode', fn='disconnect', demands=['ChannelSplitterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='StereoPannerNode', fn='disconnect', demands=['StereoPannerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='disconnect', demands=['AudioWorkletNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='disconnect', demands=['IIRFilterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='disconnect', demands=['AudioScheduledSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioSourceNode', fn='disconnect', demands=['MediaStreamAudioSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='disconnect', demands=['PannerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaStreamAudioDestinationNode', fn='disconnect', demands=['MediaStreamAudioDestinationNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='disconnect', demands=['ScriptProcessorNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='BiquadFilterNode', fn='disconnect', demands=['BiquadFilterNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='DynamicsCompressorNode', fn='disconnect', demands=['DynamicsCompressorNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ConvolverNode', fn='disconnect', demands=['ConvolverNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AnalyserNode', fn='disconnect', demands=['AnalyserNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='ChannelMergerNode', fn='disconnect', demands=['ChannelMergerNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='MediaElementAudioSourceNode', fn='disconnect', demands=['MediaElementAudioSourceNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='GainNode', fn='disconnect', demands=['GainNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='AudioDestinationNode', fn='disconnect', demands=['AudioDestinationNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='DelayNode', fn='disconnect', demands=['DelayNode', 'AudioParam', 'float'], returns='None'),
        PrototypeCall(constructor='IntersectionObserver', fn='disconnect', demands=['IntersectionObserver'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='disconnect', demands=['MutationObserver'], returns='None'),
        PrototypeCall(constructor='PerformanceObserver', fn='disconnect', demands=['PerformanceObserver'], returns='None'),
        FieldCall(field='disconnect', demands=['RemotePlaybackEventMap'], returns='Event'),
        FieldCall(field='disconnect', demands=['RemotePlaybackEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='ReportingObserver', fn='disconnect', demands=['ReportingObserver'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='disconnect', demands=['ResizeObserver'], returns='None'),
    ],
    "dispatchEvent": [
        PrototypeCall(constructor='EventTarget', fn='dispatchEvent', demands=['EventTarget', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaQueryList', fn='dispatchEvent', demands=['MediaQueryList', 'Event'], returns='bool'),
        PrototypeCall(constructor='IDBDatabase', fn='dispatchEvent', demands=['IDBDatabase', 'Event'], returns='bool'),
        PrototypeCall(constructor='TextTrackList', fn='dispatchEvent', demands=['TextTrackList', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaKeySession', fn='dispatchEvent', demands=['MediaKeySession', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaRecorder', fn='dispatchEvent', demands=['MediaRecorder', 'Event'], returns='bool'),
        PrototypeCall(constructor='PaymentResponse', fn='dispatchEvent', demands=['PaymentResponse', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaSource', fn='dispatchEvent', demands=['MediaSource', 'Event'], returns='bool'),
        PrototypeCall(constructor='SpeechSynthesis', fn='dispatchEvent', demands=['SpeechSynthesis', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCIceTransport', fn='dispatchEvent', demands=['RTCIceTransport', 'Event'], returns='bool'),
        PrototypeCall(constructor='MIDIPort', fn='dispatchEvent', demands=['MIDIPort', 'Event'], returns='bool'),
        PrototypeCall(constructor='ServiceWorker', fn='dispatchEvent', demands=['ServiceWorker', 'Event'], returns='bool'),
        PrototypeCall(constructor='Clipboard', fn='dispatchEvent', demands=['Clipboard', 'Event'], returns='bool'),
        PrototypeCall(constructor='MIDIAccess', fn='dispatchEvent', demands=['MIDIAccess', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCDTMFSender', fn='dispatchEvent', demands=['RTCDTMFSender', 'Event'], returns='bool'),
        PrototypeCall(constructor='BaseAudioContext', fn='dispatchEvent', demands=['BaseAudioContext', 'Event'], returns='bool'),
        PrototypeCall(constructor='WakeLockSentinel', fn='dispatchEvent', demands=['WakeLockSentinel', 'Event'], returns='bool'),
        PrototypeCall(constructor='Animation', fn='dispatchEvent', demands=['Animation', 'Event'], returns='bool'),
        PrototypeCall(constructor='BroadcastChannel', fn='dispatchEvent', demands=['BroadcastChannel', 'Event'], returns='bool'),
        PrototypeCall(constructor='AudioNode', fn='dispatchEvent', demands=['AudioNode', 'Event'], returns='bool'),
        PrototypeCall(constructor='VideoDecoder', fn='dispatchEvent', demands=['VideoDecoder', 'Event'], returns='bool'),
        PrototypeCall(constructor='EventSource', fn='dispatchEvent', demands=['EventSource', 'Event'], returns='bool'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='dispatchEvent', demands=['NavigationHistoryEntry', 'Event'], returns='bool'),
        PrototypeCall(constructor='AbortSignal', fn='dispatchEvent', demands=['AbortSignal', 'Event'], returns='bool'),
        PrototypeCall(constructor='Window', fn='dispatchEvent', demands=['Window', 'Event'], returns='bool'),
        PrototypeCall(constructor='PaymentRequest', fn='dispatchEvent', demands=['PaymentRequest', 'Event'], returns='bool'),
        PrototypeCall(constructor='SourceBuffer', fn='dispatchEvent', demands=['SourceBuffer', 'Event'], returns='bool'),
        PrototypeCall(constructor='FileReader', fn='dispatchEvent', demands=['FileReader', 'Event'], returns='bool'),
        PrototypeCall(constructor='Worker', fn='dispatchEvent', demands=['Worker', 'Event'], returns='bool'),
        PrototypeCall(constructor='TextTrack', fn='dispatchEvent', demands=['TextTrack', 'Event'], returns='bool'),
        PrototypeCall(constructor='IDBTransaction', fn='dispatchEvent', demands=['IDBTransaction', 'Event'], returns='bool'),
        PrototypeCall(constructor='VisualViewport', fn='dispatchEvent', demands=['VisualViewport', 'Event'], returns='bool'),
        PrototypeCall(constructor='MessagePort', fn='dispatchEvent', demands=['MessagePort', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCPeerConnection', fn='dispatchEvent', demands=['RTCPeerConnection', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaStream', fn='dispatchEvent', demands=['MediaStream', 'Event'], returns='bool'),
        PrototypeCall(constructor='TextTrackCue', fn='dispatchEvent', demands=['TextTrackCue', 'Event'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvas', fn='dispatchEvent', demands=['OffscreenCanvas', 'Event'], returns='bool'),
        PrototypeCall(constructor='IDBRequest', fn='dispatchEvent', demands=['IDBRequest', 'Event'], returns='bool'),
        PrototypeCall(constructor='VideoEncoder', fn='dispatchEvent', demands=['VideoEncoder', 'Event'], returns='bool'),
        PrototypeCall(constructor='Notification', fn='dispatchEvent', demands=['Notification', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaStreamTrack', fn='dispatchEvent', demands=['MediaStreamTrack', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCDataChannel', fn='dispatchEvent', demands=['RTCDataChannel', 'Event'], returns='bool'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='dispatchEvent', demands=['XMLHttpRequestEventTarget', 'Event'], returns='bool'),
        PrototypeCall(constructor='ScreenOrientation', fn='dispatchEvent', demands=['ScreenOrientation', 'Event'], returns='bool'),
        PrototypeCall(constructor='CookieStore', fn='dispatchEvent', demands=['CookieStore', 'Event'], returns='bool'),
        PrototypeCall(constructor='Performance', fn='dispatchEvent', demands=['Performance', 'Event'], returns='bool'),
        PrototypeCall(constructor='SourceBufferList', fn='dispatchEvent', demands=['SourceBufferList', 'Event'], returns='bool'),
        PrototypeCall(constructor='AudioEncoder', fn='dispatchEvent', demands=['AudioEncoder', 'Event'], returns='bool'),
        PrototypeCall(constructor='MediaDevices', fn='dispatchEvent', demands=['MediaDevices', 'Event'], returns='bool'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='dispatchEvent', demands=['PictureInPictureWindow', 'Event'], returns='bool'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='dispatchEvent', demands=['ServiceWorkerContainer', 'Event'], returns='bool'),
        PrototypeCall(constructor='PermissionStatus', fn='dispatchEvent', demands=['PermissionStatus', 'Event'], returns='bool'),
        PrototypeCall(constructor='AudioDecoder', fn='dispatchEvent', demands=['AudioDecoder', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCSctpTransport', fn='dispatchEvent', demands=['RTCSctpTransport', 'Event'], returns='bool'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='dispatchEvent', demands=['RTCDtlsTransport', 'Event'], returns='bool'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='dispatchEvent', demands=['SpeechSynthesisUtterance', 'Event'], returns='bool'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='dispatchEvent', demands=['ServiceWorkerRegistration', 'Event'], returns='bool'),
        PrototypeCall(constructor='WebSocket', fn='dispatchEvent', demands=['WebSocket', 'Event'], returns='bool'),
        PrototypeCall(constructor='Node', fn='dispatchEvent', demands=['Node', 'Event'], returns='bool'),
        PrototypeCall(constructor='RemotePlayback', fn='dispatchEvent', demands=['RemotePlayback', 'Event'], returns='bool'),
        PrototypeCall(constructor='SharedWorker', fn='dispatchEvent', demands=['SharedWorker', 'Event'], returns='bool'),
    ],
    "display": [
        FieldCall(field='display', demands=['FontFaceDescriptors'], returns='FontDisplay'),
        FieldCall(field='display', demands=['FontFaceDescriptors', 'FontDisplay'], returns='None'),
        FieldCall(field='display', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='display', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='display', demands=['FontFace'], returns='FontDisplay'),
        FieldCall(field='display', demands=['FontFace', 'FontDisplay'], returns='None'),
    ],
    "displayAspectHeight": [
        FieldCall(field='displayAspectHeight', demands=['VideoDecoderConfig'], returns='float'),
        FieldCall(field='displayAspectHeight', demands=['VideoDecoderConfig', 'float'], returns='None'),
    ],
    "displayAspectWidth": [
        FieldCall(field='displayAspectWidth', demands=['VideoDecoderConfig'], returns='float'),
        FieldCall(field='displayAspectWidth', demands=['VideoDecoderConfig', 'float'], returns='None'),
    ],
    "displayHeight": [
        FieldCall(field='displayHeight', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='displayHeight', demands=['VideoEncoderConfig', 'float'], returns='None'),
        FieldCall(field='displayHeight', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='displayHeight', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='displayHeight', demands=['VideoFrameInit'], returns='float'),
        FieldCall(field='displayHeight', demands=['VideoFrameInit', 'float'], returns='None'),
        FieldCall(field='displayHeight', demands=['VideoFrame'], returns='float'),
    ],
    "displayItems": [
        FieldCall(field='displayItems', demands=['PaymentDetailsBase'], returns='list'),
        FieldCall(field='displayItems', demands=['PaymentDetailsBase', 'list'], returns='None'),
    ],
    "displayName": [
        FieldCall(field='displayName', demands=['PublicKeyCredentialUserEntity'], returns='str'),
        FieldCall(field='displayName', demands=['PublicKeyCredentialUserEntity', 'str'], returns='None'),
        FieldCall(field='displayName', demands=['PublicKeyCredentialUserEntityJSON'], returns='str'),
        FieldCall(field='displayName', demands=['PublicKeyCredentialUserEntityJSON', 'str'], returns='None'),
    ],
    "displaySurface": [
        FieldCall(field='displaySurface', demands=['MediaTrackCapabilities'], returns='str'),
        FieldCall(field='displaySurface', demands=['MediaTrackCapabilities', 'str'], returns='None'),
        FieldCall(field='displaySurface', demands=['MediaTrackConstraintSet'], returns='ConstrainDOMString'),
        FieldCall(field='displaySurface', demands=['MediaTrackConstraintSet', 'ConstrainDOMString'], returns='None'),
        FieldCall(field='displaySurface', demands=['MediaTrackSettings'], returns='str'),
        FieldCall(field='displaySurface', demands=['MediaTrackSettings', 'str'], returns='None'),
        FieldCall(field='displaySurface', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='displaySurface', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "displayWidth": [
        FieldCall(field='displayWidth', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='displayWidth', demands=['VideoEncoderConfig', 'float'], returns='None'),
        FieldCall(field='displayWidth', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='displayWidth', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='displayWidth', demands=['VideoFrameInit'], returns='float'),
        FieldCall(field='displayWidth', demands=['VideoFrameInit', 'float'], returns='None'),
        FieldCall(field='displayWidth', demands=['VideoFrame'], returns='float'),
    ],
    "dispose": [
        FieldCall(field='dispose', demands=['NavigationHistoryEntryEventMap'], returns='Event'),
        FieldCall(field='dispose', demands=['NavigationHistoryEntryEventMap', 'Event'], returns='None'),
        FieldCall(field='dispose', demands=['SymbolConstructor'], returns='uniquesymbol'),
        PrototypeCall(constructor='DisposableStack', fn='dispose', demands=['DisposableStack'], returns='None'),
    ],
    "disposeAsync": [
        PrototypeCall(constructor='AsyncDisposableStack', fn='disposeAsync', demands=['AsyncDisposableStack'], returns='None'),
    ],
    "disposed": [
        FieldCall(field='disposed', demands=['DisposableStack'], returns='bool'),
        FieldCall(field='disposed', demands=['AsyncDisposableStack'], returns='bool'),
    ],
    "disposition": [
        FieldCall(field='disposition', demands=['SecurityPolicyViolationEventInit'], returns='SecurityPolicyViolationEventDisposition'),
        FieldCall(field='disposition', demands=['SecurityPolicyViolationEventInit', 'SecurityPolicyViolationEventDisposition'], returns='None'),
        FieldCall(field='disposition', demands=['CSPViolationReportBody'], returns='SecurityPolicyViolationEventDisposition'),
        FieldCall(field='disposition', demands=['SecurityPolicyViolationEvent'], returns='SecurityPolicyViolationEventDisposition'),
    ],
    "distanceModel": [
        FieldCall(field='distanceModel', demands=['PannerOptions'], returns='DistanceModelType'),
        FieldCall(field='distanceModel', demands=['PannerOptions', 'DistanceModelType'], returns='None'),
        FieldCall(field='distanceModel', demands=['PannerNode'], returns='DistanceModelType'),
        FieldCall(field='distanceModel', demands=['PannerNode', 'DistanceModelType'], returns='None'),
    ],
    "distinctiveIdentifier": [
        FieldCall(field='distinctiveIdentifier', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='MediaKeysRequirement'),
        FieldCall(field='distinctiveIdentifier', demands=['MediaCapabilitiesKeySystemConfiguration', 'MediaKeysRequirement'], returns='None'),
        FieldCall(field='distinctiveIdentifier', demands=['MediaKeySystemConfiguration'], returns='MediaKeysRequirement'),
        FieldCall(field='distinctiveIdentifier', demands=['MediaKeySystemConfiguration', 'MediaKeysRequirement'], returns='None'),
    ],
    "div": [
        PrototypeCall(constructor='CSSNumericValue', fn='div', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='div', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='div', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
        FieldCall(field='div', demands=['HTMLElementTagNameMap'], returns='HTMLDivElement'),
        FieldCall(field='div', demands=['HTMLElementTagNameMap', 'HTMLDivElement'], returns='None'),
    ],
    "divisor": [
        FieldCall(field='divisor', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
    ],
    "dl": [
        FieldCall(field='dl', demands=['HTMLElementTagNameMap'], returns='HTMLDListElement'),
        FieldCall(field='dl', demands=['HTMLElementTagNameMap', 'HTMLDListElement'], returns='None'),
    ],
    "doNotTrack": [
        FieldCall(field='doNotTrack', demands=['Navigator'], returns='str'),
    ],
    "doctype": [
        FieldCall(field='doctype', demands=['Document'], returns='DocumentType'),
    ],
    "document": [
        FieldCall(field='document', demands=['Window'], returns='Document'),
    ],
    "documentElement": [
        FieldCall(field='documentElement', demands=['Document'], returns='HTMLElement'),
    ],
    "documentURI": [
        FieldCall(field='documentURI', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='documentURI', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='documentURI', demands=['Document'], returns='str'),
        FieldCall(field='documentURI', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "documentURL": [
        FieldCall(field='documentURL', demands=['CSPViolationReportBody'], returns='str'),
    ],
    "domComplete": [
        FieldCall(field='domComplete', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domComplete', demands=['PerformanceTiming'], returns='float'),
    ],
    "domContentLoadedEventEnd": [
        FieldCall(field='domContentLoadedEventEnd', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domContentLoadedEventEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "domContentLoadedEventStart": [
        FieldCall(field='domContentLoadedEventStart', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domContentLoadedEventStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "domInteractive": [
        FieldCall(field='domInteractive', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domInteractive', demands=['PerformanceTiming'], returns='float'),
    ],
    "domLoading": [
        FieldCall(field='domLoading', demands=['PerformanceTiming'], returns='float'),
    ],
    "domain": [
        FieldCall(field='domain', demands=['CookieInit'], returns='str'),
        FieldCall(field='domain', demands=['CookieInit', 'str'], returns='None'),
        FieldCall(field='domain', demands=['CookieStoreDeleteOptions'], returns='str'),
        FieldCall(field='domain', demands=['CookieStoreDeleteOptions', 'str'], returns='None'),
        FieldCall(field='domain', demands=['Document'], returns='str'),
        FieldCall(field='domain', demands=['Document', 'str'], returns='None'),
    ],
    "domainLookupEnd": [
        FieldCall(field='domainLookupEnd', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domainLookupEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "domainLookupStart": [
        FieldCall(field='domainLookupStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='domainLookupStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "dominantBaseline": [
        FieldCall(field='dominantBaseline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='dominantBaseline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "done": [
        FieldCall(field='done', demands=['ReadableStreamReadDoneResult'], returns='true'),
        FieldCall(field='done', demands=['ReadableStreamReadDoneResult', 'true'], returns='None'),
        FieldCall(field='done', demands=['ReadableStreamReadValueResult'], returns='false'),
        FieldCall(field='done', demands=['ReadableStreamReadValueResult', 'false'], returns='None'),
        FieldCall(field='done', demands=['IteratorYieldResult'], returns='false'),
        FieldCall(field='done', demands=['IteratorYieldResult', 'false'], returns='None'),
        FieldCall(field='done', demands=['IteratorReturnResult'], returns='true'),
        FieldCall(field='done', demands=['IteratorReturnResult', 'true'], returns='None'),
    ],
    "dotAll": [
        FieldCall(field='dotAll', demands=['regex'], returns='bool'),
    ],
    "download": [
        FieldCall(field='download', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='download', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='download', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='download', demands=['HTMLAreaElement', 'str'], returns='None'),
    ],
    "dp": [
        FieldCall(field='dp', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='dp', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "dq": [
        FieldCall(field='dq', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='dq', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "drag": [
        FieldCall(field='drag', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='drag', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "dragend": [
        FieldCall(field='dragend', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='dragend', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "dragenter": [
        FieldCall(field='dragenter', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='dragenter', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "draggable": [
        FieldCall(field='draggable', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='draggable', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "dragleave": [
        FieldCall(field='dragleave', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='dragleave', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "dragover": [
        FieldCall(field='dragover', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='dragover', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "dragstart": [
        FieldCall(field='dragstart', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='dragstart', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "drawArrays": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='drawArrays', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawArrays', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLsizei'], returns='None'),
    ],
    "drawArraysInstanced": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawArraysInstanced', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "drawArraysInstancedANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='drawArraysInstancedANGLE', demands=['ANGLE_instanced_arrays', 'GLenum', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "drawBuffers": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawBuffers', demands=['WebGL2RenderingContext', 'list'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawBuffers', demands=['WebGL2RenderingContext', 'Iterable'], returns='None'),
    ],
    "drawBuffersWEBGL": [
        PrototypeCall(constructor='WEBGL_draw_buffers', fn='drawBuffersWEBGL', demands=['WEBGL_draw_buffers', 'list'], returns='None'),
        PrototypeCall(constructor='WEBGL_draw_buffers', fn='drawBuffersWEBGL', demands=['WEBGL_draw_buffers', 'Iterable'], returns='None'),
    ],
    "drawElements": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='drawElements', demands=['WebGLRenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawElements', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
    ],
    "drawElementsInstanced": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawElementsInstanced', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr', 'GLsizei'], returns='None'),
    ],
    "drawElementsInstancedANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='drawElementsInstancedANGLE', demands=['ANGLE_instanced_arrays', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr', 'GLsizei'], returns='None'),
    ],
    "drawFocusIfNeeded": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawFocusIfNeeded', demands=['CanvasRenderingContext2D', 'Element'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawFocusIfNeeded', demands=['CanvasRenderingContext2D', 'Path2D', 'Element'], returns='None'),
    ],
    "drawImage": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "drawRangeElements": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawRangeElements', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'GLuint', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
    ],
    "drawingBufferColorSpace": [
        FieldCall(field='drawingBufferColorSpace', demands=['WebGLRenderingContextBase'], returns='PredefinedColorSpace'),
        FieldCall(field='drawingBufferColorSpace', demands=['WebGLRenderingContextBase', 'PredefinedColorSpace'], returns='None'),
    ],
    "drawingBufferHeight": [
        FieldCall(field='drawingBufferHeight', demands=['WebGLRenderingContextBase'], returns='GLsizei'),
    ],
    "drawingBufferWidth": [
        FieldCall(field='drawingBufferWidth', demands=['WebGLRenderingContextBase'], returns='GLsizei'),
    ],
    "drop": [
        FieldCall(field='drop', demands=['GlobalEventHandlersEventMap'], returns='DragEvent'),
        FieldCall(field='drop', demands=['GlobalEventHandlersEventMap', 'DragEvent'], returns='None'),
    ],
    "dropEffect": [
        FieldCall(field='dropEffect', demands=['DataTransfer'], returns='"none"'),
        FieldCall(field='dropEffect', demands=['DataTransfer', '"none"'], returns='None'),
    ],
    "droppedVideoFrames": [
        FieldCall(field='droppedVideoFrames', demands=['VideoPlaybackQuality'], returns='float'),
    ],
    "dt": [
        FieldCall(field='dt', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='dt', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "dtlsCipher": [
        FieldCall(field='dtlsCipher', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='dtlsCipher', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "dtlsRole": [
        FieldCall(field='dtlsRole', demands=['RTCTransportStats'], returns='RTCDtlsRole'),
        FieldCall(field='dtlsRole', demands=['RTCTransportStats', 'RTCDtlsRole'], returns='None'),
    ],
    "dtlsState": [
        FieldCall(field='dtlsState', demands=['RTCTransportStats'], returns='RTCDtlsTransportState'),
        FieldCall(field='dtlsState', demands=['RTCTransportStats', 'RTCDtlsTransportState'], returns='None'),
    ],
    "dtmf": [
        FieldCall(field='dtmf', demands=['RTCRtpSender'], returns='RTCDTMFSender'),
    ],
    "durability": [
        FieldCall(field='durability', demands=['IDBTransactionOptions'], returns='IDBTransactionDurability'),
        FieldCall(field='durability', demands=['IDBTransactionOptions', 'IDBTransactionDurability'], returns='None'),
        FieldCall(field='durability', demands=['IDBTransaction'], returns='IDBTransactionDurability'),
    ],
    "duration": [
        FieldCall(field='duration', demands=['EffectTiming'], returns='float'),
        FieldCall(field='duration', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='duration', demands=['EncodedAudioChunkInit'], returns='float'),
        FieldCall(field='duration', demands=['EncodedAudioChunkInit', 'float'], returns='None'),
        FieldCall(field='duration', demands=['EncodedVideoChunkInit'], returns='float'),
        FieldCall(field='duration', demands=['EncodedVideoChunkInit', 'float'], returns='None'),
        FieldCall(field='duration', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='duration', demands=['GamepadEffectParameters', 'float'], returns='None'),
        FieldCall(field='duration', demands=['MediaPositionState'], returns='float'),
        FieldCall(field='duration', demands=['MediaPositionState', 'float'], returns='None'),
        FieldCall(field='duration', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='duration', demands=['OptionalEffectTiming', 'float'], returns='None'),
        FieldCall(field='duration', demands=['PerformanceMeasureOptions'], returns='DOMHighResTimeStamp'),
        FieldCall(field='duration', demands=['PerformanceMeasureOptions', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='duration', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='duration', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='duration', demands=['VideoFrameInit'], returns='float'),
        FieldCall(field='duration', demands=['VideoFrameInit', 'float'], returns='None'),
        FieldCall(field='duration', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='duration', demands=['AudioData'], returns='float'),
        FieldCall(field='duration', demands=['EncodedAudioChunk'], returns='float'),
        FieldCall(field='duration', demands=['EncodedVideoChunk'], returns='float'),
        FieldCall(field='duration', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='duration', demands=['MediaSource'], returns='float'),
        FieldCall(field='duration', demands=['MediaSource', 'float'], returns='None'),
        FieldCall(field='duration', demands=['PerformanceEntry'], returns='DOMHighResTimeStamp'),
        FieldCall(field='duration', demands=['PerformanceServerTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='duration', demands=['VideoFrame'], returns='float'),
        FieldCall(field='duration', demands=['PerformanceMeasureOptions'], returns='float'),
        FieldCall(field='duration', demands=['PerformanceMeasureOptions', 'float'], returns='None'),
        FieldCall(field='duration', demands=['PerformanceEntry'], returns='float'),
    ],
    "durationchange": [
        FieldCall(field='durationchange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='durationchange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "dx": [
        FieldCall(field='dx', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dx', demands=['SVGFEOffsetElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dx', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
    ],
    "dy": [
        FieldCall(field='dy', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dy', demands=['SVGFEOffsetElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dy', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
    ],
    "e": [
        FieldCall(field='e', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='e', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='e', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='e', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='e', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='e', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='e', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "easing": [
        FieldCall(field='easing', demands=['ComputedKeyframe'], returns='str'),
        FieldCall(field='easing', demands=['ComputedKeyframe', 'str'], returns='None'),
        FieldCall(field='easing', demands=['EffectTiming'], returns='str'),
        FieldCall(field='easing', demands=['EffectTiming', 'str'], returns='None'),
        FieldCall(field='easing', demands=['Keyframe'], returns='str'),
        FieldCall(field='easing', demands=['Keyframe', 'str'], returns='None'),
        FieldCall(field='easing', demands=['OptionalEffectTiming'], returns='str'),
        FieldCall(field='easing', demands=['OptionalEffectTiming', 'str'], returns='None'),
        FieldCall(field='easing', demands=['PropertyIndexedKeyframes'], returns='str'),
        FieldCall(field='easing', demands=['PropertyIndexedKeyframes', 'str'], returns='None'),
    ],
    "echoCancellation": [
        FieldCall(field='echoCancellation', demands=['MediaTrackCapabilities'], returns='list'),
        FieldCall(field='echoCancellation', demands=['MediaTrackCapabilities', 'list'], returns='None'),
        FieldCall(field='echoCancellation', demands=['MediaTrackConstraintSet'], returns='ConstrainBoolean'),
        FieldCall(field='echoCancellation', demands=['MediaTrackConstraintSet', 'ConstrainBoolean'], returns='None'),
        FieldCall(field='echoCancellation', demands=['MediaTrackSettings'], returns='bool'),
        FieldCall(field='echoCancellation', demands=['MediaTrackSettings', 'bool'], returns='None'),
        FieldCall(field='echoCancellation', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='echoCancellation', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "edgeMode": [
        FieldCall(field='edgeMode', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedEnumeration'),
    ],
    "effect": [
        FieldCall(field='effect', demands=['Animation'], returns='AnimationEffect'),
        FieldCall(field='effect', demands=['Animation', 'AnimationEffect'], returns='None'),
    ],
    "effectAllowed": [
        FieldCall(field='effectAllowed', demands=['DataTransfer'], returns='"none"'),
        FieldCall(field='effectAllowed', demands=['DataTransfer', '"none"'], returns='None'),
    ],
    "effectiveDirective": [
        FieldCall(field='effectiveDirective', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='effectiveDirective', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='effectiveDirective', demands=['CSPViolationReportBody'], returns='str'),
        FieldCall(field='effectiveDirective', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "elapsedTime": [
        FieldCall(field='elapsedTime', demands=['AnimationEventInit'], returns='float'),
        FieldCall(field='elapsedTime', demands=['AnimationEventInit', 'float'], returns='None'),
        FieldCall(field='elapsedTime', demands=['SpeechSynthesisEventInit'], returns='float'),
        FieldCall(field='elapsedTime', demands=['SpeechSynthesisEventInit', 'float'], returns='None'),
        FieldCall(field='elapsedTime', demands=['TransitionEventInit'], returns='float'),
        FieldCall(field='elapsedTime', demands=['TransitionEventInit', 'float'], returns='None'),
        FieldCall(field='elapsedTime', demands=['AnimationEvent'], returns='float'),
        FieldCall(field='elapsedTime', demands=['SpeechSynthesisEvent'], returns='float'),
        FieldCall(field='elapsedTime', demands=['TransitionEvent'], returns='float'),
    ],
    "element": [
        FieldCall(field='element', demands=['LargestContentfulPaint'], returns='Element'),
    ],
    "elementFromPoint": [
        PrototypeCall(constructor='ShadowRoot', fn='elementFromPoint', demands=['ShadowRoot', 'float', 'float'], returns='Element'),
        PrototypeCall(constructor='Document', fn='elementFromPoint', demands=['Document', 'float', 'float'], returns='Element'),
    ],
    "elements": [
        FieldCall(field='elements', demands=['HTMLFieldSetElement'], returns='HTMLCollection'),
        FieldCall(field='elements', demands=['HTMLFormElement'], returns='HTMLFormControlsCollection'),
    ],
    "elementsFromPoint": [
        PrototypeCall(constructor='ShadowRoot', fn='elementsFromPoint', demands=['ShadowRoot', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Document', fn='elementsFromPoint', demands=['Document', 'float', 'float'], returns='list'),
    ],
    "elevation": [
        FieldCall(field='elevation', demands=['SVGFEDistantLightElement'], returns='SVGAnimatedNumber'),
    ],
    "ellipse": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='ellipse', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='ellipse', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='ellipse', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='ellipse', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='ellipse', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='ellipse', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        FieldCall(field='ellipse', demands=['SVGElementTagNameMap'], returns='SVGEllipseElement'),
        FieldCall(field='ellipse', demands=['SVGElementTagNameMap', 'SVGEllipseElement'], returns='None'),
    ],
    "em": [
        FieldCall(field='em', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='em', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "emHeightAscent": [
        FieldCall(field='emHeightAscent', demands=['TextMetrics'], returns='float'),
    ],
    "emHeightDescent": [
        FieldCall(field='emHeightDescent', demands=['TextMetrics'], returns='float'),
    ],
    "email": [
        FieldCall(field='email', demands=['PayerErrors'], returns='str'),
        FieldCall(field='email', demands=['PayerErrors', 'str'], returns='None'),
    ],
    "embed": [
        FieldCall(field='embed', demands=['HTMLElementTagNameMap'], returns='HTMLEmbedElement'),
        FieldCall(field='embed', demands=['HTMLElementTagNameMap', 'HTMLEmbedElement'], returns='None'),
    ],
    "embeds": [
        FieldCall(field='embeds', demands=['Document'], returns='HTMLCollectionOf'),
    ],
    "emptied": [
        FieldCall(field='emptied', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='emptied', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "empty": [
        PrototypeCall(constructor='Selection', fn='empty', demands=['Selection'], returns='None'),
    ],
    "emptyCells": [
        FieldCall(field='emptyCells', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='emptyCells', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "enable": [
        PrototypeCall(constructor='NavigationPreloadManager', fn='enable', demands=['NavigationPreloadManager'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='enable', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='enable', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "enableHighAccuracy": [
        FieldCall(field='enableHighAccuracy', demands=['PositionOptions'], returns='bool'),
        FieldCall(field='enableHighAccuracy', demands=['PositionOptions', 'bool'], returns='None'),
    ],
    "enableVertexAttribArray": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='enableVertexAttribArray', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='enableVertexAttribArray', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
    ],
    "enabled": [
        FieldCall(field='enabled', demands=['AuthenticationExtensionsPRFOutputs'], returns='bool'),
        FieldCall(field='enabled', demands=['AuthenticationExtensionsPRFOutputs', 'bool'], returns='None'),
        FieldCall(field='enabled', demands=['NavigationPreloadState'], returns='bool'),
        FieldCall(field='enabled', demands=['NavigationPreloadState', 'bool'], returns='None'),
        FieldCall(field='enabled', demands=['MediaStreamTrack'], returns='bool'),
        FieldCall(field='enabled', demands=['MediaStreamTrack', 'bool'], returns='None'),
    ],
    "enabledPlugin": [
        FieldCall(field='enabledPlugin', demands=['MimeType'], returns='Plugin'),
    ],
    "enableiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='enableiOES', demands=['OES_draw_buffers_indexed', 'GLenum', 'GLuint'], returns='None'),
    ],
    "encode": [
        PrototypeCall(constructor='AudioEncoder', fn='encode', demands=['AudioEncoder', 'AudioData'], returns='None'),
        PrototypeCall(constructor='TextEncoder', fn='encode', demands=['TextEncoder'], returns='Uint8Array'),
        PrototypeCall(constructor='TextEncoder', fn='encode', demands=['TextEncoder', 'str'], returns='Uint8Array'),
        PrototypeCall(constructor='VideoEncoder', fn='encode', demands=['VideoEncoder', 'VideoFrame'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='encode', demands=['VideoEncoder', 'VideoFrame', 'VideoEncoderEncodeOptions'], returns='None'),
    ],
    "encodeInto": [
        PrototypeCall(constructor='TextEncoder', fn='encodeInto', demands=['TextEncoder', 'str', 'Uint8Array'], returns='TextEncoderEncodeIntoResult'),
    ],
    "encodeQueueSize": [
        FieldCall(field='encodeQueueSize', demands=['AudioEncoder'], returns='float'),
        FieldCall(field='encodeQueueSize', demands=['VideoEncoder'], returns='float'),
    ],
    "encodedBodySize": [
        FieldCall(field='encodedBodySize', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "encoding": [
        FieldCall(field='encoding', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='encoding', demands=['HTMLFormElement', 'str'], returns='None'),
        FieldCall(field='encoding', demands=['TextDecoderCommon'], returns='str'),
        FieldCall(field='encoding', demands=['TextEncoderCommon'], returns='str'),
    ],
    "encodingInfo": [
        PrototypeCall(constructor='MediaCapabilities', fn='encodingInfo', demands=['MediaCapabilities', 'MediaEncodingConfiguration'], returns='MediaCapabilitiesEncodingInfo'),
    ],
    "encodings": [
        FieldCall(field='encodings', demands=['RTCRtpSendParameters'], returns='list'),
        FieldCall(field='encodings', demands=['RTCRtpSendParameters', 'list'], returns='None'),
    ],
    "encrypt": [
        PrototypeCall(constructor='SubtleCrypto', fn='encrypt', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='encrypt', demands=['SubtleCrypto', '', 'CryptoKey', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
    ],
    "encrypted": [
        FieldCall(field='encrypted', demands=['RTCRtpHeaderExtensionParameters'], returns='bool'),
        FieldCall(field='encrypted', demands=['RTCRtpHeaderExtensionParameters', 'bool'], returns='None'),
        FieldCall(field='encrypted', demands=['HTMLMediaElementEventMap'], returns='MediaEncryptedEvent'),
        FieldCall(field='encrypted', demands=['HTMLMediaElementEventMap', 'MediaEncryptedEvent'], returns='None'),
    ],
    "encryptionScheme": [
        FieldCall(field='encryptionScheme', demands=['MediaKeySystemMediaCapability'], returns='str'),
        FieldCall(field='encryptionScheme', demands=['MediaKeySystemMediaCapability', 'str'], returns='None'),
    ],
    "enctype": [
        FieldCall(field='enctype', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='enctype', demands=['HTMLFormElement', 'str'], returns='None'),
    ],
    "end": [
        FieldCall(field='end', demands=['PerformanceMeasureOptions'], returns='str'),
        FieldCall(field='end', demands=['PerformanceMeasureOptions', 'str'], returns='None'),
        FieldCall(field='end', demands=['CSSScopeRule'], returns='str'),
        FieldCall(field='end', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='end', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='TimeRanges', fn='end', demands=['TimeRanges', 'float'], returns='float'),
    ],
    "endContainer": [
        FieldCall(field='endContainer', demands=['StaticRangeInit'], returns='Node'),
        FieldCall(field='endContainer', demands=['StaticRangeInit', 'Node'], returns='None'),
        FieldCall(field='endContainer', demands=['AbstractRange'], returns='Node'),
    ],
    "endDelay": [
        FieldCall(field='endDelay', demands=['EffectTiming'], returns='float'),
        FieldCall(field='endDelay', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='endDelay', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='endDelay', demands=['OptionalEffectTiming', 'float'], returns='None'),
    ],
    "endElement": [
        PrototypeCall(constructor='SVGAnimationElement', fn='endElement', demands=['SVGAnimationElement'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='endElement', demands=['SVGSetElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='endElement', demands=['SVGAnimateElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='endElement', demands=['SVGAnimateTransformElement'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='endElement', demands=['SVGAnimateMotionElement'], returns='None'),
    ],
    "endElementAt": [
        PrototypeCall(constructor='SVGAnimationElement', fn='endElementAt', demands=['SVGAnimationElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='endElementAt', demands=['SVGSetElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='endElementAt', demands=['SVGAnimateElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='endElementAt', demands=['SVGAnimateTransformElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='endElementAt', demands=['SVGAnimateMotionElement', 'float'], returns='None'),
    ],
    "endOfStream": [
        PrototypeCall(constructor='MediaSource', fn='endOfStream', demands=['MediaSource'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='endOfStream', demands=['MediaSource', 'EndOfStreamError'], returns='None'),
    ],
    "endOffset": [
        FieldCall(field='endOffset', demands=['StaticRangeInit'], returns='float'),
        FieldCall(field='endOffset', demands=['StaticRangeInit', 'float'], returns='None'),
        FieldCall(field='endOffset', demands=['AbstractRange'], returns='float'),
    ],
    "endQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='endQuery', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "endTime": [
        FieldCall(field='endTime', demands=['ComputedEffectTiming'], returns='CSSNumberish'),
        FieldCall(field='endTime', demands=['ComputedEffectTiming', 'CSSNumberish'], returns='None'),
        FieldCall(field='endTime', demands=['TextTrackCue'], returns='float'),
        FieldCall(field='endTime', demands=['TextTrackCue', 'float'], returns='None'),
    ],
    "endTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='endTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "ended": [
        FieldCall(field='ended', demands=['AudioScheduledSourceNodeEventMap'], returns='Event'),
        FieldCall(field='ended', demands=['AudioScheduledSourceNodeEventMap', 'Event'], returns='None'),
        FieldCall(field='ended', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='ended', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='ended', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='ended', demands=['MediaStreamTrackEventMap'], returns='Event'),
        FieldCall(field='ended', demands=['MediaStreamTrackEventMap', 'Event'], returns='None'),
    ],
    "endings": [
        FieldCall(field='endings', demands=['BlobPropertyBag'], returns='EndingType'),
        FieldCall(field='endings', demands=['BlobPropertyBag', 'EndingType'], returns='None'),
    ],
    "endpoint": [
        FieldCall(field='endpoint', demands=['PushSubscriptionJSON'], returns='str'),
        FieldCall(field='endpoint', demands=['PushSubscriptionJSON', 'str'], returns='None'),
        FieldCall(field='endpoint', demands=['PushSubscription'], returns='str'),
    ],
    "endsWith": [
        PrototypeCall(constructor='String', fn='endsWith', demands=['str', 'str'], returns='bool'),
        PrototypeCall(constructor='String', fn='endsWith', demands=['str', 'str', 'float'], returns='bool'),
    ],
    "enforceCredentialProtectionPolicy": [
        FieldCall(field='enforceCredentialProtectionPolicy', demands=['AuthenticationExtensionsClientInputs'], returns='bool'),
        FieldCall(field='enforceCredentialProtectionPolicy', demands=['AuthenticationExtensionsClientInputs', 'bool'], returns='None'),
    ],
    "enqueue": [
        PrototypeCall(constructor='ReadableByteStreamController', fn='enqueue', demands=['ReadableByteStreamController', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='enqueue', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='enqueue', demands=['ReadableStreamDefaultController', 'R'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='enqueue', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='enqueue', demands=['TransformStreamDefaultController', 'O'], returns='None'),
    ],
    "enter": [
        FieldCall(field='enter', demands=['TextTrackCueEventMap'], returns='Event'),
        FieldCall(field='enter', demands=['TextTrackCueEventMap', 'Event'], returns='None'),
    ],
    "enterKeyHint": [
        FieldCall(field='enterKeyHint', demands=['ElementContentEditable'], returns='str'),
        FieldCall(field='enterKeyHint', demands=['ElementContentEditable', 'str'], returns='None'),
    ],
    "enterpictureinpicture": [
        FieldCall(field='enterpictureinpicture', demands=['HTMLVideoElementEventMap'], returns='PictureInPictureEvent'),
        FieldCall(field='enterpictureinpicture', demands=['HTMLVideoElementEventMap', 'PictureInPictureEvent'], returns='None'),
    ],
    "entries": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='entries', demands=['FileSystemDirectoryHandle'], returns='FileSystemDirectoryHandleAsyncIterator'),
        PrototypeCall(constructor='CSSNumericArray', fn='entries', demands=['CSSNumericArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSTransformValue', fn='entries', demands=['CSSTransformValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='entries', demands=['CSSUnparsedValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMTokenList', fn='entries', demands=['DOMTokenList'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='entries', demands=['FormData'], returns='FormDataIterator'),
        PrototypeCall(constructor='Headers', fn='entries', demands=['Headers'], returns='HeadersIterator'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='entries', demands=['MediaKeyStatusMap'], returns='MediaKeyStatusMapIterator'),
        PrototypeCall(constructor='NodeList', fn='entries', demands=['NodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='RadioNodeList', fn='entries', demands=['RadioNodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='NodeListOf', fn='entries', demands=['NodeListOf'], returns='ArrayIterator'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='entries', demands=['StylePropertyMapReadOnly'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StylePropertyMap', fn='entries', demands=['StylePropertyMap'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='URLSearchParams', fn='entries', demands=['URLSearchParams'], returns='URLSearchParamsIterator'),
        PrototypeCall(constructor='BigInt64Array', fn='entries', demands=['BigInt64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='BigUint64Array', fn='entries', demands=['BigUint64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='entries', demands=['FormData'], returns='IterableIterator'),
        PrototypeCall(constructor='Headers', fn='entries', demands=['Headers'], returns='IterableIterator'),
        PrototypeCall(constructor='Array', fn='entries', demands=['list'], returns='ArrayIterator'),
        PrototypeCall(constructor='ReadonlyArray', fn='entries', demands=['ReadonlyArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='HighlightRegistry', fn='entries', demands=['HighlightRegistry'], returns='MapIterator'),
        PrototypeCall(constructor='AudioParamMap', fn='entries', demands=['AudioParamMap'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIInputMap', fn='entries', demands=['MIDIInputMap'], returns='MapIterator'),
        PrototypeCall(constructor='EventCounts', fn='entries', demands=['EventCounts'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIOutputMap', fn='entries', demands=['MIDIOutputMap'], returns='MapIterator'),
        PrototypeCall(constructor='RTCStatsReport', fn='entries', demands=['RTCStatsReport'], returns='MapIterator'),
        PrototypeCall(constructor='Highlight', fn='entries', demands=['Highlight'], returns='SetIterator'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='entries', demands=['ViewTransitionTypeSet'], returns='SetIterator'),
        PrototypeCall(constructor='FontFaceSet', fn='entries', demands=['FontFaceSet'], returns='SetIterator'),
        PrototypeCall(constructor='CustomStateSet', fn='entries', demands=['CustomStateSet'], returns='SetIterator'),
        PrototypeCall(constructor='ReadonlySet', fn='entries', demands=['ReadonlySet'], returns='SetIterator'),
        PrototypeCall(constructor='Int8Array', fn='entries', demands=['Int8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8Array', fn='entries', demands=['Uint8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='entries', demands=['Uint8ClampedArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int16Array', fn='entries', demands=['Int16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint16Array', fn='entries', demands=['Uint16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int32Array', fn='entries', demands=['Int32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint32Array', fn='entries', demands=['Uint32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float32Array', fn='entries', demands=['Float32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float64Array', fn='entries', demands=['Float64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='ObjectConstructor', fn='entries', demands=['ObjectConstructor', '{[s:string]:T;}'], returns='list'),
        PrototypeCall(constructor='ObjectConstructor', fn='entries', demands=['ObjectConstructor', '{}'], returns='list'),
        PrototypeCall(constructor='Float16Array', fn='entries', demands=['Float16Array'], returns='ArrayIterator'),
    ],
    "entry": [
        FieldCall(field='entry', demands=['NavigationActivation'], returns='NavigationHistoryEntry'),
    ],
    "entryPoint": [
        FieldCall(field='entryPoint', demands=['GPUProgrammableStage'], returns='str'),
        FieldCall(field='entryPoint', demands=['GPUProgrammableStage', 'str'], returns='None'),
    ],
    "entryType": [
        FieldCall(field='entryType', demands=['PerformanceEntry'], returns='str'),
        FieldCall(field='entryType', demands=['PerformanceMark'], returns='"mark"'),
        FieldCall(field='entryType', demands=['PerformanceMeasure'], returns='"measure"'),
    ],
    "entryTypes": [
        FieldCall(field='entryTypes', demands=['PerformanceObserverInit'], returns='list'),
        FieldCall(field='entryTypes', demands=['PerformanceObserverInit', 'list'], returns='None'),
    ],
    "enumerable": [
        FieldCall(field='enumerable', demands=['PropertyDescriptor'], returns='bool'),
        FieldCall(field='enumerable', demands=['PropertyDescriptor', 'bool'], returns='None'),
        FieldCall(field='enumerable', demands=['TypedPropertyDescriptor'], returns='bool'),
        FieldCall(field='enumerable', demands=['TypedPropertyDescriptor', 'bool'], returns='None'),
    ],
    "enumerateDevices": [
        PrototypeCall(constructor='MediaDevices', fn='enumerateDevices', demands=['MediaDevices'], returns='list'),
    ],
    "equals": [
        PrototypeCall(constructor='CSSNumericValue', fn='equals', demands=['CSSNumericValue', '*'], returns='bool'),
        PrototypeCall(constructor='CSSUnitValue', fn='equals', demands=['CSSUnitValue', '*'], returns='bool'),
        PrototypeCall(constructor='CSSMathValue', fn='equals', demands=['CSSMathValue', '*'], returns='bool'),
    ],
    "error": [
        FieldCall(field='error', demands=['AudioDecoderInit'], returns='WebCodecsErrorCallback'),
        FieldCall(field='error', demands=['AudioDecoderInit', 'WebCodecsErrorCallback'], returns='None'),
        FieldCall(field='error', demands=['AudioEncoderInit'], returns='WebCodecsErrorCallback'),
        FieldCall(field='error', demands=['AudioEncoderInit', 'WebCodecsErrorCallback'], returns='None'),
        FieldCall(field='error', demands=['ErrorEventInit'], returns='*'),
        FieldCall(field='error', demands=['ErrorEventInit', '*'], returns='None'),
        FieldCall(field='error', demands=['PaymentDetailsUpdate'], returns='str'),
        FieldCall(field='error', demands=['PaymentDetailsUpdate', 'str'], returns='None'),
        FieldCall(field='error', demands=['PaymentValidationErrors'], returns='str'),
        FieldCall(field='error', demands=['PaymentValidationErrors', 'str'], returns='None'),
        FieldCall(field='error', demands=['RTCErrorEventInit'], returns='RTCError'),
        FieldCall(field='error', demands=['RTCErrorEventInit', 'RTCError'], returns='None'),
        FieldCall(field='error', demands=['SpeechSynthesisErrorEventInit'], returns='SpeechSynthesisErrorCode'),
        FieldCall(field='error', demands=['SpeechSynthesisErrorEventInit', 'SpeechSynthesisErrorCode'], returns='None'),
        FieldCall(field='error', demands=['VideoDecoderInit'], returns='WebCodecsErrorCallback'),
        FieldCall(field='error', demands=['VideoDecoderInit', 'WebCodecsErrorCallback'], returns='None'),
        FieldCall(field='error', demands=['VideoEncoderInit'], returns='WebCodecsErrorCallback'),
        FieldCall(field='error', demands=['VideoEncoderInit', 'WebCodecsErrorCallback'], returns='None'),
        FieldCall(field='error', demands=['AbstractWorkerEventMap'], returns='ErrorEvent'),
        FieldCall(field='error', demands=['AbstractWorkerEventMap', 'ErrorEvent'], returns='None'),
        FieldCall(field='error', demands=['ErrorEvent'], returns='*'),
        FieldCall(field='error', demands=['EventSourceEventMap'], returns='Event'),
        FieldCall(field='error', demands=['EventSourceEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='error', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='error', demands=['FileReader'], returns='DOMException'),
        FieldCall(field='error', demands=['GlobalEventHandlersEventMap'], returns='ErrorEvent'),
        FieldCall(field='error', demands=['GlobalEventHandlersEventMap', 'ErrorEvent'], returns='None'),
        FieldCall(field='error', demands=['HTMLMediaElement'], returns='MediaError'),
        FieldCall(field='error', demands=['IDBDatabaseEventMap'], returns='Event'),
        FieldCall(field='error', demands=['IDBDatabaseEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['IDBRequestEventMap'], returns='Event'),
        FieldCall(field='error', demands=['IDBRequestEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['IDBRequest'], returns='DOMException'),
        FieldCall(field='error', demands=['IDBTransactionEventMap'], returns='Event'),
        FieldCall(field='error', demands=['IDBTransactionEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['IDBTransaction'], returns='DOMException'),
        FieldCall(field='error', demands=['MediaRecorderEventMap'], returns='ErrorEvent'),
        FieldCall(field='error', demands=['MediaRecorderEventMap', 'ErrorEvent'], returns='None'),
        FieldCall(field='error', demands=['NotificationEventMap'], returns='Event'),
        FieldCall(field='error', demands=['NotificationEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['RTCDataChannelEventMap'], returns='RTCErrorEvent'),
        FieldCall(field='error', demands=['RTCDataChannelEventMap', 'RTCErrorEvent'], returns='None'),
        FieldCall(field='error', demands=['RTCDtlsTransportEventMap'], returns='RTCErrorEvent'),
        FieldCall(field='error', demands=['RTCDtlsTransportEventMap', 'RTCErrorEvent'], returns='None'),
        FieldCall(field='error', demands=['RTCErrorEvent'], returns='RTCError'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='error', demands=['ReadableByteStreamController'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='error', demands=['ReadableByteStreamController', '*'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='error', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='error', demands=['ReadableStreamDefaultController', '*'], returns='None'),
        FieldCall(field='error', demands=['SourceBufferEventMap'], returns='Event'),
        FieldCall(field='error', demands=['SourceBufferEventMap', 'Event'], returns='None'),
        FieldCall(field='error', demands=['SpeechSynthesisErrorEvent'], returns='SpeechSynthesisErrorCode'),
        FieldCall(field='error', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisErrorEvent'),
        FieldCall(field='error', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisErrorEvent'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='error', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='error', demands=['TransformStreamDefaultController', '*'], returns='None'),
        FieldCall(field='error', demands=['WebSocketEventMap'], returns='Event'),
        FieldCall(field='error', demands=['WebSocketEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultController', fn='error', demands=['WritableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultController', fn='error', demands=['WritableStreamDefaultController', '*'], returns='None'),
        FieldCall(field='error', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='error', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='error', demands=['WindowEventMap'], returns='ErrorEvent'),
        FieldCall(field='error', demands=['WindowEventMap', 'ErrorEvent'], returns='None'),
        PrototypeCall(constructor='Console', fn='error', demands=['Console', '*'], returns='None'),
        FieldCall(field='error', demands=['SuppressedError'], returns='*'),
        FieldCall(field='error', demands=['SuppressedError', '*'], returns='None'),
    ],
    "errorCode": [
        FieldCall(field='errorCode', demands=['RTCPeerConnectionIceErrorEventInit'], returns='float'),
        FieldCall(field='errorCode', demands=['RTCPeerConnectionIceErrorEventInit', 'float'], returns='None'),
        FieldCall(field='errorCode', demands=['RTCPeerConnectionIceErrorEvent'], returns='float'),
    ],
    "errorDetail": [
        FieldCall(field='errorDetail', demands=['RTCErrorInit'], returns='RTCErrorDetailType'),
        FieldCall(field='errorDetail', demands=['RTCErrorInit', 'RTCErrorDetailType'], returns='None'),
        FieldCall(field='errorDetail', demands=['RTCError'], returns='RTCErrorDetailType'),
    ],
    "errorText": [
        FieldCall(field='errorText', demands=['RTCPeerConnectionIceErrorEventInit'], returns='str'),
        FieldCall(field='errorText', demands=['RTCPeerConnectionIceErrorEventInit', 'str'], returns='None'),
        FieldCall(field='errorText', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
    ],
    "errors": [
        FieldCall(field='errors', demands=['AggregateError'], returns='list'),
        FieldCall(field='errors', demands=['AggregateError', 'list'], returns='None'),
    ],
    "estimate": [
        PrototypeCall(constructor='StorageManager', fn='estimate', demands=['StorageManager'], returns='StorageEstimate'),
    ],
    "estimatedPlayoutTimestamp": [
        FieldCall(field='estimatedPlayoutTimestamp', demands=['RTCInboundRtpStreamStats'], returns='DOMHighResTimeStamp'),
        FieldCall(field='estimatedPlayoutTimestamp', demands=['RTCInboundRtpStreamStats', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "eval": [
        FieldCall(field='eval', demands=['AuthenticationExtensionsPRFInputs'], returns='AuthenticationExtensionsPRFValues'),
        FieldCall(field='eval', demands=['AuthenticationExtensionsPRFInputs', 'AuthenticationExtensionsPRFValues'], returns='None'),
        FieldCall(field='eval', demands=['AuthenticationExtensionsPRFInputsJSON'], returns='AuthenticationExtensionsPRFValuesJSON'),
        FieldCall(field='eval', demands=['AuthenticationExtensionsPRFInputsJSON', 'AuthenticationExtensionsPRFValuesJSON'], returns='None'),
    ],
    "evalByCredential": [
        FieldCall(field='evalByCredential', demands=['AuthenticationExtensionsPRFInputs'], returns='Record'),
        FieldCall(field='evalByCredential', demands=['AuthenticationExtensionsPRFInputs', 'Record'], returns='None'),
        FieldCall(field='evalByCredential', demands=['AuthenticationExtensionsPRFInputsJSON'], returns='Record'),
        FieldCall(field='evalByCredential', demands=['AuthenticationExtensionsPRFInputsJSON', 'Record'], returns='None'),
    ],
    "evaluate": [
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver', 'float'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver', 'float'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver', 'float', 'XPathResult'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver', 'float', 'XPathResult'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node', 'float'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node', 'float', 'XPathResult'], returns='XPathResult'),
    ],
    "event": [
        FieldCall(field='event', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='event', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='event', demands=['Window'], returns='Event'),
    ],
    "eventCounts": [
        FieldCall(field='eventCounts', demands=['Performance'], returns='EventCounts'),
    ],
    "eventPhase": [
        FieldCall(field='eventPhase', demands=['Event'], returns='float'),
    ],
    "every": [
        PrototypeCall(constructor='BigInt64Array', fn='every', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='bool'),
        PrototypeCall(constructor='BigInt64Array', fn='every', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='every', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='every', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='every', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='every', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS', '*'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='every', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='every', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Array', fn='every', demands=['list', '(value:T,index:number,array:T[])=>valueisS'], returns='list'),
        PrototypeCall(constructor='Array', fn='every', demands=['list', '(value:T,index:number,array:T[])=>valueisS', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='every', demands=['list', '(value:T,index:number,array:T[])=>unknown'], returns='bool'),
        PrototypeCall(constructor='Array', fn='every', demands=['list', '(value:T,index:number,array:T[])=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='every', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='every', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='every', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='every', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='every', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='every', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='every', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='every', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='every', demands=['Uint16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='every', demands=['Uint16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='every', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='every', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='every', demands=['Uint32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='every', demands=['Uint32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='every', demands=['Float32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='every', demands=['Float32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='every', demands=['Float64Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='every', demands=['Float64Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='every', demands=['Float16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='every', demands=['Float16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
    ],
    "exact": [
        FieldCall(field='exact', demands=['ConstrainBooleanParameters'], returns='bool'),
        FieldCall(field='exact', demands=['ConstrainBooleanParameters', 'bool'], returns='None'),
        FieldCall(field='exact', demands=['ConstrainDOMStringParameters'], returns='str'),
        FieldCall(field='exact', demands=['ConstrainDOMStringParameters', 'str'], returns='None'),
        FieldCall(field='exact', demands=['ConstrainDoubleRange'], returns='float'),
        FieldCall(field='exact', demands=['ConstrainDoubleRange', 'float'], returns='None'),
        FieldCall(field='exact', demands=['ConstrainULongRange'], returns='float'),
        FieldCall(field='exact', demands=['ConstrainULongRange', 'float'], returns='None'),
    ],
    "exchange": [
        PrototypeCall(constructor='Atomics', fn='exchange', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='exchange', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "excludeCredentials": [
        FieldCall(field='excludeCredentials', demands=['PublicKeyCredentialCreationOptions'], returns='list'),
        FieldCall(field='excludeCredentials', demands=['PublicKeyCredentialCreationOptions', 'list'], returns='None'),
        FieldCall(field='excludeCredentials', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='list'),
        FieldCall(field='excludeCredentials', demands=['PublicKeyCredentialCreationOptionsJSON', 'list'], returns='None'),
    ],
    "exclusive": [
        FieldCall(field='exclusive', demands=['FileSystemFlags'], returns='bool'),
        FieldCall(field='exclusive', demands=['FileSystemFlags', 'bool'], returns='None'),
    ],
    "exec": [
        PrototypeCall(constructor='URLPattern', fn='exec', demands=['URLPattern', 'URLPatternInput'], returns='URLPatternResult'),
        PrototypeCall(constructor='URLPattern', fn='exec', demands=['URLPattern', 'URLPatternInput', 'str'], returns='URLPatternResult'),
        PrototypeCall(constructor='RegExp', fn='exec', demands=['regex', 'str'], returns='RegExpExecArray'),
    ],
    "execCommand": [
        PrototypeCall(constructor='Document', fn='execCommand', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='execCommand', demands=['HTMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='execCommand', demands=['XMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='Document', fn='execCommand', demands=['Document', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='execCommand', demands=['HTMLDocument', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='execCommand', demands=['XMLDocument', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='Document', fn='execCommand', demands=['Document', 'str', 'bool', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='execCommand', demands=['HTMLDocument', 'str', 'bool', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='execCommand', demands=['XMLDocument', 'str', 'bool', 'str'], returns='bool'),
    ],
    "exit": [
        FieldCall(field='exit', demands=['TextTrackCueEventMap'], returns='Event'),
        FieldCall(field='exit', demands=['TextTrackCueEventMap', 'Event'], returns='None'),
    ],
    "exitFullscreen": [
        PrototypeCall(constructor='Document', fn='exitFullscreen', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='exitFullscreen', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='exitFullscreen', demands=['XMLDocument'], returns='None'),
    ],
    "exitPictureInPicture": [
        PrototypeCall(constructor='Document', fn='exitPictureInPicture', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='exitPictureInPicture', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='exitPictureInPicture', demands=['XMLDocument'], returns='None'),
    ],
    "exitPointerLock": [
        PrototypeCall(constructor='Document', fn='exitPointerLock', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='exitPointerLock', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='exitPointerLock', demands=['XMLDocument'], returns='None'),
    ],
    "exp": [
        PrototypeCall(constructor='Math', fn='exp', demands=['Math', 'float'], returns='float'),
    ],
    "expectedDisplayTime": [
        FieldCall(field='expectedDisplayTime', demands=['VideoFrameCallbackMetadata'], returns='DOMHighResTimeStamp'),
        FieldCall(field='expectedDisplayTime', demands=['VideoFrameCallbackMetadata', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "expiration": [
        FieldCall(field='expiration', demands=['MediaKeySession'], returns='float'),
    ],
    "expirationTime": [
        FieldCall(field='expirationTime', demands=['PushSubscriptionJSON'], returns='EpochTimeStamp'),
        FieldCall(field='expirationTime', demands=['PushSubscriptionJSON', 'EpochTimeStamp'], returns='None'),
        FieldCall(field='expirationTime', demands=['PushSubscription'], returns='EpochTimeStamp'),
    ],
    "expires": [
        FieldCall(field='expires', demands=['CookieInit'], returns='DOMHighResTimeStamp'),
        FieldCall(field='expires', demands=['CookieInit', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='expires', demands=['RTCCertificateExpiration'], returns='float'),
        FieldCall(field='expires', demands=['RTCCertificateExpiration', 'float'], returns='None'),
        FieldCall(field='expires', demands=['RTCCertificate'], returns='EpochTimeStamp'),
    ],
    "expm1": [
        PrototypeCall(constructor='Math', fn='expm1', demands=['Math', 'float'], returns='float'),
    ],
    "exponent": [
        FieldCall(field='exponent', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "exponentialRampToValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='exponentialRampToValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "exportKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='exportKey', demands=['SubtleCrypto', '"jwk"', 'CryptoKey'], returns='JsonWebKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='exportKey', demands=['SubtleCrypto', 'Exclude', 'CryptoKey'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='exportKey', demands=['SubtleCrypto', 'KeyFormat', 'CryptoKey'], returns='Promise<ArrayBuffer'),
    ],
    "ext": [
        FieldCall(field='ext', demands=['JsonWebKey'], returns='bool'),
        FieldCall(field='ext', demands=['JsonWebKey', 'bool'], returns='None'),
    ],
    "extend": [
        PrototypeCall(constructor='Selection', fn='extend', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='extend', demands=['Selection', 'Node', 'float'], returns='None'),
    ],
    "extends": [
        FieldCall(field='extends', demands=['ElementDefinitionOptions'], returns='str'),
        FieldCall(field='extends', demands=['ElementDefinitionOptions', 'str'], returns='None'),
    ],
    "extensions": [
        FieldCall(field='extensions', demands=['PublicKeyCredentialCreationOptions'], returns='AuthenticationExtensionsClientInputs'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialCreationOptions', 'AuthenticationExtensionsClientInputs'], returns='None'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='AuthenticationExtensionsClientInputsJSON'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialCreationOptionsJSON', 'AuthenticationExtensionsClientInputsJSON'], returns='None'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialRequestOptions'], returns='AuthenticationExtensionsClientInputs'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialRequestOptions', 'AuthenticationExtensionsClientInputs'], returns='None'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='AuthenticationExtensionsClientInputsJSON'),
        FieldCall(field='extensions', demands=['PublicKeyCredentialRequestOptionsJSON', 'AuthenticationExtensionsClientInputsJSON'], returns='None'),
        FieldCall(field='extensions', demands=['WebSocket'], returns='str'),
    ],
    "external": [
        FieldCall(field='external', demands=['Window'], returns='External'),
    ],
    "extractContents": [
        PrototypeCall(constructor='Range', fn='extractContents', demands=['Range'], returns='DocumentFragment'),
    ],
    "extractable": [
        FieldCall(field='extractable', demands=['CryptoKey'], returns='bool'),
    ],
    "f": [
        FieldCall(field='f', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='f', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='f', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='f', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='f', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "f16round": [
        PrototypeCall(constructor='Math', fn='f16round', demands=['Math', 'float'], returns='float'),
    ],
    "face": [
        FieldCall(field='face', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='face', demands=['HTMLFontElement', 'str'], returns='None'),
    ],
    "facingMode": [
        FieldCall(field='facingMode', demands=['MediaTrackCapabilities'], returns='list'),
        FieldCall(field='facingMode', demands=['MediaTrackCapabilities', 'list'], returns='None'),
        FieldCall(field='facingMode', demands=['MediaTrackConstraintSet'], returns='ConstrainDOMString'),
        FieldCall(field='facingMode', demands=['MediaTrackConstraintSet', 'ConstrainDOMString'], returns='None'),
        FieldCall(field='facingMode', demands=['MediaTrackSettings'], returns='str'),
        FieldCall(field='facingMode', demands=['MediaTrackSettings', 'str'], returns='None'),
        FieldCall(field='facingMode', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='facingMode', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "failIfMajorPerformanceCaveat": [
        FieldCall(field='failIfMajorPerformanceCaveat', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='failIfMajorPerformanceCaveat', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "failOp": [
        FieldCall(field='failOp', demands=['GPUStencilFaceState'], returns='GPUStencilOperation'),
        FieldCall(field='failOp', demands=['GPUStencilFaceState', 'GPUStencilOperation'], returns='None'),
    ],
    "fallback": [
        FieldCall(field='fallback', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='fallback', demands=['CSSCounterStyleRule', 'str'], returns='None'),
        FieldCall(field='fallback', demands=['CSSVariableReferenceValue'], returns='CSSUnparsedValue'),
    ],
    "family": [
        FieldCall(field='family', demands=['FontFace'], returns='str'),
        FieldCall(field='family', demands=['FontFace', 'str'], returns='None'),
    ],
    "fastSeek": [
        FieldCall(field='fastSeek', demands=['MediaSessionActionDetails'], returns='bool'),
        FieldCall(field='fastSeek', demands=['MediaSessionActionDetails', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='fastSeek', demands=['HTMLMediaElement', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='fastSeek', demands=['HTMLAudioElement', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='fastSeek', demands=['HTMLVideoElement', 'float'], returns='None'),
    ],
    "fatal": [
        FieldCall(field='fatal', demands=['TextDecoderOptions'], returns='bool'),
        FieldCall(field='fatal', demands=['TextDecoderOptions', 'bool'], returns='None'),
        FieldCall(field='fatal', demands=['TextDecoderCommon'], returns='bool'),
    ],
    "feBlend": [
        FieldCall(field='feBlend', demands=['SVGElementTagNameMap'], returns='SVGFEBlendElement'),
        FieldCall(field='feBlend', demands=['SVGElementTagNameMap', 'SVGFEBlendElement'], returns='None'),
    ],
    "feColorMatrix": [
        FieldCall(field='feColorMatrix', demands=['SVGElementTagNameMap'], returns='SVGFEColorMatrixElement'),
        FieldCall(field='feColorMatrix', demands=['SVGElementTagNameMap', 'SVGFEColorMatrixElement'], returns='None'),
    ],
    "feComponentTransfer": [
        FieldCall(field='feComponentTransfer', demands=['SVGElementTagNameMap'], returns='SVGFEComponentTransferElement'),
        FieldCall(field='feComponentTransfer', demands=['SVGElementTagNameMap', 'SVGFEComponentTransferElement'], returns='None'),
    ],
    "feComposite": [
        FieldCall(field='feComposite', demands=['SVGElementTagNameMap'], returns='SVGFECompositeElement'),
        FieldCall(field='feComposite', demands=['SVGElementTagNameMap', 'SVGFECompositeElement'], returns='None'),
    ],
    "feConvolveMatrix": [
        FieldCall(field='feConvolveMatrix', demands=['SVGElementTagNameMap'], returns='SVGFEConvolveMatrixElement'),
        FieldCall(field='feConvolveMatrix', demands=['SVGElementTagNameMap', 'SVGFEConvolveMatrixElement'], returns='None'),
    ],
    "feDiffuseLighting": [
        FieldCall(field='feDiffuseLighting', demands=['SVGElementTagNameMap'], returns='SVGFEDiffuseLightingElement'),
        FieldCall(field='feDiffuseLighting', demands=['SVGElementTagNameMap', 'SVGFEDiffuseLightingElement'], returns='None'),
    ],
    "feDisplacementMap": [
        FieldCall(field='feDisplacementMap', demands=['SVGElementTagNameMap'], returns='SVGFEDisplacementMapElement'),
        FieldCall(field='feDisplacementMap', demands=['SVGElementTagNameMap', 'SVGFEDisplacementMapElement'], returns='None'),
    ],
    "feDistantLight": [
        FieldCall(field='feDistantLight', demands=['SVGElementTagNameMap'], returns='SVGFEDistantLightElement'),
        FieldCall(field='feDistantLight', demands=['SVGElementTagNameMap', 'SVGFEDistantLightElement'], returns='None'),
    ],
    "feDropShadow": [
        FieldCall(field='feDropShadow', demands=['SVGElementTagNameMap'], returns='SVGFEDropShadowElement'),
        FieldCall(field='feDropShadow', demands=['SVGElementTagNameMap', 'SVGFEDropShadowElement'], returns='None'),
    ],
    "feFlood": [
        FieldCall(field='feFlood', demands=['SVGElementTagNameMap'], returns='SVGFEFloodElement'),
        FieldCall(field='feFlood', demands=['SVGElementTagNameMap', 'SVGFEFloodElement'], returns='None'),
    ],
    "feFuncA": [
        FieldCall(field='feFuncA', demands=['SVGElementTagNameMap'], returns='SVGFEFuncAElement'),
        FieldCall(field='feFuncA', demands=['SVGElementTagNameMap', 'SVGFEFuncAElement'], returns='None'),
    ],
    "feFuncB": [
        FieldCall(field='feFuncB', demands=['SVGElementTagNameMap'], returns='SVGFEFuncBElement'),
        FieldCall(field='feFuncB', demands=['SVGElementTagNameMap', 'SVGFEFuncBElement'], returns='None'),
    ],
    "feFuncG": [
        FieldCall(field='feFuncG', demands=['SVGElementTagNameMap'], returns='SVGFEFuncGElement'),
        FieldCall(field='feFuncG', demands=['SVGElementTagNameMap', 'SVGFEFuncGElement'], returns='None'),
    ],
    "feFuncR": [
        FieldCall(field='feFuncR', demands=['SVGElementTagNameMap'], returns='SVGFEFuncRElement'),
        FieldCall(field='feFuncR', demands=['SVGElementTagNameMap', 'SVGFEFuncRElement'], returns='None'),
    ],
    "feGaussianBlur": [
        FieldCall(field='feGaussianBlur', demands=['SVGElementTagNameMap'], returns='SVGFEGaussianBlurElement'),
        FieldCall(field='feGaussianBlur', demands=['SVGElementTagNameMap', 'SVGFEGaussianBlurElement'], returns='None'),
    ],
    "feImage": [
        FieldCall(field='feImage', demands=['SVGElementTagNameMap'], returns='SVGFEImageElement'),
        FieldCall(field='feImage', demands=['SVGElementTagNameMap', 'SVGFEImageElement'], returns='None'),
    ],
    "feMerge": [
        FieldCall(field='feMerge', demands=['SVGElementTagNameMap'], returns='SVGFEMergeElement'),
        FieldCall(field='feMerge', demands=['SVGElementTagNameMap', 'SVGFEMergeElement'], returns='None'),
    ],
    "feMergeNode": [
        FieldCall(field='feMergeNode', demands=['SVGElementTagNameMap'], returns='SVGFEMergeNodeElement'),
        FieldCall(field='feMergeNode', demands=['SVGElementTagNameMap', 'SVGFEMergeNodeElement'], returns='None'),
    ],
    "feMorphology": [
        FieldCall(field='feMorphology', demands=['SVGElementTagNameMap'], returns='SVGFEMorphologyElement'),
        FieldCall(field='feMorphology', demands=['SVGElementTagNameMap', 'SVGFEMorphologyElement'], returns='None'),
    ],
    "feOffset": [
        FieldCall(field='feOffset', demands=['SVGElementTagNameMap'], returns='SVGFEOffsetElement'),
        FieldCall(field='feOffset', demands=['SVGElementTagNameMap', 'SVGFEOffsetElement'], returns='None'),
    ],
    "fePointLight": [
        FieldCall(field='fePointLight', demands=['SVGElementTagNameMap'], returns='SVGFEPointLightElement'),
        FieldCall(field='fePointLight', demands=['SVGElementTagNameMap', 'SVGFEPointLightElement'], returns='None'),
    ],
    "feSpecularLighting": [
        FieldCall(field='feSpecularLighting', demands=['SVGElementTagNameMap'], returns='SVGFESpecularLightingElement'),
        FieldCall(field='feSpecularLighting', demands=['SVGElementTagNameMap', 'SVGFESpecularLightingElement'], returns='None'),
    ],
    "feSpotLight": [
        FieldCall(field='feSpotLight', demands=['SVGElementTagNameMap'], returns='SVGFESpotLightElement'),
        FieldCall(field='feSpotLight', demands=['SVGElementTagNameMap', 'SVGFESpotLightElement'], returns='None'),
    ],
    "feTile": [
        FieldCall(field='feTile', demands=['SVGElementTagNameMap'], returns='SVGFETileElement'),
        FieldCall(field='feTile', demands=['SVGElementTagNameMap', 'SVGFETileElement'], returns='None'),
    ],
    "feTurbulence": [
        FieldCall(field='feTurbulence', demands=['SVGElementTagNameMap'], returns='SVGFETurbulenceElement'),
        FieldCall(field='feTurbulence', demands=['SVGElementTagNameMap', 'SVGFETurbulenceElement'], returns='None'),
    ],
    "featureSettings": [
        FieldCall(field='featureSettings', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='featureSettings', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='featureSettings', demands=['FontFace'], returns='str'),
        FieldCall(field='featureSettings', demands=['FontFace', 'str'], returns='None'),
    ],
    "fecBytesReceived": [
        FieldCall(field='fecBytesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='fecBytesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "fecPacketsDiscarded": [
        FieldCall(field='fecPacketsDiscarded', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='fecPacketsDiscarded', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "fecPacketsReceived": [
        FieldCall(field='fecPacketsReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='fecPacketsReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "fecSsrc": [
        FieldCall(field='fecSsrc', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='fecSsrc', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "feedback": [
        FieldCall(field='feedback', demands=['IIRFilterOptions'], returns='list'),
        FieldCall(field='feedback', demands=['IIRFilterOptions', 'list'], returns='None'),
    ],
    "feedforward": [
        FieldCall(field='feedforward', demands=['IIRFilterOptions'], returns='list'),
        FieldCall(field='feedforward', demands=['IIRFilterOptions', 'list'], returns='None'),
    ],
    "fenceSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='fenceSync', demands=['WebGL2RenderingContext', 'GLenum', 'GLbitfield'], returns='WebGLSync'),
    ],
    "fetch": [
        DirectCall(fn='fetch', receiver=None, demands=['RequestInfo'], returns='Response'),
        DirectCall(fn='fetch', receiver=None, demands=['RequestInfo', 'RequestInit'], returns='Response'),
    ],
    "fetchPriority": [
        FieldCall(field='fetchPriority', demands=['HTMLImageElement'], returns='"high"'),
        FieldCall(field='fetchPriority', demands=['HTMLImageElement', '"high"'], returns='None'),
        FieldCall(field='fetchPriority', demands=['HTMLLinkElement'], returns='"high"'),
        FieldCall(field='fetchPriority', demands=['HTMLLinkElement', '"high"'], returns='None'),
        FieldCall(field='fetchPriority', demands=['HTMLScriptElement'], returns='"high"'),
        FieldCall(field='fetchPriority', demands=['HTMLScriptElement', '"high"'], returns='None'),
    ],
    "fetchStart": [
        FieldCall(field='fetchStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='fetchStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "fftSize": [
        FieldCall(field='fftSize', demands=['AnalyserOptions'], returns='float'),
        FieldCall(field='fftSize', demands=['AnalyserOptions', 'float'], returns='None'),
        FieldCall(field='fftSize', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='fftSize', demands=['AnalyserNode', 'float'], returns='None'),
    ],
    "fgColor": [
        FieldCall(field='fgColor', demands=['Document'], returns='str'),
        FieldCall(field='fgColor', demands=['Document', 'str'], returns='None'),
    ],
    "fieldset": [
        FieldCall(field='fieldset', demands=['HTMLElementTagNameMap'], returns='HTMLFieldSetElement'),
        FieldCall(field='fieldset', demands=['HTMLElementTagNameMap', 'HTMLFieldSetElement'], returns='None'),
    ],
    "figcaption": [
        FieldCall(field='figcaption', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='figcaption', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "figure": [
        FieldCall(field='figure', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='figure', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "file": [
        PrototypeCall(constructor='FileSystemFileEntry', fn='file', demands=['FileSystemFileEntry', 'FileCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileEntry', fn='file', demands=['FileSystemFileEntry', 'FileCallback', 'ErrorCallback'], returns='None'),
    ],
    "filename": [
        FieldCall(field='filename', demands=['ErrorEventInit'], returns='str'),
        FieldCall(field='filename', demands=['ErrorEventInit', 'str'], returns='None'),
        FieldCall(field='filename', demands=['ErrorEvent'], returns='str'),
        FieldCall(field='filename', demands=['Plugin'], returns='str'),
        FieldCall(field='filename', demands=['ImportMeta'], returns='str'),
        FieldCall(field='filename', demands=['ImportMeta', 'str'], returns='None'),
    ],
    "files": [
        FieldCall(field='files', demands=['ShareData'], returns='list'),
        FieldCall(field='files', demands=['ShareData', 'list'], returns='None'),
        FieldCall(field='files', demands=['DataTransfer'], returns='FileList'),
        FieldCall(field='files', demands=['HTMLInputElement'], returns='FileList'),
        FieldCall(field='files', demands=['HTMLInputElement', 'FileList'], returns='None'),
    ],
    "filesystem": [
        FieldCall(field='filesystem', demands=['FileSystemEntry'], returns='FileSystem'),
    ],
    "fill": [
        FieldCall(field='fill', demands=['EffectTiming'], returns='FillMode'),
        FieldCall(field='fill', demands=['EffectTiming', 'FillMode'], returns='None'),
        FieldCall(field='fill', demands=['OptionalEffectTiming'], returns='FillMode'),
        FieldCall(field='fill', demands=['OptionalEffectTiming', 'FillMode'], returns='None'),
        FieldCall(field='fill', demands=['SVGBoundingBoxOptions'], returns='bool'),
        FieldCall(field='fill', demands=['SVGBoundingBoxOptions', 'bool'], returns='None'),
        FieldCall(field='fill', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fill', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='fill', demands=['BigInt64Array', 'bigint'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='fill', demands=['BigInt64Array', 'bigint', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='fill', demands=['BigInt64Array', 'bigint', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='fill', demands=['BigUint64Array', 'bigint'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='fill', demands=['BigUint64Array', 'bigint', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='fill', demands=['BigUint64Array', 'bigint', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='Int8Array', fn='fill', demands=['Int8Array', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='fill', demands=['Int8Array', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='fill', demands=['Int8Array', 'float', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='fill', demands=['Uint8Array', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='fill', demands=['Uint8Array', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='fill', demands=['Uint8Array', 'float', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='fill', demands=['Uint8ClampedArray', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='fill', demands=['Uint8ClampedArray', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='fill', demands=['Uint8ClampedArray', 'float', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='fill', demands=['Int16Array', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='fill', demands=['Int16Array', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='fill', demands=['Int16Array', 'float', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='fill', demands=['Uint16Array', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='fill', demands=['Uint16Array', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='fill', demands=['Uint16Array', 'float', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='fill', demands=['Int32Array', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='fill', demands=['Int32Array', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='fill', demands=['Int32Array', 'float', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='fill', demands=['Uint32Array', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='fill', demands=['Uint32Array', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='fill', demands=['Uint32Array', 'float', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='fill', demands=['Float32Array', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='fill', demands=['Float32Array', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='fill', demands=['Float32Array', 'float', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='fill', demands=['Float64Array', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='fill', demands=['Float64Array', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='fill', demands=['Float64Array', 'float', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Array', fn='fill', demands=['list', 'T'], returns='list'),
        PrototypeCall(constructor='Array', fn='fill', demands=['list', 'T', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='fill', demands=['list', 'T', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Float16Array', fn='fill', demands=['Float16Array', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='fill', demands=['Float16Array', 'float', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='fill', demands=['Float16Array', 'float', 'float', 'float'], returns='Float16Array'),
    ],
    "fillLightMode": [
        FieldCall(field='fillLightMode', demands=['PhotoCapabilities'], returns='list'),
        FieldCall(field='fillLightMode', demands=['PhotoCapabilities', 'list'], returns='None'),
        FieldCall(field='fillLightMode', demands=['PhotoSettings'], returns='FillLightMode'),
        FieldCall(field='fillLightMode', demands=['PhotoSettings', 'FillLightMode'], returns='None'),
    ],
    "fillOpacity": [
        FieldCall(field='fillOpacity', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fillOpacity', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fillRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "fillRule": [
        FieldCall(field='fillRule', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fillRule', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fillStyle": [
        FieldCall(field='fillStyle', demands=['CanvasFillStrokeStyles'], returns='str'),
        FieldCall(field='fillStyle', demands=['CanvasFillStrokeStyles', 'str'], returns='None'),
    ],
    "fillText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
    ],
    "filter": [
        FieldCall(field='filter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='filter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='filter', demands=['CanvasFilters'], returns='str'),
        FieldCall(field='filter', demands=['CanvasFilters', 'str'], returns='None'),
        FieldCall(field='filter', demands=['NodeIterator'], returns='NodeFilter'),
        FieldCall(field='filter', demands=['TreeWalker'], returns='NodeFilter'),
        FieldCall(field='filter', demands=['SVGElementTagNameMap'], returns='SVGFilterElement'),
        FieldCall(field='filter', demands=['SVGElementTagNameMap', 'SVGFilterElement'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='filter', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='filter', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='filter', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='filter', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='BigUint64Array'),
        PrototypeCall(constructor='ReadonlyArray', fn='filter', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='filter', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS', '*'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='filter', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='filter', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='filter', demands=['list', '(value:T,index:number,array:T[])=>valueisS'], returns='list'),
        PrototypeCall(constructor='Array', fn='filter', demands=['list', '(value:T,index:number,array:T[])=>valueisS', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='filter', demands=['list', '(value:T,index:number,array:T[])=>unknown'], returns='list'),
        PrototypeCall(constructor='Array', fn='filter', demands=['list', '(value:T,index:number,array:T[])=>unknown', '*'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='filter', demands=['Int8Array', '(value:number,index:number,array:this)=>any'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='filter', demands=['Int8Array', '(value:number,index:number,array:this)=>any', '*'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='filter', demands=['Uint8Array', '(value:number,index:number,array:this)=>any'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='filter', demands=['Uint8Array', '(value:number,index:number,array:this)=>any', '*'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='filter', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>any'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='filter', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>any', '*'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='filter', demands=['Int16Array', '(value:number,index:number,array:this)=>any'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='filter', demands=['Int16Array', '(value:number,index:number,array:this)=>any', '*'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='filter', demands=['Uint16Array', '(value:number,index:number,array:this)=>any'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='filter', demands=['Uint16Array', '(value:number,index:number,array:this)=>any', '*'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='filter', demands=['Int32Array', '(value:number,index:number,array:this)=>any'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='filter', demands=['Int32Array', '(value:number,index:number,array:this)=>any', '*'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='filter', demands=['Uint32Array', '(value:number,index:number,array:this)=>any'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='filter', demands=['Uint32Array', '(value:number,index:number,array:this)=>any', '*'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='filter', demands=['Float32Array', '(value:number,index:number,array:this)=>any'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='filter', demands=['Float32Array', '(value:number,index:number,array:this)=>any', '*'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='filter', demands=['Float64Array', '(value:number,index:number,array:this)=>any'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='filter', demands=['Float64Array', '(value:number,index:number,array:this)=>any', '*'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='filter', demands=['Float16Array', '(value:number,index:number,array:this)=>any'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='filter', demands=['Float16Array', '(value:number,index:number,array:this)=>any', '*'], returns='Float16Array'),
    ],
    "filterUnits": [
        FieldCall(field='filterUnits', demands=['SVGFilterElement'], returns='SVGAnimatedEnumeration'),
    ],
    "finally": [
        PrototypeCall(constructor='Promise', fn='finally', demands=['Promise'], returns='T'),
        PrototypeCall(constructor='Promise', fn='finally', demands=['Promise', '(()=>void)'], returns='T'),
    ],
    "find": [
        PrototypeCall(constructor='BigInt64Array', fn='find', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='bigint'),
        PrototypeCall(constructor='BigInt64Array', fn='find', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='find', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='find', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='bigint'),
        PrototypeCall(constructor='Int8Array', fn='find', demands=['Int8Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='find', demands=['Int8Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='find', demands=['Uint8Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='find', demands=['Uint8Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='find', demands=['Uint8ClampedArray', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='find', demands=['Uint8ClampedArray', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='find', demands=['Int16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='find', demands=['Int16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='find', demands=['Uint16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='find', demands=['Uint16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='find', demands=['Int32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='find', demands=['Int32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='find', demands=['Uint32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='find', demands=['Uint32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='find', demands=['Float32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='find', demands=['Float32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='find', demands=['Float64Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='find', demands=['Float64Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Array', fn='find', demands=['list', '(value:T,index:number,obj:T[])=>valueisS'], returns='S'),
        PrototypeCall(constructor='Array', fn='find', demands=['list', '(value:T,index:number,obj:T[])=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Array', fn='find', demands=['list', '(value:T,index:number,obj:T[])=>unknown'], returns='T'),
        PrototypeCall(constructor='Array', fn='find', demands=['list', '(value:T,index:number,obj:T[])=>unknown', '*'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='find', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>valueisS'], returns='S'),
        PrototypeCall(constructor='ReadonlyArray', fn='find', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='ReadonlyArray', fn='find', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>unknown'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='find', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>unknown', '*'], returns='T'),
        PrototypeCall(constructor='Float16Array', fn='find', demands=['Float16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='find', demands=['Float16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
    ],
    "findIndex": [
        PrototypeCall(constructor='BigInt64Array', fn='findIndex', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='findIndex', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='findIndex', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='findIndex', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='findIndex', demands=['Int8Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='findIndex', demands=['Int8Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findIndex', demands=['Uint8Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findIndex', demands=['Uint8Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findIndex', demands=['Uint8ClampedArray', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findIndex', demands=['Uint8ClampedArray', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findIndex', demands=['Int16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findIndex', demands=['Int16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findIndex', demands=['Uint16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findIndex', demands=['Uint16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findIndex', demands=['Int32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findIndex', demands=['Int32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findIndex', demands=['Uint32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findIndex', demands=['Uint32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findIndex', demands=['Float32Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findIndex', demands=['Float32Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findIndex', demands=['Float64Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findIndex', demands=['Float64Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
        PrototypeCall(constructor='Array', fn='findIndex', demands=['list', '(value:T,index:number,obj:T[])=>unknown'], returns='float'),
        PrototypeCall(constructor='Array', fn='findIndex', demands=['list', '(value:T,index:number,obj:T[])=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='findIndex', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>unknown'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='findIndex', demands=['ReadonlyArray', '(value:T,index:number,obj:readonlyT[])=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='findIndex', demands=['Float16Array', '(value:number,index:number,obj:this)=>boolean'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='findIndex', demands=['Float16Array', '(value:number,index:number,obj:this)=>boolean', '*'], returns='float'),
    ],
    "findLast": [
        PrototypeCall(constructor='Array', fn='findLast', demands=['list', '(value:T,index:number,array:T[])=>valueisS'], returns='S'),
        PrototypeCall(constructor='Array', fn='findLast', demands=['list', '(value:T,index:number,array:T[])=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Array', fn='findLast', demands=['list', '(value:T,index:number,array:T[])=>unknown'], returns='T'),
        PrototypeCall(constructor='Array', fn='findLast', demands=['list', '(value:T,index:number,array:T[])=>unknown', '*'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLast', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS'], returns='S'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLast', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLast', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLast', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown', '*'], returns='T'),
        PrototypeCall(constructor='Int8Array', fn='findLast', demands=['Int8Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Int8Array', fn='findLast', demands=['Int8Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Int8Array', fn='findLast', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='findLast', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findLast', demands=['Uint8Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Uint8Array', fn='findLast', demands=['Uint8Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Uint8Array', fn='findLast', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findLast', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLast', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLast', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLast', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLast', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findLast', demands=['Int16Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Int16Array', fn='findLast', demands=['Int16Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Int16Array', fn='findLast', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findLast', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findLast', demands=['Uint16Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Uint16Array', fn='findLast', demands=['Uint16Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Uint16Array', fn='findLast', demands=['Uint16Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findLast', demands=['Uint16Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findLast', demands=['Int32Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Int32Array', fn='findLast', demands=['Int32Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Int32Array', fn='findLast', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findLast', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findLast', demands=['Uint32Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Uint32Array', fn='findLast', demands=['Uint32Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Uint32Array', fn='findLast', demands=['Uint32Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findLast', demands=['Uint32Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findLast', demands=['Float32Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Float32Array', fn='findLast', demands=['Float32Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Float32Array', fn='findLast', demands=['Float32Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findLast', demands=['Float32Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findLast', demands=['Float64Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Float64Array', fn='findLast', demands=['Float64Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Float64Array', fn='findLast', demands=['Float64Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findLast', demands=['Float64Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='findLast', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='BigInt64Array', fn='findLast', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='BigInt64Array', fn='findLast', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>unknown'], returns='bigint'),
        PrototypeCall(constructor='BigInt64Array', fn='findLast', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>unknown', '*'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='findLast', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='BigUint64Array', fn='findLast', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='BigUint64Array', fn='findLast', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>unknown'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='findLast', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>unknown', '*'], returns='bigint'),
        PrototypeCall(constructor='Float16Array', fn='findLast', demands=['Float16Array', '(value:number,index:number,array:this,)=>valueisS'], returns='S'),
        PrototypeCall(constructor='Float16Array', fn='findLast', demands=['Float16Array', '(value:number,index:number,array:this,)=>valueisS', '*'], returns='S'),
        PrototypeCall(constructor='Float16Array', fn='findLast', demands=['Float16Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='findLast', demands=['Float16Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
    ],
    "findLastIndex": [
        PrototypeCall(constructor='Array', fn='findLastIndex', demands=['list', '(value:T,index:number,array:T[])=>unknown'], returns='float'),
        PrototypeCall(constructor='Array', fn='findLastIndex', demands=['list', '(value:T,index:number,array:T[])=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLastIndex', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='findLastIndex', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='findLastIndex', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='findLastIndex', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findLastIndex', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='findLastIndex', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLastIndex', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='findLastIndex', demands=['Uint8ClampedArray', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findLastIndex', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='findLastIndex', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findLastIndex', demands=['Uint16Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='findLastIndex', demands=['Uint16Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findLastIndex', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='findLastIndex', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findLastIndex', demands=['Uint32Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='findLastIndex', demands=['Uint32Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findLastIndex', demands=['Float32Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='findLastIndex', demands=['Float32Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findLastIndex', demands=['Float64Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='findLastIndex', demands=['Float64Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='findLastIndex', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='findLastIndex', demands=['BigInt64Array', '(value:bigint,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='findLastIndex', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='findLastIndex', demands=['BigUint64Array', '(value:bigint,index:number,array:this,)=>unknown', '*'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='findLastIndex', demands=['Float16Array', '(value:number,index:number,array:this,)=>unknown'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='findLastIndex', demands=['Float16Array', '(value:number,index:number,array:this,)=>unknown', '*'], returns='float'),
    ],
    "findRule": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='findRule', demands=['CSSKeyframesRule', 'str'], returns='CSSKeyframeRule'),
    ],
    "finish": [
        FieldCall(field='finish', demands=['AnimationEventMap'], returns='AnimationPlaybackEvent'),
        FieldCall(field='finish', demands=['AnimationEventMap', 'AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='Animation', fn='finish', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='finish', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='finish', demands=['CSSTransition'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='finish', demands=['WebGLRenderingContext'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='finish', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "finished": [
        FieldCall(field='finished', demands=['Animation'], returns='Animation'),
        FieldCall(field='finished', demands=['ViewTransition'], returns='None'),
    ],
    "firCount": [
        FieldCall(field='firCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='firCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='firCount', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='firCount', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "first": [
        FieldCall(field='first', demands=['AuthenticationExtensionsPRFValues'], returns='BufferSource'),
        FieldCall(field='first', demands=['AuthenticationExtensionsPRFValues', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='first', demands=['AuthenticationExtensionsPRFValuesJSON'], returns='Base64URLString'),
        FieldCall(field='first', demands=['AuthenticationExtensionsPRFValuesJSON', 'Base64URLString'], returns='None'),
    ],
    "firstChild": [
        FieldCall(field='firstChild', demands=['Node'], returns='ChildNode'),
        PrototypeCall(constructor='TreeWalker', fn='firstChild', demands=['TreeWalker'], returns='Node'),
    ],
    "firstElementChild": [
        FieldCall(field='firstElementChild', demands=['ParentNode'], returns='Element'),
    ],
    "fixed": [
        PrototypeCall(constructor='String', fn='fixed', demands=['str'], returns='str'),
    ],
    "flags": [
        FieldCall(field='flags', demands=['regex'], returns='str'),
    ],
    "flat": [
        PrototypeCall(constructor='ReadonlyArray', fn='flat', demands=['ReadonlyArray', 'A'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='flat', demands=['ReadonlyArray', 'A', 'D'], returns='list'),
        PrototypeCall(constructor='Array', fn='flat', demands=['list', 'A'], returns='list'),
        PrototypeCall(constructor='Array', fn='flat', demands=['list', 'A', 'D'], returns='list'),
    ],
    "flatMap": [
        PrototypeCall(constructor='ReadonlyArray', fn='flatMap', demands=['ReadonlyArray', '(this:This,value:T,index:number,array:T[])=>U'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='flatMap', demands=['ReadonlyArray', '(this:This,value:T,index:number,array:T[])=>U', 'This'], returns='list'),
        PrototypeCall(constructor='Array', fn='flatMap', demands=['list', '(this:This,value:T,index:number,array:T[])=>U'], returns='list'),
        PrototypeCall(constructor='Array', fn='flatMap', demands=['list', '(this:This,value:T,index:number,array:T[])=>U', 'This'], returns='list'),
    ],
    "flatten": [
        FieldCall(field='flatten', demands=['AssignedNodesOptions'], returns='bool'),
        FieldCall(field='flatten', demands=['AssignedNodesOptions', 'bool'], returns='None'),
    ],
    "flex": [
        FieldCall(field='flex', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='flex', demands=['CSSNumericType', 'float'], returns='None'),
        FieldCall(field='flex', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flex', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexBasis": [
        FieldCall(field='flexBasis', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexBasis', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexDirection": [
        FieldCall(field='flexDirection', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexDirection', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexFlow": [
        FieldCall(field='flexFlow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexFlow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexGrow": [
        FieldCall(field='flexGrow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexGrow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexShrink": [
        FieldCall(field='flexShrink', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexShrink', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flexWrap": [
        FieldCall(field='flexWrap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='flexWrap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "flipX": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='flipX', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='flipX', demands=['DOMMatrix'], returns='DOMMatrix'),
    ],
    "flipY": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='flipY', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='flipY', demands=['DOMMatrix'], returns='DOMMatrix'),
    ],
    "float": [
        FieldCall(field='float', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='float', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "floodColor": [
        FieldCall(field='floodColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='floodColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "floodOpacity": [
        FieldCall(field='floodOpacity', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='floodOpacity', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "floor": [
        PrototypeCall(constructor='Math', fn='floor', demands=['Math', 'float'], returns='float'),
    ],
    "flush": [
        FieldCall(field='flush', demands=['Transformer'], returns='TransformerFlushCallback'),
        FieldCall(field='flush', demands=['Transformer', 'TransformerFlushCallback'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='flush', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='flush', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='flush', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='flush', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='flush', demands=['WebGLRenderingContext'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='flush', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "focus": [
        FieldCall(field='focus', demands=['GlobalEventHandlersEventMap'], returns='FocusEvent'),
        FieldCall(field='focus', demands=['GlobalEventHandlersEventMap', 'FocusEvent'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='focus', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='focus', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='focus', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='focus', demands=['MathMLElement', 'FocusOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='focus', demands=['SVGElement', 'FocusOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='focus', demands=['HTMLElement', 'FocusOptions'], returns='None'),
        DirectCall(fn='focus', receiver=None, demands=[], returns='None'),
    ],
    "focusNode": [
        FieldCall(field='focusNode', demands=['Selection'], returns='Node'),
    ],
    "focusOffset": [
        FieldCall(field='focusOffset', demands=['Selection'], returns='float'),
    ],
    "focusin": [
        FieldCall(field='focusin', demands=['GlobalEventHandlersEventMap'], returns='FocusEvent'),
        FieldCall(field='focusin', demands=['GlobalEventHandlersEventMap', 'FocusEvent'], returns='None'),
    ],
    "focusout": [
        FieldCall(field='focusout', demands=['GlobalEventHandlersEventMap'], returns='FocusEvent'),
        FieldCall(field='focusout', demands=['GlobalEventHandlersEventMap', 'FocusEvent'], returns='None'),
    ],
    "font": [
        FieldCall(field='font', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='font', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='font', demands=['CanvasTextDrawingStyles'], returns='str'),
        FieldCall(field='font', demands=['CanvasTextDrawingStyles', 'str'], returns='None'),
        FieldCall(field='font', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLFontElement'),
        FieldCall(field='font', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLFontElement'], returns='None'),
    ],
    "fontBoundingBoxAscent": [
        FieldCall(field='fontBoundingBoxAscent', demands=['TextMetrics'], returns='float'),
    ],
    "fontBoundingBoxDescent": [
        FieldCall(field='fontBoundingBoxDescent', demands=['TextMetrics'], returns='float'),
    ],
    "fontFamily": [
        FieldCall(field='fontFamily', demands=['CSSFontFeatureValuesRule'], returns='str'),
        FieldCall(field='fontFamily', demands=['CSSFontFeatureValuesRule', 'str'], returns='None'),
        FieldCall(field='fontFamily', demands=['CSSFontPaletteValuesRule'], returns='str'),
        FieldCall(field='fontFamily', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontFamily', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontFeatureSettings": [
        FieldCall(field='fontFeatureSettings', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontFeatureSettings', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontKerning": [
        FieldCall(field='fontKerning', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontKerning', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='fontKerning', demands=['CanvasTextDrawingStyles'], returns='CanvasFontKerning'),
        FieldCall(field='fontKerning', demands=['CanvasTextDrawingStyles', 'CanvasFontKerning'], returns='None'),
    ],
    "fontOpticalSizing": [
        FieldCall(field='fontOpticalSizing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontOpticalSizing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontPalette": [
        FieldCall(field='fontPalette', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontPalette', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSize": [
        FieldCall(field='fontSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSizeAdjust": [
        FieldCall(field='fontSizeAdjust', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSizeAdjust', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontStretch": [
        FieldCall(field='fontStretch', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontStretch', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='fontStretch', demands=['CanvasTextDrawingStyles'], returns='CanvasFontStretch'),
        FieldCall(field='fontStretch', demands=['CanvasTextDrawingStyles', 'CanvasFontStretch'], returns='None'),
    ],
    "fontStyle": [
        FieldCall(field='fontStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSynthesis": [
        FieldCall(field='fontSynthesis', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSynthesis', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSynthesisSmallCaps": [
        FieldCall(field='fontSynthesisSmallCaps', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSynthesisSmallCaps', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSynthesisStyle": [
        FieldCall(field='fontSynthesisStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSynthesisStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontSynthesisWeight": [
        FieldCall(field='fontSynthesisWeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontSynthesisWeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariant": [
        FieldCall(field='fontVariant', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariant', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariantAlternates": [
        FieldCall(field='fontVariantAlternates', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantAlternates', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariantCaps": [
        FieldCall(field='fontVariantCaps', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantCaps', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='fontVariantCaps', demands=['CanvasTextDrawingStyles'], returns='CanvasFontVariantCaps'),
        FieldCall(field='fontVariantCaps', demands=['CanvasTextDrawingStyles', 'CanvasFontVariantCaps'], returns='None'),
    ],
    "fontVariantEastAsian": [
        FieldCall(field='fontVariantEastAsian', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantEastAsian', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariantLigatures": [
        FieldCall(field='fontVariantLigatures', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantLigatures', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariantNumeric": [
        FieldCall(field='fontVariantNumeric', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantNumeric', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariantPosition": [
        FieldCall(field='fontVariantPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariantPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontVariationSettings": [
        FieldCall(field='fontVariationSettings', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontVariationSettings', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontWeight": [
        FieldCall(field='fontWeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='fontWeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "fontcolor": [
        PrototypeCall(constructor='String', fn='fontcolor', demands=['str', 'str'], returns='str'),
    ],
    "fontfaces": [
        FieldCall(field='fontfaces', demands=['FontFaceSetLoadEventInit'], returns='list'),
        FieldCall(field='fontfaces', demands=['FontFaceSetLoadEventInit', 'list'], returns='None'),
        FieldCall(field='fontfaces', demands=['FontFaceSetLoadEvent'], returns='ReadonlyArray'),
    ],
    "fonts": [
        FieldCall(field='fonts', demands=['FontFaceSource'], returns='FontFaceSet'),
    ],
    "fontsize": [
        PrototypeCall(constructor='String', fn='fontsize', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='fontsize', demands=['str', 'str'], returns='str'),
    ],
    "footer": [
        FieldCall(field='footer', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='footer', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "for": [
        PrototypeCall(constructor='SymbolConstructor', fn='for', demands=['SymbolConstructor', 'str'], returns='symbol'),
    ],
    "forEach": [
        PrototypeCall(constructor='AudioParamMap', fn='forEach', demands=['AudioParamMap', '(value:AudioParam,key:string,parent:AudioParamMap)=>void'], returns='None'),
        PrototypeCall(constructor='AudioParamMap', fn='forEach', demands=['AudioParamMap', '(value:AudioParam,key:string,parent:AudioParamMap)=>void', '*'], returns='None'),
        PrototypeCall(constructor='CSSNumericArray', fn='forEach', demands=['CSSNumericArray', '(value:CSSNumericValue,key:number,parent:CSSNumericArray)=>void'], returns='None'),
        PrototypeCall(constructor='CSSNumericArray', fn='forEach', demands=['CSSNumericArray', '(value:CSSNumericValue,key:number,parent:CSSNumericArray)=>void', '*'], returns='None'),
        PrototypeCall(constructor='CSSTransformValue', fn='forEach', demands=['CSSTransformValue', '(value:CSSTransformComponent,key:number,parent:CSSTransformValue)=>void'], returns='None'),
        PrototypeCall(constructor='CSSTransformValue', fn='forEach', demands=['CSSTransformValue', '(value:CSSTransformComponent,key:number,parent:CSSTransformValue)=>void', '*'], returns='None'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='forEach', demands=['CSSUnparsedValue', '(value:CSSUnparsedSegment,key:number,parent:CSSUnparsedValue)=>void'], returns='None'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='forEach', demands=['CSSUnparsedValue', '(value:CSSUnparsedSegment,key:number,parent:CSSUnparsedValue)=>void', '*'], returns='None'),
        PrototypeCall(constructor='CustomStateSet', fn='forEach', demands=['CustomStateSet', '(value:string,key:string,parent:CustomStateSet)=>void'], returns='None'),
        PrototypeCall(constructor='CustomStateSet', fn='forEach', demands=['CustomStateSet', '(value:string,key:string,parent:CustomStateSet)=>void', '*'], returns='None'),
        PrototypeCall(constructor='DOMTokenList', fn='forEach', demands=['DOMTokenList', '(value:string,key:number,parent:DOMTokenList)=>void'], returns='None'),
        PrototypeCall(constructor='DOMTokenList', fn='forEach', demands=['DOMTokenList', '(value:string,key:number,parent:DOMTokenList)=>void', '*'], returns='None'),
        PrototypeCall(constructor='EventCounts', fn='forEach', demands=['EventCounts', '(value:number,key:string,parent:EventCounts)=>void'], returns='None'),
        PrototypeCall(constructor='EventCounts', fn='forEach', demands=['EventCounts', '(value:number,key:string,parent:EventCounts)=>void', '*'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='forEach', demands=['FontFaceSet', '(value:FontFace,key:FontFace,parent:FontFaceSet)=>void'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='forEach', demands=['FontFaceSet', '(value:FontFace,key:FontFace,parent:FontFaceSet)=>void', '*'], returns='None'),
        PrototypeCall(constructor='FormData', fn='forEach', demands=['FormData', '(value:FormDataEntryValue,key:string,parent:FormData)=>void'], returns='None'),
        PrototypeCall(constructor='FormData', fn='forEach', demands=['FormData', '(value:FormDataEntryValue,key:string,parent:FormData)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Headers', fn='forEach', demands=['Headers', '(value:string,key:string,parent:Headers)=>void'], returns='None'),
        PrototypeCall(constructor='Headers', fn='forEach', demands=['Headers', '(value:string,key:string,parent:Headers)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Highlight', fn='forEach', demands=['Highlight', '(value:AbstractRange,key:AbstractRange,parent:Highlight)=>void'], returns='None'),
        PrototypeCall(constructor='Highlight', fn='forEach', demands=['Highlight', '(value:AbstractRange,key:AbstractRange,parent:Highlight)=>void', '*'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='forEach', demands=['HighlightRegistry', '(value:Highlight,key:string,parent:HighlightRegistry)=>void'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='forEach', demands=['HighlightRegistry', '(value:Highlight,key:string,parent:HighlightRegistry)=>void', '*'], returns='None'),
        PrototypeCall(constructor='MIDIInputMap', fn='forEach', demands=['MIDIInputMap', '(value:MIDIInput,key:string,parent:MIDIInputMap)=>void'], returns='None'),
        PrototypeCall(constructor='MIDIInputMap', fn='forEach', demands=['MIDIInputMap', '(value:MIDIInput,key:string,parent:MIDIInputMap)=>void', '*'], returns='None'),
        PrototypeCall(constructor='MIDIOutputMap', fn='forEach', demands=['MIDIOutputMap', '(value:MIDIOutput,key:string,parent:MIDIOutputMap)=>void'], returns='None'),
        PrototypeCall(constructor='MIDIOutputMap', fn='forEach', demands=['MIDIOutputMap', '(value:MIDIOutput,key:string,parent:MIDIOutputMap)=>void', '*'], returns='None'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='forEach', demands=['MediaKeyStatusMap', '(value:MediaKeyStatus,key:BufferSource,parent:MediaKeyStatusMap)=>void'], returns='None'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='forEach', demands=['MediaKeyStatusMap', '(value:MediaKeyStatus,key:BufferSource,parent:MediaKeyStatusMap)=>void', '*'], returns='None'),
        PrototypeCall(constructor='NodeList', fn='forEach', demands=['NodeList', '(value:Node,key:number,parent:NodeList)=>void'], returns='None'),
        PrototypeCall(constructor='RadioNodeList', fn='forEach', demands=['RadioNodeList', '(value:Node,key:number,parent:NodeList)=>void'], returns='None'),
        PrototypeCall(constructor='NodeList', fn='forEach', demands=['NodeList', '(value:Node,key:number,parent:NodeList)=>void', '*'], returns='None'),
        PrototypeCall(constructor='RadioNodeList', fn='forEach', demands=['RadioNodeList', '(value:Node,key:number,parent:NodeList)=>void', '*'], returns='None'),
        PrototypeCall(constructor='NodeListOf', fn='forEach', demands=['NodeListOf', '(value:TNode,key:number,parent:NodeListOf'], returns='None'),
        PrototypeCall(constructor='NodeListOf', fn='forEach', demands=['NodeListOf', '(value:TNode,key:number,parent:NodeListOf', '*'], returns='None'),
        PrototypeCall(constructor='RTCStatsReport', fn='forEach', demands=['RTCStatsReport', '(value:any,key:string,parent:RTCStatsReport)=>void'], returns='None'),
        PrototypeCall(constructor='RTCStatsReport', fn='forEach', demands=['RTCStatsReport', '(value:any,key:string,parent:RTCStatsReport)=>void', '*'], returns='None'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='forEach', demands=['StylePropertyMapReadOnly', '(value:CSSStyleValue[],key:string,parent:StylePropertyMapReadOnly)=>void'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='forEach', demands=['StylePropertyMap', '(value:CSSStyleValue[],key:string,parent:StylePropertyMapReadOnly)=>void'], returns='None'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='forEach', demands=['StylePropertyMapReadOnly', '(value:CSSStyleValue[],key:string,parent:StylePropertyMapReadOnly)=>void', '*'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='forEach', demands=['StylePropertyMap', '(value:CSSStyleValue[],key:string,parent:StylePropertyMapReadOnly)=>void', '*'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='forEach', demands=['URLSearchParams', '(value:string,key:string,parent:URLSearchParams)=>void'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='forEach', demands=['URLSearchParams', '(value:string,key:string,parent:URLSearchParams)=>void', '*'], returns='None'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='forEach', demands=['ViewTransitionTypeSet', '(value:string,key:string,parent:ViewTransitionTypeSet)=>void'], returns='None'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='forEach', demands=['ViewTransitionTypeSet', '(value:string,key:string,parent:ViewTransitionTypeSet)=>void', '*'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='forEach', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='forEach', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='None'),
        PrototypeCall(constructor='BigUint64Array', fn='forEach', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='None'),
        PrototypeCall(constructor='BigUint64Array', fn='forEach', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='None'),
        PrototypeCall(constructor='FormData', fn='forEach', demands=['FormData', '(value:V,key:K,parent:this)=>void'], returns='None'),
        PrototypeCall(constructor='Headers', fn='forEach', demands=['Headers', '(value:V,key:K,parent:this)=>void'], returns='None'),
        PrototypeCall(constructor='FormData', fn='forEach', demands=['FormData', '(value:V,key:K,parent:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Headers', fn='forEach', demands=['Headers', '(value:V,key:K,parent:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='forEach', demands=['URLSearchParams', '(value:string,key:string,parent:this)=>void'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='forEach', demands=['URLSearchParams', '(value:string,key:string,parent:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='ReadonlyArray', fn='forEach', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>void'], returns='None'),
        PrototypeCall(constructor='ReadonlyArray', fn='forEach', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>void', '*'], returns='None'),
        PrototypeCall(constructor='Array', fn='forEach', demands=['list', '(value:T,index:number,array:T[])=>void'], returns='None'),
        PrototypeCall(constructor='Array', fn='forEach', demands=['list', '(value:T,index:number,array:T[])=>void', '*'], returns='None'),
        PrototypeCall(constructor='Int8Array', fn='forEach', demands=['Int8Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Int8Array', fn='forEach', demands=['Int8Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Uint8Array', fn='forEach', demands=['Uint8Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Uint8Array', fn='forEach', demands=['Uint8Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='forEach', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='forEach', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Int16Array', fn='forEach', demands=['Int16Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Int16Array', fn='forEach', demands=['Int16Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Uint16Array', fn='forEach', demands=['Uint16Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Uint16Array', fn='forEach', demands=['Uint16Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Int32Array', fn='forEach', demands=['Int32Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Int32Array', fn='forEach', demands=['Int32Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Uint32Array', fn='forEach', demands=['Uint32Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Uint32Array', fn='forEach', demands=['Uint32Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Float32Array', fn='forEach', demands=['Float32Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Float32Array', fn='forEach', demands=['Float32Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='Float64Array', fn='forEach', demands=['Float64Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Float64Array', fn='forEach', demands=['Float64Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='forEach', demands=['HighlightRegistry', '(value:V,key:K,map:Map'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='forEach', demands=['HighlightRegistry', '(value:V,key:K,map:Map', '*'], returns='None'),
        PrototypeCall(constructor='AudioParamMap', fn='forEach', demands=['AudioParamMap', '(value:V,key:K,map:ReadonlyMap'], returns='None'),
        PrototypeCall(constructor='MIDIInputMap', fn='forEach', demands=['MIDIInputMap', '(value:V,key:K,map:ReadonlyMap'], returns='None'),
        PrototypeCall(constructor='EventCounts', fn='forEach', demands=['EventCounts', '(value:V,key:K,map:ReadonlyMap'], returns='None'),
        PrototypeCall(constructor='MIDIOutputMap', fn='forEach', demands=['MIDIOutputMap', '(value:V,key:K,map:ReadonlyMap'], returns='None'),
        PrototypeCall(constructor='RTCStatsReport', fn='forEach', demands=['RTCStatsReport', '(value:V,key:K,map:ReadonlyMap'], returns='None'),
        PrototypeCall(constructor='AudioParamMap', fn='forEach', demands=['AudioParamMap', '(value:V,key:K,map:ReadonlyMap', '*'], returns='None'),
        PrototypeCall(constructor='MIDIInputMap', fn='forEach', demands=['MIDIInputMap', '(value:V,key:K,map:ReadonlyMap', '*'], returns='None'),
        PrototypeCall(constructor='EventCounts', fn='forEach', demands=['EventCounts', '(value:V,key:K,map:ReadonlyMap', '*'], returns='None'),
        PrototypeCall(constructor='MIDIOutputMap', fn='forEach', demands=['MIDIOutputMap', '(value:V,key:K,map:ReadonlyMap', '*'], returns='None'),
        PrototypeCall(constructor='RTCStatsReport', fn='forEach', demands=['RTCStatsReport', '(value:V,key:K,map:ReadonlyMap', '*'], returns='None'),
        PrototypeCall(constructor='Highlight', fn='forEach', demands=['Highlight', '(value:T,value2:T,set:Set'], returns='None'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='forEach', demands=['ViewTransitionTypeSet', '(value:T,value2:T,set:Set'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='forEach', demands=['FontFaceSet', '(value:T,value2:T,set:Set'], returns='None'),
        PrototypeCall(constructor='CustomStateSet', fn='forEach', demands=['CustomStateSet', '(value:T,value2:T,set:Set'], returns='None'),
        PrototypeCall(constructor='Highlight', fn='forEach', demands=['Highlight', '(value:T,value2:T,set:Set', '*'], returns='None'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='forEach', demands=['ViewTransitionTypeSet', '(value:T,value2:T,set:Set', '*'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='forEach', demands=['FontFaceSet', '(value:T,value2:T,set:Set', '*'], returns='None'),
        PrototypeCall(constructor='CustomStateSet', fn='forEach', demands=['CustomStateSet', '(value:T,value2:T,set:Set', '*'], returns='None'),
        PrototypeCall(constructor='ReadonlySet', fn='forEach', demands=['ReadonlySet', '(value:T,value2:T,set:ReadonlySet'], returns='None'),
        PrototypeCall(constructor='ReadonlySet', fn='forEach', demands=['ReadonlySet', '(value:T,value2:T,set:ReadonlySet', '*'], returns='None'),
        PrototypeCall(constructor='Float16Array', fn='forEach', demands=['Float16Array', '(value:number,index:number,array:this)=>void'], returns='None'),
        PrototypeCall(constructor='Float16Array', fn='forEach', demands=['Float16Array', '(value:number,index:number,array:this)=>void', '*'], returns='None'),
    ],
    "force": [
        FieldCall(field='force', demands=['TouchInit'], returns='float'),
        FieldCall(field='force', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='force', demands=['Touch'], returns='float'),
    ],
    "forceRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='forceRedraw', demands=['SVGSVGElement'], returns='None'),
    ],
    "forcedColorAdjust": [
        FieldCall(field='forcedColorAdjust', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='forcedColorAdjust', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "foreignObject": [
        FieldCall(field='foreignObject', demands=['SVGElementTagNameMap'], returns='SVGForeignObjectElement'),
        FieldCall(field='foreignObject', demands=['SVGElementTagNameMap', 'SVGForeignObjectElement'], returns='None'),
    ],
    "form": [
        FieldCall(field='form', demands=['ElementInternals'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLButtonElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLFieldSetElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLInputElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLLabelElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLLegendElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLObjectElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLOptionElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLOutputElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLSelectElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLTextAreaElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLElementTagNameMap'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLElementTagNameMap', 'HTMLFormElement'], returns='None'),
    ],
    "formAction": [
        FieldCall(field='formAction', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formAction', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='formAction', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formAction', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "formData": [
        FieldCall(field='formData', demands=['FormDataEventInit'], returns='FormData'),
        FieldCall(field='formData', demands=['FormDataEventInit', 'FormData'], returns='None'),
        PrototypeCall(constructor='Request', fn='formData', demands=['Request'], returns='FormData'),
        PrototypeCall(constructor='Response', fn='formData', demands=['Response'], returns='FormData'),
        FieldCall(field='formData', demands=['FormDataEvent'], returns='FormData'),
    ],
    "formEnctype": [
        FieldCall(field='formEnctype', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formEnctype', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='formEnctype', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formEnctype', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "formMethod": [
        FieldCall(field='formMethod', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formMethod', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='formMethod', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formMethod', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "formNoValidate": [
        FieldCall(field='formNoValidate', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='formNoValidate', demands=['HTMLButtonElement', 'bool'], returns='None'),
        FieldCall(field='formNoValidate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='formNoValidate', demands=['HTMLInputElement', 'bool'], returns='None'),
    ],
    "formTarget": [
        FieldCall(field='formTarget', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formTarget', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='formTarget', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formTarget', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "format": [
        FieldCall(field='format', demands=['AudioDataCopyToOptions'], returns='AudioSampleFormat'),
        FieldCall(field='format', demands=['AudioDataCopyToOptions', 'AudioSampleFormat'], returns='None'),
        FieldCall(field='format', demands=['AudioDataInit'], returns='AudioSampleFormat'),
        FieldCall(field='format', demands=['AudioDataInit', 'AudioSampleFormat'], returns='None'),
        FieldCall(field='format', demands=['AvcEncoderConfig'], returns='AvcBitstreamFormat'),
        FieldCall(field='format', demands=['AvcEncoderConfig', 'AvcBitstreamFormat'], returns='None'),
        FieldCall(field='format', demands=['OpusEncoderConfig'], returns='OpusBitstreamFormat'),
        FieldCall(field='format', demands=['OpusEncoderConfig', 'OpusBitstreamFormat'], returns='None'),
        FieldCall(field='format', demands=['VideoFrameBufferInit'], returns='VideoPixelFormat'),
        FieldCall(field='format', demands=['VideoFrameBufferInit', 'VideoPixelFormat'], returns='None'),
        FieldCall(field='format', demands=['VideoFrameCopyToOptions'], returns='VideoPixelFormat'),
        FieldCall(field='format', demands=['VideoFrameCopyToOptions', 'VideoPixelFormat'], returns='None'),
        FieldCall(field='format', demands=['AudioData'], returns='AudioSampleFormat'),
        FieldCall(field='format', demands=['VideoFrame'], returns='VideoPixelFormat'),
        FieldCall(field='format', demands=['GPUStorageTextureBindingLayout'], returns='GPUTextureFormat'),
        FieldCall(field='format', demands=['GPUStorageTextureBindingLayout', 'GPUTextureFormat'], returns='None'),
        FieldCall(field='format', demands=['GPUColorTargetState'], returns='GPUTextureFormat'),
        FieldCall(field='format', demands=['GPUColorTargetState', 'GPUTextureFormat'], returns='None'),
        FieldCall(field='format', demands=['GPUDepthStencilState'], returns='GPUTextureFormat'),
        FieldCall(field='format', demands=['GPUDepthStencilState', 'GPUTextureFormat'], returns='None'),
        FieldCall(field='format', demands=['GPUVertexAttribute'], returns='GPUVertexFormat'),
        FieldCall(field='format', demands=['GPUVertexAttribute', 'GPUVertexFormat'], returns='None'),
        FieldCall(field='format', demands=['GPUCanvasConfiguration'], returns='GPUTextureFormat'),
        FieldCall(field='format', demands=['GPUCanvasConfiguration', 'GPUTextureFormat'], returns='None'),
    ],
    "formdata": [
        FieldCall(field='formdata', demands=['GlobalEventHandlersEventMap'], returns='FormDataEvent'),
        FieldCall(field='formdata', demands=['GlobalEventHandlersEventMap', 'FormDataEvent'], returns='None'),
    ],
    "forms": [
        FieldCall(field='forms', demands=['Document'], returns='HTMLCollectionOf'),
    ],
    "forward": [
        PrototypeCall(constructor='History', fn='forward', demands=['History'], returns='None'),
    ],
    "forwardX": [
        FieldCall(field='forwardX', demands=['AudioListener'], returns='AudioParam'),
    ],
    "forwardY": [
        FieldCall(field='forwardY', demands=['AudioListener'], returns='AudioParam'),
    ],
    "forwardZ": [
        FieldCall(field='forwardZ', demands=['AudioListener'], returns='AudioParam'),
    ],
    "foundation": [
        FieldCall(field='foundation', demands=['RTCIceCandidate'], returns='str'),
    ],
    "fr": [
        FieldCall(field='fr', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "fragmentDirective": [
        FieldCall(field='fragmentDirective', demands=['Document'], returns='FragmentDirective'),
    ],
    "frame": [
        FieldCall(field='frame', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='frame', demands=['HTMLTableElement', 'str'], returns='None'),
        FieldCall(field='frame', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLFrameElement'),
        FieldCall(field='frame', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLFrameElement'], returns='None'),
    ],
    "frameBorder": [
        FieldCall(field='frameBorder', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='frameBorder', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='frameBorder', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='frameBorder', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "frameCount": [
        FieldCall(field='frameCount', demands=['AudioDataCopyToOptions'], returns='float'),
        FieldCall(field='frameCount', demands=['AudioDataCopyToOptions', 'float'], returns='None'),
        FieldCall(field='frameCount', demands=['ImageTrack'], returns='float'),
    ],
    "frameDuration": [
        FieldCall(field='frameDuration', demands=['OpusEncoderConfig'], returns='float'),
        FieldCall(field='frameDuration', demands=['OpusEncoderConfig', 'float'], returns='None'),
    ],
    "frameElement": [
        FieldCall(field='frameElement', demands=['Window'], returns='Element'),
    ],
    "frameHeight": [
        FieldCall(field='frameHeight', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='frameHeight', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='frameHeight', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='frameHeight', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "frameId": [
        FieldCall(field='frameId', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='frameId', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
    ],
    "frameIndex": [
        FieldCall(field='frameIndex', demands=['ImageDecodeOptions'], returns='float'),
        FieldCall(field='frameIndex', demands=['ImageDecodeOptions', 'float'], returns='None'),
    ],
    "frameOffset": [
        FieldCall(field='frameOffset', demands=['AudioDataCopyToOptions'], returns='float'),
        FieldCall(field='frameOffset', demands=['AudioDataCopyToOptions', 'float'], returns='None'),
    ],
    "frameRate": [
        FieldCall(field='frameRate', demands=['MediaTrackCapabilities'], returns='DoubleRange'),
        FieldCall(field='frameRate', demands=['MediaTrackCapabilities', 'DoubleRange'], returns='None'),
        FieldCall(field='frameRate', demands=['MediaTrackConstraintSet'], returns='ConstrainDouble'),
        FieldCall(field='frameRate', demands=['MediaTrackConstraintSet', 'ConstrainDouble'], returns='None'),
        FieldCall(field='frameRate', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='frameRate', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='frameRate', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='frameRate', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "frameWidth": [
        FieldCall(field='frameWidth', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='frameWidth', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='frameWidth', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='frameWidth', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framebufferRenderbuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='framebufferRenderbuffer', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferRenderbuffer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
    ],
    "framebufferTexture2D": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='framebufferTexture2D', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferTexture2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint'], returns='None'),
    ],
    "framebufferTextureLayer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferTextureLayer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint', 'GLint'], returns='None'),
    ],
    "framebufferTextureMultiviewOVR": [
        PrototypeCall(constructor='OVR_multiview2', fn='framebufferTextureMultiviewOVR', demands=['OVR_multiview2', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint', 'GLint', 'GLsizei'], returns='None'),
    ],
    "framerate": [
        FieldCall(field='framerate', demands=['VideoConfiguration'], returns='float'),
        FieldCall(field='framerate', demands=['VideoConfiguration', 'float'], returns='None'),
        FieldCall(field='framerate', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='framerate', demands=['VideoEncoderConfig', 'float'], returns='None'),
    ],
    "frames": [
        FieldCall(field='frames', demands=['Window'], returns='WindowProxy'),
    ],
    "framesAssembledFromMultiplePackets": [
        FieldCall(field='framesAssembledFromMultiplePackets', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesAssembledFromMultiplePackets', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesDecoded": [
        FieldCall(field='framesDecoded', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesDecoded', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesDropped": [
        FieldCall(field='framesDropped', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesDropped', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesEncoded": [
        FieldCall(field='framesEncoded', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesEncoded', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesPerSecond": [
        FieldCall(field='framesPerSecond', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesPerSecond', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='framesPerSecond', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesPerSecond', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesReceived": [
        FieldCall(field='framesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesRendered": [
        FieldCall(field='framesRendered', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesRendered', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "framesSent": [
        FieldCall(field='framesSent', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='framesSent', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "frameset": [
        FieldCall(field='frameset', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLFrameSetElement'),
        FieldCall(field='frameset', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLFrameSetElement'], returns='None'),
    ],
    "freeze": [
        PrototypeCall(constructor='ObjectConstructor', fn='freeze', demands=['ObjectConstructor', 'T'], returns='T'),
        PrototypeCall(constructor='ObjectConstructor', fn='freeze', demands=['ObjectConstructor', 'T'], returns='Readonly'),
    ],
    "freezeCount": [
        FieldCall(field='freezeCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='freezeCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "frequency": [
        FieldCall(field='frequency', demands=['BiquadFilterOptions'], returns='float'),
        FieldCall(field='frequency', demands=['BiquadFilterOptions', 'float'], returns='None'),
        FieldCall(field='frequency', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='frequency', demands=['CSSNumericType', 'float'], returns='None'),
        FieldCall(field='frequency', demands=['OscillatorOptions'], returns='float'),
        FieldCall(field='frequency', demands=['OscillatorOptions', 'float'], returns='None'),
        FieldCall(field='frequency', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='frequency', demands=['OscillatorNode'], returns='AudioParam'),
    ],
    "frequencyBinCount": [
        FieldCall(field='frequencyBinCount', demands=['AnalyserNode'], returns='float'),
    ],
    "from": [
        FieldCall(field='from', demands=['NavigationActivation'], returns='NavigationHistoryEntry'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'ArrayLike'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'ArrayLike', '(v:U,k:number)=>bigint'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'ArrayLike', '(v:U,k:number)=>bigint', '*'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'Iterable'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'Iterable', '(v:T,k:number)=>bigint'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='from', demands=['BigInt64ArrayConstructor', 'Iterable', '(v:T,k:number)=>bigint', '*'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'ArrayLike'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'ArrayLike', '(v:U,k:number)=>bigint'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'ArrayLike', '(v:U,k:number)=>bigint', '*'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'Iterable'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'Iterable', '(v:T,k:number)=>bigint'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='from', demands=['BigUint64ArrayConstructor', 'Iterable', '(v:T,k:number)=>bigint', '*'], returns='BigUint64Array'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'Iterable'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'Iterable', '(v:T,k:number)=>U'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'Iterable', '(v:T,k:number)=>U', '*'], returns='list'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'Iterable'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'Iterable'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'Iterable'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'Iterable'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'Iterable'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'Iterable'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'Iterable'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'Iterable'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'Iterable'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Float64Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'ArrayLike'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='from', demands=['Int8ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'ArrayLike'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='from', demands=['Uint8ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'ArrayLike'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='from', demands=['Uint8ClampedArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'ArrayLike'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='from', demands=['Int16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'ArrayLike'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='from', demands=['Uint16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'ArrayLike'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='from', demands=['Int32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'ArrayLike'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='from', demands=['Uint32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'ArrayLike'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='from', demands=['Float32ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'ArrayLike'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='from', demands=['Float64ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Float64Array'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'ArrayLike'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>U'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='from', demands=['ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>U', '*'], returns='list'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'ArrayLike'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'ArrayLike', '(v:T,k:number)=>number', '*'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'Iterable'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='from', demands=['Float16ArrayConstructor', 'Iterable', '(v:T,k:number)=>number', '*'], returns='Float16Array'),
    ],
    "fromAsync": [
        PrototypeCall(constructor='ArrayConstructor', fn='fromAsync', demands=['ArrayConstructor', 'AsyncIterable'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='fromAsync', demands=['ArrayConstructor', 'AsyncIterable', '(value:Awaited'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='fromAsync', demands=['ArrayConstructor', 'AsyncIterable', '(value:Awaited', '*'], returns='list'),
    ],
    "fromCharCode": [
        PrototypeCall(constructor='StringConstructor', fn='fromCharCode', demands=['StringConstructor', '*'], returns='str'),
    ],
    "fromCodePoint": [
        PrototypeCall(constructor='StringConstructor', fn='fromCodePoint', demands=['StringConstructor', '*'], returns='str'),
    ],
    "fromEntries": [
        PrototypeCall(constructor='ObjectConstructor', fn='fromEntries', demands=['ObjectConstructor', 'Iterable'], returns='{[k:string]:T;}'),
        PrototypeCall(constructor='ObjectConstructor', fn='fromEntries', demands=['ObjectConstructor', 'Iterable'], returns='*'),
    ],
    "frontFace": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='frontFace', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='frontFace', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "fround": [
        PrototypeCall(constructor='Math', fn='fround', demands=['Math', 'float'], returns='float'),
    ],
    "fullPath": [
        FieldCall(field='fullPath', demands=['FileSystemEntry'], returns='str'),
    ],
    "fullRange": [
        FieldCall(field='fullRange', demands=['VideoColorSpaceInit'], returns='bool'),
        FieldCall(field='fullRange', demands=['VideoColorSpaceInit', 'bool'], returns='None'),
        FieldCall(field='fullRange', demands=['VideoColorSpace'], returns='bool'),
    ],
    "fullscreen": [
        FieldCall(field='fullscreen', demands=['Document'], returns='bool'),
    ],
    "fullscreenElement": [
        FieldCall(field='fullscreenElement', demands=['DocumentOrShadowRoot'], returns='Element'),
    ],
    "fullscreenEnabled": [
        FieldCall(field='fullscreenEnabled', demands=['Document'], returns='bool'),
    ],
    "fullscreenchange": [
        FieldCall(field='fullscreenchange', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='fullscreenchange', demands=['DocumentEventMap', 'Event'], returns='None'),
        FieldCall(field='fullscreenchange', demands=['ElementEventMap'], returns='Event'),
        FieldCall(field='fullscreenchange', demands=['ElementEventMap', 'Event'], returns='None'),
    ],
    "fullscreenerror": [
        FieldCall(field='fullscreenerror', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='fullscreenerror', demands=['DocumentEventMap', 'Event'], returns='None'),
        FieldCall(field='fullscreenerror', demands=['ElementEventMap'], returns='Event'),
        FieldCall(field='fullscreenerror', demands=['ElementEventMap', 'Event'], returns='None'),
    ],
    "fx": [
        FieldCall(field='fx', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "fy": [
        FieldCall(field='fy', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "g": [
        FieldCall(field='g', demands=['SVGElementTagNameMap'], returns='SVGGElement'),
        FieldCall(field='g', demands=['SVGElementTagNameMap', 'SVGGElement'], returns='None'),
    ],
    "gain": [
        FieldCall(field='gain', demands=['BiquadFilterOptions'], returns='float'),
        FieldCall(field='gain', demands=['BiquadFilterOptions', 'float'], returns='None'),
        FieldCall(field='gain', demands=['GainOptions'], returns='float'),
        FieldCall(field='gain', demands=['GainOptions', 'float'], returns='None'),
        FieldCall(field='gain', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='gain', demands=['GainNode'], returns='AudioParam'),
    ],
    "gamepad": [
        FieldCall(field='gamepad', demands=['GamepadEventInit'], returns='Gamepad'),
        FieldCall(field='gamepad', demands=['GamepadEventInit', 'Gamepad'], returns='None'),
        FieldCall(field='gamepad', demands=['GamepadEvent'], returns='Gamepad'),
    ],
    "gamepadconnected": [
        FieldCall(field='gamepadconnected', demands=['WindowEventMap'], returns='GamepadEvent'),
        FieldCall(field='gamepadconnected', demands=['WindowEventMap', 'GamepadEvent'], returns='None'),
        FieldCall(field='gamepadconnected', demands=['WindowEventHandlersEventMap'], returns='GamepadEvent'),
        FieldCall(field='gamepadconnected', demands=['WindowEventHandlersEventMap', 'GamepadEvent'], returns='None'),
    ],
    "gamepaddisconnected": [
        FieldCall(field='gamepaddisconnected', demands=['WindowEventMap'], returns='GamepadEvent'),
        FieldCall(field='gamepaddisconnected', demands=['WindowEventMap', 'GamepadEvent'], returns='None'),
        FieldCall(field='gamepaddisconnected', demands=['WindowEventHandlersEventMap'], returns='GamepadEvent'),
        FieldCall(field='gamepaddisconnected', demands=['WindowEventHandlersEventMap', 'GamepadEvent'], returns='None'),
    ],
    "gamma": [
        FieldCall(field='gamma', demands=['DeviceMotionEventRotationRateInit'], returns='float'),
        FieldCall(field='gamma', demands=['DeviceMotionEventRotationRateInit', 'float'], returns='None'),
        FieldCall(field='gamma', demands=['DeviceOrientationEventInit'], returns='float'),
        FieldCall(field='gamma', demands=['DeviceOrientationEventInit', 'float'], returns='None'),
        FieldCall(field='gamma', demands=['DeviceMotionEventRotationRate'], returns='float'),
        FieldCall(field='gamma', demands=['DeviceOrientationEvent'], returns='float'),
    ],
    "gap": [
        FieldCall(field='gap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gatheringState": [
        FieldCall(field='gatheringState', demands=['RTCIceTransport'], returns='RTCIceGathererState'),
    ],
    "gatheringstatechange": [
        FieldCall(field='gatheringstatechange', demands=['RTCIceTransportEventMap'], returns='Event'),
        FieldCall(field='gatheringstatechange', demands=['RTCIceTransportEventMap', 'Event'], returns='None'),
    ],
    "generateKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', '"Ed25519"', 'bool', 'ReadonlyArray<"sign"'], returns='CryptoKeyPair'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'RsaHashedKeyGenParams', 'bool', 'ReadonlyArray'], returns='CryptoKeyPair'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'AesKeyGenParams', 'bool', 'ReadonlyArray'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'bool', 'list'], returns='Promise<CryptoKeyPair'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'bool', 'Iterable'], returns='Promise<CryptoKeyPair'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'RsaHashedKeyGenParams', 'bool', 'list'], returns='CryptoKeyPair'),
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'AesKeyGenParams', 'bool', 'list'], returns='CryptoKey'),
    ],
    "generateMipmap": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='generateMipmap', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='generateMipmap', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "generateRequest": [
        PrototypeCall(constructor='MediaKeySession', fn='generateRequest', demands=['MediaKeySession', 'str', 'AllowSharedBufferSource'], returns='None'),
    ],
    "geolocation": [
        FieldCall(field='geolocation', demands=['Navigator'], returns='Geolocation'),
    ],
    "get": [
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore', 'str'], returns='Promise<CookieListItem'),
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore'], returns='Promise<CookieListItem'),
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore', 'CookieStoreGetOptions'], returns='Promise<CookieListItem'),
        PrototypeCall(constructor='CredentialsContainer', fn='get', demands=['CredentialsContainer'], returns='Promise<Credential'),
        PrototypeCall(constructor='CredentialsContainer', fn='get', demands=['CredentialsContainer', 'CredentialRequestOptions'], returns='Promise<Credential'),
        PrototypeCall(constructor='CustomElementRegistry', fn='get', demands=['CustomElementRegistry', 'str'], returns='CustomElementConstructor'),
        PrototypeCall(constructor='FormData', fn='get', demands=['FormData', 'str'], returns='FormDataEntryValue'),
        PrototypeCall(constructor='Headers', fn='get', demands=['Headers', 'str'], returns='str'),
        PrototypeCall(constructor='IDBIndex', fn='get', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='get', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='get', demands=['MediaKeyStatusMap', 'AllowSharedBufferSource'], returns='MediaKeyStatus'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='get', demands=['StylePropertyMapReadOnly', 'str'], returns='CSSStyleValue'),
        PrototypeCall(constructor='StylePropertyMap', fn='get', demands=['StylePropertyMap', 'str'], returns='CSSStyleValue'),
        PrototypeCall(constructor='URLSearchParams', fn='get', demands=['URLSearchParams', 'str'], returns='str'),
        PrototypeCall(constructor='PropertyDescriptor', fn='get', demands=['PropertyDescriptor'], returns='*'),
        FieldCall(field='get', demands=['TypedPropertyDescriptor'], returns='()=>T'),
        FieldCall(field='get', demands=['TypedPropertyDescriptor', '()=>T'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='get', demands=['HighlightRegistry', 'K'], returns='V'),
        PrototypeCall(constructor='AudioParamMap', fn='get', demands=['AudioParamMap', 'K'], returns='V'),
        PrototypeCall(constructor='MIDIInputMap', fn='get', demands=['MIDIInputMap', 'K'], returns='V'),
        PrototypeCall(constructor='EventCounts', fn='get', demands=['EventCounts', 'K'], returns='V'),
        PrototypeCall(constructor='MIDIOutputMap', fn='get', demands=['MIDIOutputMap', 'K'], returns='V'),
        PrototypeCall(constructor='RTCStatsReport', fn='get', demands=['RTCStatsReport', 'K'], returns='V'),
        PrototypeCall(constructor='WeakMap', fn='get', demands=['WeakMap', 'K'], returns='V'),
        PrototypeCall(constructor='ProxyHandler', fn='get', demands=['ProxyHandler', 'T', 'str', '*'], returns='*'),
        PrototypeCall(constructor='ClassAccessorDecoratorTarget', fn='get', demands=['ClassAccessorDecoratorTarget', 'This'], returns='Value'),
        PrototypeCall(constructor='ClassAccessorDecoratorResult', fn='get', demands=['ClassAccessorDecoratorResult', 'This'], returns='Value'),
    ],
    "getActiveAttrib": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getActiveAttrib', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveAttrib', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "getActiveUniform": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getActiveUniform', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniform', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "getActiveUniformBlockName": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniformBlockName', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='str'),
    ],
    "getActiveUniformBlockParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniformBlockParameter', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'GLenum'], returns='*'),
    ],
    "getActiveUniforms": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniforms', demands=['WebGL2RenderingContext', 'WebGLProgram', 'list', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniforms', demands=['WebGL2RenderingContext', 'WebGLProgram', 'Iterable', 'GLenum'], returns='*'),
    ],
    "getAll": [
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore', 'str'], returns='CookieList'),
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore'], returns='CookieList'),
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore', 'CookieStoreGetOptions'], returns='CookieList'),
        PrototypeCall(constructor='FormData', fn='getAll', demands=['FormData', 'str'], returns='list'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex', 'IDBValidKey', 'float'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore', 'IDBValidKey', 'float'], returns='IDBRequest'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='getAll', demands=['StylePropertyMapReadOnly', 'str'], returns='list'),
        PrototypeCall(constructor='StylePropertyMap', fn='getAll', demands=['StylePropertyMap', 'str'], returns='list'),
        PrototypeCall(constructor='URLSearchParams', fn='getAll', demands=['URLSearchParams', 'str'], returns='list'),
    ],
    "getAllKeys": [
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex', 'IDBValidKey', 'float'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore', 'IDBValidKey', 'float'], returns='IDBRequest'),
    ],
    "getAllResponseHeaders": [
        PrototypeCall(constructor='XMLHttpRequest', fn='getAllResponseHeaders', demands=['XMLHttpRequest'], returns='str'),
    ],
    "getAnimations": [
        PrototypeCall(constructor='Element', fn='getAnimations', demands=['Element'], returns='list'),
        PrototypeCall(constructor='Element', fn='getAnimations', demands=['Element', 'GetAnimationsOptions'], returns='list'),
        PrototypeCall(constructor='ShadowRoot', fn='getAnimations', demands=['ShadowRoot'], returns='list'),
        PrototypeCall(constructor='Document', fn='getAnimations', demands=['Document'], returns='list'),
    ],
    "getAsFile": [
        PrototypeCall(constructor='DataTransferItem', fn='getAsFile', demands=['DataTransferItem'], returns='File'),
    ],
    "getAsString": [
        PrototypeCall(constructor='DataTransferItem', fn='getAsString', demands=['DataTransferItem', 'FunctionStringCallback'], returns='None'),
    ],
    "getAttachedShaders": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getAttachedShaders', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='WebGLShader[]'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getAttachedShaders', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='WebGLShader[]'),
    ],
    "getAttribLocation": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getAttribLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getAttribLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
    ],
    "getAttribute": [
        PrototypeCall(constructor='Element', fn='getAttribute', demands=['Element', 'str'], returns='str'),
        PrototypeCall(constructor='MathMLElement', fn='getAttribute', demands=['MathMLElement', 'str'], returns='str'),
        PrototypeCall(constructor='SVGElement', fn='getAttribute', demands=['SVGElement', 'str'], returns='str'),
        PrototypeCall(constructor='HTMLElement', fn='getAttribute', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "getAttributeNS": [
        PrototypeCall(constructor='Element', fn='getAttributeNS', demands=['Element', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='MathMLElement', fn='getAttributeNS', demands=['MathMLElement', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='SVGElement', fn='getAttributeNS', demands=['SVGElement', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='HTMLElement', fn='getAttributeNS', demands=['HTMLElement', 'str', 'str'], returns='str'),
    ],
    "getAttributeNames": [
        PrototypeCall(constructor='Element', fn='getAttributeNames', demands=['Element'], returns='list'),
        PrototypeCall(constructor='MathMLElement', fn='getAttributeNames', demands=['MathMLElement'], returns='list'),
        PrototypeCall(constructor='SVGElement', fn='getAttributeNames', demands=['SVGElement'], returns='list'),
        PrototypeCall(constructor='HTMLElement', fn='getAttributeNames', demands=['HTMLElement'], returns='list'),
    ],
    "getAttributeNode": [
        PrototypeCall(constructor='Element', fn='getAttributeNode', demands=['Element', 'str'], returns='Attr'),
        PrototypeCall(constructor='MathMLElement', fn='getAttributeNode', demands=['MathMLElement', 'str'], returns='Attr'),
        PrototypeCall(constructor='SVGElement', fn='getAttributeNode', demands=['SVGElement', 'str'], returns='Attr'),
        PrototypeCall(constructor='HTMLElement', fn='getAttributeNode', demands=['HTMLElement', 'str'], returns='Attr'),
    ],
    "getAttributeNodeNS": [
        PrototypeCall(constructor='Element', fn='getAttributeNodeNS', demands=['Element', 'str', 'str'], returns='Attr'),
        PrototypeCall(constructor='MathMLElement', fn='getAttributeNodeNS', demands=['MathMLElement', 'str', 'str'], returns='Attr'),
        PrototypeCall(constructor='SVGElement', fn='getAttributeNodeNS', demands=['SVGElement', 'str', 'str'], returns='Attr'),
        PrototypeCall(constructor='HTMLElement', fn='getAttributeNodeNS', demands=['HTMLElement', 'str', 'str'], returns='Attr'),
    ],
    "getAudioTracks": [
        PrototypeCall(constructor='MediaStream', fn='getAudioTracks', demands=['MediaStream'], returns='list'),
    ],
    "getAuthenticatorData": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getAuthenticatorData', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "getBBox": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getBBox', demands=['SVGGraphicsElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getBBox', demands=['SVGTextContentElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='getBBox', demands=['SVGForeignObjectElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGElement', fn='getBBox', demands=['SVGGElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGSwitchElement', fn='getBBox', demands=['SVGSwitchElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGUseElement', fn='getBBox', demands=['SVGUseElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGImageElement', fn='getBBox', demands=['SVGImageElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGSVGElement', fn='getBBox', demands=['SVGSVGElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGeometryElement', fn='getBBox', demands=['SVGGeometryElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGAElement', fn='getBBox', demands=['SVGAElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGDefsElement', fn='getBBox', demands=['SVGDefsElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='getBBox', demands=['SVGGraphicsElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getBBox', demands=['SVGTextContentElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='getBBox', demands=['SVGForeignObjectElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGElement', fn='getBBox', demands=['SVGGElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGSwitchElement', fn='getBBox', demands=['SVGSwitchElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGUseElement', fn='getBBox', demands=['SVGUseElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGImageElement', fn='getBBox', demands=['SVGImageElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGSVGElement', fn='getBBox', demands=['SVGSVGElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGeometryElement', fn='getBBox', demands=['SVGGeometryElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGAElement', fn='getBBox', demands=['SVGAElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
        PrototypeCall(constructor='SVGDefsElement', fn='getBBox', demands=['SVGDefsElement', 'SVGBoundingBoxOptions'], returns='DOMRect'),
    ],
    "getBigInt64": [
        PrototypeCall(constructor='DataView', fn='getBigInt64', demands=['DataView', 'float'], returns='bigint'),
        PrototypeCall(constructor='DataView', fn='getBigInt64', demands=['DataView', 'float', 'bool'], returns='bigint'),
    ],
    "getBigUint64": [
        PrototypeCall(constructor='DataView', fn='getBigUint64', demands=['DataView', 'float'], returns='bigint'),
        PrototypeCall(constructor='DataView', fn='getBigUint64', demands=['DataView', 'float', 'bool'], returns='bigint'),
    ],
    "getBindGroupLayout": [
        PrototypeCall(constructor='GPUPipelineBase', fn='getBindGroupLayout', demands=['GPUPipelineBase', 'float'], returns='GPUBindGroupLayout'),
    ],
    "getBoundingClientRect": [
        PrototypeCall(constructor='Element', fn='getBoundingClientRect', demands=['Element'], returns='DOMRect'),
        PrototypeCall(constructor='MathMLElement', fn='getBoundingClientRect', demands=['MathMLElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGElement', fn='getBoundingClientRect', demands=['SVGElement'], returns='DOMRect'),
        PrototypeCall(constructor='HTMLElement', fn='getBoundingClientRect', demands=['HTMLElement'], returns='DOMRect'),
        PrototypeCall(constructor='Range', fn='getBoundingClientRect', demands=['Range'], returns='DOMRect'),
    ],
    "getBounds": [
        PrototypeCall(constructor='DOMQuad', fn='getBounds', demands=['DOMQuad'], returns='DOMRect'),
    ],
    "getBufferParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getBufferParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getBufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'float', 'GLuint'], returns='None'),
    ],
    "getByteFrequencyData": [
        PrototypeCall(constructor='AnalyserNode', fn='getByteFrequencyData', demands=['AnalyserNode', 'Uint8Array'], returns='None'),
    ],
    "getByteTimeDomainData": [
        PrototypeCall(constructor='AnalyserNode', fn='getByteTimeDomainData', demands=['AnalyserNode', 'Uint8Array'], returns='None'),
    ],
    "getCTM": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getCTM', demands=['SVGGraphicsElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getCTM', demands=['SVGTextContentElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='getCTM', demands=['SVGForeignObjectElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGGElement', fn='getCTM', demands=['SVGGElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGSwitchElement', fn='getCTM', demands=['SVGSwitchElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGUseElement', fn='getCTM', demands=['SVGUseElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGImageElement', fn='getCTM', demands=['SVGImageElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGSVGElement', fn='getCTM', demands=['SVGSVGElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGGeometryElement', fn='getCTM', demands=['SVGGeometryElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGAElement', fn='getCTM', demands=['SVGAElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGDefsElement', fn='getCTM', demands=['SVGDefsElement'], returns='DOMMatrix'),
    ],
    "getCapabilities": [
        PrototypeCall(constructor='InputDeviceInfo', fn='getCapabilities', demands=['InputDeviceInfo'], returns='MediaTrackCapabilities'),
        PrototypeCall(constructor='MediaStreamTrack', fn='getCapabilities', demands=['MediaStreamTrack'], returns='MediaTrackCapabilities'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='getCapabilities', demands=['CanvasCaptureMediaStreamTrack'], returns='MediaTrackCapabilities'),
    ],
    "getChannelData": [
        PrototypeCall(constructor='AudioBuffer', fn='getChannelData', demands=['AudioBuffer', 'float'], returns='Float32Array'),
    ],
    "getCharNumAtPosition": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getCharNumAtPosition', demands=['SVGTextContentElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getCharNumAtPosition', demands=['SVGTextPositioningElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getCharNumAtPosition', demands=['SVGTextPathElement'], returns='float'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getCharNumAtPosition', demands=['SVGTextContentElement', 'DOMPointInit'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getCharNumAtPosition', demands=['SVGTextPositioningElement', 'DOMPointInit'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getCharNumAtPosition', demands=['SVGTextPathElement', 'DOMPointInit'], returns='float'),
    ],
    "getClientExtensionResults": [
        PrototypeCall(constructor='PublicKeyCredential', fn='getClientExtensionResults', demands=['PublicKeyCredential'], returns='AuthenticationExtensionsClientOutputs'),
    ],
    "getClientRect": [
        PrototypeCall(constructor='CaretPosition', fn='getClientRect', demands=['CaretPosition'], returns='DOMRect'),
    ],
    "getClientRects": [
        PrototypeCall(constructor='Element', fn='getClientRects', demands=['Element'], returns='DOMRectList'),
        PrototypeCall(constructor='MathMLElement', fn='getClientRects', demands=['MathMLElement'], returns='DOMRectList'),
        PrototypeCall(constructor='SVGElement', fn='getClientRects', demands=['SVGElement'], returns='DOMRectList'),
        PrototypeCall(constructor='HTMLElement', fn='getClientRects', demands=['HTMLElement'], returns='DOMRectList'),
        PrototypeCall(constructor='Range', fn='getClientRects', demands=['Range'], returns='DOMRectList'),
    ],
    "getCoalescedEvents": [
        PrototypeCall(constructor='PointerEvent', fn='getCoalescedEvents', demands=['PointerEvent'], returns='list'),
    ],
    "getComposedRanges": [
        PrototypeCall(constructor='Selection', fn='getComposedRanges', demands=['Selection'], returns='list'),
        PrototypeCall(constructor='Selection', fn='getComposedRanges', demands=['Selection', 'GetComposedRangesOptions'], returns='list'),
    ],
    "getComputedStyle": [
        DirectCall(fn='getComputedStyle', receiver=None, demands=['Element'], returns='CSSStyleDeclaration'),
        DirectCall(fn='getComputedStyle', receiver=None, demands=['Element', 'str'], returns='CSSStyleDeclaration'),
    ],
    "getComputedTextLength": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getComputedTextLength', demands=['SVGTextContentElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getComputedTextLength', demands=['SVGTextPositioningElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getComputedTextLength', demands=['SVGTextPathElement'], returns='float'),
    ],
    "getComputedTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='getComputedTiming', demands=['AnimationEffect'], returns='ComputedEffectTiming'),
        PrototypeCall(constructor='KeyframeEffect', fn='getComputedTiming', demands=['KeyframeEffect'], returns='ComputedEffectTiming'),
    ],
    "getConfiguration": [
        PrototypeCall(constructor='MediaKeySystemAccess', fn='getConfiguration', demands=['MediaKeySystemAccess'], returns='MediaKeySystemConfiguration'),
        PrototypeCall(constructor='RTCPeerConnection', fn='getConfiguration', demands=['RTCPeerConnection'], returns='RTCConfiguration'),
    ],
    "getConstraints": [
        PrototypeCall(constructor='MediaStreamTrack', fn='getConstraints', demands=['MediaStreamTrack'], returns='MediaTrackConstraints'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='getConstraints', demands=['CanvasCaptureMediaStreamTrack'], returns='MediaTrackConstraints'),
    ],
    "getContext": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"2d"'], returns='CanvasRenderingContext2D'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"2d"', 'CanvasRenderingContext2DSettings'], returns='CanvasRenderingContext2D'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"bitmaprenderer"'], returns='ImageBitmapRenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"bitmaprenderer"', 'ImageBitmapRenderingContextSettings'], returns='ImageBitmapRenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"webgl"'], returns='WebGLRenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"webgl"', 'WebGLContextAttributes'], returns='WebGLRenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"webgl2"'], returns='WebGL2RenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', '"webgl2"', 'WebGLContextAttributes'], returns='WebGL2RenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', 'str'], returns='RenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', 'str', '*'], returns='RenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"2d"'], returns='OffscreenCanvasRenderingContext2D'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"2d"', '*'], returns='OffscreenCanvasRenderingContext2D'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"bitmaprenderer"'], returns='ImageBitmapRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"bitmaprenderer"', '*'], returns='ImageBitmapRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"webgl"'], returns='WebGLRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"webgl"', '*'], returns='WebGLRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"webgl2"'], returns='WebGL2RenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', '"webgl2"', '*'], returns='WebGL2RenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', 'OffscreenRenderingContextId'], returns='OffscreenRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', 'OffscreenRenderingContextId', '*'], returns='OffscreenRenderingContext'),
    ],
    "getContextAttributes": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getContextAttributes', demands=['CanvasRenderingContext2D'], returns='CanvasRenderingContext2DSettings'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getContextAttributes', demands=['WebGLRenderingContext'], returns='WebGLContextAttributes'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getContextAttributes', demands=['WebGL2RenderingContext'], returns='WebGLContextAttributes'),
    ],
    "getContributingSources": [
        PrototypeCall(constructor='RTCRtpReceiver', fn='getContributingSources', demands=['RTCRtpReceiver'], returns='list'),
    ],
    "getCueAsHTML": [
        PrototypeCall(constructor='VTTCue', fn='getCueAsHTML', demands=['VTTCue'], returns='DocumentFragment'),
    ],
    "getCueById": [
        PrototypeCall(constructor='TextTrackCueList', fn='getCueById', demands=['TextTrackCueList', 'str'], returns='TextTrackCue'),
    ],
    "getCurrentPosition": [
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback'], returns='None'),
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback'], returns='None'),
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback', 'PositionOptions'], returns='None'),
    ],
    "getCurrentTexture": [
        PrototypeCall(constructor='GPUCanvasContext', fn='getCurrentTexture', demands=['GPUCanvasContext'], returns='GPUTexture'),
    ],
    "getCurrentTime": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getCurrentTime', demands=['SVGAnimationElement'], returns='float'),
        PrototypeCall(constructor='SVGSetElement', fn='getCurrentTime', demands=['SVGSetElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateElement', fn='getCurrentTime', demands=['SVGAnimateElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='getCurrentTime', demands=['SVGAnimateTransformElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='getCurrentTime', demands=['SVGAnimateMotionElement'], returns='float'),
        PrototypeCall(constructor='SVGSVGElement', fn='getCurrentTime', demands=['SVGSVGElement'], returns='float'),
    ],
    "getData": [
        PrototypeCall(constructor='DataTransfer', fn='getData', demands=['DataTransfer', 'str'], returns='str'),
    ],
    "getDate": [
        PrototypeCall(constructor='Date', fn='getDate', demands=['Date'], returns='float'),
    ],
    "getDay": [
        PrototypeCall(constructor='Date', fn='getDay', demands=['Date'], returns='float'),
    ],
    "getDirectory": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='StorageManager', fn='getDirectory', demands=['StorageManager'], returns='FileSystemDirectoryHandle'),
    ],
    "getDirectoryHandle": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getDirectoryHandle', demands=['FileSystemDirectoryHandle', 'str'], returns='FileSystemDirectoryHandle'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getDirectoryHandle', demands=['FileSystemDirectoryHandle', 'str', 'FileSystemGetDirectoryOptions'], returns='FileSystemDirectoryHandle'),
    ],
    "getDisplayMedia": [
        PrototypeCall(constructor='MediaDevices', fn='getDisplayMedia', demands=['MediaDevices'], returns='MediaStream'),
        PrototypeCall(constructor='MediaDevices', fn='getDisplayMedia', demands=['MediaDevices', 'DisplayMediaStreamOptions'], returns='MediaStream'),
    ],
    "getElementById": [
        PrototypeCall(constructor='Document', fn='getElementById', demands=['Document', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementById', demands=['HTMLDocument', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='XMLDocument', fn='getElementById', demands=['XMLDocument', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='DocumentFragment', fn='getElementById', demands=['DocumentFragment', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='ShadowRoot', fn='getElementById', demands=['ShadowRoot', 'str'], returns='HTMLElement'),
        PrototypeCall(constructor='Document', fn='getElementById', demands=['Document', 'str'], returns='Element'),
        PrototypeCall(constructor='DocumentFragment', fn='getElementById', demands=['DocumentFragment', 'str'], returns='Element'),
        PrototypeCall(constructor='SVGSVGElement', fn='getElementById', demands=['SVGSVGElement', 'str'], returns='Element'),
    ],
    "getElementsByClassName": [
        PrototypeCall(constructor='Document', fn='getElementsByClassName', demands=['Document', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByClassName', demands=['HTMLDocument', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByClassName', demands=['XMLDocument', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByClassName', demands=['Element', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByClassName', demands=['MathMLElement', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByClassName', demands=['SVGElement', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByClassName', demands=['HTMLElement', 'str'], returns='HTMLCollectionOf'),
    ],
    "getElementsByName": [
        PrototypeCall(constructor='Document', fn='getElementsByName', demands=['Document', 'str'], returns='NodeListOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByName', demands=['HTMLDocument', 'str'], returns='NodeListOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByName', demands=['XMLDocument', 'str'], returns='NodeListOf'),
    ],
    "getElementsByTagName": [
        PrototypeCall(constructor='Document', fn='getElementsByTagName', demands=['Document', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagName', demands=['HTMLDocument', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagName', demands=['XMLDocument', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Document', fn='getElementsByTagName', demands=['Document', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagName', demands=['HTMLDocument', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagName', demands=['XMLDocument', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagName', demands=['Element', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagName', demands=['MathMLElement', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagName', demands=['SVGElement', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagName', demands=['HTMLElement', 'K'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagName', demands=['Element', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagName', demands=['MathMLElement', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagName', demands=['SVGElement', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagName', demands=['HTMLElement', 'str'], returns='HTMLCollectionOf'),
    ],
    "getElementsByTagNameNS": [
        PrototypeCall(constructor='Document', fn='getElementsByTagNameNS', demands=['Document', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagNameNS', demands=['HTMLDocument', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagNameNS', demands=['XMLDocument', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Document', fn='getElementsByTagNameNS', demands=['Document', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagNameNS', demands=['HTMLDocument', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagNameNS', demands=['XMLDocument', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Document', fn='getElementsByTagNameNS', demands=['Document', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagNameNS', demands=['HTMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagNameNS', demands=['XMLDocument', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Document', fn='getElementsByTagNameNS', demands=['Document', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLDocument', fn='getElementsByTagNameNS', demands=['HTMLDocument', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='XMLDocument', fn='getElementsByTagNameNS', demands=['XMLDocument', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagNameNS', demands=['Element', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagNameNS', demands=['MathMLElement', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagNameNS', demands=['SVGElement', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagNameNS', demands=['HTMLElement', '"http://www.w3.org/1999/xhtml"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagNameNS', demands=['Element', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagNameNS', demands=['MathMLElement', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagNameNS', demands=['SVGElement', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagNameNS', demands=['HTMLElement', '"http://www.w3.org/2000/svg"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagNameNS', demands=['Element', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagNameNS', demands=['MathMLElement', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagNameNS', demands=['SVGElement', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagNameNS', demands=['HTMLElement', '"http://www.w3.org/1998/Math/MathML"', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='Element', fn='getElementsByTagNameNS', demands=['Element', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='MathMLElement', fn='getElementsByTagNameNS', demands=['MathMLElement', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='SVGElement', fn='getElementsByTagNameNS', demands=['SVGElement', 'str', 'str'], returns='HTMLCollectionOf'),
        PrototypeCall(constructor='HTMLElement', fn='getElementsByTagNameNS', demands=['HTMLElement', 'str', 'str'], returns='HTMLCollectionOf'),
    ],
    "getEnclosureList": [
        PrototypeCall(constructor='SVGSVGElement', fn='getEnclosureList', demands=['SVGSVGElement', 'DOMRectReadOnly', 'SVGElement'], returns='NodeListOf<SVGCircleElement'),
    ],
    "getEndPositionOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getEndPositionOfChar', demands=['SVGTextContentElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getEndPositionOfChar', demands=['SVGTextPositioningElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getEndPositionOfChar', demands=['SVGTextPathElement', 'float'], returns='DOMPoint'),
    ],
    "getEntries": [
        PrototypeCall(constructor='Performance', fn='getEntries', demands=['Performance'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntries', demands=['PerformanceObserverEntryList'], returns='PerformanceEntryList'),
    ],
    "getEntriesByName": [
        PrototypeCall(constructor='Performance', fn='getEntriesByName', demands=['Performance', 'str'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='Performance', fn='getEntriesByName', demands=['Performance', 'str', 'str'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByName', demands=['PerformanceObserverEntryList', 'str'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByName', demands=['PerformanceObserverEntryList', 'str', 'str'], returns='PerformanceEntryList'),
    ],
    "getEntriesByType": [
        PrototypeCall(constructor='Performance', fn='getEntriesByType', demands=['Performance', 'str'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByType', demands=['PerformanceObserverEntryList', 'str'], returns='PerformanceEntryList'),
    ],
    "getError": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getError', demands=['WebGLRenderingContext'], returns='GLenum'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getError', demands=['WebGL2RenderingContext'], returns='GLenum'),
    ],
    "getExtension": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"ANGLE_instanced_arrays"'], returns='ANGLE_instanced_arrays'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"ANGLE_instanced_arrays"'], returns='ANGLE_instanced_arrays'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_blend_minmax"'], returns='EXT_blend_minmax'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_blend_minmax"'], returns='EXT_blend_minmax'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_color_buffer_float"'], returns='EXT_color_buffer_float'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_color_buffer_float"'], returns='EXT_color_buffer_float'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_color_buffer_half_float"'], returns='EXT_color_buffer_half_float'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_color_buffer_half_float"'], returns='EXT_color_buffer_half_float'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_float_blend"'], returns='EXT_float_blend'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_float_blend"'], returns='EXT_float_blend'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_frag_depth"'], returns='EXT_frag_depth'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_frag_depth"'], returns='EXT_frag_depth'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_sRGB"'], returns='EXT_sRGB'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_sRGB"'], returns='EXT_sRGB'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_shader_texture_lod"'], returns='EXT_shader_texture_lod'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_shader_texture_lod"'], returns='EXT_shader_texture_lod'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_texture_compression_bptc"'], returns='EXT_texture_compression_bptc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_texture_compression_bptc"'], returns='EXT_texture_compression_bptc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_texture_compression_rgtc"'], returns='EXT_texture_compression_rgtc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_texture_compression_rgtc"'], returns='EXT_texture_compression_rgtc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"EXT_texture_filter_anisotropic"'], returns='EXT_texture_filter_anisotropic'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"EXT_texture_filter_anisotropic"'], returns='EXT_texture_filter_anisotropic'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"KHR_parallel_shader_compile"'], returns='KHR_parallel_shader_compile'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"KHR_parallel_shader_compile"'], returns='KHR_parallel_shader_compile'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_element_index_uint"'], returns='OES_element_index_uint'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_element_index_uint"'], returns='OES_element_index_uint'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_fbo_render_mipmap"'], returns='OES_fbo_render_mipmap'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_fbo_render_mipmap"'], returns='OES_fbo_render_mipmap'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_standard_derivatives"'], returns='OES_standard_derivatives'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_standard_derivatives"'], returns='OES_standard_derivatives'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_texture_float"'], returns='OES_texture_float'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_texture_float"'], returns='OES_texture_float'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_texture_float_linear"'], returns='OES_texture_float_linear'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_texture_float_linear"'], returns='OES_texture_float_linear'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_texture_half_float"'], returns='OES_texture_half_float'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_texture_half_float"'], returns='OES_texture_half_float'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_texture_half_float_linear"'], returns='OES_texture_half_float_linear'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_texture_half_float_linear"'], returns='OES_texture_half_float_linear'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OES_vertex_array_object"'], returns='OES_vertex_array_object'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OES_vertex_array_object"'], returns='OES_vertex_array_object'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"OVR_multiview2"'], returns='OVR_multiview2'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"OVR_multiview2"'], returns='OVR_multiview2'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_color_buffer_float"'], returns='WEBGL_color_buffer_float'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_color_buffer_float"'], returns='WEBGL_color_buffer_float'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_astc"'], returns='WEBGL_compressed_texture_astc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_astc"'], returns='WEBGL_compressed_texture_astc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_etc"'], returns='WEBGL_compressed_texture_etc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_etc"'], returns='WEBGL_compressed_texture_etc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_etc1"'], returns='WEBGL_compressed_texture_etc1'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_etc1"'], returns='WEBGL_compressed_texture_etc1'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_pvrtc"'], returns='WEBGL_compressed_texture_pvrtc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_pvrtc"'], returns='WEBGL_compressed_texture_pvrtc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_s3tc"'], returns='WEBGL_compressed_texture_s3tc'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_s3tc"'], returns='WEBGL_compressed_texture_s3tc'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_compressed_texture_s3tc_srgb"'], returns='WEBGL_compressed_texture_s3tc_srgb'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_compressed_texture_s3tc_srgb"'], returns='WEBGL_compressed_texture_s3tc_srgb'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_debug_renderer_info"'], returns='WEBGL_debug_renderer_info'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_debug_renderer_info"'], returns='WEBGL_debug_renderer_info'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_debug_shaders"'], returns='WEBGL_debug_shaders'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_debug_shaders"'], returns='WEBGL_debug_shaders'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_depth_texture"'], returns='WEBGL_depth_texture'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_depth_texture"'], returns='WEBGL_depth_texture'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_draw_buffers"'], returns='WEBGL_draw_buffers'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_draw_buffers"'], returns='WEBGL_draw_buffers'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_lose_context"'], returns='WEBGL_lose_context'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_lose_context"'], returns='WEBGL_lose_context'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', '"WEBGL_multi_draw"'], returns='WEBGL_multi_draw'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', '"WEBGL_multi_draw"'], returns='WEBGL_multi_draw'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', 'str'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', 'str'], returns='*'),
    ],
    "getExtentOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getExtentOfChar', demands=['SVGTextContentElement', 'float'], returns='DOMRect'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getExtentOfChar', demands=['SVGTextPositioningElement', 'float'], returns='DOMRect'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getExtentOfChar', demands=['SVGTextPathElement', 'float'], returns='DOMRect'),
    ],
    "getFile": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'FileSystemFlags', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='getFile', demands=['FileSystemFileHandle'], returns='File'),
    ],
    "getFileHandle": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getFileHandle', demands=['FileSystemDirectoryHandle', 'str'], returns='FileSystemFileHandle'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getFileHandle', demands=['FileSystemDirectoryHandle', 'str', 'FileSystemGetFileOptions'], returns='FileSystemFileHandle'),
    ],
    "getFingerprints": [
        PrototypeCall(constructor='RTCCertificate', fn='getFingerprints', demands=['RTCCertificate'], returns='list'),
    ],
    "getFloat16": [
        PrototypeCall(constructor='DataView', fn='getFloat16', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getFloat16', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getFloat32": [
        PrototypeCall(constructor='DataView', fn='getFloat32', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getFloat32', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getFloat64": [
        PrototypeCall(constructor='DataView', fn='getFloat64', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getFloat64', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getFloatFrequencyData": [
        PrototypeCall(constructor='AnalyserNode', fn='getFloatFrequencyData', demands=['AnalyserNode', 'Float32Array'], returns='None'),
    ],
    "getFloatTimeDomainData": [
        PrototypeCall(constructor='AnalyserNode', fn='getFloatTimeDomainData', demands=['AnalyserNode', 'Float32Array'], returns='None'),
    ],
    "getFragDataLocation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getFragDataLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
    ],
    "getFramebufferAttachmentParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getFramebufferAttachmentParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getFramebufferAttachmentParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getFrequencyResponse": [
        PrototypeCall(constructor='BiquadFilterNode', fn='getFrequencyResponse', demands=['BiquadFilterNode', 'Float32Array', 'Float32Array', 'Float32Array'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='getFrequencyResponse', demands=['IIRFilterNode', 'Float32Array', 'Float32Array', 'Float32Array'], returns='None'),
    ],
    "getFullYear": [
        PrototypeCall(constructor='Date', fn='getFullYear', demands=['Date'], returns='float'),
    ],
    "getGamepads": [
        PrototypeCall(constructor='Navigator', fn='getGamepads', demands=['Navigator'], returns='(Gamepad'),
    ],
    "getHTML": [
        PrototypeCall(constructor='Element', fn='getHTML', demands=['Element'], returns='str'),
        PrototypeCall(constructor='MathMLElement', fn='getHTML', demands=['MathMLElement'], returns='str'),
        PrototypeCall(constructor='SVGElement', fn='getHTML', demands=['SVGElement'], returns='str'),
        PrototypeCall(constructor='HTMLElement', fn='getHTML', demands=['HTMLElement'], returns='str'),
        PrototypeCall(constructor='Element', fn='getHTML', demands=['Element', 'GetHTMLOptions'], returns='str'),
        PrototypeCall(constructor='MathMLElement', fn='getHTML', demands=['MathMLElement', 'GetHTMLOptions'], returns='str'),
        PrototypeCall(constructor='SVGElement', fn='getHTML', demands=['SVGElement', 'GetHTMLOptions'], returns='str'),
        PrototypeCall(constructor='HTMLElement', fn='getHTML', demands=['HTMLElement', 'GetHTMLOptions'], returns='str'),
        PrototypeCall(constructor='ShadowRoot', fn='getHTML', demands=['ShadowRoot'], returns='str'),
        PrototypeCall(constructor='ShadowRoot', fn='getHTML', demands=['ShadowRoot', 'GetHTMLOptions'], returns='str'),
    ],
    "getHours": [
        PrototypeCall(constructor='Date', fn='getHours', demands=['Date'], returns='float'),
    ],
    "getImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getImageData', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getImageData', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getImageData', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'ImageDataSettings'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getImageData', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'ImageDataSettings'], returns='ImageData'),
    ],
    "getIndexedParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getIndexedParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint'], returns='*'),
    ],
    "getInt16": [
        PrototypeCall(constructor='DataView', fn='getInt16', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getInt16', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getInt32": [
        PrototypeCall(constructor='DataView', fn='getInt32', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getInt32', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getInt8": [
        PrototypeCall(constructor='DataView', fn='getInt8', demands=['DataView', 'float'], returns='float'),
    ],
    "getInternalformatParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getInternalformatParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getIntersectionList": [
        PrototypeCall(constructor='SVGSVGElement', fn='getIntersectionList', demands=['SVGSVGElement', 'DOMRectReadOnly', 'SVGElement'], returns='NodeListOf<SVGCircleElement'),
    ],
    "getItem": [
        PrototypeCall(constructor='SVGLengthList', fn='getItem', demands=['SVGLengthList', 'float'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='getItem', demands=['SVGNumberList', 'float'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='getItem', demands=['SVGPointList', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='getItem', demands=['SVGStringList', 'float'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='getItem', demands=['SVGTransformList', 'float'], returns='SVGTransform'),
        PrototypeCall(constructor='Storage', fn='getItem', demands=['Storage', 'str'], returns='str'),
        PrototypeCall(constructor='VBArray', fn='getItem', demands=['VBArray', 'float', '*'], returns='T'),
    ],
    "getKey": [
        PrototypeCall(constructor='IDBIndex', fn='getKey', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest<IDBValidKey'),
        PrototypeCall(constructor='IDBObjectStore', fn='getKey', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest<IDBValidKey'),
        PrototypeCall(constructor='PushSubscription', fn='getKey', demands=['PushSubscription', 'PushEncryptionKeyName'], returns='ArrayBuffer'),
    ],
    "getKeyframes": [
        PrototypeCall(constructor='KeyframeEffect', fn='getKeyframes', demands=['KeyframeEffect'], returns='list'),
    ],
    "getLineDash": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getLineDash', demands=['CanvasRenderingContext2D'], returns='list'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getLineDash', demands=['OffscreenCanvasRenderingContext2D'], returns='list'),
    ],
    "getMetadata": [
        PrototypeCall(constructor='RTCEncodedAudioFrame', fn='getMetadata', demands=['RTCEncodedAudioFrame'], returns='RTCEncodedAudioFrameMetadata'),
        PrototypeCall(constructor='RTCEncodedVideoFrame', fn='getMetadata', demands=['RTCEncodedVideoFrame'], returns='RTCEncodedVideoFrameMetadata'),
    ],
    "getMilliseconds": [
        PrototypeCall(constructor='Date', fn='getMilliseconds', demands=['Date'], returns='float'),
    ],
    "getMinutes": [
        PrototypeCall(constructor='Date', fn='getMinutes', demands=['Date'], returns='float'),
    ],
    "getModifierState": [
        PrototypeCall(constructor='KeyboardEvent', fn='getModifierState', demands=['KeyboardEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='MouseEvent', fn='getModifierState', demands=['MouseEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='PointerEvent', fn='getModifierState', demands=['PointerEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='DragEvent', fn='getModifierState', demands=['DragEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='WheelEvent', fn='getModifierState', demands=['WheelEvent', 'str'], returns='bool'),
    ],
    "getMonth": [
        PrototypeCall(constructor='Date', fn='getMonth', demands=['Date'], returns='float'),
    ],
    "getName": [
        PrototypeCall(constructor='CustomElementRegistry', fn='getName', demands=['CustomElementRegistry', 'CustomElementConstructor'], returns='str'),
    ],
    "getNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='getNamedItem', demands=['NamedNodeMap', 'str'], returns='Attr'),
    ],
    "getNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='getNamedItemNS', demands=['NamedNodeMap', 'str', 'str'], returns='Attr'),
    ],
    "getNotifications": [
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='getNotifications', demands=['ServiceWorkerRegistration'], returns='list'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='getNotifications', demands=['ServiceWorkerRegistration', 'GetNotificationOptions'], returns='list'),
    ],
    "getNumberOfChars": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getNumberOfChars', demands=['SVGTextContentElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getNumberOfChars', demands=['SVGTextPositioningElement'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getNumberOfChars', demands=['SVGTextPathElement'], returns='float'),
    ],
    "getOutputTimestamp": [
        PrototypeCall(constructor='AudioContext', fn='getOutputTimestamp', demands=['AudioContext'], returns='AudioTimestamp'),
    ],
    "getOwnPropertyDescriptor": [
        PrototypeCall(constructor='ObjectConstructor', fn='getOwnPropertyDescriptor', demands=['ObjectConstructor', '*', 'PropertyKey'], returns='PropertyDescriptor'),
        PrototypeCall(constructor='ProxyHandler', fn='getOwnPropertyDescriptor', demands=['ProxyHandler', 'T', 'str'], returns='PropertyDescriptor'),
    ],
    "getOwnPropertyDescriptors": [
        PrototypeCall(constructor='ObjectConstructor', fn='getOwnPropertyDescriptors', demands=['ObjectConstructor', 'T'], returns='{[PinkeyofT]:TypedPropertyDescriptor'),
    ],
    "getOwnPropertyNames": [
        PrototypeCall(constructor='ObjectConstructor', fn='getOwnPropertyNames', demands=['ObjectConstructor', '*'], returns='list'),
    ],
    "getOwnPropertySymbols": [
        PrototypeCall(constructor='ObjectConstructor', fn='getOwnPropertySymbols', demands=['ObjectConstructor', '*'], returns='list'),
    ],
    "getParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getParameter', demands=['WebGLRenderingContext', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getParameter', demands=['WebGL2RenderingContext', 'GLenum'], returns='*'),
        PrototypeCall(constructor='XSLTProcessor', fn='getParameter', demands=['XSLTProcessor', 'str', 'str'], returns='*'),
    ],
    "getParameters": [
        PrototypeCall(constructor='RTCRtpReceiver', fn='getParameters', demands=['RTCRtpReceiver'], returns='RTCRtpReceiveParameters'),
        PrototypeCall(constructor='RTCRtpSender', fn='getParameters', demands=['RTCRtpSender'], returns='RTCRtpSendParameters'),
    ],
    "getParent": [
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemFileEntry', fn='getParent', demands=['FileSystemFileEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getParent', demands=['FileSystemDirectoryEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileEntry', fn='getParent', demands=['FileSystemFileEntry', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getParent', demands=['FileSystemDirectoryEntry', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileEntry', fn='getParent', demands=['FileSystemFileEntry', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getParent', demands=['FileSystemDirectoryEntry', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
    ],
    "getPhotoCapabilities": [
        PrototypeCall(constructor='ImageCapture', fn='getPhotoCapabilities', demands=['ImageCapture'], returns='PhotoCapabilities'),
    ],
    "getPhotoSettings": [
        PrototypeCall(constructor='ImageCapture', fn='getPhotoSettings', demands=['ImageCapture'], returns='PhotoSettings'),
    ],
    "getPointAtLength": [
        PrototypeCall(constructor='SVGGeometryElement', fn='getPointAtLength', demands=['SVGGeometryElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGRectElement', fn='getPointAtLength', demands=['SVGRectElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGEllipseElement', fn='getPointAtLength', demands=['SVGEllipseElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGPolygonElement', fn='getPointAtLength', demands=['SVGPolygonElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGPolylineElement', fn='getPointAtLength', demands=['SVGPolylineElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGCircleElement', fn='getPointAtLength', demands=['SVGCircleElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGLineElement', fn='getPointAtLength', demands=['SVGLineElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGPathElement', fn='getPointAtLength', demands=['SVGPathElement', 'float'], returns='DOMPoint'),
    ],
    "getPredictedEvents": [
        PrototypeCall(constructor='PointerEvent', fn='getPredictedEvents', demands=['PointerEvent'], returns='list'),
    ],
    "getProgramInfoLog": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getProgramInfoLog', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='str'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getProgramInfoLog', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='str'),
    ],
    "getProgramParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getProgramParameter', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getProgramParameter', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLenum'], returns='*'),
    ],
    "getPropertyPriority": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='getPropertyPriority', demands=['CSSStyleDeclaration', 'str'], returns='str'),
    ],
    "getPropertyValue": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='getPropertyValue', demands=['CSSStyleDeclaration', 'str'], returns='str'),
    ],
    "getPrototypeOf": [
        PrototypeCall(constructor='ObjectConstructor', fn='getPrototypeOf', demands=['ObjectConstructor', '*'], returns='*'),
        PrototypeCall(constructor='ProxyHandler', fn='getPrototypeOf', demands=['ProxyHandler', 'T'], returns='dict'),
    ],
    "getPublicKey": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getPublicKey', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "getPublicKeyAlgorithm": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getPublicKeyAlgorithm', demands=['AuthenticatorAttestationResponse'], returns='COSEAlgorithmIdentifier'),
    ],
    "getQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getQuery', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='WebGLQuery'),
    ],
    "getQueryParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getQueryParameter', demands=['WebGL2RenderingContext', 'WebGLQuery', 'GLenum'], returns='*'),
    ],
    "getRandomValues": [
        PrototypeCall(constructor='Crypto', fn='getRandomValues', demands=['Crypto', 'T'], returns='T'),
    ],
    "getRangeAt": [
        PrototypeCall(constructor='Selection', fn='getRangeAt', demands=['Selection', 'float'], returns='Range'),
    ],
    "getReader": [
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream', '{mode:"byob"}'], returns='ReadableStreamBYOBReader'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getReader', demands=['WebTransportReceiveStream', '{mode:"byob"}'], returns='ReadableStreamBYOBReader'),
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream'], returns='ReadableStreamDefaultReader'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getReader', demands=['WebTransportReceiveStream'], returns='ReadableStreamDefaultReader'),
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream'], returns='ReadableStreamReader'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getReader', demands=['WebTransportReceiveStream'], returns='ReadableStreamReader'),
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream', 'ReadableStreamGetReaderOptions'], returns='ReadableStreamReader'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getReader', demands=['WebTransportReceiveStream', 'ReadableStreamGetReaderOptions'], returns='ReadableStreamReader'),
    ],
    "getReceivers": [
        PrototypeCall(constructor='RTCPeerConnection', fn='getReceivers', demands=['RTCPeerConnection'], returns='list'),
    ],
    "getRegistration": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistration', demands=['ServiceWorkerContainer'], returns='Promise<ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistration', demands=['ServiceWorkerContainer', 'str'], returns='Promise<ServiceWorkerRegistration'),
    ],
    "getRegistrations": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistrations', demands=['ServiceWorkerContainer'], returns='ReadonlyArray'),
    ],
    "getRemoteCertificates": [
        PrototypeCall(constructor='RTCDtlsTransport', fn='getRemoteCertificates', demands=['RTCDtlsTransport'], returns='list'),
    ],
    "getRenderbufferParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getRenderbufferParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getRenderbufferParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getResponseHeader": [
        PrototypeCall(constructor='XMLHttpRequest', fn='getResponseHeader', demands=['XMLHttpRequest', 'str'], returns='str'),
    ],
    "getRootNode": [
        PrototypeCall(constructor='Node', fn='getRootNode', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='DocumentType', fn='getRootNode', demands=['DocumentType'], returns='Node'),
        PrototypeCall(constructor='CharacterData', fn='getRootNode', demands=['CharacterData'], returns='Node'),
        PrototypeCall(constructor='Element', fn='getRootNode', demands=['Element'], returns='Node'),
        PrototypeCall(constructor='Attr', fn='getRootNode', demands=['Attr'], returns='Node'),
        PrototypeCall(constructor='Document', fn='getRootNode', demands=['Document'], returns='Node'),
        PrototypeCall(constructor='DocumentFragment', fn='getRootNode', demands=['DocumentFragment'], returns='Node'),
        PrototypeCall(constructor='Node', fn='getRootNode', demands=['Node', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='DocumentType', fn='getRootNode', demands=['DocumentType', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='CharacterData', fn='getRootNode', demands=['CharacterData', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='Element', fn='getRootNode', demands=['Element', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='Attr', fn='getRootNode', demands=['Attr', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='Document', fn='getRootNode', demands=['Document', 'GetRootNodeOptions'], returns='Node'),
        PrototypeCall(constructor='DocumentFragment', fn='getRootNode', demands=['DocumentFragment', 'GetRootNodeOptions'], returns='Node'),
    ],
    "getRotationOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getRotationOfChar', demands=['SVGTextContentElement', 'float'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getRotationOfChar', demands=['SVGTextPositioningElement', 'float'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getRotationOfChar', demands=['SVGTextPathElement', 'float'], returns='float'),
    ],
    "getSVGDocument": [
        PrototypeCall(constructor='HTMLEmbedElement', fn='getSVGDocument', demands=['HTMLEmbedElement'], returns='Document'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='getSVGDocument', demands=['HTMLIFrameElement'], returns='Document'),
        PrototypeCall(constructor='HTMLObjectElement', fn='getSVGDocument', demands=['HTMLObjectElement'], returns='Document'),
    ],
    "getSamplerParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSamplerParameter', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum'], returns='*'),
    ],
    "getScreenCTM": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getScreenCTM', demands=['SVGGraphicsElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getScreenCTM', demands=['SVGTextContentElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='getScreenCTM', demands=['SVGForeignObjectElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGGElement', fn='getScreenCTM', demands=['SVGGElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGSwitchElement', fn='getScreenCTM', demands=['SVGSwitchElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGUseElement', fn='getScreenCTM', demands=['SVGUseElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGImageElement', fn='getScreenCTM', demands=['SVGImageElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGSVGElement', fn='getScreenCTM', demands=['SVGSVGElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGGeometryElement', fn='getScreenCTM', demands=['SVGGeometryElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGAElement', fn='getScreenCTM', demands=['SVGAElement'], returns='DOMMatrix'),
        PrototypeCall(constructor='SVGDefsElement', fn='getScreenCTM', demands=['SVGDefsElement'], returns='DOMMatrix'),
    ],
    "getSeconds": [
        PrototypeCall(constructor='Date', fn='getSeconds', demands=['Date'], returns='float'),
    ],
    "getSelectedCandidatePair": [
        PrototypeCall(constructor='RTCIceTransport', fn='getSelectedCandidatePair', demands=['RTCIceTransport'], returns='RTCIceCandidatePair'),
    ],
    "getSelection": [
        PrototypeCall(constructor='Document', fn='getSelection', demands=['Document'], returns='Selection'),
        PrototypeCall(constructor='HTMLDocument', fn='getSelection', demands=['HTMLDocument'], returns='Selection'),
        PrototypeCall(constructor='XMLDocument', fn='getSelection', demands=['XMLDocument'], returns='Selection'),
        DirectCall(fn='getSelection', receiver=None, demands=[], returns='Selection'),
    ],
    "getSenders": [
        PrototypeCall(constructor='RTCPeerConnection', fn='getSenders', demands=['RTCPeerConnection'], returns='list'),
    ],
    "getSetCookie": [
        PrototypeCall(constructor='Headers', fn='getSetCookie', demands=['Headers'], returns='list'),
    ],
    "getSettings": [
        PrototypeCall(constructor='MediaStreamTrack', fn='getSettings', demands=['MediaStreamTrack'], returns='MediaTrackSettings'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='getSettings', demands=['CanvasCaptureMediaStreamTrack'], returns='MediaTrackSettings'),
    ],
    "getShaderInfoLog": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderInfoLog', demands=['WebGLRenderingContext', 'WebGLShader'], returns='str'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderInfoLog', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='str'),
    ],
    "getShaderParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderParameter', demands=['WebGLRenderingContext', 'WebGLShader', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderParameter', demands=['WebGL2RenderingContext', 'WebGLShader', 'GLenum'], returns='*'),
    ],
    "getShaderPrecisionFormat": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderPrecisionFormat', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='WebGLShaderPrecisionFormat'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderPrecisionFormat', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='WebGLShaderPrecisionFormat'),
    ],
    "getShaderSource": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderSource', demands=['WebGLRenderingContext', 'WebGLShader'], returns='str'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderSource', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='str'),
    ],
    "getSimpleDuration": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getSimpleDuration', demands=['SVGAnimationElement'], returns='float'),
        PrototypeCall(constructor='SVGSetElement', fn='getSimpleDuration', demands=['SVGSetElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateElement', fn='getSimpleDuration', demands=['SVGAnimateElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='getSimpleDuration', demands=['SVGAnimateTransformElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='getSimpleDuration', demands=['SVGAnimateMotionElement'], returns='float'),
    ],
    "getStartPositionOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getStartPositionOfChar', demands=['SVGTextContentElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getStartPositionOfChar', demands=['SVGTextPositioningElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getStartPositionOfChar', demands=['SVGTextPathElement', 'float'], returns='DOMPoint'),
    ],
    "getStartTime": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getStartTime', demands=['SVGAnimationElement'], returns='float'),
        PrototypeCall(constructor='SVGSetElement', fn='getStartTime', demands=['SVGSetElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateElement', fn='getStartTime', demands=['SVGAnimateElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='getStartTime', demands=['SVGAnimateTransformElement'], returns='float'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='getStartTime', demands=['SVGAnimateMotionElement'], returns='float'),
    ],
    "getState": [
        PrototypeCall(constructor='NavigationHistoryEntry', fn='getState', demands=['NavigationHistoryEntry'], returns='*'),
        PrototypeCall(constructor='NavigationPreloadManager', fn='getState', demands=['NavigationPreloadManager'], returns='NavigationPreloadState'),
    ],
    "getStats": [
        PrototypeCall(constructor='RTCPeerConnection', fn='getStats', demands=['RTCPeerConnection'], returns='RTCStatsReport'),
        PrototypeCall(constructor='RTCPeerConnection', fn='getStats', demands=['RTCPeerConnection', 'MediaStreamTrack'], returns='RTCStatsReport'),
        PrototypeCall(constructor='RTCRtpReceiver', fn='getStats', demands=['RTCRtpReceiver'], returns='RTCStatsReport'),
        PrototypeCall(constructor='RTCRtpSender', fn='getStats', demands=['RTCRtpSender'], returns='RTCStatsReport'),
        PrototypeCall(constructor='WebTransportSendStream', fn='getStats', demands=['WebTransportSendStream'], returns='WebTransportSendStreamStats'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getStats', demands=['WebTransportReceiveStream'], returns='WebTransportReceiveStreamStats'),
        PrototypeCall(constructor='WebTransportSendGroup', fn='getStats', demands=['WebTransportSendGroup'], returns='WebTransportSendStreamStats'),
    ],
    "getStatusForPolicy": [
        PrototypeCall(constructor='MediaKeys', fn='getStatusForPolicy', demands=['MediaKeys'], returns='MediaKeyStatus'),
        PrototypeCall(constructor='MediaKeys', fn='getStatusForPolicy', demands=['MediaKeys', 'MediaKeysPolicy'], returns='MediaKeyStatus'),
    ],
    "getSubStringLength": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getSubStringLength', demands=['SVGTextContentElement', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='getSubStringLength', demands=['SVGTextPositioningElement', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='SVGTextPathElement', fn='getSubStringLength', demands=['SVGTextPathElement', 'float', 'float'], returns='float'),
    ],
    "getSubscription": [
        PrototypeCall(constructor='PushManager', fn='getSubscription', demands=['PushManager'], returns='Promise<PushSubscription'),
    ],
    "getSubscriptions": [
        PrototypeCall(constructor='CookieStoreManager', fn='getSubscriptions', demands=['CookieStoreManager'], returns='list'),
    ],
    "getSupportedConstraints": [
        PrototypeCall(constructor='MediaDevices', fn='getSupportedConstraints', demands=['MediaDevices'], returns='MediaTrackSupportedConstraints'),
    ],
    "getSupportedExtensions": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getSupportedExtensions', demands=['WebGLRenderingContext'], returns='string[]'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSupportedExtensions', demands=['WebGL2RenderingContext'], returns='string[]'),
    ],
    "getSupportedProfiles": [
        PrototypeCall(constructor='WEBGL_compressed_texture_astc', fn='getSupportedProfiles', demands=['WEBGL_compressed_texture_astc'], returns='list'),
    ],
    "getSyncParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSyncParameter', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLenum'], returns='*'),
    ],
    "getSynchronizationSources": [
        PrototypeCall(constructor='RTCRtpReceiver', fn='getSynchronizationSources', demands=['RTCRtpReceiver'], returns='list'),
    ],
    "getTargetRanges": [
        PrototypeCall(constructor='InputEvent', fn='getTargetRanges', demands=['InputEvent'], returns='list'),
    ],
    "getTexParameter": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getTexParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getTexParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getTime": [
        PrototypeCall(constructor='Date', fn='getTime', demands=['Date'], returns='float'),
    ],
    "getTimezoneOffset": [
        PrototypeCall(constructor='Date', fn='getTimezoneOffset', demands=['Date'], returns='float'),
    ],
    "getTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='getTiming', demands=['AnimationEffect'], returns='EffectTiming'),
        PrototypeCall(constructor='KeyframeEffect', fn='getTiming', demands=['KeyframeEffect'], returns='EffectTiming'),
    ],
    "getTotalLength": [
        PrototypeCall(constructor='SVGGeometryElement', fn='getTotalLength', demands=['SVGGeometryElement'], returns='float'),
        PrototypeCall(constructor='SVGRectElement', fn='getTotalLength', demands=['SVGRectElement'], returns='float'),
        PrototypeCall(constructor='SVGEllipseElement', fn='getTotalLength', demands=['SVGEllipseElement'], returns='float'),
        PrototypeCall(constructor='SVGPolygonElement', fn='getTotalLength', demands=['SVGPolygonElement'], returns='float'),
        PrototypeCall(constructor='SVGPolylineElement', fn='getTotalLength', demands=['SVGPolylineElement'], returns='float'),
        PrototypeCall(constructor='SVGCircleElement', fn='getTotalLength', demands=['SVGCircleElement'], returns='float'),
        PrototypeCall(constructor='SVGLineElement', fn='getTotalLength', demands=['SVGLineElement'], returns='float'),
        PrototypeCall(constructor='SVGPathElement', fn='getTotalLength', demands=['SVGPathElement'], returns='float'),
    ],
    "getTrackById": [
        PrototypeCall(constructor='MediaStream', fn='getTrackById', demands=['MediaStream', 'str'], returns='MediaStreamTrack'),
        PrototypeCall(constructor='TextTrackList', fn='getTrackById', demands=['TextTrackList', 'str'], returns='TextTrack'),
    ],
    "getTracks": [
        PrototypeCall(constructor='MediaStream', fn='getTracks', demands=['MediaStream'], returns='list'),
    ],
    "getTransceivers": [
        PrototypeCall(constructor='RTCPeerConnection', fn='getTransceivers', demands=['RTCPeerConnection'], returns='list'),
    ],
    "getTransform": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getTransform', demands=['CanvasRenderingContext2D'], returns='DOMMatrix'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='DOMMatrix'),
    ],
    "getTransformFeedbackVarying": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getTransformFeedbackVarying', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "getTranslatedShaderSource": [
        PrototypeCall(constructor='WEBGL_debug_shaders', fn='getTranslatedShaderSource', demands=['WEBGL_debug_shaders', 'WebGLShader'], returns='str'),
    ],
    "getTransports": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getTransports', demands=['AuthenticatorAttestationResponse'], returns='list'),
    ],
    "getType": [
        PrototypeCall(constructor='ClipboardItem', fn='getType', demands=['ClipboardItem', 'str'], returns='Blob'),
    ],
    "getUTCDate": [
        PrototypeCall(constructor='Date', fn='getUTCDate', demands=['Date'], returns='float'),
    ],
    "getUTCDay": [
        PrototypeCall(constructor='Date', fn='getUTCDay', demands=['Date'], returns='float'),
    ],
    "getUTCFullYear": [
        PrototypeCall(constructor='Date', fn='getUTCFullYear', demands=['Date'], returns='float'),
    ],
    "getUTCHours": [
        PrototypeCall(constructor='Date', fn='getUTCHours', demands=['Date'], returns='float'),
    ],
    "getUTCMilliseconds": [
        PrototypeCall(constructor='Date', fn='getUTCMilliseconds', demands=['Date'], returns='float'),
    ],
    "getUTCMinutes": [
        PrototypeCall(constructor='Date', fn='getUTCMinutes', demands=['Date'], returns='float'),
    ],
    "getUTCMonth": [
        PrototypeCall(constructor='Date', fn='getUTCMonth', demands=['Date'], returns='float'),
    ],
    "getUTCSeconds": [
        PrototypeCall(constructor='Date', fn='getUTCSeconds', demands=['Date'], returns='float'),
    ],
    "getUint16": [
        PrototypeCall(constructor='DataView', fn='getUint16', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getUint16', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getUint32": [
        PrototypeCall(constructor='DataView', fn='getUint32', demands=['DataView', 'float'], returns='float'),
        PrototypeCall(constructor='DataView', fn='getUint32', demands=['DataView', 'float', 'bool'], returns='float'),
    ],
    "getUint8": [
        PrototypeCall(constructor='DataView', fn='getUint8', demands=['DataView', 'float'], returns='float'),
    ],
    "getUniform": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getUniform', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLUniformLocation'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniform', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLUniformLocation'], returns='*'),
    ],
    "getUniformBlockIndex": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformBlockIndex', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLuint'),
    ],
    "getUniformIndices": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformIndices', demands=['WebGL2RenderingContext', 'WebGLProgram', 'list'], returns='GLuint[]'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformIndices', demands=['WebGL2RenderingContext', 'WebGLProgram', 'Iterable'], returns='GLuint[]'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformIndices', demands=['WebGL2RenderingContext', 'WebGLProgram', 'Iterable'], returns='Iterable<GLuint>'),
    ],
    "getUniformLocation": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getUniformLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'str'], returns='WebGLUniformLocation'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='WebGLUniformLocation'),
    ],
    "getUserMedia": [
        PrototypeCall(constructor='MediaDevices', fn='getUserMedia', demands=['MediaDevices'], returns='MediaStream'),
        PrototypeCall(constructor='MediaDevices', fn='getUserMedia', demands=['MediaDevices', 'MediaStreamConstraints'], returns='MediaStream'),
    ],
    "getVertexAttrib": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getVertexAttrib', demands=['WebGLRenderingContext', 'GLuint', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getVertexAttrib', demands=['WebGL2RenderingContext', 'GLuint', 'GLenum'], returns='*'),
    ],
    "getVertexAttribOffset": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='getVertexAttribOffset', demands=['WebGLRenderingContext', 'GLuint', 'GLenum'], returns='GLintptr'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getVertexAttribOffset', demands=['WebGL2RenderingContext', 'GLuint', 'GLenum'], returns='GLintptr'),
    ],
    "getVideoPlaybackQuality": [
        PrototypeCall(constructor='HTMLVideoElement', fn='getVideoPlaybackQuality', demands=['HTMLVideoElement'], returns='VideoPlaybackQuality'),
    ],
    "getVideoTracks": [
        PrototypeCall(constructor='MediaStream', fn='getVideoTracks', demands=['MediaStream'], returns='list'),
    ],
    "getVoices": [
        PrototypeCall(constructor='SpeechSynthesis', fn='getVoices', demands=['SpeechSynthesis'], returns='list'),
    ],
    "getWriter": [
        PrototypeCall(constructor='WebTransportSendStream', fn='getWriter', demands=['WebTransportSendStream'], returns='WritableStreamDefaultWriter'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='getWriter', demands=['FileSystemWritableFileStream'], returns='WritableStreamDefaultWriter'),
        PrototypeCall(constructor='WebTransportSendStream', fn='getWriter', demands=['WebTransportSendStream'], returns='WebTransportWriter'),
    ],
    "global": [
        FieldCall(field='global', demands=['regex'], returns='bool'),
    ],
    "globalAlpha": [
        FieldCall(field='globalAlpha', demands=['CanvasCompositing'], returns='float'),
        FieldCall(field='globalAlpha', demands=['CanvasCompositing', 'float'], returns='None'),
    ],
    "globalCompositeOperation": [
        FieldCall(field='globalCompositeOperation', demands=['CanvasCompositing'], returns='GlobalCompositeOperation'),
        FieldCall(field='globalCompositeOperation', demands=['CanvasCompositing', 'GlobalCompositeOperation'], returns='None'),
    ],
    "go": [
        PrototypeCall(constructor='History', fn='go', demands=['History'], returns='None'),
        PrototypeCall(constructor='History', fn='go', demands=['History', 'float'], returns='None'),
    ],
    "gotpointercapture": [
        FieldCall(field='gotpointercapture', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='gotpointercapture', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "gpu": [
        FieldCall(field='gpu', demands=['Navigator'], returns='GPU'),
    ],
    "gradientTransform": [
        FieldCall(field='gradientTransform', demands=['SVGGradientElement'], returns='SVGAnimatedTransformList'),
    ],
    "gradientUnits": [
        FieldCall(field='gradientUnits', demands=['SVGGradientElement'], returns='SVGAnimatedEnumeration'),
    ],
    "grid": [
        FieldCall(field='grid', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='grid', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridArea": [
        FieldCall(field='gridArea', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridArea', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridAutoColumns": [
        FieldCall(field='gridAutoColumns', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridAutoColumns', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridAutoFlow": [
        FieldCall(field='gridAutoFlow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridAutoFlow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridAutoRows": [
        FieldCall(field='gridAutoRows', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridAutoRows', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridColumn": [
        FieldCall(field='gridColumn', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridColumn', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridColumnEnd": [
        FieldCall(field='gridColumnEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridColumnEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridColumnGap": [
        FieldCall(field='gridColumnGap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridColumnGap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridColumnStart": [
        FieldCall(field='gridColumnStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridColumnStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridGap": [
        FieldCall(field='gridGap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridGap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridRow": [
        FieldCall(field='gridRow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridRow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridRowEnd": [
        FieldCall(field='gridRowEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridRowEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridRowGap": [
        FieldCall(field='gridRowGap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridRowGap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridRowStart": [
        FieldCall(field='gridRowStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridRowStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridTemplate": [
        FieldCall(field='gridTemplate', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridTemplate', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridTemplateAreas": [
        FieldCall(field='gridTemplateAreas', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridTemplateAreas', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridTemplateColumns": [
        FieldCall(field='gridTemplateColumns', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridTemplateColumns', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "gridTemplateRows": [
        FieldCall(field='gridTemplateRows', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='gridTemplateRows', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "group": [
        PrototypeCall(constructor='Console', fn='group', demands=['Console', '*'], returns='None'),
    ],
    "groupBy": [
        PrototypeCall(constructor='MapConstructor', fn='groupBy', demands=['MapConstructor', 'Iterable', '(item:T,index:number)=>K'], returns='Map'),
        PrototypeCall(constructor='ObjectConstructor', fn='groupBy', demands=['ObjectConstructor', 'Iterable', '(item:T,index:number)=>K'], returns='Partial'),
    ],
    "groupCollapsed": [
        PrototypeCall(constructor='Console', fn='groupCollapsed', demands=['Console', '*'], returns='None'),
    ],
    "groupEnd": [
        PrototypeCall(constructor='Console', fn='groupEnd', demands=['Console'], returns='None'),
    ],
    "groupId": [
        FieldCall(field='groupId', demands=['MediaTrackCapabilities'], returns='str'),
        FieldCall(field='groupId', demands=['MediaTrackCapabilities', 'str'], returns='None'),
        FieldCall(field='groupId', demands=['MediaTrackConstraintSet'], returns='ConstrainDOMString'),
        FieldCall(field='groupId', demands=['MediaTrackConstraintSet', 'ConstrainDOMString'], returns='None'),
        FieldCall(field='groupId', demands=['MediaTrackSettings'], returns='str'),
        FieldCall(field='groupId', demands=['MediaTrackSettings', 'str'], returns='None'),
        FieldCall(field='groupId', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='groupId', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='groupId', demands=['MediaDeviceInfo'], returns='str'),
    ],
    "groups": [
        FieldCall(field='groups', demands=['RegExpIndicesArray'], returns='{[key:string]:[number,number];}'),
        FieldCall(field='groups', demands=['RegExpIndicesArray', '{[key:string]:[number,number];}'], returns='None'),
        FieldCall(field='groups', demands=['URLPatternComponentResult'], returns='Record<string,string'),
        FieldCall(field='groups', demands=['URLPatternComponentResult', 'Record<string,string'], returns='None'),
        FieldCall(field='groups', demands=['RegExpMatchArray'], returns='{[key:string]:string;}'),
        FieldCall(field='groups', demands=['RegExpMatchArray', '{[key:string]:string;}'], returns='None'),
        FieldCall(field='groups', demands=['RegExpExecArray'], returns='{[key:string]:string;}'),
        FieldCall(field='groups', demands=['RegExpExecArray', '{[key:string]:string;}'], returns='None'),
    ],
    "grow": [
        PrototypeCall(constructor='SharedArrayBuffer', fn='grow', demands=['SharedArrayBuffer'], returns='None'),
        PrototypeCall(constructor='SharedArrayBuffer', fn='grow', demands=['SharedArrayBuffer', 'float'], returns='None'),
    ],
    "growable": [
        PrototypeCall(constructor='SharedArrayBuffer', fn='growable', demands=['SharedArrayBuffer'], returns='bool'),
    ],
    "h1": [
        FieldCall(field='h1', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h1', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "h2": [
        FieldCall(field='h2', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h2', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "h3": [
        FieldCall(field='h3', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h3', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "h4": [
        FieldCall(field='h4', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h4', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "h5": [
        FieldCall(field='h5', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h5', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "h6": [
        FieldCall(field='h6', demands=['HTMLElementTagNameMap'], returns='HTMLHeadingElement'),
        FieldCall(field='h6', demands=['HTMLElementTagNameMap', 'HTMLHeadingElement'], returns='None'),
    ],
    "handleEvent": [
        PrototypeCall(constructor='EventListenerObject', fn='handleEvent', demands=['EventListenerObject', 'Event'], returns='None'),
    ],
    "hangingBaseline": [
        FieldCall(field='hangingBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "hardwareAcceleration": [
        FieldCall(field='hardwareAcceleration', demands=['VideoDecoderConfig'], returns='HardwareAcceleration'),
        FieldCall(field='hardwareAcceleration', demands=['VideoDecoderConfig', 'HardwareAcceleration'], returns='None'),
        FieldCall(field='hardwareAcceleration', demands=['VideoEncoderConfig'], returns='HardwareAcceleration'),
        FieldCall(field='hardwareAcceleration', demands=['VideoEncoderConfig', 'HardwareAcceleration'], returns='None'),
    ],
    "hardwareConcurrency": [
        FieldCall(field='hardwareConcurrency', demands=['NavigatorConcurrentHardware'], returns='float'),
        FieldCall(field='hardwareConcurrency', demands=['Navigator'], returns='float'),
    ],
    "has": [
        PrototypeCall(constructor='CacheStorage', fn='has', demands=['CacheStorage', 'str'], returns='bool'),
        PrototypeCall(constructor='FormData', fn='has', demands=['FormData', 'str'], returns='bool'),
        PrototypeCall(constructor='Headers', fn='has', demands=['Headers', 'str'], returns='bool'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='has', demands=['MediaKeyStatusMap', 'AllowSharedBufferSource'], returns='bool'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='has', demands=['StylePropertyMapReadOnly', 'str'], returns='bool'),
        PrototypeCall(constructor='StylePropertyMap', fn='has', demands=['StylePropertyMap', 'str'], returns='bool'),
        PrototypeCall(constructor='URLSearchParams', fn='has', demands=['URLSearchParams', 'str'], returns='bool'),
        PrototypeCall(constructor='URLSearchParams', fn='has', demands=['URLSearchParams', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='HighlightRegistry', fn='has', demands=['HighlightRegistry', 'K'], returns='bool'),
        PrototypeCall(constructor='AudioParamMap', fn='has', demands=['AudioParamMap', 'K'], returns='bool'),
        PrototypeCall(constructor='MIDIInputMap', fn='has', demands=['MIDIInputMap', 'K'], returns='bool'),
        PrototypeCall(constructor='EventCounts', fn='has', demands=['EventCounts', 'K'], returns='bool'),
        PrototypeCall(constructor='MIDIOutputMap', fn='has', demands=['MIDIOutputMap', 'K'], returns='bool'),
        PrototypeCall(constructor='RTCStatsReport', fn='has', demands=['RTCStatsReport', 'K'], returns='bool'),
        PrototypeCall(constructor='WeakMap', fn='has', demands=['WeakMap', 'K'], returns='bool'),
        PrototypeCall(constructor='Highlight', fn='has', demands=['Highlight', 'T'], returns='bool'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='has', demands=['ViewTransitionTypeSet', 'T'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='has', demands=['FontFaceSet', 'T'], returns='bool'),
        PrototypeCall(constructor='CustomStateSet', fn='has', demands=['CustomStateSet', 'T'], returns='bool'),
        PrototypeCall(constructor='ReadonlySet', fn='has', demands=['ReadonlySet', 'T'], returns='bool'),
        PrototypeCall(constructor='WeakSet', fn='has', demands=['WeakSet', 'T'], returns='bool'),
        PrototypeCall(constructor='ProxyHandler', fn='has', demands=['ProxyHandler', 'T', 'str'], returns='bool'),
        PrototypeCall(constructor='ReadonlySetLike', fn='has', demands=['ReadonlySetLike', 'T'], returns='bool'),
    ],
    "hasAlphaChannel": [
        FieldCall(field='hasAlphaChannel', demands=['VideoConfiguration'], returns='bool'),
        FieldCall(field='hasAlphaChannel', demands=['VideoConfiguration', 'bool'], returns='None'),
    ],
    "hasAttribute": [
        PrototypeCall(constructor='Element', fn='hasAttribute', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='hasAttribute', demands=['MathMLElement', 'str'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='hasAttribute', demands=['SVGElement', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='hasAttribute', demands=['HTMLElement', 'str'], returns='bool'),
    ],
    "hasAttributeNS": [
        PrototypeCall(constructor='Element', fn='hasAttributeNS', demands=['Element', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='hasAttributeNS', demands=['MathMLElement', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='hasAttributeNS', demands=['SVGElement', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='hasAttributeNS', demands=['HTMLElement', 'str', 'str'], returns='bool'),
    ],
    "hasAttributes": [
        PrototypeCall(constructor='Element', fn='hasAttributes', demands=['Element'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='hasAttributes', demands=['MathMLElement'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='hasAttributes', demands=['SVGElement'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='hasAttributes', demands=['HTMLElement'], returns='bool'),
    ],
    "hasBeenActive": [
        FieldCall(field='hasBeenActive', demands=['UserActivation'], returns='bool'),
    ],
    "hasChildNodes": [
        PrototypeCall(constructor='Node', fn='hasChildNodes', demands=['Node'], returns='bool'),
        PrototypeCall(constructor='DocumentType', fn='hasChildNodes', demands=['DocumentType'], returns='bool'),
        PrototypeCall(constructor='CharacterData', fn='hasChildNodes', demands=['CharacterData'], returns='bool'),
        PrototypeCall(constructor='Element', fn='hasChildNodes', demands=['Element'], returns='bool'),
        PrototypeCall(constructor='Attr', fn='hasChildNodes', demands=['Attr'], returns='bool'),
        PrototypeCall(constructor='Document', fn='hasChildNodes', demands=['Document'], returns='bool'),
        PrototypeCall(constructor='DocumentFragment', fn='hasChildNodes', demands=['DocumentFragment'], returns='bool'),
    ],
    "hasFeature": [
        PrototypeCall(constructor='DOMImplementation', fn='hasFeature', demands=['DOMImplementation', '*'], returns='true'),
    ],
    "hasFocus": [
        PrototypeCall(constructor='Document', fn='hasFocus', demands=['Document'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='hasFocus', demands=['HTMLDocument'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='hasFocus', demands=['XMLDocument'], returns='bool'),
    ],
    "hasIndices": [
        FieldCall(field='hasIndices', demands=['regex'], returns='bool'),
    ],
    "hasInstance": [
        FieldCall(field='hasInstance', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "hasOwn": [
        PrototypeCall(constructor='ObjectConstructor', fn='hasOwn', demands=['ObjectConstructor', 'dict', 'PropertyKey'], returns='bool'),
    ],
    "hasOwnProperty": [
        PrototypeCall(constructor='Object', fn='hasOwnProperty', demands=['Object', 'PropertyKey'], returns='bool'),
    ],
    "hasPointerCapture": [
        PrototypeCall(constructor='Element', fn='hasPointerCapture', demands=['Element', 'float'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='hasPointerCapture', demands=['MathMLElement', 'float'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='hasPointerCapture', demands=['SVGElement', 'float'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='hasPointerCapture', demands=['HTMLElement', 'float'], returns='bool'),
    ],
    "hasRegExpGroups": [
        FieldCall(field='hasRegExpGroups', demands=['URLPattern'], returns='bool'),
    ],
    "hasStorageAccess": [
        PrototypeCall(constructor='Document', fn='hasStorageAccess', demands=['Document'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='hasStorageAccess', demands=['HTMLDocument'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='hasStorageAccess', demands=['XMLDocument'], returns='bool'),
    ],
    "hasUAVisualTransition": [
        FieldCall(field='hasUAVisualTransition', demands=['PopStateEvent'], returns='bool'),
    ],
    "hash": [
        FieldCall(field='hash', demands=['EcdsaParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['EcdsaParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['HkdfParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['HkdfParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['HmacImportParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['HmacImportParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['HmacKeyAlgorithm'], returns='KeyAlgorithm'),
        FieldCall(field='hash', demands=['HmacKeyAlgorithm', 'KeyAlgorithm'], returns='None'),
        FieldCall(field='hash', demands=['HmacKeyGenParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['HmacKeyGenParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['Pbkdf2Params'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['Pbkdf2Params', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['RsaHashedImportParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['RsaHashedImportParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['RsaHashedKeyAlgorithm'], returns='KeyAlgorithm'),
        FieldCall(field='hash', demands=['RsaHashedKeyAlgorithm', 'KeyAlgorithm'], returns='None'),
        FieldCall(field='hash', demands=['RsaHashedKeyGenParams'], returns='HashAlgorithmIdentifier'),
        FieldCall(field='hash', demands=['RsaHashedKeyGenParams', 'HashAlgorithmIdentifier'], returns='None'),
        FieldCall(field='hash', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='hash', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='hash', demands=['Location'], returns='str'),
        FieldCall(field='hash', demands=['Location', 'str'], returns='None'),
        FieldCall(field='hash', demands=['URL'], returns='str'),
        FieldCall(field='hash', demands=['URL', 'str'], returns='None'),
        FieldCall(field='hash', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='hash', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='hash', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='hash', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='hash', demands=['URLPattern'], returns='str'),
    ],
    "hashchange": [
        FieldCall(field='hashchange', demands=['WindowEventHandlersEventMap'], returns='HashChangeEvent'),
        FieldCall(field='hashchange', demands=['WindowEventHandlersEventMap', 'HashChangeEvent'], returns='None'),
    ],
    "hdrMetadataType": [
        FieldCall(field='hdrMetadataType', demands=['VideoConfiguration'], returns='HdrMetadataType'),
        FieldCall(field='hdrMetadataType', demands=['VideoConfiguration', 'HdrMetadataType'], returns='None'),
    ],
    "head": [
        FieldCall(field='head', demands=['Document'], returns='HTMLHeadElement'),
        FieldCall(field='head', demands=['HTMLElementTagNameMap'], returns='HTMLHeadElement'),
        FieldCall(field='head', demands=['HTMLElementTagNameMap', 'HTMLHeadElement'], returns='None'),
    ],
    "header": [
        FieldCall(field='header', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='header', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "headerBytesReceived": [
        FieldCall(field='headerBytesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='headerBytesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "headerBytesSent": [
        FieldCall(field='headerBytesSent', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='headerBytesSent', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "headerExtensions": [
        FieldCall(field='headerExtensions', demands=['RTCRtpCapabilities'], returns='list'),
        FieldCall(field='headerExtensions', demands=['RTCRtpCapabilities', 'list'], returns='None'),
        FieldCall(field='headerExtensions', demands=['RTCRtpParameters'], returns='list'),
        FieldCall(field='headerExtensions', demands=['RTCRtpParameters', 'list'], returns='None'),
    ],
    "headerValue": [
        FieldCall(field='headerValue', demands=['NavigationPreloadState'], returns='str'),
        FieldCall(field='headerValue', demands=['NavigationPreloadState', 'str'], returns='None'),
    ],
    "headers": [
        FieldCall(field='headers', demands=['RequestInit'], returns='HeadersInit'),
        FieldCall(field='headers', demands=['RequestInit', 'HeadersInit'], returns='None'),
        FieldCall(field='headers', demands=['ResponseInit'], returns='HeadersInit'),
        FieldCall(field='headers', demands=['ResponseInit', 'HeadersInit'], returns='None'),
        FieldCall(field='headers', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='headers', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='headers', demands=['Request'], returns='Headers'),
        FieldCall(field='headers', demands=['Response'], returns='Headers'),
        FieldCall(field='headers', demands=['EventSourceInit'], returns='HeadersInit'),
        FieldCall(field='headers', demands=['EventSourceInit', 'HeadersInit'], returns='None'),
    ],
    "heading": [
        FieldCall(field='heading', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "height": [
        FieldCall(field='height', demands=['DOMRectInit'], returns='float'),
        FieldCall(field='height', demands=['DOMRectInit', 'float'], returns='None'),
        FieldCall(field='height', demands=['MediaTrackCapabilities'], returns='ULongRange'),
        FieldCall(field='height', demands=['MediaTrackCapabilities', 'ULongRange'], returns='None'),
        FieldCall(field='height', demands=['MediaTrackConstraintSet'], returns='ConstrainULong'),
        FieldCall(field='height', demands=['MediaTrackConstraintSet', 'ConstrainULong'], returns='None'),
        FieldCall(field='height', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='height', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='height', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='height', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='height', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='height', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='height', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='height', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
        FieldCall(field='height', demands=['VideoConfiguration'], returns='float'),
        FieldCall(field='height', demands=['VideoConfiguration', 'float'], returns='None'),
        FieldCall(field='height', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='height', demands=['VideoEncoderConfig', 'float'], returns='None'),
        FieldCall(field='height', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='height', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
        FieldCall(field='height', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='height', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='height', demands=['DOMRect'], returns='float'),
        FieldCall(field='height', demands=['DOMRect', 'float'], returns='None'),
        FieldCall(field='height', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='height', demands=['HTMLCanvasElement'], returns='float'),
        FieldCall(field='height', demands=['HTMLCanvasElement', 'float'], returns='None'),
        FieldCall(field='height', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='height', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='height', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='height', demands=['HTMLImageElement', 'float'], returns='None'),
        FieldCall(field='height', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='height', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='height', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLMarqueeElement', 'str'], returns='None'),
        FieldCall(field='height', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='height', demands=['HTMLSourceElement'], returns='float'),
        FieldCall(field='height', demands=['HTMLSourceElement', 'float'], returns='None'),
        FieldCall(field='height', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='height', demands=['HTMLVideoElement'], returns='float'),
        FieldCall(field='height', demands=['HTMLVideoElement', 'float'], returns='None'),
        FieldCall(field='height', demands=['ImageBitmap'], returns='float'),
        FieldCall(field='height', demands=['ImageData'], returns='float'),
        FieldCall(field='height', demands=['OffscreenCanvas'], returns='float'),
        FieldCall(field='height', demands=['OffscreenCanvas', 'float'], returns='None'),
        FieldCall(field='height', demands=['PictureInPictureWindow'], returns='float'),
        FieldCall(field='height', demands=['PointerEvent'], returns='float'),
        FieldCall(field='height', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGFilterPrimitiveStandardAttributes'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['Screen'], returns='float'),
        FieldCall(field='height', demands=['VisualViewport'], returns='float'),
        FieldCall(field='height', demands=['GPUExtent3DDict'], returns='float'),
        FieldCall(field='height', demands=['GPUExtent3DDict', 'float'], returns='None'),
    ],
    "held": [
        FieldCall(field='held', demands=['LockManagerSnapshot'], returns='list'),
        FieldCall(field='held', demands=['LockManagerSnapshot', 'list'], returns='None'),
    ],
    "hgroup": [
        FieldCall(field='hgroup', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='hgroup', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "hidden": [
        FieldCall(field='hidden', demands=['Document'], returns='bool'),
        FieldCall(field='hidden', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='hidden', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "hidePopover": [
        PrototypeCall(constructor='HTMLElement', fn='hidePopover', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='hidePopover', demands=['HTMLHeadElement'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='hidePopover', demands=['HTMLModElement'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='hidePopover', demands=['HTMLDetailsElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='hidePopover', demands=['HTMLTableElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='hidePopover', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='hidePopover', demands=['HTMLImageElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='hidePopover', demands=['HTMLOptGroupElement'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='hidePopover', demands=['HTMLDListElement'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='hidePopover', demands=['HTMLTemplateElement'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='hidePopover', demands=['HTMLTitleElement'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='hidePopover', demands=['HTMLPreElement'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='hidePopover', demands=['HTMLAnchorElement'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='hidePopover', demands=['HTMLPictureElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='hidePopover', demands=['HTMLTableRowElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='hidePopover', demands=['HTMLTableSectionElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='hidePopover', demands=['HTMLFrameSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='hidePopover', demands=['HTMLBaseElement'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='hidePopover', demands=['HTMLFontElement'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='hidePopover', demands=['HTMLAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='hidePopover', demands=['HTMLOListElement'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='hidePopover', demands=['HTMLBodyElement'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='hidePopover', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='hidePopover', demands=['HTMLSelectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='hidePopover', demands=['HTMLTableCaptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='hidePopover', demands=['HTMLScriptElement'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='hidePopover', demands=['HTMLLIElement'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='hidePopover', demands=['HTMLStyleElement'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='hidePopover', demands=['HTMLTextAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='hidePopover', demands=['HTMLDivElement'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='hidePopover', demands=['HTMLProgressElement'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='hidePopover', demands=['HTMLIFrameElement'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='hidePopover', demands=['HTMLMeterElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='hidePopover', demands=['HTMLHeadingElement'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='hidePopover', demands=['HTMLObjectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='hidePopover', demands=['HTMLTableCellElement'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='hidePopover', demands=['HTMLLegendElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='hidePopover', demands=['HTMLDataListElement'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='hidePopover', demands=['HTMLUListElement'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='hidePopover', demands=['HTMLLabelElement'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='hidePopover', demands=['HTMLButtonElement'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='hidePopover', demands=['HTMLParagraphElement'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='hidePopover', demands=['HTMLDirectoryElement'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='hidePopover', demands=['HTMLSourceElement'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='hidePopover', demands=['HTMLMenuElement'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='hidePopover', demands=['HTMLTrackElement'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='hidePopover', demands=['HTMLQuoteElement'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='hidePopover', demands=['HTMLSpanElement'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='hidePopover', demands=['HTMLOutputElement'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='hidePopover', demands=['HTMLMarqueeElement'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='hidePopover', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='hidePopover', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='hidePopover', demands=['HTMLCanvasElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='hidePopover', demands=['HTMLTableColElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='hidePopover', demands=['HTMLDataElement'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='hidePopover', demands=['HTMLParamElement'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='hidePopover', demands=['HTMLMapElement'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='hidePopover', demands=['HTMLUnknownElement'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='hidePopover', demands=['HTMLHRElement'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='hidePopover', demands=['HTMLFieldSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='hidePopover', demands=['HTMLBRElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='hidePopover', demands=['HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='hidePopover', demands=['HTMLLinkElement'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='hidePopover', demands=['HTMLMetaElement'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='hidePopover', demands=['HTMLHtmlElement'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='hidePopover', demands=['HTMLTimeElement'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='hidePopover', demands=['HTMLSlotElement'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='hidePopover', demands=['HTMLEmbedElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='hidePopover', demands=['HTMLFrameElement'], returns='None'),
    ],
    "high": [
        FieldCall(field='high', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='high', demands=['HTMLMeterElement', 'float'], returns='None'),
    ],
    "highWaterMark": [
        FieldCall(field='highWaterMark', demands=['QueuingStrategy'], returns='float'),
        FieldCall(field='highWaterMark', demands=['QueuingStrategy', 'float'], returns='None'),
        FieldCall(field='highWaterMark', demands=['QueuingStrategyInit'], returns='float'),
        FieldCall(field='highWaterMark', demands=['QueuingStrategyInit', 'float'], returns='None'),
        FieldCall(field='highWaterMark', demands=['ByteLengthQueuingStrategy'], returns='float'),
        FieldCall(field='highWaterMark', demands=['CountQueuingStrategy'], returns='float'),
    ],
    "hint": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='hint', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='hint', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "hints": [
        FieldCall(field='hints', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='list'),
        FieldCall(field='hints', demands=['PublicKeyCredentialCreationOptionsJSON', 'list'], returns='None'),
        FieldCall(field='hints', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='list'),
        FieldCall(field='hints', demands=['PublicKeyCredentialRequestOptionsJSON', 'list'], returns='None'),
    ],
    "history": [
        FieldCall(field='history', demands=['Window'], returns='History'),
    ],
    "hmacCreateSecret": [
        FieldCall(field='hmacCreateSecret', demands=['AuthenticationExtensionsClientInputs'], returns='bool'),
        FieldCall(field='hmacCreateSecret', demands=['AuthenticationExtensionsClientInputs', 'bool'], returns='None'),
        FieldCall(field='hmacCreateSecret', demands=['AuthenticationExtensionsClientOutputs'], returns='bool'),
        FieldCall(field='hmacCreateSecret', demands=['AuthenticationExtensionsClientOutputs', 'bool'], returns='None'),
    ],
    "host": [
        FieldCall(field='host', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='host', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='host', demands=['Location'], returns='str'),
        FieldCall(field='host', demands=['Location', 'str'], returns='None'),
        FieldCall(field='host', demands=['ShadowRoot'], returns='Element'),
        FieldCall(field='host', demands=['URL'], returns='str'),
        FieldCall(field='host', demands=['URL', 'str'], returns='None'),
    ],
    "hostname": [
        FieldCall(field='hostname', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='hostname', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='hostname', demands=['Location'], returns='str'),
        FieldCall(field='hostname', demands=['Location', 'str'], returns='None'),
        FieldCall(field='hostname', demands=['URL'], returns='str'),
        FieldCall(field='hostname', demands=['URL', 'str'], returns='None'),
        FieldCall(field='hostname', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='hostname', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='hostname', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='hostname', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='hostname', demands=['URLPattern'], returns='str'),
    ],
    "hr": [
        FieldCall(field='hr', demands=['HTMLElementTagNameMap'], returns='HTMLHRElement'),
        FieldCall(field='hr', demands=['HTMLElementTagNameMap', 'HTMLHRElement'], returns='None'),
    ],
    "href": [
        FieldCall(field='href', demands=['CSSImportRule'], returns='str'),
        FieldCall(field='href', demands=['HTMLBaseElement'], returns='str'),
        FieldCall(field='href', demands=['HTMLBaseElement', 'str'], returns='None'),
        FieldCall(field='href', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='href', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='href', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='href', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='href', demands=['Location'], returns='str'),
        FieldCall(field='href', demands=['Location', 'str'], returns='None'),
        FieldCall(field='href', demands=['SVGURIReference'], returns='SVGAnimatedString'),
        FieldCall(field='href', demands=['StyleSheet'], returns='str'),
        FieldCall(field='href', demands=['URL'], returns='str'),
        FieldCall(field='href', demands=['URL', 'str'], returns='None'),
    ],
    "hreflang": [
        FieldCall(field='hreflang', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='hreflang', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='hreflang', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='hreflang', demands=['HTMLLinkElement', 'str'], returns='None'),
    ],
    "hspace": [
        FieldCall(field='hspace', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='hspace', demands=['HTMLImageElement', 'float'], returns='None'),
        FieldCall(field='hspace', demands=['HTMLMarqueeElement'], returns='float'),
        FieldCall(field='hspace', demands=['HTMLMarqueeElement', 'float'], returns='None'),
        FieldCall(field='hspace', demands=['HTMLObjectElement'], returns='float'),
        FieldCall(field='hspace', demands=['HTMLObjectElement', 'float'], returns='None'),
    ],
    "html": [
        FieldCall(field='html', demands=['HTMLElementTagNameMap'], returns='HTMLHtmlElement'),
        FieldCall(field='html', demands=['HTMLElementTagNameMap', 'HTMLHtmlElement'], returns='None'),
    ],
    "htmlFor": [
        FieldCall(field='htmlFor', demands=['HTMLLabelElement'], returns='str'),
        FieldCall(field='htmlFor', demands=['HTMLLabelElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='htmlFor', demands=['HTMLOutputElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLOutputElement', fn='htmlFor', demands=['HTMLOutputElement', 'str'], returns='None'),
        FieldCall(field='htmlFor', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='htmlFor', demands=['HTMLScriptElement', 'str'], returns='None'),
    ],
    "httpEquiv": [
        FieldCall(field='httpEquiv', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='httpEquiv', demands=['HTMLMetaElement', 'str'], returns='None'),
    ],
    "httpRequestStatusCode": [
        FieldCall(field='httpRequestStatusCode', demands=['RTCErrorInit'], returns='float'),
        FieldCall(field='httpRequestStatusCode', demands=['RTCErrorInit', 'float'], returns='None'),
    ],
    "hugeFramesSent": [
        FieldCall(field='hugeFramesSent', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='hugeFramesSent', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "hyphenateCharacter": [
        FieldCall(field='hyphenateCharacter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='hyphenateCharacter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "hyphenateLimitChars": [
        FieldCall(field='hyphenateLimitChars', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='hyphenateLimitChars', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "hyphens": [
        FieldCall(field='hyphens', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='hyphens', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "hypot": [
        PrototypeCall(constructor='Math', fn='hypot', demands=['Math', '*'], returns='float'),
    ],
    "i": [
        FieldCall(field='i', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='i', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "iceCandidatePoolSize": [
        FieldCall(field='iceCandidatePoolSize', demands=['RTCConfiguration'], returns='float'),
        FieldCall(field='iceCandidatePoolSize', demands=['RTCConfiguration', 'float'], returns='None'),
    ],
    "iceConnectionState": [
        FieldCall(field='iceConnectionState', demands=['RTCPeerConnection'], returns='RTCIceConnectionState'),
    ],
    "iceGatheringState": [
        FieldCall(field='iceGatheringState', demands=['RTCPeerConnection'], returns='RTCIceGatheringState'),
    ],
    "iceLocalUsernameFragment": [
        FieldCall(field='iceLocalUsernameFragment', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='iceLocalUsernameFragment', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "iceRestart": [
        FieldCall(field='iceRestart', demands=['RTCOfferOptions'], returns='bool'),
        FieldCall(field='iceRestart', demands=['RTCOfferOptions', 'bool'], returns='None'),
    ],
    "iceRole": [
        FieldCall(field='iceRole', demands=['RTCTransportStats'], returns='RTCIceRole'),
        FieldCall(field='iceRole', demands=['RTCTransportStats', 'RTCIceRole'], returns='None'),
    ],
    "iceServers": [
        FieldCall(field='iceServers', demands=['RTCConfiguration'], returns='list'),
        FieldCall(field='iceServers', demands=['RTCConfiguration', 'list'], returns='None'),
    ],
    "iceState": [
        FieldCall(field='iceState', demands=['RTCTransportStats'], returns='RTCIceTransportState'),
        FieldCall(field='iceState', demands=['RTCTransportStats', 'RTCIceConnectionState'], returns='None'),
    ],
    "iceTransport": [
        FieldCall(field='iceTransport', demands=['RTCDtlsTransport'], returns='RTCIceTransport'),
    ],
    "iceTransportPolicy": [
        FieldCall(field='iceTransportPolicy', demands=['RTCConfiguration'], returns='RTCIceTransportPolicy'),
        FieldCall(field='iceTransportPolicy', demands=['RTCConfiguration', 'RTCIceTransportPolicy'], returns='None'),
    ],
    "icecandidate": [
        FieldCall(field='icecandidate', demands=['RTCPeerConnectionEventMap'], returns='RTCPeerConnectionIceEvent'),
        FieldCall(field='icecandidate', demands=['RTCPeerConnectionEventMap', 'RTCPeerConnectionIceEvent'], returns='None'),
    ],
    "icecandidateerror": [
        FieldCall(field='icecandidateerror', demands=['RTCPeerConnectionEventMap'], returns='RTCPeerConnectionIceErrorEvent'),
        FieldCall(field='icecandidateerror', demands=['RTCPeerConnectionEventMap', 'RTCPeerConnectionIceErrorEvent'], returns='None'),
    ],
    "iceconnectionstatechange": [
        FieldCall(field='iceconnectionstatechange', demands=['RTCPeerConnectionEventMap'], returns='Event'),
        FieldCall(field='iceconnectionstatechange', demands=['RTCPeerConnectionEventMap', 'Event'], returns='None'),
    ],
    "icegatheringstatechange": [
        FieldCall(field='icegatheringstatechange', demands=['RTCPeerConnectionEventMap'], returns='Event'),
        FieldCall(field='icegatheringstatechange', demands=['RTCPeerConnectionEventMap', 'Event'], returns='None'),
    ],
    "icon": [
        FieldCall(field='icon', demands=['NotificationOptions'], returns='str'),
        FieldCall(field='icon', demands=['NotificationOptions', 'str'], returns='None'),
        FieldCall(field='icon', demands=['Notification'], returns='str'),
    ],
    "id": [
        FieldCall(field='id', demands=['KeyframeAnimationOptions'], returns='str'),
        FieldCall(field='id', demands=['KeyframeAnimationOptions', 'str'], returns='None'),
        FieldCall(field='id', demands=['PaymentDetailsInit'], returns='str'),
        FieldCall(field='id', demands=['PaymentDetailsInit', 'str'], returns='None'),
        FieldCall(field='id', demands=['PaymentShippingOption'], returns='str'),
        FieldCall(field='id', demands=['PaymentShippingOption', 'str'], returns='None'),
        FieldCall(field='id', demands=['PublicKeyCredentialDescriptor'], returns='BufferSource'),
        FieldCall(field='id', demands=['PublicKeyCredentialDescriptor', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='id', demands=['PublicKeyCredentialDescriptorJSON'], returns='Base64URLString'),
        FieldCall(field='id', demands=['PublicKeyCredentialDescriptorJSON', 'Base64URLString'], returns='None'),
        FieldCall(field='id', demands=['PublicKeyCredentialRpEntity'], returns='str'),
        FieldCall(field='id', demands=['PublicKeyCredentialRpEntity', 'str'], returns='None'),
        FieldCall(field='id', demands=['PublicKeyCredentialUserEntity'], returns='BufferSource'),
        FieldCall(field='id', demands=['PublicKeyCredentialUserEntity', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='id', demands=['PublicKeyCredentialUserEntityJSON'], returns='Base64URLString'),
        FieldCall(field='id', demands=['PublicKeyCredentialUserEntityJSON', 'Base64URLString'], returns='None'),
        FieldCall(field='id', demands=['RTCDataChannelInit'], returns='float'),
        FieldCall(field='id', demands=['RTCDataChannelInit', 'float'], returns='None'),
        FieldCall(field='id', demands=['RTCRtpHeaderExtensionParameters'], returns='float'),
        FieldCall(field='id', demands=['RTCRtpHeaderExtensionParameters', 'float'], returns='None'),
        FieldCall(field='id', demands=['RTCStats'], returns='str'),
        FieldCall(field='id', demands=['RTCStats', 'str'], returns='None'),
        FieldCall(field='id', demands=['Animation'], returns='str'),
        FieldCall(field='id', demands=['Animation', 'str'], returns='None'),
        FieldCall(field='id', demands=['Credential'], returns='str'),
        FieldCall(field='id', demands=['Element'], returns='str'),
        FieldCall(field='id', demands=['Element', 'str'], returns='None'),
        FieldCall(field='id', demands=['Gamepad'], returns='str'),
        FieldCall(field='id', demands=['LargestContentfulPaint'], returns='str'),
        FieldCall(field='id', demands=['MIDIPort'], returns='str'),
        FieldCall(field='id', demands=['MediaStream'], returns='str'),
        FieldCall(field='id', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='id', demands=['NavigationHistoryEntry'], returns='str'),
        FieldCall(field='id', demands=['PaymentRequest'], returns='str'),
        FieldCall(field='id', demands=['RTCDataChannel'], returns='float'),
        FieldCall(field='id', demands=['TextTrack'], returns='str'),
        FieldCall(field='id', demands=['TextTrackCue'], returns='str'),
        FieldCall(field='id', demands=['TextTrackCue', 'str'], returns='None'),
        FieldCall(field='id', demands=['VTTRegion'], returns='str'),
        FieldCall(field='id', demands=['VTTRegion', 'str'], returns='None'),
    ],
    "ideal": [
        FieldCall(field='ideal', demands=['ConstrainBooleanParameters'], returns='bool'),
        FieldCall(field='ideal', demands=['ConstrainBooleanParameters', 'bool'], returns='None'),
        FieldCall(field='ideal', demands=['ConstrainDOMStringParameters'], returns='str'),
        FieldCall(field='ideal', demands=['ConstrainDOMStringParameters', 'str'], returns='None'),
        FieldCall(field='ideal', demands=['ConstrainDoubleRange'], returns='float'),
        FieldCall(field='ideal', demands=['ConstrainDoubleRange', 'float'], returns='None'),
        FieldCall(field='ideal', demands=['ConstrainULongRange'], returns='float'),
        FieldCall(field='ideal', demands=['ConstrainULongRange', 'float'], returns='None'),
    ],
    "identifier": [
        FieldCall(field='identifier', demands=['TouchInit'], returns='float'),
        FieldCall(field='identifier', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='identifier', demands=['Touch'], returns='float'),
    ],
    "ideographicBaseline": [
        FieldCall(field='ideographicBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "ifAvailable": [
        FieldCall(field='ifAvailable', demands=['LockOptions'], returns='bool'),
        FieldCall(field='ifAvailable', demands=['LockOptions', 'bool'], returns='None'),
    ],
    "iframe": [
        FieldCall(field='iframe', demands=['HTMLElementTagNameMap'], returns='HTMLIFrameElement'),
        FieldCall(field='iframe', demands=['HTMLElementTagNameMap', 'HTMLIFrameElement'], returns='None'),
    ],
    "ignoreBOM": [
        FieldCall(field='ignoreBOM', demands=['TextDecoderOptions'], returns='bool'),
        FieldCall(field='ignoreBOM', demands=['TextDecoderOptions', 'bool'], returns='None'),
        FieldCall(field='ignoreBOM', demands=['TextDecoderCommon'], returns='bool'),
    ],
    "ignoreCase": [
        FieldCall(field='ignoreCase', demands=['URLPatternOptions'], returns='bool'),
        FieldCall(field='ignoreCase', demands=['URLPatternOptions', 'bool'], returns='None'),
        FieldCall(field='ignoreCase', demands=['regex'], returns='bool'),
    ],
    "ignoreMethod": [
        FieldCall(field='ignoreMethod', demands=['CacheQueryOptions'], returns='bool'),
        FieldCall(field='ignoreMethod', demands=['CacheQueryOptions', 'bool'], returns='None'),
    ],
    "ignoreSearch": [
        FieldCall(field='ignoreSearch', demands=['CacheQueryOptions'], returns='bool'),
        FieldCall(field='ignoreSearch', demands=['CacheQueryOptions', 'bool'], returns='None'),
    ],
    "ignoreVary": [
        FieldCall(field='ignoreVary', demands=['CacheQueryOptions'], returns='bool'),
        FieldCall(field='ignoreVary', demands=['CacheQueryOptions', 'bool'], returns='None'),
    ],
    "imag": [
        FieldCall(field='imag', demands=['PeriodicWaveOptions'], returns='number[]'),
        FieldCall(field='imag', demands=['PeriodicWaveOptions', 'list'], returns='None'),
    ],
    "image": [
        FieldCall(field='image', demands=['ImageDecodeResult'], returns='VideoFrame'),
        FieldCall(field='image', demands=['ImageDecodeResult', 'VideoFrame'], returns='None'),
        FieldCall(field='image', demands=['SVGElementTagNameMap'], returns='SVGImageElement'),
        FieldCall(field='image', demands=['SVGElementTagNameMap', 'SVGImageElement'], returns='None'),
    ],
    "imageHeight": [
        FieldCall(field='imageHeight', demands=['PhotoCapabilities'], returns='MediaSettingsRange'),
        FieldCall(field='imageHeight', demands=['PhotoCapabilities', 'MediaSettingsRange'], returns='None'),
        FieldCall(field='imageHeight', demands=['PhotoSettings'], returns='float'),
        FieldCall(field='imageHeight', demands=['PhotoSettings', 'float'], returns='None'),
    ],
    "imageOrientation": [
        FieldCall(field='imageOrientation', demands=['ImageBitmapOptions'], returns='ImageOrientation'),
        FieldCall(field='imageOrientation', demands=['ImageBitmapOptions', 'ImageOrientation'], returns='None'),
        FieldCall(field='imageOrientation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='imageOrientation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "imageRendering": [
        FieldCall(field='imageRendering', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='imageRendering', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "imageSizes": [
        FieldCall(field='imageSizes', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='imageSizes', demands=['HTMLLinkElement', 'str'], returns='None'),
    ],
    "imageSmoothingEnabled": [
        FieldCall(field='imageSmoothingEnabled', demands=['CanvasImageSmoothing'], returns='bool'),
        FieldCall(field='imageSmoothingEnabled', demands=['CanvasImageSmoothing', 'bool'], returns='None'),
    ],
    "imageSmoothingQuality": [
        FieldCall(field='imageSmoothingQuality', demands=['CanvasImageSmoothing'], returns='ImageSmoothingQuality'),
        FieldCall(field='imageSmoothingQuality', demands=['CanvasImageSmoothing', 'ImageSmoothingQuality'], returns='None'),
    ],
    "imageSrcset": [
        FieldCall(field='imageSrcset', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='imageSrcset', demands=['HTMLLinkElement', 'str'], returns='None'),
    ],
    "imageWidth": [
        FieldCall(field='imageWidth', demands=['PhotoCapabilities'], returns='MediaSettingsRange'),
        FieldCall(field='imageWidth', demands=['PhotoCapabilities', 'MediaSettingsRange'], returns='None'),
        FieldCall(field='imageWidth', demands=['PhotoSettings'], returns='float'),
        FieldCall(field='imageWidth', demands=['PhotoSettings', 'float'], returns='None'),
    ],
    "images": [
        FieldCall(field='images', demands=['Document'], returns='HTMLCollectionOf'),
    ],
    "img": [
        FieldCall(field='img', demands=['HTMLElementTagNameMap'], returns='HTMLImageElement'),
        FieldCall(field='img', demands=['HTMLElementTagNameMap', 'HTMLImageElement'], returns='None'),
    ],
    "implementation": [
        FieldCall(field='implementation', demands=['Document'], returns='DOMImplementation'),
    ],
    "importKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', '"jwk"', 'JsonWebKey', 'AlgorithmIdentifier', 'bool', 'ReadonlyArray'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', 'Exclude', 'AllowSharedBufferSource', 'AlgorithmIdentifier', 'bool', 'list'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', 'Exclude', 'AllowSharedBufferSource', 'AlgorithmIdentifier', 'bool', 'Iterable'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', '"jwk"', 'JsonWebKey', '', 'bool', 'list'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', 'Exclude', 'AllowSharedBufferSource', '', 'bool', 'list'], returns='CryptoKey'),
    ],
    "importNode": [
        PrototypeCall(constructor='Document', fn='importNode', demands=['Document', 'T'], returns='T'),
        PrototypeCall(constructor='HTMLDocument', fn='importNode', demands=['HTMLDocument', 'T'], returns='T'),
        PrototypeCall(constructor='XMLDocument', fn='importNode', demands=['XMLDocument', 'T'], returns='T'),
        PrototypeCall(constructor='Document', fn='importNode', demands=['Document', 'T', 'bool'], returns='T'),
        PrototypeCall(constructor='HTMLDocument', fn='importNode', demands=['HTMLDocument', 'T', 'bool'], returns='T'),
        PrototypeCall(constructor='XMLDocument', fn='importNode', demands=['XMLDocument', 'T', 'bool'], returns='T'),
    ],
    "importStylesheet": [
        PrototypeCall(constructor='XSLTProcessor', fn='importStylesheet', demands=['XSLTProcessor', 'Node'], returns='None'),
    ],
    "imul": [
        PrototypeCall(constructor='Math', fn='imul', demands=['Math', 'float', 'float'], returns='float'),
    ],
    "in1": [
        FieldCall(field='in1', demands=['SVGFEBlendElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEComponentTransferElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFECompositeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEMergeNodeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEOffsetElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFETileElement'], returns='SVGAnimatedString'),
    ],
    "in2": [
        FieldCall(field='in2', demands=['SVGFEBlendElement'], returns='SVGAnimatedString'),
        FieldCall(field='in2', demands=['SVGFECompositeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in2', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedString'),
    ],
    "inBandMetadataTrackDispatchType": [
        FieldCall(field='inBandMetadataTrackDispatchType', demands=['TextTrack'], returns='str'),
    ],
    "includeUncontrolled": [
        FieldCall(field='includeUncontrolled', demands=['ClientQueryOptions'], returns='bool'),
        FieldCall(field='includeUncontrolled', demands=['ClientQueryOptions', 'bool'], returns='None'),
    ],
    "includes": [
        PrototypeCall(constructor='IDBKeyRange', fn='includes', demands=['IDBKeyRange', '*'], returns='bool'),
        PrototypeCall(constructor='BigInt64Array', fn='includes', demands=['BigInt64Array', 'bigint'], returns='bool'),
        PrototypeCall(constructor='BigInt64Array', fn='includes', demands=['BigInt64Array', 'bigint', 'float'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='includes', demands=['BigUint64Array', 'bigint'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='includes', demands=['BigUint64Array', 'bigint', 'float'], returns='bool'),
        PrototypeCall(constructor='String', fn='includes', demands=['str', 'str'], returns='bool'),
        PrototypeCall(constructor='String', fn='includes', demands=['str', 'str', 'float'], returns='bool'),
        PrototypeCall(constructor='Array', fn='includes', demands=['list', 'T'], returns='bool'),
        PrototypeCall(constructor='Array', fn='includes', demands=['list', 'T', 'float'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='includes', demands=['ReadonlyArray', 'T'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='includes', demands=['ReadonlyArray', 'T', 'float'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='includes', demands=['Int8Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='includes', demands=['Int8Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='includes', demands=['Uint8Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='includes', demands=['Uint8Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='includes', demands=['Uint8ClampedArray', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='includes', demands=['Uint8ClampedArray', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='includes', demands=['Int16Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='includes', demands=['Int16Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='includes', demands=['Uint16Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='includes', demands=['Uint16Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='includes', demands=['Int32Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='includes', demands=['Int32Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='includes', demands=['Uint32Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='includes', demands=['Uint32Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='includes', demands=['Float32Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='includes', demands=['Float32Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='includes', demands=['Float64Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='includes', demands=['Float64Array', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='includes', demands=['Float16Array', 'float'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='includes', demands=['Float16Array', 'float', 'float'], returns='bool'),
    ],
    "incomingBidirectionalStreams": [
        FieldCall(field='incomingBidirectionalStreams', demands=['WebTransport'], returns='ReadableStream'),
    ],
    "incomingHighWaterMark": [
        FieldCall(field='incomingHighWaterMark', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='incomingHighWaterMark', demands=['WebTransportDatagramDuplexStream', 'float'], returns='None'),
    ],
    "incomingMaxAge": [
        FieldCall(field='incomingMaxAge', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='incomingMaxAge', demands=['WebTransportDatagramDuplexStream', 'float'], returns='None'),
    ],
    "incomingUnidirectionalStreams": [
        FieldCall(field='incomingUnidirectionalStreams', demands=['WebTransport'], returns='ReadableStream'),
    ],
    "indeterminate": [
        FieldCall(field='indeterminate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='indeterminate', demands=['HTMLInputElement', 'bool'], returns='None'),
    ],
    "index": [
        FieldCall(field='index', demands=['Gamepad'], returns='float'),
        FieldCall(field='index', demands=['HTMLOptionElement'], returns='float'),
        PrototypeCall(constructor='IDBObjectStore', fn='index', demands=['IDBObjectStore', 'str'], returns='IDBIndex'),
        FieldCall(field='index', demands=['NavigationHistoryEntry'], returns='float'),
        FieldCall(field='index', demands=['RegExpMatchArray'], returns='float'),
        FieldCall(field='index', demands=['RegExpMatchArray', 'float'], returns='None'),
        FieldCall(field='index', demands=['RegExpExecArray'], returns='float'),
        FieldCall(field='index', demands=['RegExpExecArray', 'float'], returns='None'),
    ],
    "indexNames": [
        FieldCall(field='indexNames', demands=['IDBObjectStore'], returns='DOMStringList'),
    ],
    "indexOf": [
        PrototypeCall(constructor='BigInt64Array', fn='indexOf', demands=['BigInt64Array', 'bigint'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='indexOf', demands=['BigInt64Array', 'bigint', 'float'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='indexOf', demands=['BigUint64Array', 'bigint'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='indexOf', demands=['BigUint64Array', 'bigint', 'float'], returns='float'),
        PrototypeCall(constructor='String', fn='indexOf', demands=['str', 'str'], returns='float'),
        PrototypeCall(constructor='String', fn='indexOf', demands=['str', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='indexOf', demands=['ReadonlyArray', 'T'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='indexOf', demands=['ReadonlyArray', 'T', 'float'], returns='float'),
        PrototypeCall(constructor='Array', fn='indexOf', demands=['list', 'T'], returns='float'),
        PrototypeCall(constructor='Array', fn='indexOf', demands=['list', 'T', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='indexOf', demands=['Int8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='indexOf', demands=['Int8Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='indexOf', demands=['Uint8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='indexOf', demands=['Uint8Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='indexOf', demands=['Uint8ClampedArray', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='indexOf', demands=['Uint8ClampedArray', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='indexOf', demands=['Int16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='indexOf', demands=['Int16Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='indexOf', demands=['Uint16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='indexOf', demands=['Uint16Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='indexOf', demands=['Int32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='indexOf', demands=['Int32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='indexOf', demands=['Uint32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='indexOf', demands=['Uint32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='indexOf', demands=['Float32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='indexOf', demands=['Float32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='indexOf', demands=['Float64Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='indexOf', demands=['Float64Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='indexOf', demands=['Float16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='indexOf', demands=['Float16Array', 'float', 'float'], returns='float'),
    ],
    "indexedDB": [
        FieldCall(field='indexedDB', demands=['WindowOrWorkerGlobalScope'], returns='IDBFactory'),
    ],
    "indices": [
        FieldCall(field='indices', demands=['RegExpMatchArray'], returns='RegExpIndicesArray'),
        FieldCall(field='indices', demands=['RegExpMatchArray', 'RegExpIndicesArray'], returns='None'),
        FieldCall(field='indices', demands=['RegExpExecArray'], returns='RegExpIndicesArray'),
        FieldCall(field='indices', demands=['RegExpExecArray', 'RegExpIndicesArray'], returns='None'),
    ],
    "inert": [
        FieldCall(field='inert', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='inert', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "info": [
        FieldCall(field='info', demands=['HkdfParams'], returns='BufferSource'),
        FieldCall(field='info', demands=['HkdfParams', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='Console', fn='info', demands=['Console', '*'], returns='None'),
    ],
    "inherits": [
        FieldCall(field='inherits', demands=['PropertyDefinition'], returns='bool'),
        FieldCall(field='inherits', demands=['PropertyDefinition', 'bool'], returns='None'),
        FieldCall(field='inherits', demands=['CSSPropertyRule'], returns='bool'),
    ],
    "init": [
        PrototypeCall(constructor='ClassAccessorDecoratorResult', fn='init', demands=['ClassAccessorDecoratorResult', 'This', 'Value'], returns='Value'),
    ],
    "initCompositionEvent": [
        PrototypeCall(constructor='CompositionEvent', fn='initCompositionEvent', demands=['CompositionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initCompositionEvent', demands=['CompositionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initCompositionEvent', demands=['CompositionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initCompositionEvent', demands=['CompositionEvent', 'str', 'bool', 'bool', 'WindowProxy'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initCompositionEvent', demands=['CompositionEvent', 'str', 'bool', 'bool', 'WindowProxy', 'str'], returns='None'),
    ],
    "initCustomEvent": [
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool', 'bool', 'T'], returns='None'),
    ],
    "initData": [
        FieldCall(field='initData', demands=['MediaEncryptedEventInit'], returns='ArrayBuffer'),
        FieldCall(field='initData', demands=['MediaEncryptedEventInit', 'ArrayBuffer'], returns='None'),
        FieldCall(field='initData', demands=['MediaEncryptedEvent'], returns='ArrayBuffer'),
    ],
    "initDataType": [
        FieldCall(field='initDataType', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='str'),
        FieldCall(field='initDataType', demands=['MediaCapabilitiesKeySystemConfiguration', 'str'], returns='None'),
        FieldCall(field='initDataType', demands=['MediaEncryptedEventInit'], returns='str'),
        FieldCall(field='initDataType', demands=['MediaEncryptedEventInit', 'str'], returns='None'),
        FieldCall(field='initDataType', demands=['MediaEncryptedEvent'], returns='str'),
    ],
    "initDataTypes": [
        FieldCall(field='initDataTypes', demands=['MediaKeySystemConfiguration'], returns='list'),
        FieldCall(field='initDataTypes', demands=['MediaKeySystemConfiguration', 'list'], returns='None'),
    ],
    "initEvent": [
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='initEvent', demands=['SpeechSynthesisEvent', 'str'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='initEvent', demands=['FontFaceSetLoadEvent', 'str'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initEvent', demands=['UIEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='initEvent', demands=['RTCErrorEvent', 'str'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='initEvent', demands=['BeforeUnloadEvent', 'str'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='initEvent', demands=['OfflineAudioCompletionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='initEvent', demands=['RTCPeerConnectionIceErrorEvent', 'str'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='initEvent', demands=['SubmitEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='initEvent', demands=['PopStateEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='initEvent', demands=['PageRevealEvent', 'str'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='initEvent', demands=['FormDataEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='initEvent', demands=['CookieChangeEvent', 'str'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='initEvent', demands=['ErrorEvent', 'str'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='initEvent', demands=['AnimationPlaybackEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='initEvent', demands=['PaymentRequestUpdateEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='initEvent', demands=['PromiseRejectionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='initEvent', demands=['ClipboardEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='initEvent', demands=['MediaEncryptedEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='initEvent', demands=['MediaKeyMessageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='initEvent', demands=['RTCPeerConnectionIceEvent', 'str'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='initEvent', demands=['IDBVersionChangeEvent', 'str'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='initEvent', demands=['GamepadEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='initEvent', demands=['MediaQueryListEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='initEvent', demands=['TransitionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='initEvent', demands=['PictureInPictureEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='initEvent', demands=['RTCDataChannelEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='initEvent', demands=['TrackEvent', 'str'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='initEvent', demands=['SecurityPolicyViolationEvent', 'str'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='initEvent', demands=['AnimationEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='initEvent', demands=['MediaStreamTrackEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='initEvent', demands=['RTCDTMFToneChangeEvent', 'str'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='initEvent', demands=['AudioProcessingEvent', 'str'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='initEvent', demands=['ToggleEvent', 'str'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='initEvent', demands=['DeviceOrientationEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='initEvent', demands=['PageSwapEvent', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initEvent', demands=['StorageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='initEvent', demands=['ContentVisibilityAutoStateChangeEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='initEvent', demands=['MIDIMessageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='initEvent', demands=['CloseEvent', 'str'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='initEvent', demands=['ProgressEvent', 'str'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='initEvent', demands=['HashChangeEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='initEvent', demands=['MIDIConnectionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='initEvent', demands=['PageTransitionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='initEvent', demands=['DeviceMotionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='initEvent', demands=['WebGLContextEvent', 'str'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='initEvent', demands=['BlobEvent', 'str'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='initEvent', demands=['RTCTrackEvent', 'str'], returns='None'),
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='initEvent', demands=['SpeechSynthesisEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='initEvent', demands=['FontFaceSetLoadEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initEvent', demands=['UIEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='initEvent', demands=['RTCErrorEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='initEvent', demands=['BeforeUnloadEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='initEvent', demands=['OfflineAudioCompletionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='initEvent', demands=['RTCPeerConnectionIceErrorEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='initEvent', demands=['SubmitEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='initEvent', demands=['PopStateEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='initEvent', demands=['PageRevealEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='initEvent', demands=['FormDataEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='initEvent', demands=['CookieChangeEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='initEvent', demands=['ErrorEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='initEvent', demands=['AnimationPlaybackEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='initEvent', demands=['PaymentRequestUpdateEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='initEvent', demands=['PromiseRejectionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='initEvent', demands=['ClipboardEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='initEvent', demands=['MediaEncryptedEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='initEvent', demands=['MediaKeyMessageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='initEvent', demands=['RTCPeerConnectionIceEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='initEvent', demands=['IDBVersionChangeEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='initEvent', demands=['GamepadEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='initEvent', demands=['MediaQueryListEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='initEvent', demands=['TransitionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='initEvent', demands=['PictureInPictureEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='initEvent', demands=['RTCDataChannelEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='initEvent', demands=['TrackEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='initEvent', demands=['SecurityPolicyViolationEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='initEvent', demands=['AnimationEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='initEvent', demands=['MediaStreamTrackEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='initEvent', demands=['RTCDTMFToneChangeEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='initEvent', demands=['AudioProcessingEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='initEvent', demands=['ToggleEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='initEvent', demands=['DeviceOrientationEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='initEvent', demands=['PageSwapEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initEvent', demands=['StorageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='initEvent', demands=['ContentVisibilityAutoStateChangeEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='initEvent', demands=['MIDIMessageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='initEvent', demands=['CloseEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='initEvent', demands=['ProgressEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='initEvent', demands=['HashChangeEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='initEvent', demands=['MIDIConnectionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='initEvent', demands=['PageTransitionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='initEvent', demands=['DeviceMotionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='initEvent', demands=['WebGLContextEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='initEvent', demands=['BlobEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='initEvent', demands=['RTCTrackEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='initEvent', demands=['SpeechSynthesisEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='initEvent', demands=['FontFaceSetLoadEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initEvent', demands=['UIEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='initEvent', demands=['RTCErrorEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='initEvent', demands=['BeforeUnloadEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='initEvent', demands=['OfflineAudioCompletionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='initEvent', demands=['RTCPeerConnectionIceErrorEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='initEvent', demands=['SubmitEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='initEvent', demands=['PopStateEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='initEvent', demands=['PageRevealEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='initEvent', demands=['FormDataEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='initEvent', demands=['CookieChangeEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='initEvent', demands=['ErrorEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='initEvent', demands=['AnimationPlaybackEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='initEvent', demands=['PaymentRequestUpdateEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='initEvent', demands=['PromiseRejectionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='initEvent', demands=['ClipboardEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='initEvent', demands=['MediaEncryptedEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='initEvent', demands=['MediaKeyMessageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='initEvent', demands=['RTCPeerConnectionIceEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='initEvent', demands=['IDBVersionChangeEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='initEvent', demands=['GamepadEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='initEvent', demands=['MediaQueryListEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='initEvent', demands=['TransitionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='initEvent', demands=['PictureInPictureEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='initEvent', demands=['RTCDataChannelEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='initEvent', demands=['TrackEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='initEvent', demands=['SecurityPolicyViolationEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='initEvent', demands=['AnimationEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='initEvent', demands=['MediaStreamTrackEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='initEvent', demands=['RTCDTMFToneChangeEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='initEvent', demands=['AudioProcessingEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='initEvent', demands=['ToggleEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='initEvent', demands=['DeviceOrientationEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='initEvent', demands=['PageSwapEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initEvent', demands=['StorageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='initEvent', demands=['ContentVisibilityAutoStateChangeEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='initEvent', demands=['MIDIMessageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='initEvent', demands=['CloseEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='initEvent', demands=['ProgressEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='initEvent', demands=['HashChangeEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='initEvent', demands=['MIDIConnectionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='initEvent', demands=['PageTransitionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='initEvent', demands=['DeviceMotionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='initEvent', demands=['WebGLContextEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='initEvent', demands=['BlobEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='initEvent', demands=['RTCTrackEvent', 'str', 'bool', 'bool'], returns='None'),
    ],
    "initKeyboardEvent": [
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str', 'float'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str', 'float', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str', 'float', 'bool', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initKeyboardEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'str', 'float', 'bool', 'bool', 'bool', 'bool'], returns='None'),
    ],
    "initMessageEvent": [
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str', 'MessageEventSource'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str', 'MessageEventSource', 'list'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str', 'MessageEventSource', 'Iterable'], returns='None'),
    ],
    "initMouseEvent": [
        PrototypeCall(constructor='MouseEvent', fn='initMouseEvent', demands=['MouseEvent', 'str', 'bool', 'bool', 'Window', 'float', 'float', 'float', 'float', 'float', 'bool', 'bool', 'bool', 'bool', 'float', 'EventTarget'], returns='None'),
        PrototypeCall(constructor='PointerEvent', fn='initMouseEvent', demands=['PointerEvent', 'str', 'bool', 'bool', 'Window', 'float', 'float', 'float', 'float', 'float', 'bool', 'bool', 'bool', 'bool', 'float', 'EventTarget'], returns='None'),
        PrototypeCall(constructor='DragEvent', fn='initMouseEvent', demands=['DragEvent', 'str', 'bool', 'bool', 'Window', 'float', 'float', 'float', 'float', 'float', 'bool', 'bool', 'bool', 'bool', 'float', 'EventTarget'], returns='None'),
        PrototypeCall(constructor='WheelEvent', fn='initMouseEvent', demands=['WheelEvent', 'str', 'bool', 'bool', 'Window', 'float', 'float', 'float', 'float', 'float', 'bool', 'bool', 'bool', 'bool', 'float', 'EventTarget'], returns='None'),
    ],
    "initStorageEvent": [
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str', 'str', 'Storage'], returns='None'),
    ],
    "initTextEvent": [
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window', 'str'], returns='None'),
    ],
    "initUIEvent": [
        PrototypeCall(constructor='UIEvent', fn='initUIEvent', demands=['UIEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MouseEvent', fn='initUIEvent', demands=['MouseEvent', 'str'], returns='None'),
        PrototypeCall(constructor='InputEvent', fn='initUIEvent', demands=['InputEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TouchEvent', fn='initUIEvent', demands=['TouchEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initUIEvent', demands=['TextEvent', 'str'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initUIEvent', demands=['KeyboardEvent', 'str'], returns='None'),
        PrototypeCall(constructor='FocusEvent', fn='initUIEvent', demands=['FocusEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initUIEvent', demands=['CompositionEvent', 'str'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initUIEvent', demands=['UIEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MouseEvent', fn='initUIEvent', demands=['MouseEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='InputEvent', fn='initUIEvent', demands=['InputEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TouchEvent', fn='initUIEvent', demands=['TouchEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initUIEvent', demands=['TextEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initUIEvent', demands=['KeyboardEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='FocusEvent', fn='initUIEvent', demands=['FocusEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initUIEvent', demands=['CompositionEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initUIEvent', demands=['UIEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MouseEvent', fn='initUIEvent', demands=['MouseEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='InputEvent', fn='initUIEvent', demands=['InputEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TouchEvent', fn='initUIEvent', demands=['TouchEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initUIEvent', demands=['TextEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initUIEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='FocusEvent', fn='initUIEvent', demands=['FocusEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initUIEvent', demands=['CompositionEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initUIEvent', demands=['UIEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='MouseEvent', fn='initUIEvent', demands=['MouseEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='InputEvent', fn='initUIEvent', demands=['InputEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='TouchEvent', fn='initUIEvent', demands=['TouchEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initUIEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initUIEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='FocusEvent', fn='initUIEvent', demands=['FocusEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initUIEvent', demands=['CompositionEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='initUIEvent', demands=['UIEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='MouseEvent', fn='initUIEvent', demands=['MouseEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='InputEvent', fn='initUIEvent', demands=['InputEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='TouchEvent', fn='initUIEvent', demands=['TouchEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initUIEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='KeyboardEvent', fn='initUIEvent', demands=['KeyboardEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='FocusEvent', fn='initUIEvent', demands=['FocusEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
        PrototypeCall(constructor='CompositionEvent', fn='initUIEvent', demands=['CompositionEvent', 'str', 'bool', 'bool', 'Window', 'float'], returns='None'),
    ],
    "initialValue": [
        FieldCall(field='initialValue', demands=['PropertyDefinition'], returns='str'),
        FieldCall(field='initialValue', demands=['PropertyDefinition', 'str'], returns='None'),
        FieldCall(field='initialValue', demands=['CSSPropertyRule'], returns='str'),
    ],
    "initialize": [
        PrototypeCall(constructor='SVGLengthList', fn='initialize', demands=['SVGLengthList', 'SVGLength'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='initialize', demands=['SVGNumberList', 'SVGNumber'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='initialize', demands=['SVGPointList', 'DOMPoint'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='initialize', demands=['SVGStringList', 'str'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='initialize', demands=['SVGTransformList', 'SVGTransform'], returns='SVGTransform'),
    ],
    "initiatorType": [
        FieldCall(field='initiatorType', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "inline": [
        FieldCall(field='inline', demands=['ScrollIntoViewOptions'], returns='ScrollLogicalPosition'),
        FieldCall(field='inline', demands=['ScrollIntoViewOptions', 'ScrollLogicalPosition'], returns='None'),
    ],
    "inlineSize": [
        FieldCall(field='inlineSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='inlineSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='inlineSize', demands=['ResizeObserverSize'], returns='float'),
    ],
    "innerHTML": [
        FieldCall(field='innerHTML', demands=['Element'], returns='str'),
        FieldCall(field='innerHTML', demands=['Element', 'str'], returns='None'),
        FieldCall(field='innerHTML', demands=['ShadowRoot'], returns='str'),
        FieldCall(field='innerHTML', demands=['ShadowRoot', 'str'], returns='None'),
    ],
    "innerHeight": [
        FieldCall(field='innerHeight', demands=['Window'], returns='float'),
    ],
    "innerText": [
        FieldCall(field='innerText', demands=['HTMLElement'], returns='str'),
        FieldCall(field='innerText', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "innerWidth": [
        FieldCall(field='innerWidth', demands=['Window'], returns='float'),
    ],
    "input": [
        FieldCall(field='input', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='input', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='input', demands=['HTMLElementTagNameMap'], returns='HTMLInputElement'),
        FieldCall(field='input', demands=['HTMLElementTagNameMap', 'HTMLInputElement'], returns='None'),
        FieldCall(field='input', demands=['URLPatternComponentResult'], returns='str'),
        FieldCall(field='input', demands=['URLPatternComponentResult', 'str'], returns='None'),
        FieldCall(field='input', demands=['RegExpMatchArray'], returns='str'),
        FieldCall(field='input', demands=['RegExpMatchArray', 'str'], returns='None'),
        FieldCall(field='input', demands=['RegExpExecArray'], returns='str'),
        FieldCall(field='input', demands=['RegExpExecArray', 'str'], returns='None'),
        FieldCall(field='input', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='input', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "inputBuffer": [
        FieldCall(field='inputBuffer', demands=['AudioProcessingEventInit'], returns='AudioBuffer'),
        FieldCall(field='inputBuffer', demands=['AudioProcessingEventInit', 'AudioBuffer'], returns='None'),
        FieldCall(field='inputBuffer', demands=['AudioProcessingEvent'], returns='AudioBuffer'),
    ],
    "inputEncoding": [
        FieldCall(field='inputEncoding', demands=['Document'], returns='str'),
    ],
    "inputMode": [
        FieldCall(field='inputMode', demands=['ElementContentEditable'], returns='str'),
        FieldCall(field='inputMode', demands=['ElementContentEditable', 'str'], returns='None'),
    ],
    "inputType": [
        FieldCall(field='inputType', demands=['InputEventInit'], returns='str'),
        FieldCall(field='inputType', demands=['InputEventInit', 'str'], returns='None'),
        FieldCall(field='inputType', demands=['InputEvent'], returns='str'),
    ],
    "inputs": [
        FieldCall(field='inputs', demands=['MIDIAccess'], returns='MIDIInputMap'),
        FieldCall(field='inputs', demands=['URLPatternResult'], returns='[URLPatternInit]'),
        FieldCall(field='inputs', demands=['URLPatternResult', '[URLPatternInit]'], returns='None'),
    ],
    "ins": [
        FieldCall(field='ins', demands=['HTMLElementTagNameMap'], returns='HTMLModElement'),
        FieldCall(field='ins', demands=['HTMLElementTagNameMap', 'HTMLModElement'], returns='None'),
    ],
    "insertAdjacentElement": [
        PrototypeCall(constructor='Element', fn='insertAdjacentElement', demands=['Element', 'InsertPosition', 'Element'], returns='Element'),
        PrototypeCall(constructor='MathMLElement', fn='insertAdjacentElement', demands=['MathMLElement', 'InsertPosition', 'Element'], returns='Element'),
        PrototypeCall(constructor='SVGElement', fn='insertAdjacentElement', demands=['SVGElement', 'InsertPosition', 'Element'], returns='Element'),
        PrototypeCall(constructor='HTMLElement', fn='insertAdjacentElement', demands=['HTMLElement', 'InsertPosition', 'Element'], returns='Element'),
    ],
    "insertAdjacentHTML": [
        PrototypeCall(constructor='Element', fn='insertAdjacentHTML', demands=['Element', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='insertAdjacentHTML', demands=['MathMLElement', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='insertAdjacentHTML', demands=['SVGElement', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='insertAdjacentHTML', demands=['HTMLElement', 'InsertPosition', 'str'], returns='None'),
    ],
    "insertAdjacentText": [
        PrototypeCall(constructor='Element', fn='insertAdjacentText', demands=['Element', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='insertAdjacentText', demands=['MathMLElement', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='insertAdjacentText', demands=['SVGElement', 'InsertPosition', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='insertAdjacentText', demands=['HTMLElement', 'InsertPosition', 'str'], returns='None'),
    ],
    "insertBefore": [
        PrototypeCall(constructor='Node', fn='insertBefore', demands=['Node', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='DocumentType', fn='insertBefore', demands=['DocumentType', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='CharacterData', fn='insertBefore', demands=['CharacterData', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='Element', fn='insertBefore', demands=['Element', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='Attr', fn='insertBefore', demands=['Attr', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='Document', fn='insertBefore', demands=['Document', 'T', 'Node'], returns='T'),
        PrototypeCall(constructor='DocumentFragment', fn='insertBefore', demands=['DocumentFragment', 'T', 'Node'], returns='T'),
    ],
    "insertCell": [
        PrototypeCall(constructor='HTMLTableRowElement', fn='insertCell', demands=['HTMLTableRowElement'], returns='HTMLTableCellElement'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='insertCell', demands=['HTMLTableRowElement', 'float'], returns='HTMLTableCellElement'),
    ],
    "insertDTMF": [
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str', 'float'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str', 'float', 'float'], returns='None'),
    ],
    "insertData": [
        PrototypeCall(constructor='CharacterData', fn='insertData', demands=['CharacterData', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='Text', fn='insertData', demands=['Text', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='ProcessingInstruction', fn='insertData', demands=['ProcessingInstruction', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='Comment', fn='insertData', demands=['Comment', 'float', 'str'], returns='None'),
    ],
    "insertItemBefore": [
        PrototypeCall(constructor='SVGLengthList', fn='insertItemBefore', demands=['SVGLengthList', 'SVGLength', 'float'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='insertItemBefore', demands=['SVGNumberList', 'SVGNumber', 'float'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='insertItemBefore', demands=['SVGPointList', 'DOMPoint', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='insertItemBefore', demands=['SVGStringList', 'str', 'float'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='insertItemBefore', demands=['SVGTransformList', 'SVGTransform', 'float'], returns='SVGTransform'),
    ],
    "insertNode": [
        PrototypeCall(constructor='Range', fn='insertNode', demands=['Range', 'Node'], returns='None'),
    ],
    "insertRow": [
        PrototypeCall(constructor='HTMLTableElement', fn='insertRow', demands=['HTMLTableElement'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableElement', fn='insertRow', demands=['HTMLTableElement', 'float'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='insertRow', demands=['HTMLTableSectionElement'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='insertRow', demands=['HTMLTableSectionElement', 'float'], returns='HTMLTableRowElement'),
    ],
    "insertRule": [
        PrototypeCall(constructor='CSSGroupingRule', fn='insertRule', demands=['CSSGroupingRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSStartingStyleRule', fn='insertRule', demands=['CSSStartingStyleRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSPageRule', fn='insertRule', demands=['CSSPageRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSStyleRule', fn='insertRule', demands=['CSSStyleRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSConditionRule', fn='insertRule', demands=['CSSConditionRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSScopeRule', fn='insertRule', demands=['CSSScopeRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSLayerBlockRule', fn='insertRule', demands=['CSSLayerBlockRule', 'str'], returns='float'),
        PrototypeCall(constructor='CSSGroupingRule', fn='insertRule', demands=['CSSGroupingRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSStartingStyleRule', fn='insertRule', demands=['CSSStartingStyleRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSPageRule', fn='insertRule', demands=['CSSPageRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSStyleRule', fn='insertRule', demands=['CSSStyleRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSConditionRule', fn='insertRule', demands=['CSSConditionRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSScopeRule', fn='insertRule', demands=['CSSScopeRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSLayerBlockRule', fn='insertRule', demands=['CSSLayerBlockRule', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='CSSStyleSheet', fn='insertRule', demands=['CSSStyleSheet', 'str'], returns='float'),
        PrototypeCall(constructor='CSSStyleSheet', fn='insertRule', demands=['CSSStyleSheet', 'str', 'float'], returns='float'),
    ],
    "insertedSamplesForDeceleration": [
        FieldCall(field='insertedSamplesForDeceleration', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='insertedSamplesForDeceleration', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "inset": [
        FieldCall(field='inset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='inset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetBlock": [
        FieldCall(field='insetBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetBlockEnd": [
        FieldCall(field='insetBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetBlockStart": [
        FieldCall(field='insetBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetInline": [
        FieldCall(field='insetInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetInlineEnd": [
        FieldCall(field='insetInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "insetInlineStart": [
        FieldCall(field='insetInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='insetInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "installing": [
        FieldCall(field='installing', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
    ],
    "integrity": [
        FieldCall(field='integrity', demands=['RequestInit'], returns='str'),
        FieldCall(field='integrity', demands=['RequestInit', 'str'], returns='None'),
        FieldCall(field='integrity', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='integrity', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='integrity', demands=['Request'], returns='str'),
    ],
    "intercept": [
        FieldCall(field='intercept', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "intersection": [
        PrototypeCall(constructor='Highlight', fn='intersection', demands=['Highlight', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='intersection', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='FontFaceSet', fn='intersection', demands=['FontFaceSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='CustomStateSet', fn='intersection', demands=['CustomStateSet', 'ReadonlySetLike'], returns='Set'),
        PrototypeCall(constructor='ReadonlySet', fn='intersection', demands=['ReadonlySet', 'ReadonlySetLike'], returns='Set'),
    ],
    "intersectionRatio": [
        FieldCall(field='intersectionRatio', demands=['IntersectionObserverEntry'], returns='float'),
    ],
    "intersectionRect": [
        FieldCall(field='intersectionRect', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "intersectsNode": [
        PrototypeCall(constructor='Range', fn='intersectsNode', demands=['Range', 'Node'], returns='bool'),
    ],
    "interval": [
        FieldCall(field='interval', demands=['DeviceMotionEventInit'], returns='float'),
        FieldCall(field='interval', demands=['DeviceMotionEventInit', 'float'], returns='None'),
        FieldCall(field='interval', demands=['DeviceMotionEvent'], returns='float'),
    ],
    "invalid": [
        FieldCall(field='invalid', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='invalid', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "invalidIteratorState": [
        FieldCall(field='invalidIteratorState', demands=['XPathResult'], returns='bool'),
    ],
    "invalidateFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'list'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'Iterable'], returns='None'),
    ],
    "invalidateSubFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateSubFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'list', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateSubFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'Iterable', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "inverse": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='inverse', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='inverse', demands=['DOMMatrix'], returns='DOMMatrix'),
    ],
    "invertSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='invertSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
    ],
    "is": [
        FieldCall(field='is', demands=['ElementCreationOptions'], returns='str'),
        FieldCall(field='is', demands=['ElementCreationOptions', 'str'], returns='None'),
        PrototypeCall(constructor='ObjectConstructor', fn='is', demands=['ObjectConstructor', '*', '*'], returns='bool'),
    ],
    "is2D": [
        FieldCall(field='is2D', demands=['CSSMatrixComponentOptions'], returns='bool'),
        FieldCall(field='is2D', demands=['CSSMatrixComponentOptions', 'bool'], returns='None'),
        FieldCall(field='is2D', demands=['DOMMatrixInit'], returns='bool'),
        FieldCall(field='is2D', demands=['DOMMatrixInit', 'bool'], returns='None'),
        FieldCall(field='is2D', demands=['CSSTransformComponent'], returns='bool'),
        FieldCall(field='is2D', demands=['CSSTransformComponent', 'bool'], returns='None'),
        FieldCall(field='is2D', demands=['CSSTransformValue'], returns='bool'),
        FieldCall(field='is2D', demands=['DOMMatrixReadOnly'], returns='bool'),
    ],
    "isActive": [
        FieldCall(field='isActive', demands=['UserActivation'], returns='bool'),
    ],
    "isArray": [
        PrototypeCall(constructor='ArrayConstructor', fn='isArray', demands=['ArrayConstructor', '*'], returns='list'),
    ],
    "isBuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isBuffer', demands=['WebGLRenderingContext', 'WebGLBuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isBuffer', demands=['WebGL2RenderingContext', 'WebGLBuffer'], returns='GLboolean'),
    ],
    "isCollapsed": [
        FieldCall(field='isCollapsed', demands=['Selection'], returns='bool'),
    ],
    "isComposing": [
        FieldCall(field='isComposing', demands=['InputEventInit'], returns='bool'),
        FieldCall(field='isComposing', demands=['InputEventInit', 'bool'], returns='None'),
        FieldCall(field='isComposing', demands=['KeyboardEventInit'], returns='bool'),
        FieldCall(field='isComposing', demands=['KeyboardEventInit', 'bool'], returns='None'),
        FieldCall(field='isComposing', demands=['InputEvent'], returns='bool'),
        FieldCall(field='isComposing', demands=['KeyboardEvent'], returns='bool'),
    ],
    "isConcatSpreadable": [
        FieldCall(field='isConcatSpreadable', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "isConnected": [
        FieldCall(field='isConnected', demands=['Node'], returns='bool'),
    ],
    "isContentEditable": [
        FieldCall(field='isContentEditable', demands=['ElementContentEditable'], returns='bool'),
    ],
    "isContextLost": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isContextLost', demands=['CanvasRenderingContext2D'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isContextLost', demands=['OffscreenCanvasRenderingContext2D'], returns='bool'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isContextLost', demands=['WebGLRenderingContext'], returns='bool'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isContextLost', demands=['WebGL2RenderingContext'], returns='bool'),
    ],
    "isDefaultNamespace": [
        PrototypeCall(constructor='Node', fn='isDefaultNamespace', demands=['Node', 'str'], returns='bool'),
        PrototypeCall(constructor='DocumentType', fn='isDefaultNamespace', demands=['DocumentType', 'str'], returns='bool'),
        PrototypeCall(constructor='CharacterData', fn='isDefaultNamespace', demands=['CharacterData', 'str'], returns='bool'),
        PrototypeCall(constructor='Element', fn='isDefaultNamespace', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='Attr', fn='isDefaultNamespace', demands=['Attr', 'str'], returns='bool'),
        PrototypeCall(constructor='Document', fn='isDefaultNamespace', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='DocumentFragment', fn='isDefaultNamespace', demands=['DocumentFragment', 'str'], returns='bool'),
    ],
    "isDirectory": [
        FieldCall(field='isDirectory', demands=['FileSystemEntry'], returns='bool'),
    ],
    "isDisjointFrom": [
        PrototypeCall(constructor='Highlight', fn='isDisjointFrom', demands=['Highlight', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='isDisjointFrom', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='isDisjointFrom', demands=['FontFaceSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='CustomStateSet', fn='isDisjointFrom', demands=['CustomStateSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ReadonlySet', fn='isDisjointFrom', demands=['ReadonlySet', 'ReadonlySetLike'], returns='bool'),
    ],
    "isEnabled": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isEnabled', demands=['WebGLRenderingContext', 'GLenum'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isEnabled', demands=['WebGL2RenderingContext', 'GLenum'], returns='GLboolean'),
    ],
    "isEqualNode": [
        PrototypeCall(constructor='Node', fn='isEqualNode', demands=['Node', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentType', fn='isEqualNode', demands=['DocumentType', 'Node'], returns='bool'),
        PrototypeCall(constructor='CharacterData', fn='isEqualNode', demands=['CharacterData', 'Node'], returns='bool'),
        PrototypeCall(constructor='Element', fn='isEqualNode', demands=['Element', 'Node'], returns='bool'),
        PrototypeCall(constructor='Attr', fn='isEqualNode', demands=['Attr', 'Node'], returns='bool'),
        PrototypeCall(constructor='Document', fn='isEqualNode', demands=['Document', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentFragment', fn='isEqualNode', demands=['DocumentFragment', 'Node'], returns='bool'),
    ],
    "isError": [
        PrototypeCall(constructor='ErrorConstructor', fn='isError', demands=['ErrorConstructor', '*'], returns='errorisError'),
    ],
    "isExtensible": [
        PrototypeCall(constructor='ObjectConstructor', fn='isExtensible', demands=['ObjectConstructor', '*'], returns='bool'),
        PrototypeCall(constructor='ProxyHandler', fn='isExtensible', demands=['ProxyHandler', 'T'], returns='bool'),
    ],
    "isFile": [
        FieldCall(field='isFile', demands=['FileSystemEntry'], returns='bool'),
    ],
    "isFinal": [
        FieldCall(field='isFinal', demands=['SpeechRecognitionResult'], returns='bool'),
    ],
    "isFinite": [
        PrototypeCall(constructor='NumberConstructor', fn='isFinite', demands=['NumberConstructor', '*'], returns='bool'),
    ],
    "isFramebuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isFramebuffer', demands=['WebGLRenderingContext', 'WebGLFramebuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isFramebuffer', demands=['WebGL2RenderingContext', 'WebGLFramebuffer'], returns='GLboolean'),
    ],
    "isFrozen": [
        PrototypeCall(constructor='ObjectConstructor', fn='isFrozen', demands=['ObjectConstructor', '*'], returns='bool'),
    ],
    "isHistoryNavigation": [
        FieldCall(field='isHistoryNavigation', demands=['Request'], returns='bool'),
    ],
    "isIdentity": [
        FieldCall(field='isIdentity', demands=['DOMMatrixReadOnly'], returns='bool'),
    ],
    "isInteger": [
        PrototypeCall(constructor='NumberConstructor', fn='isInteger', demands=['NumberConstructor', '*'], returns='bool'),
    ],
    "isIntersecting": [
        FieldCall(field='isIntersecting', demands=['IntersectionObserverEntry'], returns='bool'),
    ],
    "isLockFree": [
        PrototypeCall(constructor='Atomics', fn='isLockFree', demands=['Atomics', 'float'], returns='bool'),
    ],
    "isMap": [
        FieldCall(field='isMap', demands=['HTMLImageElement'], returns='bool'),
        FieldCall(field='isMap', demands=['HTMLImageElement', 'bool'], returns='None'),
    ],
    "isNaN": [
        PrototypeCall(constructor='NumberConstructor', fn='isNaN', demands=['NumberConstructor', '*'], returns='bool'),
    ],
    "isPointInFill": [
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInFill', demands=['SVGGeometryElement'], returns='bool'),
        PrototypeCall(constructor='SVGRectElement', fn='isPointInFill', demands=['SVGRectElement'], returns='bool'),
        PrototypeCall(constructor='SVGEllipseElement', fn='isPointInFill', demands=['SVGEllipseElement'], returns='bool'),
        PrototypeCall(constructor='SVGPolygonElement', fn='isPointInFill', demands=['SVGPolygonElement'], returns='bool'),
        PrototypeCall(constructor='SVGPolylineElement', fn='isPointInFill', demands=['SVGPolylineElement'], returns='bool'),
        PrototypeCall(constructor='SVGCircleElement', fn='isPointInFill', demands=['SVGCircleElement'], returns='bool'),
        PrototypeCall(constructor='SVGLineElement', fn='isPointInFill', demands=['SVGLineElement'], returns='bool'),
        PrototypeCall(constructor='SVGPathElement', fn='isPointInFill', demands=['SVGPathElement'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInFill', demands=['SVGGeometryElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGRectElement', fn='isPointInFill', demands=['SVGRectElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGEllipseElement', fn='isPointInFill', demands=['SVGEllipseElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPolygonElement', fn='isPointInFill', demands=['SVGPolygonElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPolylineElement', fn='isPointInFill', demands=['SVGPolylineElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGCircleElement', fn='isPointInFill', demands=['SVGCircleElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGLineElement', fn='isPointInFill', demands=['SVGLineElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPathElement', fn='isPointInFill', demands=['SVGPathElement', 'DOMPointInit'], returns='bool'),
    ],
    "isPointInPath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
    ],
    "isPointInRange": [
        PrototypeCall(constructor='Range', fn='isPointInRange', demands=['Range', 'Node', 'float'], returns='bool'),
    ],
    "isPointInStroke": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInStroke', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInStroke', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInStroke', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInStroke', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInStroke', demands=['SVGGeometryElement'], returns='bool'),
        PrototypeCall(constructor='SVGRectElement', fn='isPointInStroke', demands=['SVGRectElement'], returns='bool'),
        PrototypeCall(constructor='SVGEllipseElement', fn='isPointInStroke', demands=['SVGEllipseElement'], returns='bool'),
        PrototypeCall(constructor='SVGPolygonElement', fn='isPointInStroke', demands=['SVGPolygonElement'], returns='bool'),
        PrototypeCall(constructor='SVGPolylineElement', fn='isPointInStroke', demands=['SVGPolylineElement'], returns='bool'),
        PrototypeCall(constructor='SVGCircleElement', fn='isPointInStroke', demands=['SVGCircleElement'], returns='bool'),
        PrototypeCall(constructor='SVGLineElement', fn='isPointInStroke', demands=['SVGLineElement'], returns='bool'),
        PrototypeCall(constructor='SVGPathElement', fn='isPointInStroke', demands=['SVGPathElement'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInStroke', demands=['SVGGeometryElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGRectElement', fn='isPointInStroke', demands=['SVGRectElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGEllipseElement', fn='isPointInStroke', demands=['SVGEllipseElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPolygonElement', fn='isPointInStroke', demands=['SVGPolygonElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPolylineElement', fn='isPointInStroke', demands=['SVGPolylineElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGCircleElement', fn='isPointInStroke', demands=['SVGCircleElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGLineElement', fn='isPointInStroke', demands=['SVGLineElement', 'DOMPointInit'], returns='bool'),
        PrototypeCall(constructor='SVGPathElement', fn='isPointInStroke', demands=['SVGPathElement', 'DOMPointInit'], returns='bool'),
    ],
    "isPrimary": [
        FieldCall(field='isPrimary', demands=['PointerEventInit'], returns='bool'),
        FieldCall(field='isPrimary', demands=['PointerEventInit', 'bool'], returns='None'),
        FieldCall(field='isPrimary', demands=['PointerEvent'], returns='bool'),
    ],
    "isProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='GLboolean'),
    ],
    "isPrototypeOf": [
        PrototypeCall(constructor='Object', fn='isPrototypeOf', demands=['Object', 'Object'], returns='bool'),
    ],
    "isQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isQuery', demands=['WebGL2RenderingContext', 'WebGLQuery'], returns='GLboolean'),
    ],
    "isReloadNavigation": [
        FieldCall(field='isReloadNavigation', demands=['Request'], returns='bool'),
    ],
    "isRenderbuffer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isRenderbuffer', demands=['WebGLRenderingContext', 'WebGLRenderbuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isRenderbuffer', demands=['WebGL2RenderingContext', 'WebGLRenderbuffer'], returns='GLboolean'),
    ],
    "isSafeInteger": [
        PrototypeCall(constructor='NumberConstructor', fn='isSafeInteger', demands=['NumberConstructor', '*'], returns='bool'),
    ],
    "isSameEntry": [
        PrototypeCall(constructor='FileSystemHandle', fn='isSameEntry', demands=['FileSystemHandle', 'FileSystemHandle'], returns='bool'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='isSameEntry', demands=['FileSystemFileHandle', 'FileSystemHandle'], returns='bool'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='isSameEntry', demands=['FileSystemDirectoryHandle', 'FileSystemHandle'], returns='bool'),
    ],
    "isSameNode": [
        PrototypeCall(constructor='Node', fn='isSameNode', demands=['Node', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentType', fn='isSameNode', demands=['DocumentType', 'Node'], returns='bool'),
        PrototypeCall(constructor='CharacterData', fn='isSameNode', demands=['CharacterData', 'Node'], returns='bool'),
        PrototypeCall(constructor='Element', fn='isSameNode', demands=['Element', 'Node'], returns='bool'),
        PrototypeCall(constructor='Attr', fn='isSameNode', demands=['Attr', 'Node'], returns='bool'),
        PrototypeCall(constructor='Document', fn='isSameNode', demands=['Document', 'Node'], returns='bool'),
        PrototypeCall(constructor='DocumentFragment', fn='isSameNode', demands=['DocumentFragment', 'Node'], returns='bool'),
    ],
    "isSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isSampler', demands=['WebGL2RenderingContext', 'WebGLSampler'], returns='GLboolean'),
    ],
    "isSealed": [
        PrototypeCall(constructor='ObjectConstructor', fn='isSealed', demands=['ObjectConstructor', '*'], returns='bool'),
    ],
    "isSecureContext": [
        FieldCall(field='isSecureContext', demands=['WindowOrWorkerGlobalScope'], returns='bool'),
    ],
    "isShader": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='GLboolean'),
    ],
    "isSubsetOf": [
        PrototypeCall(constructor='Highlight', fn='isSubsetOf', demands=['Highlight', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='isSubsetOf', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='isSubsetOf', demands=['FontFaceSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='CustomStateSet', fn='isSubsetOf', demands=['CustomStateSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ReadonlySet', fn='isSubsetOf', demands=['ReadonlySet', 'ReadonlySetLike'], returns='bool'),
    ],
    "isSupersetOf": [
        PrototypeCall(constructor='Highlight', fn='isSupersetOf', demands=['Highlight', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='isSupersetOf', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='isSupersetOf', demands=['FontFaceSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='CustomStateSet', fn='isSupersetOf', demands=['CustomStateSet', 'ReadonlySetLike'], returns='bool'),
        PrototypeCall(constructor='ReadonlySet', fn='isSupersetOf', demands=['ReadonlySet', 'ReadonlySetLike'], returns='bool'),
    ],
    "isSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isSync', demands=['WebGL2RenderingContext', 'WebGLSync'], returns='GLboolean'),
    ],
    "isTexture": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='isTexture', demands=['WebGLRenderingContext', 'WebGLTexture'], returns='GLboolean'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isTexture', demands=['WebGL2RenderingContext', 'WebGLTexture'], returns='GLboolean'),
    ],
    "isTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isTransformFeedback', demands=['WebGL2RenderingContext', 'WebGLTransformFeedback'], returns='GLboolean'),
    ],
    "isTrusted": [
        FieldCall(field='isTrusted', demands=['Event'], returns='bool'),
    ],
    "isVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='GLboolean'),
    ],
    "isVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='isVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='GLboolean'),
    ],
    "isView": [
        PrototypeCall(constructor='ArrayBufferConstructor', fn='isView', demands=['ArrayBufferConstructor', '*'], returns='argisArrayBufferView'),
    ],
    "isWellFormed": [
        PrototypeCall(constructor='String', fn='isWellFormed', demands=['str'], returns='bool'),
    ],
    "isindex": [
        FieldCall(field='isindex', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='isindex', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "isolation": [
        FieldCall(field='isolation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='isolation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "italics": [
        PrototypeCall(constructor='String', fn='italics', demands=['str'], returns='str'),
    ],
    "item": [
        PrototypeCall(constructor='CSSRuleList', fn='item', demands=['CSSRuleList', 'float'], returns='CSSRule'),
        PrototypeCall(constructor='CSSStyleDeclaration', fn='item', demands=['CSSStyleDeclaration', 'float'], returns='str'),
        PrototypeCall(constructor='DOMRectList', fn='item', demands=['DOMRectList', 'float'], returns='DOMRect'),
        PrototypeCall(constructor='DOMStringList', fn='item', demands=['DOMStringList', 'float'], returns='str'),
        PrototypeCall(constructor='DOMTokenList', fn='item', demands=['DOMTokenList', 'float'], returns='str'),
        PrototypeCall(constructor='FileList', fn='item', demands=['FileList', 'float'], returns='File'),
        PrototypeCall(constructor='HTMLAllCollection', fn='item', demands=['HTMLAllCollection'], returns='HTMLCollection'),
        PrototypeCall(constructor='HTMLAllCollection', fn='item', demands=['HTMLAllCollection', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='HTMLFormControlsCollection', fn='item', demands=['HTMLFormControlsCollection', 'float'], returns='Element'),
        PrototypeCall(constructor='HTMLCollection', fn='item', demands=['HTMLCollection', 'float'], returns='Element'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='item', demands=['HTMLOptionsCollection', 'float'], returns='T'),
        PrototypeCall(constructor='HTMLSelectElement', fn='item', demands=['HTMLSelectElement', 'float'], returns='HTMLOptionElement'),
        PrototypeCall(constructor='MediaList', fn='item', demands=['MediaList', 'float'], returns='str'),
        PrototypeCall(constructor='MimeTypeArray', fn='item', demands=['MimeTypeArray', 'float'], returns='MimeType'),
        PrototypeCall(constructor='NamedNodeMap', fn='item', demands=['NamedNodeMap', 'float'], returns='Attr'),
        PrototypeCall(constructor='NodeList', fn='item', demands=['NodeList', 'float'], returns='Node'),
        PrototypeCall(constructor='RadioNodeList', fn='item', demands=['RadioNodeList', 'float'], returns='Node'),
        PrototypeCall(constructor='NodeListOf', fn='item', demands=['NodeListOf', 'float'], returns='TNode'),
        PrototypeCall(constructor='Plugin', fn='item', demands=['Plugin', 'float'], returns='MimeType'),
        PrototypeCall(constructor='PluginArray', fn='item', demands=['PluginArray', 'float'], returns='Plugin'),
        PrototypeCall(constructor='SpeechRecognitionResult', fn='item', demands=['SpeechRecognitionResult', 'float'], returns='SpeechRecognitionAlternative'),
        PrototypeCall(constructor='SpeechRecognitionResultList', fn='item', demands=['SpeechRecognitionResultList', 'float'], returns='SpeechRecognitionResult'),
        PrototypeCall(constructor='StyleSheetList', fn='item', demands=['StyleSheetList', 'float'], returns='CSSStyleSheet'),
        PrototypeCall(constructor='TouchList', fn='item', demands=['TouchList', 'float'], returns='Touch'),
    ],
    "items": [
        FieldCall(field='items', demands=['DataTransfer'], returns='DataTransferItemList'),
    ],
    "iterateNext": [
        PrototypeCall(constructor='XPathResult', fn='iterateNext', demands=['XPathResult'], returns='Node'),
    ],
    "iterationComposite": [
        FieldCall(field='iterationComposite', demands=['KeyframeEffectOptions'], returns='IterationCompositeOperation'),
        FieldCall(field='iterationComposite', demands=['KeyframeEffectOptions', 'IterationCompositeOperation'], returns='None'),
        FieldCall(field='iterationComposite', demands=['KeyframeEffect'], returns='IterationCompositeOperation'),
        FieldCall(field='iterationComposite', demands=['KeyframeEffect', 'IterationCompositeOperation'], returns='None'),
    ],
    "iterationStart": [
        FieldCall(field='iterationStart', demands=['EffectTiming'], returns='float'),
        FieldCall(field='iterationStart', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='iterationStart', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='iterationStart', demands=['OptionalEffectTiming', 'float'], returns='None'),
    ],
    "iterations": [
        FieldCall(field='iterations', demands=['EffectTiming'], returns='float'),
        FieldCall(field='iterations', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='iterations', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='iterations', demands=['OptionalEffectTiming', 'float'], returns='None'),
        FieldCall(field='iterations', demands=['Pbkdf2Params'], returns='float'),
        FieldCall(field='iterations', demands=['Pbkdf2Params', 'float'], returns='None'),
    ],
    "iterator": [
        FieldCall(field='iterator', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "iv": [
        FieldCall(field='iv', demands=['AesCbcParams'], returns='BufferSource'),
        FieldCall(field='iv', demands=['AesCbcParams', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='iv', demands=['AesGcmParams'], returns='BufferSource'),
        FieldCall(field='iv', demands=['AesGcmParams', 'AllowSharedBufferSource'], returns='None'),
    ],
    "javaEnabled": [
        PrototypeCall(constructor='Navigator', fn='javaEnabled', demands=['Navigator'], returns='bool'),
    ],
    "jitter": [
        FieldCall(field='jitter', demands=['RTCReceivedRtpStreamStats'], returns='float'),
        FieldCall(field='jitter', demands=['RTCReceivedRtpStreamStats', 'float'], returns='None'),
    ],
    "jitterBufferDelay": [
        FieldCall(field='jitterBufferDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='jitterBufferDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "jitterBufferEmittedCount": [
        FieldCall(field='jitterBufferEmittedCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='jitterBufferEmittedCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "jitterBufferMinimumDelay": [
        FieldCall(field='jitterBufferMinimumDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='jitterBufferMinimumDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "jitterBufferTarget": [
        FieldCall(field='jitterBufferTarget', demands=['RTCRtpReceiver'], returns='DOMHighResTimeStamp'),
        FieldCall(field='jitterBufferTarget', demands=['RTCRtpReceiver', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "jitterBufferTargetDelay": [
        FieldCall(field='jitterBufferTargetDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='jitterBufferTargetDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "join": [
        PrototypeCall(constructor='BigInt64Array', fn='join', demands=['BigInt64Array'], returns='str'),
        PrototypeCall(constructor='BigInt64Array', fn='join', demands=['BigInt64Array', 'str'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='join', demands=['BigUint64Array'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='join', demands=['BigUint64Array', 'str'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='join', demands=['ReadonlyArray'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='join', demands=['ReadonlyArray', 'str'], returns='str'),
        PrototypeCall(constructor='ConcatArray', fn='join', demands=['ConcatArray'], returns='str'),
        PrototypeCall(constructor='ConcatArray', fn='join', demands=['ConcatArray', 'str'], returns='str'),
        PrototypeCall(constructor='Array', fn='join', demands=['list'], returns='str'),
        PrototypeCall(constructor='Array', fn='join', demands=['list', 'str'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='join', demands=['Int8Array'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='join', demands=['Int8Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='join', demands=['Uint8Array'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='join', demands=['Uint8Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='join', demands=['Uint8ClampedArray'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='join', demands=['Uint8ClampedArray', 'str'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='join', demands=['Int16Array'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='join', demands=['Int16Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='join', demands=['Uint16Array'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='join', demands=['Uint16Array', 'str'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='join', demands=['Int32Array'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='join', demands=['Int32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='join', demands=['Uint32Array'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='join', demands=['Uint32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='join', demands=['Float32Array'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='join', demands=['Float32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='join', demands=['Float64Array'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='join', demands=['Float64Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='join', demands=['Float16Array'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='join', demands=['Float16Array', 'str'], returns='str'),
    ],
    "json": [
        PrototypeCall(constructor='Request', fn='json', demands=['Request'], returns='*'),
        PrototypeCall(constructor='Response', fn='json', demands=['Response'], returns='*'),
    ],
    "justifyContent": [
        FieldCall(field='justifyContent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='justifyContent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "justifyItems": [
        FieldCall(field='justifyItems', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='justifyItems', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "justifySelf": [
        FieldCall(field='justifySelf', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='justifySelf', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "k": [
        FieldCall(field='k', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='k', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "k1": [
        FieldCall(field='k1', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k2": [
        FieldCall(field='k2', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k3": [
        FieldCall(field='k3', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k4": [
        FieldCall(field='k4', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "kbd": [
        FieldCall(field='kbd', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='kbd', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "keepExistingData": [
        FieldCall(field='keepExistingData', demands=['FileSystemCreateWritableOptions'], returns='bool'),
        FieldCall(field='keepExistingData', demands=['FileSystemCreateWritableOptions', 'bool'], returns='None'),
    ],
    "keepalive": [
        FieldCall(field='keepalive', demands=['RequestInit'], returns='bool'),
        FieldCall(field='keepalive', demands=['RequestInit', 'bool'], returns='None'),
        FieldCall(field='keepalive', demands=['Request'], returns='bool'),
    ],
    "kernelMatrix": [
        FieldCall(field='kernelMatrix', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumberList'),
    ],
    "kernelUnitLengthX": [
        FieldCall(field='kernelUnitLengthX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthX', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthX', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "kernelUnitLengthY": [
        FieldCall(field='kernelUnitLengthY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthY', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthY', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "key": [
        FieldCall(field='key', demands=['KeyboardEventInit'], returns='str'),
        FieldCall(field='key', demands=['KeyboardEventInit', 'str'], returns='None'),
        FieldCall(field='key', demands=['StorageEventInit'], returns='str'),
        FieldCall(field='key', demands=['StorageEventInit', 'str'], returns='None'),
        FieldCall(field='key', demands=['IDBCursor'], returns='IDBValidKey'),
        FieldCall(field='key', demands=['KeyboardEvent'], returns='str'),
        FieldCall(field='key', demands=['NavigationHistoryEntry'], returns='str'),
        PrototypeCall(constructor='Storage', fn='key', demands=['Storage', 'float'], returns='str'),
        FieldCall(field='key', demands=['StorageEvent'], returns='str'),
    ],
    "keyCode": [
        FieldCall(field='keyCode', demands=['KeyboardEventInit'], returns='float'),
        FieldCall(field='keyCode', demands=['KeyboardEventInit', 'float'], returns='None'),
        FieldCall(field='keyCode', demands=['KeyboardEvent'], returns='float'),
    ],
    "keyFor": [
        PrototypeCall(constructor='SymbolConstructor', fn='keyFor', demands=['SymbolConstructor', 'symbol'], returns='str'),
    ],
    "keyFrame": [
        FieldCall(field='keyFrame', demands=['VideoEncoderEncodeOptions'], returns='bool'),
        FieldCall(field='keyFrame', demands=['VideoEncoderEncodeOptions', 'bool'], returns='None'),
    ],
    "keyFramesDecoded": [
        FieldCall(field='keyFramesDecoded', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='keyFramesDecoded', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "keyFramesEncoded": [
        FieldCall(field='keyFramesEncoded', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='keyFramesEncoded', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "keyPath": [
        FieldCall(field='keyPath', demands=['IDBObjectStoreParameters'], returns='str'),
        FieldCall(field='keyPath', demands=['IDBObjectStoreParameters', 'str'], returns='None'),
        FieldCall(field='keyPath', demands=['IDBIndex'], returns='str'),
        FieldCall(field='keyPath', demands=['IDBObjectStore'], returns='str'),
    ],
    "keyStatuses": [
        FieldCall(field='keyStatuses', demands=['MediaKeySession'], returns='MediaKeyStatusMap'),
    ],
    "keySystem": [
        FieldCall(field='keySystem', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='str'),
        FieldCall(field='keySystem', demands=['MediaCapabilitiesKeySystemConfiguration', 'str'], returns='None'),
        FieldCall(field='keySystem', demands=['MediaKeySystemAccess'], returns='str'),
    ],
    "keySystemAccess": [
        FieldCall(field='keySystemAccess', demands=['MediaCapabilitiesDecodingInfo'], returns='MediaKeySystemAccess'),
        FieldCall(field='keySystemAccess', demands=['MediaCapabilitiesDecodingInfo', 'MediaKeySystemAccess'], returns='None'),
    ],
    "keySystemConfiguration": [
        FieldCall(field='keySystemConfiguration', demands=['MediaDecodingConfiguration'], returns='MediaCapabilitiesKeySystemConfiguration'),
        FieldCall(field='keySystemConfiguration', demands=['MediaDecodingConfiguration', 'MediaCapabilitiesKeySystemConfiguration'], returns='None'),
    ],
    "keyText": [
        FieldCall(field='keyText', demands=['CSSKeyframeRule'], returns='str'),
        FieldCall(field='keyText', demands=['CSSKeyframeRule', 'str'], returns='None'),
    ],
    "key_ops": [
        FieldCall(field='key_ops', demands=['JsonWebKey'], returns='list'),
        FieldCall(field='key_ops', demands=['JsonWebKey', 'list'], returns='None'),
    ],
    "keydown": [
        FieldCall(field='keydown', demands=['GlobalEventHandlersEventMap'], returns='KeyboardEvent'),
        FieldCall(field='keydown', demands=['GlobalEventHandlersEventMap', 'KeyboardEvent'], returns='None'),
    ],
    "keygen": [
        FieldCall(field='keygen', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='keygen', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "keypress": [
        FieldCall(field='keypress', demands=['GlobalEventHandlersEventMap'], returns='KeyboardEvent'),
        FieldCall(field='keypress', demands=['GlobalEventHandlersEventMap', 'KeyboardEvent'], returns='None'),
    ],
    "keys": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='keys', demands=['FileSystemDirectoryHandle'], returns='FileSystemDirectoryHandleAsyncIterator'),
        FieldCall(field='keys', demands=['PushSubscriptionJSON'], returns='Record'),
        FieldCall(field='keys', demands=['PushSubscriptionJSON', 'Record'], returns='None'),
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache'], returns='ReadonlyArray'),
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache', 'RequestInfo'], returns='ReadonlyArray'),
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache', 'RequestInfo', 'CacheQueryOptions'], returns='ReadonlyArray'),
        PrototypeCall(constructor='CacheStorage', fn='keys', demands=['CacheStorage'], returns='list'),
        PrototypeCall(constructor='CSSNumericArray', fn='keys', demands=['CSSNumericArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSTransformValue', fn='keys', demands=['CSSTransformValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='keys', demands=['CSSUnparsedValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMTokenList', fn='keys', demands=['DOMTokenList'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='keys', demands=['FormData'], returns='FormDataIterator'),
        PrototypeCall(constructor='Headers', fn='keys', demands=['Headers'], returns='HeadersIterator'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='keys', demands=['MediaKeyStatusMap'], returns='MediaKeyStatusMapIterator'),
        PrototypeCall(constructor='NodeList', fn='keys', demands=['NodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='RadioNodeList', fn='keys', demands=['RadioNodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='NodeListOf', fn='keys', demands=['NodeListOf'], returns='ArrayIterator'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='keys', demands=['StylePropertyMapReadOnly'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StylePropertyMap', fn='keys', demands=['StylePropertyMap'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='URLSearchParams', fn='keys', demands=['URLSearchParams'], returns='URLSearchParamsIterator'),
        PrototypeCall(constructor='BigInt64Array', fn='keys', demands=['BigInt64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='BigUint64Array', fn='keys', demands=['BigUint64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='keys', demands=['FormData'], returns='IterableIterator'),
        PrototypeCall(constructor='Headers', fn='keys', demands=['Headers'], returns='IterableIterator'),
        PrototypeCall(constructor='Array', fn='keys', demands=['list'], returns='ArrayIterator'),
        PrototypeCall(constructor='ReadonlyArray', fn='keys', demands=['ReadonlyArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='HighlightRegistry', fn='keys', demands=['HighlightRegistry'], returns='MapIterator'),
        PrototypeCall(constructor='AudioParamMap', fn='keys', demands=['AudioParamMap'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIInputMap', fn='keys', demands=['MIDIInputMap'], returns='MapIterator'),
        PrototypeCall(constructor='EventCounts', fn='keys', demands=['EventCounts'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIOutputMap', fn='keys', demands=['MIDIOutputMap'], returns='MapIterator'),
        PrototypeCall(constructor='RTCStatsReport', fn='keys', demands=['RTCStatsReport'], returns='MapIterator'),
        PrototypeCall(constructor='Highlight', fn='keys', demands=['Highlight'], returns='SetIterator'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='keys', demands=['ViewTransitionTypeSet'], returns='SetIterator'),
        PrototypeCall(constructor='FontFaceSet', fn='keys', demands=['FontFaceSet'], returns='SetIterator'),
        PrototypeCall(constructor='CustomStateSet', fn='keys', demands=['CustomStateSet'], returns='SetIterator'),
        PrototypeCall(constructor='ReadonlySet', fn='keys', demands=['ReadonlySet'], returns='SetIterator'),
        PrototypeCall(constructor='Int8Array', fn='keys', demands=['Int8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8Array', fn='keys', demands=['Uint8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='keys', demands=['Uint8ClampedArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int16Array', fn='keys', demands=['Int16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint16Array', fn='keys', demands=['Uint16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int32Array', fn='keys', demands=['Int32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint32Array', fn='keys', demands=['Uint32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float32Array', fn='keys', demands=['Float32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float64Array', fn='keys', demands=['Float64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='ObjectConstructor', fn='keys', demands=['ObjectConstructor', 'dict'], returns='list'),
        PrototypeCall(constructor='ObjectConstructor', fn='keys', demands=['ObjectConstructor', '{}'], returns='list'),
        PrototypeCall(constructor='ReadonlySetLike', fn='keys', demands=['ReadonlySetLike'], returns='Iterator'),
        PrototypeCall(constructor='Float16Array', fn='keys', demands=['Float16Array'], returns='ArrayIterator'),
    ],
    "keystatuseschange": [
        FieldCall(field='keystatuseschange', demands=['MediaKeySessionEventMap'], returns='Event'),
        FieldCall(field='keystatuseschange', demands=['MediaKeySessionEventMap', 'Event'], returns='None'),
    ],
    "keyup": [
        FieldCall(field='keyup', demands=['GlobalEventHandlersEventMap'], returns='KeyboardEvent'),
        FieldCall(field='keyup', demands=['GlobalEventHandlersEventMap', 'KeyboardEvent'], returns='None'),
    ],
    "kind": [
        FieldCall(field='kind', demands=['RTCRtpStreamStats'], returns='str'),
        FieldCall(field='kind', demands=['RTCRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='kind', demands=['DataTransferItem'], returns='str'),
        FieldCall(field='kind', demands=['FileSystemDirectoryHandle'], returns='"directory"'),
        FieldCall(field='kind', demands=['FileSystemFileHandle'], returns='"file"'),
        FieldCall(field='kind', demands=['FileSystemHandle'], returns='FileSystemHandleKind'),
        FieldCall(field='kind', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='kind', demands=['HTMLTrackElement', 'str'], returns='None'),
        FieldCall(field='kind', demands=['MediaDeviceInfo'], returns='MediaDeviceKind'),
        FieldCall(field='kind', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='kind', demands=['TextTrack'], returns='TextTrackKind'),
        FieldCall(field='kind', demands=['ClassDecoratorContext'], returns='"class"'),
        FieldCall(field='kind', demands=['ClassMethodDecoratorContext'], returns='"method"'),
        FieldCall(field='kind', demands=['ClassGetterDecoratorContext'], returns='"getter"'),
        FieldCall(field='kind', demands=['ClassSetterDecoratorContext'], returns='"setter"'),
        FieldCall(field='kind', demands=['ClassAccessorDecoratorContext'], returns='"accessor"'),
        FieldCall(field='kind', demands=['ClassFieldDecoratorContext'], returns='"field"'),
    ],
    "knee": [
        FieldCall(field='knee', demands=['DynamicsCompressorOptions'], returns='float'),
        FieldCall(field='knee', demands=['DynamicsCompressorOptions', 'float'], returns='None'),
        FieldCall(field='knee', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "kty": [
        FieldCall(field='kty', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='kty', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "label": [
        FieldCall(field='label', demands=['MediaKeySystemConfiguration'], returns='str'),
        FieldCall(field='label', demands=['MediaKeySystemConfiguration', 'str'], returns='None'),
        FieldCall(field='label', demands=['PaymentItem'], returns='str'),
        FieldCall(field='label', demands=['PaymentItem', 'str'], returns='None'),
        FieldCall(field='label', demands=['PaymentShippingOption'], returns='str'),
        FieldCall(field='label', demands=['PaymentShippingOption', 'str'], returns='None'),
        FieldCall(field='label', demands=['RsaOaepParams'], returns='BufferSource'),
        FieldCall(field='label', demands=['RsaOaepParams', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='label', demands=['HTMLOptGroupElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptGroupElement', 'str'], returns='None'),
        FieldCall(field='label', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptionElement', 'str'], returns='None'),
        FieldCall(field='label', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLTrackElement', 'str'], returns='None'),
        FieldCall(field='label', demands=['MediaDeviceInfo'], returns='str'),
        FieldCall(field='label', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='label', demands=['RTCDataChannel'], returns='str'),
        FieldCall(field='label', demands=['TextTrack'], returns='str'),
        FieldCall(field='label', demands=['HTMLElementTagNameMap'], returns='HTMLLabelElement'),
        FieldCall(field='label', demands=['HTMLElementTagNameMap', 'HTMLLabelElement'], returns='None'),
        FieldCall(field='label', demands=['RsaOaepParams'], returns='Uint8Array'),
        FieldCall(field='label', demands=['RsaOaepParams', 'Uint8Array'], returns='None'),
        FieldCall(field='label', demands=['GPUObjectBase'], returns='str'),
        FieldCall(field='label', demands=['GPUObjectBase', 'str'], returns='None'),
        FieldCall(field='label', demands=['GPUObjectDescriptorBase'], returns='str'),
        FieldCall(field='label', demands=['GPUObjectDescriptorBase', 'str'], returns='None'),
    ],
    "labels": [
        FieldCall(field='labels', demands=['ElementInternals'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLButtonElement'], returns='NodeListOf'),
        FieldCall(field='labels', demands=['HTMLInputElement'], returns='NodeListOf<HTMLLabelElement>'),
        FieldCall(field='labels', demands=['HTMLMeterElement'], returns='NodeListOf'),
        FieldCall(field='labels', demands=['HTMLOutputElement'], returns='NodeListOf'),
        FieldCall(field='labels', demands=['HTMLProgressElement'], returns='NodeListOf'),
        FieldCall(field='labels', demands=['HTMLSelectElement'], returns='NodeListOf'),
        FieldCall(field='labels', demands=['HTMLTextAreaElement'], returns='NodeListOf'),
    ],
    "lang": [
        FieldCall(field='lang', demands=['NotificationOptions'], returns='str'),
        FieldCall(field='lang', demands=['NotificationOptions', 'str'], returns='None'),
        FieldCall(field='lang', demands=['HTMLElement'], returns='str'),
        FieldCall(field='lang', demands=['HTMLElement', 'str'], returns='None'),
        FieldCall(field='lang', demands=['Notification'], returns='str'),
        FieldCall(field='lang', demands=['SpeechSynthesisUtterance'], returns='str'),
        FieldCall(field='lang', demands=['SpeechSynthesisUtterance', 'str'], returns='None'),
        FieldCall(field='lang', demands=['SpeechSynthesisVoice'], returns='str'),
    ],
    "language": [
        FieldCall(field='language', demands=['NavigatorLanguage'], returns='str'),
        FieldCall(field='language', demands=['TextTrack'], returns='str'),
        FieldCall(field='language', demands=['Navigator'], returns='str'),
    ],
    "languagechange": [
        FieldCall(field='languagechange', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='languagechange', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "languages": [
        FieldCall(field='languages', demands=['NavigatorLanguage'], returns='ReadonlyArray'),
        FieldCall(field='languages', demands=['Navigator'], returns='list'),
    ],
    "largeBlob": [
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientInputs'], returns='AuthenticationExtensionsLargeBlobInputs'),
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientInputs', 'AuthenticationExtensionsLargeBlobInputs'], returns='None'),
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientInputsJSON'], returns='AuthenticationExtensionsLargeBlobInputsJSON'),
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientInputsJSON', 'AuthenticationExtensionsLargeBlobInputsJSON'], returns='None'),
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientOutputs'], returns='AuthenticationExtensionsLargeBlobOutputs'),
        FieldCall(field='largeBlob', demands=['AuthenticationExtensionsClientOutputs', 'AuthenticationExtensionsLargeBlobOutputs'], returns='None'),
    ],
    "lastChild": [
        FieldCall(field='lastChild', demands=['Node'], returns='ChildNode'),
        PrototypeCall(constructor='TreeWalker', fn='lastChild', demands=['TreeWalker'], returns='Node'),
    ],
    "lastElementChild": [
        FieldCall(field='lastElementChild', demands=['ParentNode'], returns='Element'),
    ],
    "lastEventId": [
        FieldCall(field='lastEventId', demands=['MessageEventInit'], returns='str'),
        FieldCall(field='lastEventId', demands=['MessageEventInit', 'str'], returns='None'),
        FieldCall(field='lastEventId', demands=['MessageEvent'], returns='str'),
    ],
    "lastIndex": [
        FieldCall(field='lastIndex', demands=['regex'], returns='float'),
        FieldCall(field='lastIndex', demands=['regex', 'float'], returns='None'),
    ],
    "lastIndexOf": [
        PrototypeCall(constructor='BigInt64Array', fn='lastIndexOf', demands=['BigInt64Array', 'bigint'], returns='float'),
        PrototypeCall(constructor='BigInt64Array', fn='lastIndexOf', demands=['BigInt64Array', 'bigint', 'float'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='lastIndexOf', demands=['BigUint64Array', 'bigint'], returns='float'),
        PrototypeCall(constructor='BigUint64Array', fn='lastIndexOf', demands=['BigUint64Array', 'bigint', 'float'], returns='float'),
        PrototypeCall(constructor='String', fn='lastIndexOf', demands=['str', 'str'], returns='float'),
        PrototypeCall(constructor='String', fn='lastIndexOf', demands=['str', 'str', 'float'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='lastIndexOf', demands=['ReadonlyArray', 'T'], returns='float'),
        PrototypeCall(constructor='ReadonlyArray', fn='lastIndexOf', demands=['ReadonlyArray', 'T', 'float'], returns='float'),
        PrototypeCall(constructor='Array', fn='lastIndexOf', demands=['list', 'T'], returns='float'),
        PrototypeCall(constructor='Array', fn='lastIndexOf', demands=['list', 'T', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='lastIndexOf', demands=['Int8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='lastIndexOf', demands=['Int8Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='lastIndexOf', demands=['Uint8Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='lastIndexOf', demands=['Uint8Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='lastIndexOf', demands=['Uint8ClampedArray', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='lastIndexOf', demands=['Uint8ClampedArray', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='lastIndexOf', demands=['Int16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='lastIndexOf', demands=['Int16Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='lastIndexOf', demands=['Uint16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='lastIndexOf', demands=['Uint16Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='lastIndexOf', demands=['Int32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='lastIndexOf', demands=['Int32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='lastIndexOf', demands=['Uint32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='lastIndexOf', demands=['Uint32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='lastIndexOf', demands=['Float32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='lastIndexOf', demands=['Float32Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='lastIndexOf', demands=['Float64Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='lastIndexOf', demands=['Float64Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='lastIndexOf', demands=['Float16Array', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='lastIndexOf', demands=['Float16Array', 'float', 'float'], returns='float'),
    ],
    "lastMatch": [
        FieldCall(field='lastMatch', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='lastMatch', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "lastModified": [
        FieldCall(field='lastModified', demands=['FilePropertyBag'], returns='float'),
        FieldCall(field='lastModified', demands=['FilePropertyBag', 'float'], returns='None'),
        FieldCall(field='lastModified', demands=['Document'], returns='str'),
        FieldCall(field='lastModified', demands=['File'], returns='float'),
    ],
    "lastPacketReceivedTimestamp": [
        FieldCall(field='lastPacketReceivedTimestamp', demands=['RTCIceCandidatePairStats'], returns='DOMHighResTimeStamp'),
        FieldCall(field='lastPacketReceivedTimestamp', demands=['RTCIceCandidatePairStats', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='lastPacketReceivedTimestamp', demands=['RTCInboundRtpStreamStats'], returns='DOMHighResTimeStamp'),
        FieldCall(field='lastPacketReceivedTimestamp', demands=['RTCInboundRtpStreamStats', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "lastPacketSentTimestamp": [
        FieldCall(field='lastPacketSentTimestamp', demands=['RTCIceCandidatePairStats'], returns='DOMHighResTimeStamp'),
        FieldCall(field='lastPacketSentTimestamp', demands=['RTCIceCandidatePairStats', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "lastParen": [
        FieldCall(field='lastParen', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='lastParen', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "latencyHint": [
        FieldCall(field='latencyHint', demands=['AudioContextOptions'], returns='AudioContextLatencyCategory'),
        FieldCall(field='latencyHint', demands=['AudioContextOptions', 'AudioContextLatencyCategory'], returns='None'),
    ],
    "latencyMode": [
        FieldCall(field='latencyMode', demands=['VideoEncoderConfig'], returns='LatencyMode'),
        FieldCall(field='latencyMode', demands=['VideoEncoderConfig', 'LatencyMode'], returns='None'),
    ],
    "latitude": [
        FieldCall(field='latitude', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "layerName": [
        FieldCall(field='layerName', demands=['CSSImportRule'], returns='str'),
    ],
    "layerX": [
        FieldCall(field='layerX', demands=['MouseEvent'], returns='float'),
    ],
    "layerY": [
        FieldCall(field='layerY', demands=['MouseEvent'], returns='float'),
    ],
    "layout": [
        FieldCall(field='layout', demands=['VideoFrameBufferInit'], returns='list'),
        FieldCall(field='layout', demands=['VideoFrameBufferInit', 'list'], returns='None'),
        FieldCall(field='layout', demands=['VideoFrameCopyToOptions'], returns='list'),
        FieldCall(field='layout', demands=['VideoFrameCopyToOptions', 'list'], returns='None'),
        FieldCall(field='layout', demands=['GPUPipelineDescriptorBase'], returns='GPUPipelineLayout'),
        FieldCall(field='layout', demands=['GPUPipelineDescriptorBase', 'GPUPipelineLayout'], returns='None'),
    ],
    "lbound": [
        PrototypeCall(constructor='VBArray', fn='lbound', demands=['VBArray'], returns='float'),
        PrototypeCall(constructor='VBArray', fn='lbound', demands=['VBArray', 'float'], returns='float'),
    ],
    "leavepictureinpicture": [
        FieldCall(field='leavepictureinpicture', demands=['HTMLVideoElementEventMap'], returns='PictureInPictureEvent'),
        FieldCall(field='leavepictureinpicture', demands=['HTMLVideoElementEventMap', 'PictureInPictureEvent'], returns='None'),
    ],
    "left": [
        FieldCall(field='left', demands=['ScrollToOptions'], returns='float'),
        FieldCall(field='left', demands=['ScrollToOptions', 'float'], returns='None'),
        FieldCall(field='left', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='left', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='left', demands=['DOMRectReadOnly'], returns='float'),
    ],
    "leftContext": [
        FieldCall(field='leftContext', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='leftContext', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "leftTrigger": [
        FieldCall(field='leftTrigger', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='leftTrigger', demands=['GamepadEffectParameters', 'float'], returns='None'),
    ],
    "legend": [
        FieldCall(field='legend', demands=['HTMLElementTagNameMap'], returns='HTMLLegendElement'),
        FieldCall(field='legend', demands=['HTMLElementTagNameMap', 'HTMLLegendElement'], returns='None'),
    ],
    "length": [
        FieldCall(field='length', demands=['AesCtrParams'], returns='float'),
        FieldCall(field='length', demands=['AesCtrParams', 'float'], returns='None'),
        FieldCall(field='length', demands=['AesDerivedKeyParams'], returns='float'),
        FieldCall(field='length', demands=['AesDerivedKeyParams', 'float'], returns='None'),
        FieldCall(field='length', demands=['AesKeyAlgorithm'], returns='float'),
        FieldCall(field='length', demands=['AesKeyAlgorithm', 'float'], returns='None'),
        FieldCall(field='length', demands=['AesKeyGenParams'], returns='float'),
        FieldCall(field='length', demands=['AesKeyGenParams', 'float'], returns='None'),
        FieldCall(field='length', demands=['AudioBufferOptions'], returns='float'),
        FieldCall(field='length', demands=['AudioBufferOptions', 'float'], returns='None'),
        FieldCall(field='length', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='length', demands=['CSSNumericType', 'float'], returns='None'),
        FieldCall(field='length', demands=['HmacImportParams'], returns='float'),
        FieldCall(field='length', demands=['HmacImportParams', 'float'], returns='None'),
        FieldCall(field='length', demands=['HmacKeyAlgorithm'], returns='float'),
        FieldCall(field='length', demands=['HmacKeyAlgorithm', 'float'], returns='None'),
        FieldCall(field='length', demands=['HmacKeyGenParams'], returns='float'),
        FieldCall(field='length', demands=['HmacKeyGenParams', 'float'], returns='None'),
        FieldCall(field='length', demands=['OfflineAudioContextOptions'], returns='float'),
        FieldCall(field='length', demands=['OfflineAudioContextOptions', 'float'], returns='None'),
        FieldCall(field='length', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='length', demands=['CSSKeyframesRule'], returns='float'),
        FieldCall(field='length', demands=['CSSNumericArray'], returns='float'),
        FieldCall(field='length', demands=['CSSPerspective'], returns='CSSPerspectiveValue'),
        FieldCall(field='length', demands=['CSSPerspective', 'CSSPerspectiveValue'], returns='None'),
        FieldCall(field='length', demands=['CSSRuleList'], returns='float'),
        FieldCall(field='length', demands=['CSSStyleDeclaration'], returns='float'),
        FieldCall(field='length', demands=['CSSTransformValue'], returns='float'),
        FieldCall(field='length', demands=['CSSUnparsedValue'], returns='float'),
        FieldCall(field='length', demands=['CharacterData'], returns='float'),
        FieldCall(field='length', demands=['DOMRectList'], returns='float'),
        FieldCall(field='length', demands=['DOMStringList'], returns='float'),
        FieldCall(field='length', demands=['DOMTokenList'], returns='float'),
        FieldCall(field='length', demands=['DataTransferItemList'], returns='float'),
        FieldCall(field='length', demands=['FileList'], returns='float'),
        FieldCall(field='length', demands=['HTMLAllCollection'], returns='float'),
        FieldCall(field='length', demands=['HTMLCollectionBase'], returns='float'),
        FieldCall(field='length', demands=['HTMLFormElement'], returns='float'),
        FieldCall(field='length', demands=['HTMLOptionsCollection'], returns='float'),
        FieldCall(field='length', demands=['HTMLOptionsCollection', 'float'], returns='None'),
        FieldCall(field='length', demands=['HTMLSelectElement'], returns='float'),
        FieldCall(field='length', demands=['HTMLSelectElement', 'float'], returns='None'),
        FieldCall(field='length', demands=['History'], returns='float'),
        FieldCall(field='length', demands=['ImageTrackList'], returns='float'),
        FieldCall(field='length', demands=['MediaList'], returns='float'),
        FieldCall(field='length', demands=['MimeTypeArray'], returns='float'),
        FieldCall(field='length', demands=['NamedNodeMap'], returns='float'),
        FieldCall(field='length', demands=['NodeList'], returns='float'),
        FieldCall(field='length', demands=['OfflineAudioContext'], returns='float'),
        FieldCall(field='length', demands=['Plugin'], returns='float'),
        FieldCall(field='length', demands=['PluginArray'], returns='float'),
        FieldCall(field='length', demands=['SVGLengthList'], returns='float'),
        FieldCall(field='length', demands=['SVGNumberList'], returns='float'),
        FieldCall(field='length', demands=['SVGPointList'], returns='float'),
        FieldCall(field='length', demands=['SVGStringList'], returns='float'),
        FieldCall(field='length', demands=['SVGTransformList'], returns='float'),
        FieldCall(field='length', demands=['SourceBufferList'], returns='float'),
        FieldCall(field='length', demands=['SpeechRecognitionResult'], returns='float'),
        FieldCall(field='length', demands=['SpeechRecognitionResultList'], returns='float'),
        FieldCall(field='length', demands=['Storage'], returns='float'),
        FieldCall(field='length', demands=['StyleSheetList'], returns='float'),
        FieldCall(field='length', demands=['TextTrackCueList'], returns='float'),
        FieldCall(field='length', demands=['TextTrackList'], returns='float'),
        FieldCall(field='length', demands=['TimeRanges'], returns='float'),
        FieldCall(field='length', demands=['TouchList'], returns='float'),
        FieldCall(field='length', demands=['Window'], returns='float'),
        FieldCall(field='length', demands=['BigInt64Array'], returns='float'),
        FieldCall(field='length', demands=['BigUint64Array'], returns='float'),
        FieldCall(field='length', demands=['*'], returns='float'),
        FieldCall(field='length', demands=['IArguments'], returns='float'),
        FieldCall(field='length', demands=['IArguments', 'float'], returns='None'),
        FieldCall(field='length', demands=['str'], returns='int'),
        FieldCall(field='length', demands=['ReadonlyArray'], returns='float'),
        FieldCall(field='length', demands=['ConcatArray'], returns='float'),
        FieldCall(field='length', demands=['list'], returns='int'),
        FieldCall(field='length', demands=['list', 'int'], returns='None'),
        FieldCall(field='length', demands=['ArrayLike'], returns='float'),
        FieldCall(field='length', demands=['Int8Array'], returns='float'),
        FieldCall(field='length', demands=['Uint8Array'], returns='float'),
        FieldCall(field='length', demands=['Uint8ClampedArray'], returns='float'),
        FieldCall(field='length', demands=['Int16Array'], returns='float'),
        FieldCall(field='length', demands=['Uint16Array'], returns='float'),
        FieldCall(field='length', demands=['Int32Array'], returns='float'),
        FieldCall(field='length', demands=['Uint32Array'], returns='float'),
        FieldCall(field='length', demands=['Float32Array'], returns='float'),
        FieldCall(field='length', demands=['Float64Array'], returns='float'),
        FieldCall(field='length', demands=['GeneratorFunction'], returns='float'),
        FieldCall(field='length', demands=['GeneratorFunctionConstructor'], returns='float'),
        FieldCall(field='length', demands=['AsyncGeneratorFunction'], returns='float'),
        FieldCall(field='length', demands=['AsyncGeneratorFunctionConstructor'], returns='float'),
        FieldCall(field='length', demands=['Float16Array'], returns='float'),
    ],
    "lengthAdjust": [
        FieldCall(field='lengthAdjust', demands=['SVGTextContentElement'], returns='SVGAnimatedEnumeration'),
    ],
    "lengthComputable": [
        FieldCall(field='lengthComputable', demands=['ProgressEventInit'], returns='bool'),
        FieldCall(field='lengthComputable', demands=['ProgressEventInit', 'bool'], returns='None'),
        FieldCall(field='lengthComputable', demands=['ProgressEvent'], returns='bool'),
    ],
    "letterSpacing": [
        FieldCall(field='letterSpacing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='letterSpacing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='letterSpacing', demands=['CanvasTextDrawingStyles'], returns='str'),
        FieldCall(field='letterSpacing', demands=['CanvasTextDrawingStyles', 'str'], returns='None'),
    ],
    "li": [
        FieldCall(field='li', demands=['HTMLElementTagNameMap'], returns='HTMLLIElement'),
        FieldCall(field='li', demands=['HTMLElementTagNameMap', 'HTMLLIElement'], returns='None'),
    ],
    "lightingColor": [
        FieldCall(field='lightingColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='lightingColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "limitingConeAngle": [
        FieldCall(field='limitingConeAngle', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "line": [
        FieldCall(field='line', demands=['VTTCue'], returns='LineAndPositionSetting'),
        FieldCall(field='line', demands=['VTTCue', 'LineAndPositionSetting'], returns='None'),
        FieldCall(field='line', demands=['SVGElementTagNameMap'], returns='SVGLineElement'),
        FieldCall(field='line', demands=['SVGElementTagNameMap', 'SVGLineElement'], returns='None'),
    ],
    "lineAlign": [
        FieldCall(field='lineAlign', demands=['VTTCue'], returns='LineAlignSetting'),
        FieldCall(field='lineAlign', demands=['VTTCue', 'LineAlignSetting'], returns='None'),
    ],
    "lineBreak": [
        FieldCall(field='lineBreak', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='lineBreak', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "lineCap": [
        FieldCall(field='lineCap', demands=['CanvasPathDrawingStyles'], returns='CanvasLineCap'),
        FieldCall(field='lineCap', demands=['CanvasPathDrawingStyles', 'CanvasLineCap'], returns='None'),
    ],
    "lineDashOffset": [
        FieldCall(field='lineDashOffset', demands=['CanvasPathDrawingStyles'], returns='float'),
        FieldCall(field='lineDashOffset', demands=['CanvasPathDrawingStyles', 'float'], returns='None'),
    ],
    "lineGapOverride": [
        FieldCall(field='lineGapOverride', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='lineGapOverride', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='lineGapOverride', demands=['FontFace'], returns='str'),
        FieldCall(field='lineGapOverride', demands=['FontFace', 'str'], returns='None'),
    ],
    "lineHeight": [
        FieldCall(field='lineHeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='lineHeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "lineJoin": [
        FieldCall(field='lineJoin', demands=['CanvasPathDrawingStyles'], returns='CanvasLineJoin'),
        FieldCall(field='lineJoin', demands=['CanvasPathDrawingStyles', 'CanvasLineJoin'], returns='None'),
    ],
    "lineNum": [
        FieldCall(field='lineNum', demands=['GPUCompilationMessage'], returns='float'),
    ],
    "lineNumber": [
        FieldCall(field='lineNumber', demands=['SecurityPolicyViolationEventInit'], returns='float'),
        FieldCall(field='lineNumber', demands=['SecurityPolicyViolationEventInit', 'float'], returns='None'),
        FieldCall(field='lineNumber', demands=['CSPViolationReportBody'], returns='float'),
        FieldCall(field='lineNumber', demands=['SecurityPolicyViolationEvent'], returns='float'),
    ],
    "linePos": [
        FieldCall(field='linePos', demands=['GPUCompilationMessage'], returns='float'),
    ],
    "lineTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='lineTo', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='lineTo', demands=['Path2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='lineTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
    ],
    "lineWidth": [
        FieldCall(field='lineWidth', demands=['CanvasPathDrawingStyles'], returns='float'),
        FieldCall(field='lineWidth', demands=['CanvasPathDrawingStyles', 'float'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='lineWidth', demands=['WebGLRenderingContext', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='lineWidth', demands=['WebGL2RenderingContext', 'GLfloat'], returns='None'),
    ],
    "linearGradient": [
        FieldCall(field='linearGradient', demands=['SVGElementTagNameMap'], returns='SVGLinearGradientElement'),
        FieldCall(field='linearGradient', demands=['SVGElementTagNameMap', 'SVGLinearGradientElement'], returns='None'),
    ],
    "linearRampToValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='linearRampToValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "lineno": [
        FieldCall(field='lineno', demands=['ErrorEventInit'], returns='float'),
        FieldCall(field='lineno', demands=['ErrorEventInit', 'float'], returns='None'),
        FieldCall(field='lineno', demands=['ErrorEvent'], returns='float'),
    ],
    "lines": [
        FieldCall(field='lines', demands=['VTTRegion'], returns='float'),
        FieldCall(field='lines', demands=['VTTRegion', 'float'], returns='None'),
    ],
    "link": [
        FieldCall(field='link', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='link', demands=['HTMLBodyElement', 'str'], returns='None'),
        FieldCall(field='link', demands=['HTMLElementTagNameMap'], returns='HTMLLinkElement'),
        FieldCall(field='link', demands=['HTMLElementTagNameMap', 'HTMLLinkElement'], returns='None'),
        PrototypeCall(constructor='String', fn='link', demands=['str', 'str'], returns='str'),
    ],
    "linkColor": [
        FieldCall(field='linkColor', demands=['Document'], returns='str'),
        FieldCall(field='linkColor', demands=['Document', 'str'], returns='None'),
    ],
    "linkProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='linkProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='linkProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "links": [
        FieldCall(field='links', demands=['Document'], returns='HTMLCollectionOf<HTMLAnchorElement'),
    ],
    "list": [
        FieldCall(field='list', demands=['HTMLInputElement'], returns='HTMLDataListElement'),
    ],
    "listStyle": [
        FieldCall(field='listStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='listStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "listStyleImage": [
        FieldCall(field='listStyleImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='listStyleImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "listStylePosition": [
        FieldCall(field='listStylePosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='listStylePosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "listStyleType": [
        FieldCall(field='listStyleType', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='listStyleType', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "listener": [
        FieldCall(field='listener', demands=['BaseAudioContext'], returns='AudioListener'),
    ],
    "listing": [
        FieldCall(field='listing', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLPreElement'),
        FieldCall(field='listing', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLPreElement'], returns='None'),
    ],
    "load": [
        FieldCall(field='load', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='load', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        PrototypeCall(constructor='FontFace', fn='load', demands=['FontFace'], returns='FontFace'),
        PrototypeCall(constructor='FontFaceSet', fn='load', demands=['FontFaceSet', 'str'], returns='list'),
        PrototypeCall(constructor='FontFaceSet', fn='load', demands=['FontFaceSet', 'str', 'str'], returns='list'),
        FieldCall(field='load', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='load', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='load', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='load', demands=['HTMLAudioElement'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='load', demands=['HTMLVideoElement'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='load', demands=['MediaKeySession', 'str'], returns='bool'),
        FieldCall(field='load', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='load', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
        PrototypeCall(constructor='Atomics', fn='load', demands=['Atomics', 'BigInt64Array', 'float'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='load', demands=['Atomics', 'Int8Array', 'float'], returns='float'),
    ],
    "loadEventEnd": [
        FieldCall(field='loadEventEnd', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='loadEventEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "loadEventStart": [
        FieldCall(field='loadEventStart', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='loadEventStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "loadTime": [
        FieldCall(field='loadTime', demands=['LargestContentfulPaint'], returns='DOMHighResTimeStamp'),
    ],
    "loaded": [
        FieldCall(field='loaded', demands=['ProgressEventInit'], returns='float'),
        FieldCall(field='loaded', demands=['ProgressEventInit', 'float'], returns='None'),
        FieldCall(field='loaded', demands=['FontFace'], returns='FontFace'),
        FieldCall(field='loaded', demands=['ProgressEvent'], returns='float'),
    ],
    "loadeddata": [
        FieldCall(field='loadeddata', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='loadeddata', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "loadedmetadata": [
        FieldCall(field='loadedmetadata', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='loadedmetadata', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "loadend": [
        FieldCall(field='loadend', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='loadend', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='loadend', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='loadend', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
    ],
    "loading": [
        FieldCall(field='loading', demands=['FontFaceSetEventMap'], returns='FontFaceSetLoadEvent'),
        FieldCall(field='loading', demands=['FontFaceSetEventMap', 'FontFaceSetLoadEvent'], returns='None'),
        FieldCall(field='loading', demands=['HTMLIFrameElement'], returns='"eager"'),
        FieldCall(field='loading', demands=['HTMLIFrameElement', '"eager"'], returns='None'),
        FieldCall(field='loading', demands=['HTMLImageElement'], returns='"eager"'),
        FieldCall(field='loading', demands=['HTMLImageElement', '"eager"'], returns='None'),
        FieldCall(field='loading', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='loading', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "loadingdone": [
        FieldCall(field='loadingdone', demands=['FontFaceSetEventMap'], returns='FontFaceSetLoadEvent'),
        FieldCall(field='loadingdone', demands=['FontFaceSetEventMap', 'FontFaceSetLoadEvent'], returns='None'),
    ],
    "loadingerror": [
        FieldCall(field='loadingerror', demands=['FontFaceSetEventMap'], returns='FontFaceSetLoadEvent'),
        FieldCall(field='loadingerror', demands=['FontFaceSetEventMap', 'FontFaceSetLoadEvent'], returns='None'),
    ],
    "loadstart": [
        FieldCall(field='loadstart', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='loadstart', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='loadstart', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='loadstart', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='loadstart', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='loadstart', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
    ],
    "local": [
        FieldCall(field='local', demands=['RTCIceCandidatePair'], returns='RTCIceCandidate'),
        FieldCall(field='local', demands=['RTCIceCandidatePair', 'RTCIceCandidate'], returns='None'),
    ],
    "localCandidateId": [
        FieldCall(field='localCandidateId', demands=['RTCIceCandidatePairStats'], returns='str'),
        FieldCall(field='localCandidateId', demands=['RTCIceCandidatePairStats', 'str'], returns='None'),
    ],
    "localCertificateId": [
        FieldCall(field='localCertificateId', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='localCertificateId', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "localDescription": [
        FieldCall(field='localDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "localName": [
        FieldCall(field='localName', demands=['Attr'], returns='str'),
        FieldCall(field='localName', demands=['Element'], returns='str'),
    ],
    "localService": [
        FieldCall(field='localService', demands=['SpeechSynthesisVoice'], returns='bool'),
    ],
    "localStorage": [
        FieldCall(field='localStorage', demands=['WindowLocalStorage'], returns='Storage'),
        FieldCall(field='localStorage', demands=['Window'], returns='Storage'),
        FieldCall(field='localStorage', demands=['Window', 'Storage'], returns='None'),
    ],
    "localTime": [
        FieldCall(field='localTime', demands=['ComputedEffectTiming'], returns='CSSNumberish'),
        FieldCall(field='localTime', demands=['ComputedEffectTiming', 'CSSNumberish'], returns='None'),
    ],
    "localeCompare": [
        PrototypeCall(constructor='String', fn='localeCompare', demands=['str', 'str'], returns='float'),
        PrototypeCall(constructor='String', fn='localeCompare', demands=['str', 'str', 'Intl.LocalesArgument'], returns='float'),
        PrototypeCall(constructor='String', fn='localeCompare', demands=['str', 'str', 'Intl.LocalesArgument', 'Intl.CollatorOptions'], returns='float'),
    ],
    "localeMatcher": [
        FieldCall(field='localeMatcher', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='localeMatcher', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "location": [
        FieldCall(field='location', demands=['KeyboardEventInit'], returns='float'),
        FieldCall(field='location', demands=['KeyboardEventInit', 'float'], returns='None'),
        PrototypeCall(constructor='Document', fn='location', demands=['Document'], returns='Location'),
        PrototypeCall(constructor='HTMLDocument', fn='location', demands=['HTMLDocument'], returns='Location'),
        PrototypeCall(constructor='XMLDocument', fn='location', demands=['XMLDocument'], returns='Location'),
        PrototypeCall(constructor='Document', fn='location', demands=['Document', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='location', demands=['HTMLDocument', 'str'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='location', demands=['XMLDocument', 'str'], returns='None'),
        FieldCall(field='location', demands=['KeyboardEvent'], returns='float'),
        DirectCall(fn='location', receiver=None, demands=[], returns='Location'),
        DirectCall(fn='location', receiver=None, demands=['str'], returns='None'),
        FieldCall(field='location', demands=['Window'], returns='Location'),
        FieldCall(field='location', demands=['Window', 'Location'], returns='None'),
    ],
    "locationbar": [
        FieldCall(field='locationbar', demands=['Window'], returns='BarProp'),
    ],
    "locked": [
        FieldCall(field='locked', demands=['ReadableStream'], returns='bool'),
        FieldCall(field='locked', demands=['WritableStream'], returns='bool'),
    ],
    "locks": [
        FieldCall(field='locks', demands=['NavigatorLocks'], returns='LockManager'),
    ],
    "log": [
        PrototypeCall(constructor='Console', fn='log', demands=['Console', '*'], returns='None'),
        PrototypeCall(constructor='Math', fn='log', demands=['Math', 'float'], returns='float'),
    ],
    "log10": [
        PrototypeCall(constructor='Math', fn='log10', demands=['Math', 'float'], returns='float'),
    ],
    "log1p": [
        PrototypeCall(constructor='Math', fn='log1p', demands=['Math', 'float'], returns='float'),
    ],
    "log2": [
        PrototypeCall(constructor='Math', fn='log2', demands=['Math', 'float'], returns='float'),
    ],
    "login": [
        FieldCall(field='login', demands=['Navigator'], returns='NavigatorLogin'),
    ],
    "longDesc": [
        FieldCall(field='longDesc', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='longDesc', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='longDesc', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='longDesc', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='longDesc', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='longDesc', demands=['HTMLImageElement', 'str'], returns='None'),
    ],
    "longitude": [
        FieldCall(field='longitude', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "lookupNamespaceURI": [
        PrototypeCall(constructor='Node', fn='lookupNamespaceURI', demands=['Node', 'str'], returns='str'),
        PrototypeCall(constructor='DocumentType', fn='lookupNamespaceURI', demands=['DocumentType', 'str'], returns='str'),
        PrototypeCall(constructor='CharacterData', fn='lookupNamespaceURI', demands=['CharacterData', 'str'], returns='str'),
        PrototypeCall(constructor='Element', fn='lookupNamespaceURI', demands=['Element', 'str'], returns='str'),
        PrototypeCall(constructor='Attr', fn='lookupNamespaceURI', demands=['Attr', 'str'], returns='str'),
        PrototypeCall(constructor='Document', fn='lookupNamespaceURI', demands=['Document', 'str'], returns='str'),
        PrototypeCall(constructor='DocumentFragment', fn='lookupNamespaceURI', demands=['DocumentFragment', 'str'], returns='str'),
    ],
    "lookupPrefix": [
        PrototypeCall(constructor='Node', fn='lookupPrefix', demands=['Node', 'str'], returns='str'),
        PrototypeCall(constructor='DocumentType', fn='lookupPrefix', demands=['DocumentType', 'str'], returns='str'),
        PrototypeCall(constructor='CharacterData', fn='lookupPrefix', demands=['CharacterData', 'str'], returns='str'),
        PrototypeCall(constructor='Element', fn='lookupPrefix', demands=['Element', 'str'], returns='str'),
        PrototypeCall(constructor='Attr', fn='lookupPrefix', demands=['Attr', 'str'], returns='str'),
        PrototypeCall(constructor='Document', fn='lookupPrefix', demands=['Document', 'str'], returns='str'),
        PrototypeCall(constructor='DocumentFragment', fn='lookupPrefix', demands=['DocumentFragment', 'str'], returns='str'),
    ],
    "loop": [
        FieldCall(field='loop', demands=['AudioBufferSourceOptions'], returns='bool'),
        FieldCall(field='loop', demands=['AudioBufferSourceOptions', 'bool'], returns='None'),
        FieldCall(field='loop', demands=['AudioBufferSourceNode'], returns='bool'),
        FieldCall(field='loop', demands=['AudioBufferSourceNode', 'bool'], returns='None'),
        FieldCall(field='loop', demands=['HTMLMarqueeElement'], returns='float'),
        FieldCall(field='loop', demands=['HTMLMarqueeElement', 'float'], returns='None'),
        FieldCall(field='loop', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='loop', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "loopEnd": [
        FieldCall(field='loopEnd', demands=['AudioBufferSourceOptions'], returns='float'),
        FieldCall(field='loopEnd', demands=['AudioBufferSourceOptions', 'float'], returns='None'),
        FieldCall(field='loopEnd', demands=['AudioBufferSourceNode'], returns='float'),
        FieldCall(field='loopEnd', demands=['AudioBufferSourceNode', 'float'], returns='None'),
    ],
    "loopStart": [
        FieldCall(field='loopStart', demands=['AudioBufferSourceOptions'], returns='float'),
        FieldCall(field='loopStart', demands=['AudioBufferSourceOptions', 'float'], returns='None'),
        FieldCall(field='loopStart', demands=['AudioBufferSourceNode'], returns='float'),
        FieldCall(field='loopStart', demands=['AudioBufferSourceNode', 'float'], returns='None'),
    ],
    "loseContext": [
        PrototypeCall(constructor='WEBGL_lose_context', fn='loseContext', demands=['WEBGL_lose_context'], returns='None'),
    ],
    "lostpointercapture": [
        FieldCall(field='lostpointercapture', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='lostpointercapture', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "low": [
        FieldCall(field='low', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='low', demands=['HTMLMeterElement', 'float'], returns='None'),
    ],
    "lower": [
        FieldCall(field='lower', demands=['CSSMathClamp'], returns='CSSNumericValue'),
        FieldCall(field='lower', demands=['IDBKeyRange'], returns='*'),
    ],
    "lowerOpen": [
        FieldCall(field='lowerOpen', demands=['IDBKeyRange'], returns='bool'),
    ],
    "lowsrc": [
        FieldCall(field='lowsrc', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='lowsrc', demands=['HTMLImageElement', 'str'], returns='None'),
    ],
    "m11": [
        FieldCall(field='m11', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m11', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m11', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m11', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m11', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m12": [
        FieldCall(field='m12', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m12', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m12', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m12', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m12', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m13": [
        FieldCall(field='m13', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m13', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m13', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m13', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m13', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m14": [
        FieldCall(field='m14', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m14', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m14', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m14', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m14', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m21": [
        FieldCall(field='m21', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m21', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m21', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m21', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m21', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m22": [
        FieldCall(field='m22', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m22', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m22', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m22', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m22', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m23": [
        FieldCall(field='m23', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m23', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m23', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m23', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m23', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m24": [
        FieldCall(field='m24', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m24', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m24', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m24', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m24', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m31": [
        FieldCall(field='m31', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m31', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m31', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m31', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m31', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m32": [
        FieldCall(field='m32', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m32', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m32', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m32', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m32', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m33": [
        FieldCall(field='m33', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m33', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m33', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m33', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m33', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m34": [
        FieldCall(field='m34', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m34', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m34', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m34', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m34', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m41": [
        FieldCall(field='m41', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m41', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m41', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m41', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m41', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m42": [
        FieldCall(field='m42', demands=['DOMMatrix2DInit'], returns='float'),
        FieldCall(field='m42', demands=['DOMMatrix2DInit', 'float'], returns='None'),
        FieldCall(field='m42', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m42', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m42', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m43": [
        FieldCall(field='m43', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m43', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m43', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m43', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m43', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "m44": [
        FieldCall(field='m44', demands=['DOMMatrixInit'], returns='float'),
        FieldCall(field='m44', demands=['DOMMatrixInit', 'float'], returns='None'),
        FieldCall(field='m44', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m44', demands=['DOMMatrix', 'float'], returns='None'),
        FieldCall(field='m44', demands=['DOMMatrixReadOnly'], returns='float'),
    ],
    "maction": [
        FieldCall(field='maction', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='maction', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "main": [
        FieldCall(field='main', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='main', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
        FieldCall(field='main', demands=['ImportMeta'], returns='bool'),
        FieldCall(field='main', demands=['ImportMeta', 'bool'], returns='None'),
    ],
    "manufacturer": [
        FieldCall(field='manufacturer', demands=['MIDIPort'], returns='str'),
    ],
    "map": [
        FieldCall(field='map', demands=['HTMLElementTagNameMap'], returns='HTMLMapElement'),
        FieldCall(field='map', demands=['HTMLElementTagNameMap', 'HTMLMapElement'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='map', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='map', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='map', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='map', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='BigUint64Array'),
        PrototypeCall(constructor='ReadonlyArray', fn='map', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>U'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='map', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>U', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='map', demands=['list', '(value:T,index:number,array:T[])=>U'], returns='list'),
        PrototypeCall(constructor='Array', fn='map', demands=['list', '(value:T,index:number,array:T[])=>U', '*'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='map', demands=['Int8Array', '(value:number,index:number,array:this)=>number'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='map', demands=['Int8Array', '(value:number,index:number,array:this)=>number', '*'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='map', demands=['Uint8Array', '(value:number,index:number,array:this)=>number'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='map', demands=['Uint8Array', '(value:number,index:number,array:this)=>number', '*'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='map', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>number'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='map', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>number', '*'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='map', demands=['Int16Array', '(value:number,index:number,array:this)=>number'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='map', demands=['Int16Array', '(value:number,index:number,array:this)=>number', '*'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='map', demands=['Uint16Array', '(value:number,index:number,array:this)=>number'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='map', demands=['Uint16Array', '(value:number,index:number,array:this)=>number', '*'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='map', demands=['Int32Array', '(value:number,index:number,array:this)=>number'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='map', demands=['Int32Array', '(value:number,index:number,array:this)=>number', '*'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='map', demands=['Uint32Array', '(value:number,index:number,array:this)=>number'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='map', demands=['Uint32Array', '(value:number,index:number,array:this)=>number', '*'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='map', demands=['Float32Array', '(value:number,index:number,array:this)=>number'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='map', demands=['Float32Array', '(value:number,index:number,array:this)=>number', '*'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='map', demands=['Float64Array', '(value:number,index:number,array:this)=>number'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='map', demands=['Float64Array', '(value:number,index:number,array:this)=>number', '*'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='map', demands=['Float16Array', '(value:number,index:number,array:this)=>number'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='map', demands=['Float16Array', '(value:number,index:number,array:this)=>number', '*'], returns='Float16Array'),
    ],
    "mappedAtCreation": [
        FieldCall(field='mappedAtCreation', demands=['GPUBufferDescriptor'], returns='bool'),
        FieldCall(field='mappedAtCreation', demands=['GPUBufferDescriptor', 'bool'], returns='None'),
    ],
    "mapping": [
        FieldCall(field='mapping', demands=['Gamepad'], returns='GamepadMappingType'),
    ],
    "margin": [
        FieldCall(field='margin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='margin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginBlock": [
        FieldCall(field='marginBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginBlockEnd": [
        FieldCall(field='marginBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginBlockStart": [
        FieldCall(field='marginBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginBottom": [
        FieldCall(field='marginBottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginBottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginHeight": [
        FieldCall(field='marginHeight', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='marginHeight', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='marginHeight', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='marginHeight', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "marginInline": [
        FieldCall(field='marginInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginInlineEnd": [
        FieldCall(field='marginInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginInlineStart": [
        FieldCall(field='marginInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginLeft": [
        FieldCall(field='marginLeft', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginLeft', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginRight": [
        FieldCall(field='marginRight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginRight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginTop": [
        FieldCall(field='marginTop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marginTop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "marginWidth": [
        FieldCall(field='marginWidth', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='marginWidth', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='marginWidth', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='marginWidth', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "mark": [
        PrototypeCall(constructor='Performance', fn='mark', demands=['Performance', 'str'], returns='PerformanceMark'),
        PrototypeCall(constructor='Performance', fn='mark', demands=['Performance', 'str', 'PerformanceMarkOptions'], returns='PerformanceMark'),
        FieldCall(field='mark', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='mark', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
        FieldCall(field='mark', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='mark', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "marker": [
        FieldCall(field='marker', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='marker', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='marker', demands=['SVGElementTagNameMap'], returns='SVGMarkerElement'),
        FieldCall(field='marker', demands=['SVGElementTagNameMap', 'SVGMarkerElement'], returns='None'),
    ],
    "markerEnd": [
        FieldCall(field='markerEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='markerEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "markerHeight": [
        FieldCall(field='markerHeight', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "markerMid": [
        FieldCall(field='markerMid', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='markerMid', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "markerStart": [
        FieldCall(field='markerStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='markerStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "markerUnits": [
        FieldCall(field='markerUnits', demands=['SVGMarkerElement'], returns='SVGAnimatedEnumeration'),
    ],
    "markerWidth": [
        FieldCall(field='markerWidth', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "markers": [
        FieldCall(field='markers', demands=['SVGBoundingBoxOptions'], returns='bool'),
        FieldCall(field='markers', demands=['SVGBoundingBoxOptions', 'bool'], returns='None'),
    ],
    "marquee": [
        FieldCall(field='marquee', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLMarqueeElement'),
        FieldCall(field='marquee', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLMarqueeElement'], returns='None'),
    ],
    "mask": [
        FieldCall(field='mask', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='mask', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='mask', demands=['SVGElementTagNameMap'], returns='SVGMaskElement'),
        FieldCall(field='mask', demands=['SVGElementTagNameMap', 'SVGMaskElement'], returns='None'),
        FieldCall(field='mask', demands=['GPUMultisampleState'], returns='float'),
        FieldCall(field='mask', demands=['GPUMultisampleState', 'float'], returns='None'),
    ],
    "maskClip": [
        FieldCall(field='maskClip', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskClip', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskComposite": [
        FieldCall(field='maskComposite', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskComposite', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskContentUnits": [
        FieldCall(field='maskContentUnits', demands=['SVGMaskElement'], returns='SVGAnimatedEnumeration'),
    ],
    "maskImage": [
        FieldCall(field='maskImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskMode": [
        FieldCall(field='maskMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskOrigin": [
        FieldCall(field='maskOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskPosition": [
        FieldCall(field='maskPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskRepeat": [
        FieldCall(field='maskRepeat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskRepeat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskSize": [
        FieldCall(field='maskSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskType": [
        FieldCall(field='maskType', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maskType', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maskUnits": [
        FieldCall(field='maskUnits', demands=['SVGMaskElement'], returns='SVGAnimatedEnumeration'),
    ],
    "match": [
        PrototypeCall(constructor='Cache', fn='match', demands=['Cache', 'RequestInfo'], returns='Promise<Response'),
        PrototypeCall(constructor='Cache', fn='match', demands=['Cache', 'RequestInfo', 'CacheQueryOptions'], returns='Promise<Response'),
        PrototypeCall(constructor='CacheStorage', fn='match', demands=['CacheStorage', 'RequestInfo'], returns='Promise<Response'),
        PrototypeCall(constructor='CacheStorage', fn='match', demands=['CacheStorage', 'RequestInfo', 'MultiCacheQueryOptions'], returns='Promise<Response'),
        FieldCall(field='match', demands=['SymbolConstructor'], returns='uniquesymbol'),
        PrototypeCall(constructor='String', fn='match', demands=['str', '{[Symbol.match](string:string):RegExpMatchArray'], returns='RegExpMatchArray'),
        PrototypeCall(constructor='String', fn='match', demands=['str', 'str'], returns='RegExpMatchArray'),
    ],
    "matchAll": [
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache'], returns='ReadonlyArray'),
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache', 'RequestInfo'], returns='ReadonlyArray'),
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache', 'RequestInfo', 'CacheQueryOptions'], returns='ReadonlyArray'),
        PrototypeCall(constructor='String', fn='matchAll', demands=['str', 'regex'], returns='RegExpStringIterator'),
        FieldCall(field='matchAll', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "matchMedia": [
        DirectCall(fn='matchMedia', receiver=None, demands=['str'], returns='MediaQueryList'),
    ],
    "matchMedium": [
        PrototypeCall(constructor='StyleMedia', fn='matchMedium', demands=['StyleMedia', 'str'], returns='bool'),
    ],
    "matches": [
        FieldCall(field='matches', demands=['MediaQueryListEventInit'], returns='bool'),
        FieldCall(field='matches', demands=['MediaQueryListEventInit', 'bool'], returns='None'),
        PrototypeCall(constructor='Element', fn='matches', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='matches', demands=['MathMLElement', 'str'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='matches', demands=['SVGElement', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='matches', demands=['HTMLElement', 'str'], returns='bool'),
        FieldCall(field='matches', demands=['MediaQueryList'], returns='bool'),
        FieldCall(field='matches', demands=['MediaQueryListEvent'], returns='bool'),
    ],
    "math": [
        FieldCall(field='math', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='math', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mathDepth": [
        FieldCall(field='mathDepth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='mathDepth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "mathStyle": [
        FieldCall(field='mathStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='mathStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "matrix": [
        FieldCall(field='matrix', demands=['VideoColorSpaceInit'], returns='VideoMatrixCoefficients'),
        FieldCall(field='matrix', demands=['VideoColorSpaceInit', 'VideoMatrixCoefficients'], returns='None'),
        FieldCall(field='matrix', demands=['CSSMatrixComponent'], returns='DOMMatrix'),
        FieldCall(field='matrix', demands=['CSSMatrixComponent', 'DOMMatrix'], returns='None'),
        FieldCall(field='matrix', demands=['SVGTransform'], returns='DOMMatrix'),
        FieldCall(field='matrix', demands=['VideoColorSpace'], returns='VideoMatrixCoefficients'),
    ],
    "matrixTransform": [
        PrototypeCall(constructor='DOMPointReadOnly', fn='matrixTransform', demands=['DOMPointReadOnly'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMPoint', fn='matrixTransform', demands=['DOMPoint'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMPointReadOnly', fn='matrixTransform', demands=['DOMPointReadOnly', 'DOMMatrixInit'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMPoint', fn='matrixTransform', demands=['DOMPoint', 'DOMMatrixInit'], returns='DOMPoint'),
    ],
    "max": [
        FieldCall(field='max', demands=['DoubleRange'], returns='float'),
        FieldCall(field='max', demands=['DoubleRange', 'float'], returns='None'),
        FieldCall(field='max', demands=['MediaSettingsRange'], returns='float'),
        FieldCall(field='max', demands=['MediaSettingsRange', 'float'], returns='None'),
        FieldCall(field='max', demands=['ULongRange'], returns='float'),
        FieldCall(field='max', demands=['ULongRange', 'float'], returns='None'),
        PrototypeCall(constructor='CSSNumericValue', fn='max', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='max', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='max', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
        FieldCall(field='max', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='max', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='max', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='max', demands=['HTMLMeterElement', 'float'], returns='None'),
        FieldCall(field='max', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='max', demands=['HTMLProgressElement', 'float'], returns='None'),
        PrototypeCall(constructor='Math', fn='max', demands=['Math', '*'], returns='float'),
    ],
    "maxBitrate": [
        FieldCall(field='maxBitrate', demands=['RTCRtpEncodingParameters'], returns='float'),
        FieldCall(field='maxBitrate', demands=['RTCRtpEncodingParameters', 'float'], returns='None'),
    ],
    "maxBlockSize": [
        FieldCall(field='maxBlockSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maxBlockSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maxByteLength": [
        PrototypeCall(constructor='ArrayBuffer', fn='maxByteLength', demands=['ArrayBuffer'], returns='float'),
        PrototypeCall(constructor='SharedArrayBuffer', fn='maxByteLength', demands=['SharedArrayBuffer'], returns='float'),
    ],
    "maxChannelCount": [
        FieldCall(field='maxChannelCount', demands=['AudioDestinationNode'], returns='float'),
    ],
    "maxChannels": [
        FieldCall(field='maxChannels', demands=['RTCSctpTransport'], returns='float'),
    ],
    "maxDatagramSize": [
        FieldCall(field='maxDatagramSize', demands=['WebTransportDatagramDuplexStream'], returns='float'),
    ],
    "maxDecibels": [
        FieldCall(field='maxDecibels', demands=['AnalyserOptions'], returns='float'),
        FieldCall(field='maxDecibels', demands=['AnalyserOptions', 'float'], returns='None'),
        FieldCall(field='maxDecibels', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='maxDecibels', demands=['AnalyserNode', 'float'], returns='None'),
    ],
    "maxDelayTime": [
        FieldCall(field='maxDelayTime', demands=['DelayOptions'], returns='float'),
        FieldCall(field='maxDelayTime', demands=['DelayOptions', 'float'], returns='None'),
    ],
    "maxDistance": [
        FieldCall(field='maxDistance', demands=['PannerOptions'], returns='float'),
        FieldCall(field='maxDistance', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='maxDistance', demands=['PannerNode'], returns='float'),
        FieldCall(field='maxDistance', demands=['PannerNode', 'float'], returns='None'),
    ],
    "maxFramerate": [
        FieldCall(field='maxFramerate', demands=['RTCRtpEncodingParameters'], returns='float'),
        FieldCall(field='maxFramerate', demands=['RTCRtpEncodingParameters', 'float'], returns='None'),
    ],
    "maxHeight": [
        FieldCall(field='maxHeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maxHeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maxInlineSize": [
        FieldCall(field='maxInlineSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maxInlineSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maxLength": [
        FieldCall(field='maxLength', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='maxLength', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='maxLength', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='maxLength', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "maxMessageSize": [
        FieldCall(field='maxMessageSize', demands=['RTCSctpTransport'], returns='float'),
    ],
    "maxPacketLifeTime": [
        FieldCall(field='maxPacketLifeTime', demands=['RTCDataChannelInit'], returns='float'),
        FieldCall(field='maxPacketLifeTime', demands=['RTCDataChannelInit', 'float'], returns='None'),
        FieldCall(field='maxPacketLifeTime', demands=['RTCDataChannel'], returns='float'),
    ],
    "maxRetransmits": [
        FieldCall(field='maxRetransmits', demands=['RTCDataChannelInit'], returns='float'),
        FieldCall(field='maxRetransmits', demands=['RTCDataChannelInit', 'float'], returns='None'),
        FieldCall(field='maxRetransmits', demands=['RTCDataChannel'], returns='float'),
    ],
    "maxTouchPoints": [
        FieldCall(field='maxTouchPoints', demands=['Navigator'], returns='float'),
    ],
    "maxValue": [
        FieldCall(field='maxValue', demands=['AudioParam'], returns='float'),
    ],
    "maxWidth": [
        FieldCall(field='maxWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='maxWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "maximumAge": [
        FieldCall(field='maximumAge', demands=['PositionOptions'], returns='float'),
        FieldCall(field='maximumAge', demands=['PositionOptions', 'float'], returns='None'),
    ],
    "maximumFractionDigits": [
        FieldCall(field='maximumFractionDigits', demands=['BigIntToLocaleStringOptions'], returns='0'),
        FieldCall(field='maximumFractionDigits', demands=['BigIntToLocaleStringOptions', '0'], returns='None'),
    ],
    "maximumSignificantDigits": [
        FieldCall(field='maximumSignificantDigits', demands=['BigIntToLocaleStringOptions'], returns='1'),
        FieldCall(field='maximumSignificantDigits', demands=['BigIntToLocaleStringOptions', '1'], returns='None'),
    ],
    "measure": [
        PrototypeCall(constructor='Performance', fn='measure', demands=['Performance', 'str'], returns='PerformanceMeasure'),
        PrototypeCall(constructor='Performance', fn='measure', demands=['Performance', 'str', 'str'], returns='PerformanceMeasure'),
        PrototypeCall(constructor='Performance', fn='measure', demands=['Performance', 'str', 'str', 'str'], returns='PerformanceMeasure'),
        PrototypeCall(constructor='Performance', fn='measure', demands=['Performance', 'str', 'PerformanceMeasureOptions'], returns='PerformanceMeasure'),
    ],
    "measureText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='measureText', demands=['CanvasRenderingContext2D', 'str'], returns='TextMetrics'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='measureText', demands=['OffscreenCanvasRenderingContext2D', 'str'], returns='TextMetrics'),
    ],
    "media": [
        FieldCall(field='media', demands=['CSSStyleSheetInit'], returns='MediaList'),
        FieldCall(field='media', demands=['CSSStyleSheetInit', 'MediaList'], returns='None'),
        FieldCall(field='media', demands=['MediaQueryListEventInit'], returns='str'),
        FieldCall(field='media', demands=['MediaQueryListEventInit', 'str'], returns='None'),
        PrototypeCall(constructor='CSSImportRule', fn='media', demands=['CSSImportRule'], returns='MediaList'),
        PrototypeCall(constructor='CSSImportRule', fn='media', demands=['CSSImportRule', 'str'], returns='None'),
        PrototypeCall(constructor='CSSMediaRule', fn='media', demands=['CSSMediaRule'], returns='MediaList'),
        PrototypeCall(constructor='CSSMediaRule', fn='media', demands=['CSSMediaRule', 'str'], returns='None'),
        FieldCall(field='media', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='media', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLMetaElement', 'str'], returns='None'),
        FieldCall(field='media', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLSourceElement', 'str'], returns='None'),
        FieldCall(field='media', demands=['HTMLStyleElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLStyleElement', 'str'], returns='None'),
        FieldCall(field='media', demands=['MediaQueryList'], returns='str'),
        FieldCall(field='media', demands=['MediaQueryListEvent'], returns='str'),
        FieldCall(field='media', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='media', demands=['SVGStyleElement', 'str'], returns='None'),
        PrototypeCall(constructor='StyleSheet', fn='media', demands=['StyleSheet'], returns='MediaList'),
        PrototypeCall(constructor='CSSStyleSheet', fn='media', demands=['CSSStyleSheet'], returns='MediaList'),
        PrototypeCall(constructor='StyleSheet', fn='media', demands=['StyleSheet', 'str'], returns='None'),
        PrototypeCall(constructor='CSSStyleSheet', fn='media', demands=['CSSStyleSheet', 'str'], returns='None'),
    ],
    "mediaCapabilities": [
        FieldCall(field='mediaCapabilities', demands=['Navigator'], returns='MediaCapabilities'),
    ],
    "mediaDevices": [
        FieldCall(field='mediaDevices', demands=['Navigator'], returns='MediaDevices'),
    ],
    "mediaElement": [
        FieldCall(field='mediaElement', demands=['MediaElementAudioSourceOptions'], returns='HTMLMediaElement'),
        FieldCall(field='mediaElement', demands=['MediaElementAudioSourceOptions', 'HTMLMediaElement'], returns='None'),
        FieldCall(field='mediaElement', demands=['MediaElementAudioSourceNode'], returns='HTMLMediaElement'),
    ],
    "mediaKeys": [
        FieldCall(field='mediaKeys', demands=['HTMLMediaElement'], returns='MediaKeys'),
    ],
    "mediaSession": [
        FieldCall(field='mediaSession', demands=['Navigator'], returns='MediaSession'),
    ],
    "mediaSourceId": [
        FieldCall(field='mediaSourceId', demands=['RTCOutboundRtpStreamStats'], returns='str'),
        FieldCall(field='mediaSourceId', demands=['RTCOutboundRtpStreamStats', 'str'], returns='None'),
    ],
    "mediaStream": [
        FieldCall(field='mediaStream', demands=['MediaStreamAudioSourceOptions'], returns='MediaStream'),
        FieldCall(field='mediaStream', demands=['MediaStreamAudioSourceOptions', 'MediaStream'], returns='None'),
        FieldCall(field='mediaStream', demands=['MediaStreamAudioSourceNode'], returns='MediaStream'),
    ],
    "mediaText": [
        FieldCall(field='mediaText', demands=['MediaList'], returns='str'),
        FieldCall(field='mediaText', demands=['MediaList', 'str'], returns='None'),
    ],
    "mediaTime": [
        FieldCall(field='mediaTime', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='mediaTime', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
    ],
    "mediation": [
        FieldCall(field='mediation', demands=['CredentialRequestOptions'], returns='CredentialMediationRequirement'),
        FieldCall(field='mediation', demands=['CredentialRequestOptions', 'CredentialMediationRequirement'], returns='None'),
    ],
    "meetOrSlice": [
        FieldCall(field='meetOrSlice', demands=['SVGPreserveAspectRatio'], returns='float'),
        FieldCall(field='meetOrSlice', demands=['SVGPreserveAspectRatio', 'float'], returns='None'),
    ],
    "menu": [
        FieldCall(field='menu', demands=['HTMLElementTagNameMap'], returns='HTMLMenuElement'),
        FieldCall(field='menu', demands=['HTMLElementTagNameMap', 'HTMLMenuElement'], returns='None'),
    ],
    "menubar": [
        FieldCall(field='menubar', demands=['Window'], returns='BarProp'),
    ],
    "menuitem": [
        FieldCall(field='menuitem', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='menuitem', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "merror": [
        FieldCall(field='merror', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='merror', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "message": [
        FieldCall(field='message', demands=['ErrorEventInit'], returns='str'),
        FieldCall(field='message', demands=['ErrorEventInit', 'str'], returns='None'),
        FieldCall(field='message', demands=['MediaKeyMessageEventInit'], returns='ArrayBuffer'),
        FieldCall(field='message', demands=['MediaKeyMessageEventInit', 'ArrayBuffer'], returns='None'),
        FieldCall(field='message', demands=['BroadcastChannelEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['BroadcastChannelEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['DOMException'], returns='str'),
        FieldCall(field='message', demands=['ErrorEvent'], returns='str'),
        FieldCall(field='message', demands=['EventSourceEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['EventSourceEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['GPUError'], returns='str'),
        FieldCall(field='message', demands=['GeolocationPositionError'], returns='str'),
        FieldCall(field='message', demands=['MediaError'], returns='str'),
        FieldCall(field='message', demands=['MediaKeyMessageEvent'], returns='ArrayBuffer'),
        FieldCall(field='message', demands=['MediaKeySessionEventMap'], returns='MediaKeyMessageEvent'),
        FieldCall(field='message', demands=['MediaKeySessionEventMap', 'MediaKeyMessageEvent'], returns='None'),
        FieldCall(field='message', demands=['MessageEventTargetEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['MessageEventTargetEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['MessagePortEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['MessagePortEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['RTCDataChannelEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['RTCDataChannelEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['ServiceWorkerContainerEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['ServiceWorkerContainerEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['WebSocketEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['WebSocketEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['WindowEventHandlersEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['WindowEventHandlersEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['WorkerEventMap'], returns='MessageEvent'),
        FieldCall(field='message', demands=['WorkerEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='message', demands=['GPUCompilationMessage'], returns='str'),
        FieldCall(field='message', demands=['GPUDeviceLostInfo'], returns='str'),
        FieldCall(field='message', demands=['Error'], returns='str'),
        FieldCall(field='message', demands=['Error', 'str'], returns='None'),
    ],
    "messageType": [
        FieldCall(field='messageType', demands=['MediaKeyMessageEventInit'], returns='MediaKeyMessageType'),
        FieldCall(field='messageType', demands=['MediaKeyMessageEventInit', 'MediaKeyMessageType'], returns='None'),
        FieldCall(field='messageType', demands=['MediaKeyMessageEvent'], returns='MediaKeyMessageType'),
    ],
    "messageerror": [
        FieldCall(field='messageerror', demands=['BroadcastChannelEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['BroadcastChannelEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='messageerror', demands=['MessageEventTargetEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['MessageEventTargetEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='messageerror', demands=['MessagePortEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['MessagePortEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='messageerror', demands=['ServiceWorkerContainerEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['ServiceWorkerContainerEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='messageerror', demands=['WindowEventHandlersEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['WindowEventHandlersEventMap', 'MessageEvent'], returns='None'),
        FieldCall(field='messageerror', demands=['WorkerEventMap'], returns='MessageEvent'),
        FieldCall(field='messageerror', demands=['WorkerEventMap', 'MessageEvent'], returns='None'),
    ],
    "messages": [
        FieldCall(field='messages', demands=['GPUCompilationInfo'], returns='ReadonlyArray'),
    ],
    "meta": [
        FieldCall(field='meta', demands=['HTMLElementTagNameMap'], returns='HTMLMetaElement'),
        FieldCall(field='meta', demands=['HTMLElementTagNameMap', 'HTMLMetaElement'], returns='None'),
    ],
    "metaKey": [
        FieldCall(field='metaKey', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='metaKey', demands=['EventModifierInit', 'bool'], returns='None'),
        FieldCall(field='metaKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='metaKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='metaKey', demands=['TouchEvent'], returns='bool'),
    ],
    "metadata": [
        FieldCall(field='metadata', demands=['MediaSession'], returns='MediaMetadata'),
        FieldCall(field='metadata', demands=['MediaSession', 'MediaMetadata'], returns='None'),
        FieldCall(field='metadata', demands=['SVGElementTagNameMap'], returns='SVGMetadataElement'),
        FieldCall(field='metadata', demands=['SVGElementTagNameMap', 'SVGMetadataElement'], returns='None'),
        FieldCall(field='metadata', demands=['ClassDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['ClassMethodDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['ClassGetterDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['ClassSetterDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['ClassAccessorDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['ClassFieldDecoratorContext'], returns='DecoratorMetadata'),
        FieldCall(field='metadata', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "meter": [
        FieldCall(field='meter', demands=['HTMLElementTagNameMap'], returns='HTMLMeterElement'),
        FieldCall(field='meter', demands=['HTMLElementTagNameMap', 'HTMLMeterElement'], returns='None'),
    ],
    "method": [
        FieldCall(field='method', demands=['RequestInit'], returns='str'),
        FieldCall(field='method', demands=['RequestInit', 'str'], returns='None'),
        FieldCall(field='method', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='method', demands=['HTMLFormElement', 'str'], returns='None'),
        FieldCall(field='method', demands=['Request'], returns='str'),
        FieldCall(field='method', demands=['SVGTextPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "methodDetails": [
        FieldCall(field='methodDetails', demands=['PaymentMethodChangeEventInit'], returns='*'),
        FieldCall(field='methodDetails', demands=['PaymentMethodChangeEventInit', '*'], returns='None'),
        FieldCall(field='methodDetails', demands=['PaymentMethodChangeEvent'], returns='*'),
    ],
    "methodName": [
        FieldCall(field='methodName', demands=['PaymentMethodChangeEventInit'], returns='str'),
        FieldCall(field='methodName', demands=['PaymentMethodChangeEventInit', 'str'], returns='None'),
        FieldCall(field='methodName', demands=['PaymentMethodChangeEvent'], returns='str'),
        FieldCall(field='methodName', demands=['PaymentResponse'], returns='str'),
    ],
    "mfrac": [
        FieldCall(field='mfrac', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mfrac', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mi": [
        FieldCall(field='mi', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mi', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mid": [
        FieldCall(field='mid', demands=['RTCInboundRtpStreamStats'], returns='str'),
        FieldCall(field='mid', demands=['RTCInboundRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='mid', demands=['RTCOutboundRtpStreamStats'], returns='str'),
        FieldCall(field='mid', demands=['RTCOutboundRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='mid', demands=['RTCRtpTransceiver'], returns='str'),
    ],
    "midimessage": [
        FieldCall(field='midimessage', demands=['MIDIInputEventMap'], returns='MIDIMessageEvent'),
        FieldCall(field='midimessage', demands=['MIDIInputEventMap', 'MIDIMessageEvent'], returns='None'),
    ],
    "mimeType": [
        FieldCall(field='mimeType', demands=['MediaRecorderOptions'], returns='str'),
        FieldCall(field='mimeType', demands=['MediaRecorderOptions', 'str'], returns='None'),
        FieldCall(field='mimeType', demands=['RTCEncodedFrameMetadata'], returns='str'),
        FieldCall(field='mimeType', demands=['RTCEncodedFrameMetadata', 'str'], returns='None'),
        FieldCall(field='mimeType', demands=['RTCRtpCodec'], returns='str'),
        FieldCall(field='mimeType', demands=['RTCRtpCodec', 'str'], returns='None'),
        FieldCall(field='mimeType', demands=['MediaRecorder'], returns='str'),
    ],
    "mimeTypes": [
        FieldCall(field='mimeTypes', demands=['NavigatorPlugins'], returns='MimeTypeArray'),
    ],
    "min": [
        FieldCall(field='min', demands=['DoubleRange'], returns='float'),
        FieldCall(field='min', demands=['DoubleRange', 'float'], returns='None'),
        FieldCall(field='min', demands=['MediaSettingsRange'], returns='float'),
        FieldCall(field='min', demands=['MediaSettingsRange', 'float'], returns='None'),
        FieldCall(field='min', demands=['ULongRange'], returns='float'),
        FieldCall(field='min', demands=['ULongRange', 'float'], returns='None'),
        PrototypeCall(constructor='CSSNumericValue', fn='min', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='min', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='min', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
        FieldCall(field='min', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='min', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='min', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='min', demands=['HTMLMeterElement', 'float'], returns='None'),
        FieldCall(field='min', demands=['ReadableStreamBYOBReaderReadOptions'], returns='float'),
        FieldCall(field='min', demands=['ReadableStreamBYOBReaderReadOptions', 'float'], returns='None'),
        PrototypeCall(constructor='Math', fn='min', demands=['Math', '*'], returns='float'),
    ],
    "minBlockSize": [
        FieldCall(field='minBlockSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='minBlockSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "minDecibels": [
        FieldCall(field='minDecibels', demands=['AnalyserOptions'], returns='float'),
        FieldCall(field='minDecibels', demands=['AnalyserOptions', 'float'], returns='None'),
        FieldCall(field='minDecibels', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='minDecibels', demands=['AnalyserNode', 'float'], returns='None'),
    ],
    "minHdcpVersion": [
        FieldCall(field='minHdcpVersion', demands=['MediaKeysPolicy'], returns='str'),
        FieldCall(field='minHdcpVersion', demands=['MediaKeysPolicy', 'str'], returns='None'),
    ],
    "minHeight": [
        FieldCall(field='minHeight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='minHeight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "minInlineSize": [
        FieldCall(field='minInlineSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='minInlineSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "minLength": [
        FieldCall(field='minLength', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='minLength', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='minLength', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='minLength', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "minPinLength": [
        FieldCall(field='minPinLength', demands=['AuthenticationExtensionsClientInputs'], returns='bool'),
        FieldCall(field='minPinLength', demands=['AuthenticationExtensionsClientInputs', 'bool'], returns='None'),
    ],
    "minValue": [
        FieldCall(field='minValue', demands=['AudioParam'], returns='float'),
    ],
    "minWidth": [
        FieldCall(field='minWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='minWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "minimumFractionDigits": [
        FieldCall(field='minimumFractionDigits', demands=['BigIntToLocaleStringOptions'], returns='0'),
        FieldCall(field='minimumFractionDigits', demands=['BigIntToLocaleStringOptions', '0'], returns='None'),
    ],
    "minimumIntegerDigits": [
        FieldCall(field='minimumIntegerDigits', demands=['BigIntToLocaleStringOptions'], returns='1'),
        FieldCall(field='minimumIntegerDigits', demands=['BigIntToLocaleStringOptions', '1'], returns='None'),
    ],
    "minimumSignificantDigits": [
        FieldCall(field='minimumSignificantDigits', demands=['BigIntToLocaleStringOptions'], returns='1'),
        FieldCall(field='minimumSignificantDigits', demands=['BigIntToLocaleStringOptions', '1'], returns='None'),
    ],
    "miterLimit": [
        FieldCall(field='miterLimit', demands=['CanvasPathDrawingStyles'], returns='float'),
        FieldCall(field='miterLimit', demands=['CanvasPathDrawingStyles', 'float'], returns='None'),
    ],
    "mixBlendMode": [
        FieldCall(field='mixBlendMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='mixBlendMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "mmultiscripts": [
        FieldCall(field='mmultiscripts', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mmultiscripts', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mn": [
        FieldCall(field='mn', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mn', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mo": [
        FieldCall(field='mo', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mo', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mode": [
        FieldCall(field='mode', demands=['LockInfo'], returns='LockMode'),
        FieldCall(field='mode', demands=['LockInfo', 'LockMode'], returns='None'),
        FieldCall(field='mode', demands=['LockOptions'], returns='LockMode'),
        FieldCall(field='mode', demands=['LockOptions', 'LockMode'], returns='None'),
        FieldCall(field='mode', demands=['ReadableStreamGetReaderOptions'], returns='ReadableStreamReaderMode'),
        FieldCall(field='mode', demands=['ReadableStreamGetReaderOptions', 'ReadableStreamReaderMode'], returns='None'),
        FieldCall(field='mode', demands=['RequestInit'], returns='RequestMode'),
        FieldCall(field='mode', demands=['RequestInit', 'RequestMode'], returns='None'),
        FieldCall(field='mode', demands=['ShadowRootInit'], returns='ShadowRootMode'),
        FieldCall(field='mode', demands=['ShadowRootInit', 'ShadowRootMode'], returns='None'),
        FieldCall(field='mode', demands=['IDBTransaction'], returns='IDBTransactionMode'),
        FieldCall(field='mode', demands=['Lock'], returns='LockMode'),
        FieldCall(field='mode', demands=['Request'], returns='RequestMode'),
        FieldCall(field='mode', demands=['SVGFEBlendElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='mode', demands=['ShadowRoot'], returns='ShadowRootMode'),
        FieldCall(field='mode', demands=['SourceBuffer'], returns='AppendMode'),
        FieldCall(field='mode', demands=['SourceBuffer', 'AppendMode'], returns='None'),
        FieldCall(field='mode', demands=['TextTrack'], returns='TextTrackMode'),
        FieldCall(field='mode', demands=['TextTrack', 'TextTrackMode'], returns='None'),
    ],
    "modifierAltGraph": [
        FieldCall(field='modifierAltGraph', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierAltGraph', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierCapsLock": [
        FieldCall(field='modifierCapsLock', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierCapsLock', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierFn": [
        FieldCall(field='modifierFn', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierFn', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierFnLock": [
        FieldCall(field='modifierFnLock', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierFnLock', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierHyper": [
        FieldCall(field='modifierHyper', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierHyper', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierNumLock": [
        FieldCall(field='modifierNumLock', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierNumLock', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierScrollLock": [
        FieldCall(field='modifierScrollLock', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierScrollLock', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierSuper": [
        FieldCall(field='modifierSuper', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierSuper', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierSymbol": [
        FieldCall(field='modifierSymbol', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierSymbol', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifierSymbolLock": [
        FieldCall(field='modifierSymbolLock', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='modifierSymbolLock', demands=['EventModifierInit', 'bool'], returns='None'),
    ],
    "modifiers": [
        FieldCall(field='modifiers', demands=['PaymentDetailsBase'], returns='list'),
        FieldCall(field='modifiers', demands=['PaymentDetailsBase', 'list'], returns='None'),
    ],
    "modify": [
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str', 'str', 'str'], returns='None'),
    ],
    "module": [
        FieldCall(field='module', demands=['GPUProgrammableStage'], returns='GPUShaderModule'),
        FieldCall(field='module', demands=['GPUProgrammableStage', 'GPUShaderModule'], returns='None'),
    ],
    "modulusLength": [
        FieldCall(field='modulusLength', demands=['RsaKeyAlgorithm'], returns='float'),
        FieldCall(field='modulusLength', demands=['RsaKeyAlgorithm', 'float'], returns='None'),
        FieldCall(field='modulusLength', demands=['RsaKeyGenParams'], returns='float'),
        FieldCall(field='modulusLength', demands=['RsaKeyGenParams', 'float'], returns='None'),
    ],
    "mousedown": [
        FieldCall(field='mousedown', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mousedown', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mouseenter": [
        FieldCall(field='mouseenter', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mouseenter', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mouseleave": [
        FieldCall(field='mouseleave', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mouseleave', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mousemove": [
        FieldCall(field='mousemove', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mousemove', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mouseout": [
        FieldCall(field='mouseout', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mouseout', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mouseover": [
        FieldCall(field='mouseover', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mouseover', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "mouseup": [
        FieldCall(field='mouseup', demands=['GlobalEventHandlersEventMap'], returns='MouseEvent'),
        FieldCall(field='mouseup', demands=['GlobalEventHandlersEventMap', 'MouseEvent'], returns='None'),
    ],
    "move": [
        PrototypeCall(constructor='DisposableStack', fn='move', demands=['DisposableStack'], returns='DisposableStack'),
        PrototypeCall(constructor='AsyncDisposableStack', fn='move', demands=['AsyncDisposableStack'], returns='AsyncDisposableStack'),
    ],
    "moveBy": [
        DirectCall(fn='moveBy', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "moveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='moveTo', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='moveTo', demands=['Path2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='moveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        DirectCall(fn='moveTo', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "movementX": [
        FieldCall(field='movementX', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='movementX', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='movementX', demands=['MouseEvent'], returns='float'),
    ],
    "movementY": [
        FieldCall(field='movementY', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='movementY', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='movementY', demands=['MouseEvent'], returns='float'),
    ],
    "mover": [
        FieldCall(field='mover', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mover', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mpadded": [
        FieldCall(field='mpadded', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mpadded', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mpath": [
        FieldCall(field='mpath', demands=['SVGElementTagNameMap'], returns='SVGMPathElement'),
        FieldCall(field='mpath', demands=['SVGElementTagNameMap', 'SVGMPathElement'], returns='None'),
    ],
    "mphantom": [
        FieldCall(field='mphantom', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mphantom', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mprescripts": [
        FieldCall(field='mprescripts', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mprescripts', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mroot": [
        FieldCall(field='mroot', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mroot', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mrow": [
        FieldCall(field='mrow', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mrow', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "ms": [
        FieldCall(field='ms', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='ms', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mspace": [
        FieldCall(field='mspace', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mspace', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "msqrt": [
        FieldCall(field='msqrt', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='msqrt', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mstyle": [
        FieldCall(field='mstyle', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mstyle', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "msub": [
        FieldCall(field='msub', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='msub', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "msubsup": [
        FieldCall(field='msubsup', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='msubsup', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "msup": [
        FieldCall(field='msup', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='msup', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mtable": [
        FieldCall(field='mtable', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mtable', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mtd": [
        FieldCall(field='mtd', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mtd', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mtext": [
        FieldCall(field='mtext', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mtext', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mtr": [
        FieldCall(field='mtr', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='mtr', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mul": [
        PrototypeCall(constructor='CSSNumericValue', fn='mul', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='mul', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='mul', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
    ],
    "multiDrawArraysInstancedWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'float', 'Int32Array', 'float', 'Int32Array', 'float', 'GLsizei'], returns='None'),
    ],
    "multiDrawArraysWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'float', 'Int32Array', 'float', 'GLsizei'], returns='None'),
    ],
    "multiDrawElementsInstancedWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'float', 'GLenum', 'Int32Array', 'float', 'Int32Array', 'float', 'GLsizei'], returns='None'),
    ],
    "multiDrawElementsWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'float', 'GLenum', 'Int32Array', 'float', 'GLsizei'], returns='None'),
    ],
    "multiEntry": [
        FieldCall(field='multiEntry', demands=['IDBIndexParameters'], returns='bool'),
        FieldCall(field='multiEntry', demands=['IDBIndexParameters', 'bool'], returns='None'),
        FieldCall(field='multiEntry', demands=['IDBIndex'], returns='bool'),
    ],
    "multicol": [
        FieldCall(field='multicol', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='multicol', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "multiline": [
        FieldCall(field='multiline', demands=['regex'], returns='bool'),
    ],
    "multiple": [
        FieldCall(field='multiple', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='multiple', demands=['HTMLInputElement', 'bool'], returns='None'),
        FieldCall(field='multiple', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='multiple', demands=['HTMLSelectElement', 'bool'], returns='None'),
    ],
    "multiply": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='multiply', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='multiply', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='multiply', demands=['DOMMatrixReadOnly', 'DOMMatrixInit'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='multiply', demands=['DOMMatrix', 'DOMMatrixInit'], returns='DOMMatrix'),
    ],
    "multiplySelf": [
        PrototypeCall(constructor='DOMMatrix', fn='multiplySelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='multiplySelf', demands=['DOMMatrix', 'DOMMatrixInit'], returns='DOMMatrix'),
    ],
    "multisampled": [
        FieldCall(field='multisampled', demands=['GPUTextureBindingLayout'], returns='bool'),
        FieldCall(field='multisampled', demands=['GPUTextureBindingLayout', 'bool'], returns='None'),
    ],
    "munder": [
        FieldCall(field='munder', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='munder', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "munderover": [
        FieldCall(field='munderover', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='munderover', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "mute": [
        FieldCall(field='mute', demands=['MediaStreamTrackEventMap'], returns='Event'),
        FieldCall(field='mute', demands=['MediaStreamTrackEventMap', 'Event'], returns='None'),
    ],
    "muted": [
        FieldCall(field='muted', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='muted', demands=['HTMLMediaElement', 'bool'], returns='None'),
        FieldCall(field='muted', demands=['MediaStreamTrack'], returns='bool'),
    ],
    "n": [
        FieldCall(field='n', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='n', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "nackCount": [
        FieldCall(field='nackCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='nackCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='nackCount', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='nackCount', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "name": [
        FieldCall(field='name', demands=['Algorithm'], returns='str'),
        FieldCall(field='name', demands=['Algorithm', 'str'], returns='None'),
        FieldCall(field='name', demands=['CookieInit'], returns='str'),
        FieldCall(field='name', demands=['CookieInit', 'str'], returns='None'),
        FieldCall(field='name', demands=['CookieListItem'], returns='str'),
        FieldCall(field='name', demands=['CookieListItem', 'str'], returns='None'),
        FieldCall(field='name', demands=['CookieStoreDeleteOptions'], returns='str'),
        FieldCall(field='name', demands=['CookieStoreDeleteOptions', 'str'], returns='None'),
        FieldCall(field='name', demands=['CookieStoreGetOptions'], returns='str'),
        FieldCall(field='name', demands=['CookieStoreGetOptions', 'str'], returns='None'),
        FieldCall(field='name', demands=['IDBDatabaseInfo'], returns='str'),
        FieldCall(field='name', demands=['IDBDatabaseInfo', 'str'], returns='None'),
        FieldCall(field='name', demands=['KeyAlgorithm'], returns='str'),
        FieldCall(field='name', demands=['KeyAlgorithm', 'str'], returns='None'),
        FieldCall(field='name', demands=['LockInfo'], returns='str'),
        FieldCall(field='name', demands=['LockInfo', 'str'], returns='None'),
        FieldCall(field='name', demands=['PayerErrors'], returns='str'),
        FieldCall(field='name', demands=['PayerErrors', 'str'], returns='None'),
        FieldCall(field='name', demands=['PermissionDescriptor'], returns='PermissionName'),
        FieldCall(field='name', demands=['PermissionDescriptor', 'PermissionName'], returns='None'),
        FieldCall(field='name', demands=['PropertyDefinition'], returns='str'),
        FieldCall(field='name', demands=['PropertyDefinition', 'str'], returns='None'),
        FieldCall(field='name', demands=['PublicKeyCredentialEntity'], returns='str'),
        FieldCall(field='name', demands=['PublicKeyCredentialEntity', 'str'], returns='None'),
        FieldCall(field='name', demands=['PublicKeyCredentialUserEntityJSON'], returns='str'),
        FieldCall(field='name', demands=['PublicKeyCredentialUserEntityJSON', 'str'], returns='None'),
        FieldCall(field='name', demands=['SpeechSynthesisEventInit'], returns='str'),
        FieldCall(field='name', demands=['SpeechSynthesisEventInit', 'str'], returns='None'),
        FieldCall(field='name', demands=['WorkerOptions'], returns='str'),
        FieldCall(field='name', demands=['WorkerOptions', 'str'], returns='None'),
        FieldCall(field='name', demands=['Attr'], returns='str'),
        FieldCall(field='name', demands=['BroadcastChannel'], returns='str'),
        FieldCall(field='name', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='name', demands=['CSSCounterStyleRule', 'str'], returns='None'),
        FieldCall(field='name', demands=['CSSFontPaletteValuesRule'], returns='str'),
        FieldCall(field='name', demands=['CSSKeyframesRule'], returns='str'),
        FieldCall(field='name', demands=['CSSKeyframesRule', 'str'], returns='None'),
        FieldCall(field='name', demands=['CSSLayerBlockRule'], returns='str'),
        FieldCall(field='name', demands=['CSSPropertyRule'], returns='str'),
        FieldCall(field='name', demands=['DOMException'], returns='str'),
        FieldCall(field='name', demands=['DocumentType'], returns='str'),
        FieldCall(field='name', demands=['File'], returns='str'),
        FieldCall(field='name', demands=['FileSystem'], returns='str'),
        FieldCall(field='name', demands=['FileSystemEntry'], returns='str'),
        FieldCall(field='name', demands=['FileSystemHandle'], returns='str'),
        FieldCall(field='name', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLDetailsElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLDetailsElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFieldSetElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFormElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLMapElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLMapElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLMetaElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLOutputElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLParamElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLSelectElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLSlotElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLSlotElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLTextAreaElement', 'str'], returns='None'),
        FieldCall(field='name', demands=['IDBDatabase'], returns='str'),
        FieldCall(field='name', demands=['IDBIndex'], returns='str'),
        FieldCall(field='name', demands=['IDBIndex', 'str'], returns='None'),
        FieldCall(field='name', demands=['IDBObjectStore'], returns='str'),
        FieldCall(field='name', demands=['IDBObjectStore', 'str'], returns='None'),
        FieldCall(field='name', demands=['Lock'], returns='str'),
        FieldCall(field='name', demands=['MIDIPort'], returns='str'),
        FieldCall(field='name', demands=['PerformanceEntry'], returns='str'),
        FieldCall(field='name', demands=['PerformanceServerTiming'], returns='str'),
        FieldCall(field='name', demands=['PermissionStatus'], returns='str'),
        FieldCall(field='name', demands=['Plugin'], returns='str'),
        FieldCall(field='name', demands=['SpeechSynthesisEvent'], returns='str'),
        FieldCall(field='name', demands=['SpeechSynthesisVoice'], returns='str'),
        FieldCall(field='name', demands=['WebGLActiveInfo'], returns='str'),
        FieldCall(field='name', demands=['Window'], returns='str'),
        FieldCall(field='name', demands=['Window', 'str'], returns='None'),
        FieldCall(field='name', demands=['Error'], returns='str'),
        FieldCall(field='name', demands=['Error', 'str'], returns='None'),
        FieldCall(field='name', demands=['*'], returns='str'),
        FieldCall(field='name', demands=['GeneratorFunction'], returns='str'),
        FieldCall(field='name', demands=['GeneratorFunctionConstructor'], returns='str'),
        FieldCall(field='name', demands=['AsyncGeneratorFunction'], returns='str'),
        FieldCall(field='name', demands=['AsyncGeneratorFunctionConstructor'], returns='str'),
        FieldCall(field='name', demands=['ClassDecoratorContext'], returns='str'),
        FieldCall(field='name', demands=['ClassMethodDecoratorContext'], returns='str'),
        FieldCall(field='name', demands=['ClassGetterDecoratorContext'], returns='str'),
        FieldCall(field='name', demands=['ClassSetterDecoratorContext'], returns='str'),
        FieldCall(field='name', demands=['ClassAccessorDecoratorContext'], returns='str'),
        FieldCall(field='name', demands=['ClassFieldDecoratorContext'], returns='str'),
    ],
    "nameList": [
        FieldCall(field='nameList', demands=['CSSLayerStatementRule'], returns='ReadonlyArray'),
    ],
    "namedCurve": [
        FieldCall(field='namedCurve', demands=['EcKeyAlgorithm'], returns='NamedCurve'),
        FieldCall(field='namedCurve', demands=['EcKeyAlgorithm', 'NamedCurve'], returns='None'),
        FieldCall(field='namedCurve', demands=['EcKeyGenParams'], returns='NamedCurve'),
        FieldCall(field='namedCurve', demands=['EcKeyGenParams', 'NamedCurve'], returns='None'),
        FieldCall(field='namedCurve', demands=['EcKeyImportParams'], returns='NamedCurve'),
        FieldCall(field='namedCurve', demands=['EcKeyImportParams', 'NamedCurve'], returns='None'),
    ],
    "namedItem": [
        PrototypeCall(constructor='HTMLAllCollection', fn='namedItem', demands=['HTMLAllCollection', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='HTMLCollection', fn='namedItem', demands=['HTMLCollection', 'str'], returns='Element'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='namedItem', demands=['HTMLOptionsCollection', 'str'], returns='T'),
        PrototypeCall(constructor='HTMLFormControlsCollection', fn='namedItem', demands=['HTMLFormControlsCollection', 'str'], returns='RadioNodeList'),
        PrototypeCall(constructor='HTMLSelectElement', fn='namedItem', demands=['HTMLSelectElement', 'str'], returns='HTMLOptionElement'),
        PrototypeCall(constructor='MimeTypeArray', fn='namedItem', demands=['MimeTypeArray', 'str'], returns='MimeType'),
        PrototypeCall(constructor='Plugin', fn='namedItem', demands=['Plugin', 'str'], returns='MimeType'),
        PrototypeCall(constructor='PluginArray', fn='namedItem', demands=['PluginArray', 'str'], returns='Plugin'),
    ],
    "namespaceURI": [
        FieldCall(field='namespaceURI', demands=['Attr'], returns='str'),
        FieldCall(field='namespaceURI', demands=['CSSNamespaceRule'], returns='str'),
        FieldCall(field='namespaceURI', demands=['Element'], returns='str'),
    ],
    "naturalHeight": [
        FieldCall(field='naturalHeight', demands=['HTMLImageElement'], returns='float'),
    ],
    "naturalWidth": [
        FieldCall(field='naturalWidth', demands=['HTMLImageElement'], returns='float'),
    ],
    "nav": [
        FieldCall(field='nav', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='nav', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "navigation": [
        FieldCall(field='navigation', demands=['CSSViewTransitionRule'], returns='str'),
        FieldCall(field='navigation', demands=['Performance'], returns='PerformanceNavigation'),
    ],
    "navigationPreload": [
        FieldCall(field='navigationPreload', demands=['ServiceWorkerRegistration'], returns='NavigationPreloadManager'),
    ],
    "navigationStart": [
        FieldCall(field='navigationStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "navigationType": [
        FieldCall(field='navigationType', demands=['NavigationActivation'], returns='NavigationType'),
    ],
    "navigationUI": [
        FieldCall(field='navigationUI', demands=['FullscreenOptions'], returns='FullscreenNavigationUI'),
        FieldCall(field='navigationUI', demands=['FullscreenOptions', 'FullscreenNavigationUI'], returns='None'),
    ],
    "navigator": [
        FieldCall(field='navigator', demands=['Window'], returns='Navigator'),
        FieldCall(field='navigator', demands=['Window', 'Navigator'], returns='None'),
    ],
    "negative": [
        FieldCall(field='negative', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='negative', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "negotiated": [
        FieldCall(field='negotiated', demands=['RTCDataChannelInit'], returns='bool'),
        FieldCall(field='negotiated', demands=['RTCDataChannelInit', 'bool'], returns='None'),
        FieldCall(field='negotiated', demands=['RTCDataChannel'], returns='bool'),
    ],
    "negotiationneeded": [
        FieldCall(field='negotiationneeded', demands=['RTCPeerConnectionEventMap'], returns='Event'),
        FieldCall(field='negotiationneeded', demands=['RTCPeerConnectionEventMap', 'Event'], returns='None'),
    ],
    "networkPriority": [
        FieldCall(field='networkPriority', demands=['RTCRtpEncodingParameters'], returns='RTCPriorityType'),
        FieldCall(field='networkPriority', demands=['RTCRtpEncodingParameters', 'RTCPriorityType'], returns='None'),
    ],
    "networkState": [
        FieldCall(field='networkState', demands=['HTMLMediaElement'], returns='float'),
    ],
    "new": [
        PrototypeCall(constructor='CustomElementConstructor', fn='new', demands=['CustomElementConstructor', '*'], returns='HTMLElement'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'ArrayLike'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'TArrayBuffer'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'TArrayBuffer', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'ArrayBuffer'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'ArrayBuffer', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='new', demands=['BigInt64ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'ArrayLike'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'TArrayBuffer'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'TArrayBuffer', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'ArrayBuffer'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'ArrayBuffer', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='new', demands=['BigUint64ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='AggregateErrorConstructor', fn='new', demands=['AggregateErrorConstructor', 'Iterable'], returns='AggregateError'),
        PrototypeCall(constructor='AggregateErrorConstructor', fn='new', demands=['AggregateErrorConstructor', 'Iterable', 'str'], returns='AggregateError'),
        PrototypeCall(constructor='WeakRefConstructor', fn='new', demands=['WeakRefConstructor', 'T'], returns='WeakRef'),
        PrototypeCall(constructor='FinalizationRegistryConstructor', fn='new', demands=['FinalizationRegistryConstructor', '(heldValue:T)=>void'], returns='FinalizationRegistry'),
        PrototypeCall(constructor='ErrorConstructor', fn='new', demands=['ErrorConstructor'], returns='Error'),
        PrototypeCall(constructor='ErrorConstructor', fn='new', demands=['ErrorConstructor', 'str'], returns='Error'),
        PrototypeCall(constructor='ErrorConstructor', fn='new', demands=['ErrorConstructor', 'str', 'ErrorOptions'], returns='Error'),
        PrototypeCall(constructor='EvalErrorConstructor', fn='new', demands=['EvalErrorConstructor'], returns='EvalError'),
        PrototypeCall(constructor='EvalErrorConstructor', fn='new', demands=['EvalErrorConstructor', 'str'], returns='EvalError'),
        PrototypeCall(constructor='EvalErrorConstructor', fn='new', demands=['EvalErrorConstructor', 'str', 'ErrorOptions'], returns='EvalError'),
        PrototypeCall(constructor='RangeErrorConstructor', fn='new', demands=['RangeErrorConstructor'], returns='RangeError'),
        PrototypeCall(constructor='RangeErrorConstructor', fn='new', demands=['RangeErrorConstructor', 'str'], returns='RangeError'),
        PrototypeCall(constructor='RangeErrorConstructor', fn='new', demands=['RangeErrorConstructor', 'str', 'ErrorOptions'], returns='RangeError'),
        PrototypeCall(constructor='ReferenceErrorConstructor', fn='new', demands=['ReferenceErrorConstructor'], returns='ReferenceError'),
        PrototypeCall(constructor='ReferenceErrorConstructor', fn='new', demands=['ReferenceErrorConstructor', 'str'], returns='ReferenceError'),
        PrototypeCall(constructor='ReferenceErrorConstructor', fn='new', demands=['ReferenceErrorConstructor', 'str', 'ErrorOptions'], returns='ReferenceError'),
        PrototypeCall(constructor='SyntaxErrorConstructor', fn='new', demands=['SyntaxErrorConstructor'], returns='SyntaxError'),
        PrototypeCall(constructor='SyntaxErrorConstructor', fn='new', demands=['SyntaxErrorConstructor', 'str'], returns='SyntaxError'),
        PrototypeCall(constructor='SyntaxErrorConstructor', fn='new', demands=['SyntaxErrorConstructor', 'str', 'ErrorOptions'], returns='SyntaxError'),
        PrototypeCall(constructor='TypeErrorConstructor', fn='new', demands=['TypeErrorConstructor'], returns='TypeError'),
        PrototypeCall(constructor='TypeErrorConstructor', fn='new', demands=['TypeErrorConstructor', 'str'], returns='TypeError'),
        PrototypeCall(constructor='TypeErrorConstructor', fn='new', demands=['TypeErrorConstructor', 'str', 'ErrorOptions'], returns='TypeError'),
        PrototypeCall(constructor='URIErrorConstructor', fn='new', demands=['URIErrorConstructor'], returns='URIError'),
        PrototypeCall(constructor='URIErrorConstructor', fn='new', demands=['URIErrorConstructor', 'str'], returns='URIError'),
        PrototypeCall(constructor='URIErrorConstructor', fn='new', demands=['URIErrorConstructor', 'str', 'ErrorOptions'], returns='URIError'),
        PrototypeCall(constructor='AggregateErrorConstructor', fn='new', demands=['AggregateErrorConstructor', 'Iterable', 'str', 'ErrorOptions'], returns='AggregateError'),
        PrototypeCall(constructor='ArrayBufferConstructor', fn='new', demands=['ArrayBufferConstructor', 'float'], returns='ArrayBuffer'),
        PrototypeCall(constructor='ArrayBufferConstructor', fn='new', demands=['ArrayBufferConstructor', 'float', '{maxByteLength?:number;}'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SharedArrayBufferConstructor', fn='new', demands=['SharedArrayBufferConstructor', 'float'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='SharedArrayBufferConstructor', fn='new', demands=['SharedArrayBufferConstructor', 'float', '{maxByteLength?:number;}'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='ActiveXObject', fn='new', demands=['ActiveXObject', 'str'], returns='*'),
        PrototypeCall(constructor='VBArrayConstructor', fn='new', demands=['VBArrayConstructor', 'SafeArray'], returns='VBArray'),
        PrototypeCall(constructor='MapConstructor', fn='new', demands=['MapConstructor'], returns='Map'),
        PrototypeCall(constructor='MapConstructor', fn='new', demands=['MapConstructor', 'Iterable'], returns='Map'),
        PrototypeCall(constructor='WeakMapConstructor', fn='new', demands=['WeakMapConstructor', 'Iterable'], returns='WeakMap'),
        PrototypeCall(constructor='SetConstructor', fn='new', demands=['SetConstructor'], returns='Set'),
        PrototypeCall(constructor='SetConstructor', fn='new', demands=['SetConstructor', 'Iterable'], returns='Set'),
        PrototypeCall(constructor='WeakSetConstructor', fn='new', demands=['WeakSetConstructor', 'Iterable'], returns='WeakSet'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'Iterable'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'Iterable'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'Iterable'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'Iterable'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'Iterable'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'Iterable'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'Iterable'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'Iterable'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'Iterable'], returns='Float64Array'),
        PrototypeCall(constructor='ObjectConstructor', fn='new', demands=['ObjectConstructor'], returns='Object'),
        PrototypeCall(constructor='ObjectConstructor', fn='new', demands=['ObjectConstructor', '*'], returns='Object'),
        PrototypeCall(constructor='FunctionConstructor', fn='new', demands=['FunctionConstructor', '*'], returns='*'),
        PrototypeCall(constructor='StringConstructor', fn='new', demands=['StringConstructor'], returns='str'),
        PrototypeCall(constructor='StringConstructor', fn='new', demands=['StringConstructor', '*'], returns='str'),
        PrototypeCall(constructor='BooleanConstructor', fn='new', demands=['BooleanConstructor'], returns='bool'),
        PrototypeCall(constructor='BooleanConstructor', fn='new', demands=['BooleanConstructor', '*'], returns='bool'),
        PrototypeCall(constructor='NumberConstructor', fn='new', demands=['NumberConstructor'], returns='float'),
        PrototypeCall(constructor='NumberConstructor', fn='new', demands=['NumberConstructor', '*'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='DateConstructor', fn='new', demands=['DateConstructor', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='Date'),
        PrototypeCall(constructor='RegExpConstructor', fn='new', demands=['RegExpConstructor', 'regex'], returns='regex'),
        PrototypeCall(constructor='RegExpConstructor', fn='new', demands=['RegExpConstructor', 'str'], returns='regex'),
        PrototypeCall(constructor='RegExpConstructor', fn='new', demands=['RegExpConstructor', 'str', 'str'], returns='regex'),
        PrototypeCall(constructor='ArrayConstructor', fn='new', demands=['ArrayConstructor'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='new', demands=['ArrayConstructor', 'float'], returns='list'),
        PrototypeCall(constructor='ArrayConstructor', fn='new', demands=['ArrayConstructor', '*'], returns='list'),
        PrototypeCall(constructor='DataViewConstructor', fn='new', demands=['DataViewConstructor', 'TArrayBuffer'], returns='DataView'),
        PrototypeCall(constructor='DataViewConstructor', fn='new', demands=['DataViewConstructor', 'TArrayBuffer', 'float'], returns='DataView'),
        PrototypeCall(constructor='DataViewConstructor', fn='new', demands=['DataViewConstructor', 'TArrayBuffer', 'float', 'float'], returns='DataView'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'ArrayLike'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'TArrayBuffer'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'TArrayBuffer', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'ArrayBuffer'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'ArrayBuffer', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'ArrayLike'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'TArrayBuffer'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'TArrayBuffer', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'ArrayBuffer'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'ArrayBuffer', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'ArrayLike'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'TArrayBuffer'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'TArrayBuffer', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'ArrayBuffer'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'ArrayBuffer', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'ArrayLike'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'TArrayBuffer'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'TArrayBuffer', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'ArrayBuffer'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'ArrayBuffer', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'ArrayLike'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'TArrayBuffer'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'TArrayBuffer', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'ArrayBuffer'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'ArrayBuffer', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'ArrayLike'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'TArrayBuffer'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'TArrayBuffer', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'ArrayBuffer'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'ArrayBuffer', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'ArrayLike'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'TArrayBuffer'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'TArrayBuffer', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'ArrayBuffer'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'ArrayBuffer', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'ArrayLike'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'TArrayBuffer'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'TArrayBuffer', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'ArrayBuffer'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'ArrayBuffer', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'ArrayLike'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'TArrayBuffer'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'TArrayBuffer', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'ArrayBuffer'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'ArrayBuffer', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor', 'ArrayBuffer', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='SuppressedErrorConstructor', fn='new', demands=['SuppressedErrorConstructor', '*', '*'], returns='SuppressedError'),
        PrototypeCall(constructor='SuppressedErrorConstructor', fn='new', demands=['SuppressedErrorConstructor', '*', '*', 'str'], returns='SuppressedError'),
        PrototypeCall(constructor='DisposableStackConstructor', fn='new', demands=['DisposableStackConstructor'], returns='DisposableStack'),
        PrototypeCall(constructor='AsyncDisposableStackConstructor', fn='new', demands=['AsyncDisposableStackConstructor'], returns='AsyncDisposableStack'),
        PrototypeCall(constructor='RegExpConstructor', fn='new', demands=['RegExpConstructor', 'regex', 'str'], returns='regex'),
        PrototypeCall(constructor='MapConstructor', fn='new', demands=['MapConstructor', 'list'], returns='Map'),
        PrototypeCall(constructor='WeakMapConstructor', fn='new', demands=['WeakMapConstructor'], returns='WeakMap'),
        PrototypeCall(constructor='WeakMapConstructor', fn='new', demands=['WeakMapConstructor', 'list'], returns='WeakMap'),
        PrototypeCall(constructor='SetConstructor', fn='new', demands=['SetConstructor', 'list'], returns='Set'),
        PrototypeCall(constructor='WeakSetConstructor', fn='new', demands=['WeakSetConstructor'], returns='WeakSet'),
        PrototypeCall(constructor='WeakSetConstructor', fn='new', demands=['WeakSetConstructor', 'list'], returns='WeakSet'),
        PrototypeCall(constructor='GeneratorFunction', fn='new', demands=['GeneratorFunction', '*'], returns='Generator'),
        PrototypeCall(constructor='GeneratorFunctionConstructor', fn='new', demands=['GeneratorFunctionConstructor', '*'], returns='GeneratorFunction'),
        PrototypeCall(constructor='PromiseConstructor', fn='new', demands=['PromiseConstructor', '(resolve:(value:T'], returns='T'),
        PrototypeCall(constructor='ProxyConstructor', fn='new', demands=['ProxyConstructor', 'T', 'ProxyHandler'], returns='T'),
        PrototypeCall(constructor='ArrayBufferConstructor', fn='new', demands=['ArrayBufferConstructor'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SharedArrayBufferConstructor', fn='new', demands=['SharedArrayBufferConstructor'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='new', demands=['Int8ArrayConstructor'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='new', demands=['Uint8ArrayConstructor'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='new', demands=['Uint8ClampedArrayConstructor'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='new', demands=['Int16ArrayConstructor'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='new', demands=['Uint16ArrayConstructor'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='new', demands=['Int32ArrayConstructor'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='new', demands=['Uint32ArrayConstructor'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='new', demands=['Float32ArrayConstructor'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='new', demands=['Float64ArrayConstructor'], returns='Float64Array'),
        PrototypeCall(constructor='AsyncGeneratorFunction', fn='new', demands=['AsyncGeneratorFunction', '*'], returns='AsyncGenerator'),
        PrototypeCall(constructor='AsyncGeneratorFunctionConstructor', fn='new', demands=['AsyncGeneratorFunctionConstructor', '*'], returns='AsyncGeneratorFunction'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor', 'ArrayLike'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor', 'TArrayBuffer'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor', 'TArrayBuffer', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='new', demands=['Float16ArrayConstructor', 'TArrayBuffer', 'float', 'float'], returns='Float16Array'),
    ],
    "newState": [
        FieldCall(field='newState', demands=['ToggleEventInit'], returns='str'),
        FieldCall(field='newState', demands=['ToggleEventInit', 'str'], returns='None'),
        FieldCall(field='newState', demands=['ToggleEvent'], returns='str'),
    ],
    "newURL": [
        FieldCall(field='newURL', demands=['HashChangeEventInit'], returns='str'),
        FieldCall(field='newURL', demands=['HashChangeEventInit', 'str'], returns='None'),
        FieldCall(field='newURL', demands=['HashChangeEvent'], returns='str'),
    ],
    "newValue": [
        FieldCall(field='newValue', demands=['StorageEventInit'], returns='str'),
        FieldCall(field='newValue', demands=['StorageEventInit', 'str'], returns='None'),
        FieldCall(field='newValue', demands=['StorageEvent'], returns='str'),
    ],
    "newValueSpecifiedUnits": [
        PrototypeCall(constructor='SVGAngle', fn='newValueSpecifiedUnits', demands=['SVGAngle', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGLength', fn='newValueSpecifiedUnits', demands=['SVGLength', 'float', 'float'], returns='None'),
    ],
    "newVersion": [
        FieldCall(field='newVersion', demands=['IDBVersionChangeEventInit'], returns='float'),
        FieldCall(field='newVersion', demands=['IDBVersionChangeEventInit', 'float'], returns='None'),
        FieldCall(field='newVersion', demands=['IDBVersionChangeEvent'], returns='float'),
    ],
    "next": [
        PrototypeCall(constructor='Iterator', fn='next', demands=['Iterator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='Generator', fn='next', demands=['Generator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncIterator', fn='next', demands=['AsyncIterator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncGenerator', fn='next', demands=['AsyncGenerator', '*'], returns='IteratorResult'),
    ],
    "nextElementSibling": [
        FieldCall(field='nextElementSibling', demands=['NonDocumentTypeChildNode'], returns='Element'),
    ],
    "nextHopProtocol": [
        FieldCall(field='nextHopProtocol', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "nextNode": [
        PrototypeCall(constructor='NodeIterator', fn='nextNode', demands=['NodeIterator'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='nextNode', demands=['TreeWalker'], returns='Node'),
    ],
    "nextSibling": [
        FieldCall(field='nextSibling', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='nextSibling', demands=['Node'], returns='ChildNode'),
        PrototypeCall(constructor='TreeWalker', fn='nextSibling', demands=['TreeWalker'], returns='Node'),
    ],
    "nextid": [
        FieldCall(field='nextid', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='nextid', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "noHref": [
        FieldCall(field='noHref', demands=['HTMLAreaElement'], returns='bool'),
        FieldCall(field='noHref', demands=['HTMLAreaElement', 'bool'], returns='None'),
    ],
    "noModule": [
        FieldCall(field='noModule', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='noModule', demands=['HTMLScriptElement', 'bool'], returns='None'),
    ],
    "noResize": [
        FieldCall(field='noResize', demands=['HTMLFrameElement'], returns='bool'),
        FieldCall(field='noResize', demands=['HTMLFrameElement', 'bool'], returns='None'),
    ],
    "noShade": [
        FieldCall(field='noShade', demands=['HTMLHRElement'], returns='bool'),
        FieldCall(field='noShade', demands=['HTMLHRElement', 'bool'], returns='None'),
    ],
    "noValidate": [
        FieldCall(field='noValidate', demands=['HTMLFormElement'], returns='bool'),
        FieldCall(field='noValidate', demands=['HTMLFormElement', 'bool'], returns='None'),
    ],
    "noWrap": [
        FieldCall(field='noWrap', demands=['HTMLTableCellElement'], returns='bool'),
        FieldCall(field='noWrap', demands=['HTMLTableCellElement', 'bool'], returns='None'),
    ],
    "nobr": [
        FieldCall(field='nobr', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='nobr', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "nodeName": [
        FieldCall(field='nodeName', demands=['Node'], returns='str'),
    ],
    "nodeType": [
        FieldCall(field='nodeType', demands=['Node'], returns='float'),
    ],
    "nodeValue": [
        FieldCall(field='nodeValue', demands=['Node'], returns='str'),
        FieldCall(field='nodeValue', demands=['Node', 'str'], returns='None'),
    ],
    "noembed": [
        FieldCall(field='noembed', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='noembed', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "noframes": [
        FieldCall(field='noframes', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='noframes', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "noiseSuppression": [
        FieldCall(field='noiseSuppression', demands=['MediaTrackCapabilities'], returns='list'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackCapabilities', 'list'], returns='None'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackConstraintSet'], returns='ConstrainBoolean'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackConstraintSet', 'ConstrainBoolean'], returns='None'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackSettings'], returns='bool'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackSettings', 'bool'], returns='None'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='noiseSuppression', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "nominated": [
        FieldCall(field='nominated', demands=['RTCIceCandidatePairStats'], returns='bool'),
        FieldCall(field='nominated', demands=['RTCIceCandidatePairStats', 'bool'], returns='None'),
    ],
    "nonce": [
        FieldCall(field='nonce', demands=['HTMLOrSVGElement'], returns='str'),
        FieldCall(field='nonce', demands=['HTMLOrSVGElement', 'str'], returns='None'),
    ],
    "normalize": [
        FieldCall(field='normalize', demands=['ConvolverNode'], returns='bool'),
        FieldCall(field='normalize', demands=['ConvolverNode', 'bool'], returns='None'),
        PrototypeCall(constructor='Node', fn='normalize', demands=['Node'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='normalize', demands=['DocumentType'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='normalize', demands=['CharacterData'], returns='None'),
        PrototypeCall(constructor='Element', fn='normalize', demands=['Element'], returns='None'),
        PrototypeCall(constructor='Attr', fn='normalize', demands=['Attr'], returns='None'),
        PrototypeCall(constructor='Document', fn='normalize', demands=['Document'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='normalize', demands=['DocumentFragment'], returns='None'),
        PrototypeCall(constructor='String', fn='normalize', demands=['str', '"NFC"'], returns='str'),
        PrototypeCall(constructor='String', fn='normalize', demands=['str'], returns='str'),
        PrototypeCall(constructor='String', fn='normalize', demands=['str', 'str'], returns='str'),
    ],
    "noscript": [
        FieldCall(field='noscript', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='noscript', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "notation": [
        FieldCall(field='notation', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='notation', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "notify": [
        PrototypeCall(constructor='Atomics', fn='notify', demands=['Atomics', 'BigInt64Array', 'float'], returns='float'),
        PrototypeCall(constructor='Atomics', fn='notify', demands=['Atomics', 'BigInt64Array', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Atomics', fn='notify', demands=['Atomics', 'Int32Array', 'float'], returns='float'),
        PrototypeCall(constructor='Atomics', fn='notify', demands=['Atomics', 'Int32Array', 'float', 'float'], returns='float'),
    ],
    "now": [
        PrototypeCall(constructor='Performance', fn='now', demands=['Performance'], returns='DOMHighResTimeStamp'),
        PrototypeCall(constructor='Performance', fn='now', demands=['Performance'], returns='float'),
        PrototypeCall(constructor='DateConstructor', fn='now', demands=['DateConstructor'], returns='float'),
    ],
    "numOctaves": [
        FieldCall(field='numOctaves', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedInteger'),
    ],
    "numberOfChannels": [
        FieldCall(field='numberOfChannels', demands=['AudioBufferOptions'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['AudioBufferOptions', 'float'], returns='None'),
        FieldCall(field='numberOfChannels', demands=['AudioDataInit'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['AudioDataInit', 'float'], returns='None'),
        FieldCall(field='numberOfChannels', demands=['AudioDecoderConfig'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['AudioDecoderConfig', 'float'], returns='None'),
        FieldCall(field='numberOfChannels', demands=['AudioEncoderConfig'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['AudioEncoderConfig', 'float'], returns='None'),
        FieldCall(field='numberOfChannels', demands=['OfflineAudioContextOptions'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['OfflineAudioContextOptions', 'float'], returns='None'),
        FieldCall(field='numberOfChannels', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='numberOfChannels', demands=['AudioData'], returns='float'),
    ],
    "numberOfFrames": [
        FieldCall(field='numberOfFrames', demands=['AudioDataInit'], returns='float'),
        FieldCall(field='numberOfFrames', demands=['AudioDataInit', 'float'], returns='None'),
        FieldCall(field='numberOfFrames', demands=['AudioData'], returns='float'),
    ],
    "numberOfInputs": [
        FieldCall(field='numberOfInputs', demands=['AudioWorkletNodeOptions'], returns='float'),
        FieldCall(field='numberOfInputs', demands=['AudioWorkletNodeOptions', 'float'], returns='None'),
        FieldCall(field='numberOfInputs', demands=['ChannelMergerOptions'], returns='float'),
        FieldCall(field='numberOfInputs', demands=['ChannelMergerOptions', 'float'], returns='None'),
        FieldCall(field='numberOfInputs', demands=['AudioNode'], returns='float'),
    ],
    "numberOfItems": [
        FieldCall(field='numberOfItems', demands=['SVGLengthList'], returns='float'),
        FieldCall(field='numberOfItems', demands=['SVGNumberList'], returns='float'),
        FieldCall(field='numberOfItems', demands=['SVGPointList'], returns='float'),
        FieldCall(field='numberOfItems', demands=['SVGStringList'], returns='float'),
        FieldCall(field='numberOfItems', demands=['SVGTransformList'], returns='float'),
    ],
    "numberOfOutputs": [
        FieldCall(field='numberOfOutputs', demands=['AudioWorkletNodeOptions'], returns='float'),
        FieldCall(field='numberOfOutputs', demands=['AudioWorkletNodeOptions', 'float'], returns='None'),
        FieldCall(field='numberOfOutputs', demands=['ChannelSplitterOptions'], returns='float'),
        FieldCall(field='numberOfOutputs', demands=['ChannelSplitterOptions', 'float'], returns='None'),
        FieldCall(field='numberOfOutputs', demands=['AudioNode'], returns='float'),
    ],
    "numberValue": [
        FieldCall(field='numberValue', demands=['XPathResult'], returns='float'),
    ],
    "numberingSystem": [
        FieldCall(field='numberingSystem', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='numberingSystem', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "object": [
        FieldCall(field='object', demands=['HTMLElementTagNameMap'], returns='HTMLObjectElement'),
        FieldCall(field='object', demands=['HTMLElementTagNameMap', 'HTMLObjectElement'], returns='None'),
        FieldCall(field='object', demands=['WeakKeyTypes'], returns='dict'),
        FieldCall(field='object', demands=['WeakKeyTypes', 'dict'], returns='None'),
    ],
    "objectFit": [
        FieldCall(field='objectFit', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='objectFit', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "objectPosition": [
        FieldCall(field='objectPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='objectPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "objectStore": [
        FieldCall(field='objectStore', demands=['IDBIndex'], returns='IDBObjectStore'),
        PrototypeCall(constructor='IDBTransaction', fn='objectStore', demands=['IDBTransaction', 'str'], returns='IDBObjectStore'),
    ],
    "objectStoreNames": [
        FieldCall(field='objectStoreNames', demands=['IDBDatabase'], returns='DOMStringList'),
        FieldCall(field='objectStoreNames', demands=['IDBTransaction'], returns='DOMStringList'),
    ],
    "observe": [
        PrototypeCall(constructor='IntersectionObserver', fn='observe', demands=['IntersectionObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='observe', demands=['MutationObserver', 'Node'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='observe', demands=['MutationObserver', 'Node', 'MutationObserverInit'], returns='None'),
        PrototypeCall(constructor='PerformanceObserver', fn='observe', demands=['PerformanceObserver'], returns='None'),
        PrototypeCall(constructor='PerformanceObserver', fn='observe', demands=['PerformanceObserver', 'PerformanceObserverInit'], returns='None'),
        PrototypeCall(constructor='ReportingObserver', fn='observe', demands=['ReportingObserver'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='observe', demands=['ResizeObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='observe', demands=['ResizeObserver', 'Element', 'ResizeObserverOptions'], returns='None'),
    ],
    "of": [
        PrototypeCall(constructor='BigInt64ArrayConstructor', fn='of', demands=['BigInt64ArrayConstructor', '*'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64ArrayConstructor', fn='of', demands=['BigUint64ArrayConstructor', '*'], returns='BigUint64Array'),
        PrototypeCall(constructor='Int8ArrayConstructor', fn='of', demands=['Int8ArrayConstructor', '*'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8ArrayConstructor', fn='of', demands=['Uint8ArrayConstructor', '*'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArrayConstructor', fn='of', demands=['Uint8ClampedArrayConstructor', '*'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16ArrayConstructor', fn='of', demands=['Int16ArrayConstructor', '*'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16ArrayConstructor', fn='of', demands=['Uint16ArrayConstructor', '*'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32ArrayConstructor', fn='of', demands=['Int32ArrayConstructor', '*'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32ArrayConstructor', fn='of', demands=['Uint32ArrayConstructor', '*'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32ArrayConstructor', fn='of', demands=['Float32ArrayConstructor', '*'], returns='Float32Array'),
        PrototypeCall(constructor='Float64ArrayConstructor', fn='of', demands=['Float64ArrayConstructor', '*'], returns='Float64Array'),
        PrototypeCall(constructor='ArrayConstructor', fn='of', demands=['ArrayConstructor', '*'], returns='list'),
        PrototypeCall(constructor='Float16ArrayConstructor', fn='of', demands=['Float16ArrayConstructor', '*'], returns='Float16Array'),
    ],
    "offerToReceiveAudio": [
        FieldCall(field='offerToReceiveAudio', demands=['RTCOfferOptions'], returns='bool'),
        FieldCall(field='offerToReceiveAudio', demands=['RTCOfferOptions', 'bool'], returns='None'),
    ],
    "offerToReceiveVideo": [
        FieldCall(field='offerToReceiveVideo', demands=['RTCOfferOptions'], returns='bool'),
        FieldCall(field='offerToReceiveVideo', demands=['RTCOfferOptions', 'bool'], returns='None'),
    ],
    "offline": [
        FieldCall(field='offline', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='offline', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "offset": [
        FieldCall(field='offset', demands=['ComputedKeyframe'], returns='float'),
        FieldCall(field='offset', demands=['ComputedKeyframe', 'float'], returns='None'),
        FieldCall(field='offset', demands=['ConstantSourceOptions'], returns='float'),
        FieldCall(field='offset', demands=['ConstantSourceOptions', 'float'], returns='None'),
        FieldCall(field='offset', demands=['Keyframe'], returns='float'),
        FieldCall(field='offset', demands=['Keyframe', 'float'], returns='None'),
        FieldCall(field='offset', demands=['PlaneLayout'], returns='float'),
        FieldCall(field='offset', demands=['PlaneLayout', 'float'], returns='None'),
        FieldCall(field='offset', demands=['PropertyIndexedKeyframes'], returns='float'),
        FieldCall(field='offset', demands=['PropertyIndexedKeyframes', 'float'], returns='None'),
        FieldCall(field='offset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='offset', demands=['CaretPosition'], returns='float'),
        FieldCall(field='offset', demands=['ConstantSourceNode'], returns='AudioParam'),
        FieldCall(field='offset', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='offset', demands=['SVGStopElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='offset', demands=['GPUBufferBinding'], returns='float'),
        FieldCall(field='offset', demands=['GPUBufferBinding', 'float'], returns='None'),
        FieldCall(field='offset', demands=['GPUVertexAttribute'], returns='float'),
        FieldCall(field='offset', demands=['GPUVertexAttribute', 'float'], returns='None'),
        FieldCall(field='offset', demands=['GPUTexelCopyBufferLayout'], returns='float'),
        FieldCall(field='offset', demands=['GPUTexelCopyBufferLayout', 'float'], returns='None'),
    ],
    "offsetAnchor": [
        FieldCall(field='offsetAnchor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offsetAnchor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "offsetDistance": [
        FieldCall(field='offsetDistance', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offsetDistance', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "offsetHeight": [
        FieldCall(field='offsetHeight', demands=['HTMLElement'], returns='float'),
    ],
    "offsetLeft": [
        FieldCall(field='offsetLeft', demands=['HTMLElement'], returns='float'),
        FieldCall(field='offsetLeft', demands=['VisualViewport'], returns='float'),
    ],
    "offsetNode": [
        FieldCall(field='offsetNode', demands=['CaretPosition'], returns='Node'),
    ],
    "offsetParent": [
        FieldCall(field='offsetParent', demands=['HTMLElement'], returns='Element'),
    ],
    "offsetPath": [
        FieldCall(field='offsetPath', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offsetPath', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "offsetPosition": [
        FieldCall(field='offsetPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offsetPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "offsetRotate": [
        FieldCall(field='offsetRotate', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='offsetRotate', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "offsetTop": [
        FieldCall(field='offsetTop', demands=['HTMLElement'], returns='float'),
        FieldCall(field='offsetTop', demands=['VisualViewport'], returns='float'),
    ],
    "offsetWidth": [
        FieldCall(field='offsetWidth', demands=['HTMLElement'], returns='float'),
    ],
    "offsetX": [
        FieldCall(field='offsetX', demands=['MouseEvent'], returns='float'),
    ],
    "offsetY": [
        FieldCall(field='offsetY', demands=['MouseEvent'], returns='float'),
    ],
    "ok": [
        FieldCall(field='ok', demands=['Response'], returns='bool'),
    ],
    "ol": [
        FieldCall(field='ol', demands=['HTMLElementTagNameMap'], returns='HTMLOListElement'),
        FieldCall(field='ol', demands=['HTMLElementTagNameMap', 'HTMLOListElement'], returns='None'),
    ],
    "oldState": [
        FieldCall(field='oldState', demands=['ToggleEventInit'], returns='str'),
        FieldCall(field='oldState', demands=['ToggleEventInit', 'str'], returns='None'),
        FieldCall(field='oldState', demands=['ToggleEvent'], returns='str'),
    ],
    "oldURL": [
        FieldCall(field='oldURL', demands=['HashChangeEventInit'], returns='str'),
        FieldCall(field='oldURL', demands=['HashChangeEventInit', 'str'], returns='None'),
        FieldCall(field='oldURL', demands=['HashChangeEvent'], returns='str'),
    ],
    "oldValue": [
        FieldCall(field='oldValue', demands=['StorageEventInit'], returns='str'),
        FieldCall(field='oldValue', demands=['StorageEventInit', 'str'], returns='None'),
        FieldCall(field='oldValue', demands=['MutationRecord'], returns='str'),
        FieldCall(field='oldValue', demands=['StorageEvent'], returns='str'),
    ],
    "oldVersion": [
        FieldCall(field='oldVersion', demands=['IDBVersionChangeEventInit'], returns='float'),
        FieldCall(field='oldVersion', demands=['IDBVersionChangeEventInit', 'float'], returns='None'),
        FieldCall(field='oldVersion', demands=['IDBVersionChangeEvent'], returns='float'),
    ],
    "onLine": [
        FieldCall(field='onLine', demands=['NavigatorOnLine'], returns='bool'),
    ],
    "onabort": [
        FieldCall(field='onabort', demands=['AbortSignal'], returns='((this:AbortSignal,ev:Event)=>any)'),
        FieldCall(field='onabort', demands=['AbortSignal', '((this:AbortSignal,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onabort', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onabort', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onabort', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:UIEvent)=>any)'),
        FieldCall(field='onabort', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:UIEvent)=>any)'], returns='None'),
        FieldCall(field='onabort', demands=['IDBDatabase'], returns='((this:IDBDatabase,ev:Event)=>any)'),
        FieldCall(field='onabort', demands=['IDBDatabase', '((this:IDBDatabase,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onabort', demands=['IDBTransaction'], returns='((this:IDBTransaction,ev:Event)=>any)'),
        FieldCall(field='onabort', demands=['IDBTransaction', '((this:IDBTransaction,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onabort', demands=['SourceBuffer'], returns='((this:SourceBuffer,ev:Event)=>any)'),
        FieldCall(field='onabort', demands=['SourceBuffer', '((this:SourceBuffer,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onabort', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onabort', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
    ],
    "onaddsourcebuffer": [
        FieldCall(field='onaddsourcebuffer', demands=['SourceBufferList'], returns='((this:SourceBufferList,ev:Event)=>any)'),
        FieldCall(field='onaddsourcebuffer', demands=['SourceBufferList', '((this:SourceBufferList,ev:Event)=>any)'], returns='None'),
    ],
    "onaddtrack": [
        FieldCall(field='onaddtrack', demands=['MediaStream'], returns='((this:MediaStream,ev:MediaStreamTrackEvent)=>any)'),
        FieldCall(field='onaddtrack', demands=['MediaStream', '((this:MediaStream,ev:MediaStreamTrackEvent)=>any)'], returns='None'),
        FieldCall(field='onaddtrack', demands=['TextTrackList'], returns='((this:TextTrackList,ev:TrackEvent)=>any)'),
        FieldCall(field='onaddtrack', demands=['TextTrackList', '((this:TextTrackList,ev:TrackEvent)=>any)'], returns='None'),
    ],
    "onafterprint": [
        FieldCall(field='onafterprint', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onafterprint', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onanimationcancel": [
        FieldCall(field='onanimationcancel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'),
        FieldCall(field='onanimationcancel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'], returns='None'),
    ],
    "onanimationend": [
        FieldCall(field='onanimationend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'),
        FieldCall(field='onanimationend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'], returns='None'),
    ],
    "onanimationiteration": [
        FieldCall(field='onanimationiteration', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'),
        FieldCall(field='onanimationiteration', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'], returns='None'),
    ],
    "onanimationstart": [
        FieldCall(field='onanimationstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'),
        FieldCall(field='onanimationstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:AnimationEvent)=>any)'], returns='None'),
    ],
    "onaudioprocess": [
        FieldCall(field='onaudioprocess', demands=['ScriptProcessorNode'], returns='((this:ScriptProcessorNode,ev:AudioProcessingEvent)=>any)'),
        FieldCall(field='onaudioprocess', demands=['ScriptProcessorNode', '((this:ScriptProcessorNode,ev:AudioProcessingEvent)=>any)'], returns='None'),
    ],
    "onauxclick": [
        FieldCall(field='onauxclick', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onauxclick', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
        FieldCall(field='onauxclick', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onauxclick', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onbeforeinput": [
        FieldCall(field='onbeforeinput', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:InputEvent)=>any)'),
        FieldCall(field='onbeforeinput', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:InputEvent)=>any)'], returns='None'),
    ],
    "onbeforematch": [
        FieldCall(field='onbeforematch', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onbeforematch', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onbeforeprint": [
        FieldCall(field='onbeforeprint', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onbeforeprint', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onbeforetoggle": [
        FieldCall(field='onbeforetoggle', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ToggleEvent)=>any)'),
        FieldCall(field='onbeforetoggle', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ToggleEvent)=>any)'], returns='None'),
        FieldCall(field='onbeforetoggle', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onbeforetoggle', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onbeforeunload": [
        FieldCall(field='onbeforeunload', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:BeforeUnloadEvent)=>any)'),
        FieldCall(field='onbeforeunload', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:BeforeUnloadEvent)=>any)'], returns='None'),
        FieldCall(field='onbeforeunload', demands=['Window'], returns='((this:Window,ev:Event)=>any)'),
        FieldCall(field='onbeforeunload', demands=['Window', '((this:Window,ev:Event)=>any)'], returns='None'),
    ],
    "onblocked": [
        FieldCall(field='onblocked', demands=['IDBOpenDBRequest'], returns='((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)'),
        FieldCall(field='onblocked', demands=['IDBOpenDBRequest', '((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)'], returns='None'),
    ],
    "onblur": [
        FieldCall(field='onblur', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:FocusEvent)=>any)'),
        FieldCall(field='onblur', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:FocusEvent)=>any)'], returns='None'),
    ],
    "onboundary": [
        FieldCall(field='onboundary', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onboundary', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onbufferedamountlow": [
        FieldCall(field='onbufferedamountlow', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:Event)=>any)'),
        FieldCall(field='onbufferedamountlow', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:Event)=>any)'], returns='None'),
    ],
    "oncancel": [
        FieldCall(field='oncancel', demands=['Animation'], returns='((this:Animation,ev:AnimationPlaybackEvent)=>any)'),
        FieldCall(field='oncancel', demands=['Animation', '((this:Animation,ev:AnimationPlaybackEvent)=>any)'], returns='None'),
        FieldCall(field='oncancel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncancel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "oncanplay": [
        FieldCall(field='oncanplay', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncanplay', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "oncanplaythrough": [
        FieldCall(field='oncanplaythrough', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncanplaythrough', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "once": [
        FieldCall(field='once', demands=['AddEventListenerOptions'], returns='bool'),
        FieldCall(field='once', demands=['AddEventListenerOptions', 'bool'], returns='None'),
    ],
    "onchange": [
        FieldCall(field='onchange', demands=['CookieStore'], returns='((this:CookieStore,ev:CookieChangeEvent)=>any)'),
        FieldCall(field='onchange', demands=['CookieStore', '((this:CookieStore,ev:CookieChangeEvent)=>any)'], returns='None'),
        FieldCall(field='onchange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onchange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onchange', demands=['MediaQueryList'], returns='((this:MediaQueryList,ev:MediaQueryListEvent)=>any)'),
        FieldCall(field='onchange', demands=['MediaQueryList', '((this:MediaQueryList,ev:MediaQueryListEvent)=>any)'], returns='None'),
        FieldCall(field='onchange', demands=['PermissionStatus'], returns='((this:PermissionStatus,ev:Event)=>any)'),
        FieldCall(field='onchange', demands=['PermissionStatus', '((this:PermissionStatus,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onchange', demands=['ScreenOrientation'], returns='((this:ScreenOrientation,ev:Event)=>any)'),
        FieldCall(field='onchange', demands=['ScreenOrientation', '((this:ScreenOrientation,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onchange', demands=['TextTrackList'], returns='((this:TextTrackList,ev:Event)=>any)'),
        FieldCall(field='onchange', demands=['TextTrackList', '((this:TextTrackList,ev:Event)=>any)'], returns='None'),
    ],
    "onclick": [
        FieldCall(field='onclick', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onclick', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
        FieldCall(field='onclick', demands=['Notification'], returns='((this:Notification,ev:Event)=>any)'),
        FieldCall(field='onclick', demands=['Notification', '((this:Notification,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onclick', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onclick', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onclose": [
        FieldCall(field='onclose', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onclose', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onclose', demands=['IDBDatabase'], returns='((this:IDBDatabase,ev:Event)=>any)'),
        FieldCall(field='onclose', demands=['IDBDatabase', '((this:IDBDatabase,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onclose', demands=['Notification'], returns='((this:Notification,ev:Event)=>any)'),
        FieldCall(field='onclose', demands=['Notification', '((this:Notification,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onclose', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:Event)=>any)'),
        FieldCall(field='onclose', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onclose', demands=['WebSocket'], returns='((this:WebSocket,ev:CloseEvent)=>any)'),
        FieldCall(field='onclose', demands=['WebSocket', '((this:WebSocket,ev:CloseEvent)=>any)'], returns='None'),
    ],
    "onclosing": [
        FieldCall(field='onclosing', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:Event)=>any)'),
        FieldCall(field='onclosing', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:Event)=>any)'], returns='None'),
    ],
    "oncomplete": [
        FieldCall(field='oncomplete', demands=['IDBTransaction'], returns='((this:IDBTransaction,ev:Event)=>any)'),
        FieldCall(field='oncomplete', demands=['IDBTransaction', '((this:IDBTransaction,ev:Event)=>any)'], returns='None'),
        FieldCall(field='oncomplete', demands=['OfflineAudioContext'], returns='((this:OfflineAudioContext,ev:OfflineAudioCompletionEvent)=>any)'),
        FieldCall(field='oncomplete', demands=['OfflineAudioContext', '((this:OfflineAudioContext,ev:OfflineAudioCompletionEvent)=>any)'], returns='None'),
    ],
    "onconnect": [
        FieldCall(field='onconnect', demands=['RemotePlayback'], returns='((this:RemotePlayback,ev:Event)=>any)'),
        FieldCall(field='onconnect', demands=['RemotePlayback', '((this:RemotePlayback,ev:Event)=>any)'], returns='None'),
    ],
    "onconnecting": [
        FieldCall(field='onconnecting', demands=['RemotePlayback'], returns='((this:RemotePlayback,ev:Event)=>any)'),
        FieldCall(field='onconnecting', demands=['RemotePlayback', '((this:RemotePlayback,ev:Event)=>any)'], returns='None'),
    ],
    "onconnectionstatechange": [
        FieldCall(field='onconnectionstatechange', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:Event)=>any)'),
        FieldCall(field='onconnectionstatechange', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:Event)=>any)'], returns='None'),
    ],
    "oncontextlost": [
        FieldCall(field='oncontextlost', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncontextlost', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='oncontextlost', demands=['OffscreenCanvas'], returns='((this:OffscreenCanvas,ev:Event)=>any)'),
        FieldCall(field='oncontextlost', demands=['OffscreenCanvas', '((this:OffscreenCanvas,ev:Event)=>any)'], returns='None'),
    ],
    "oncontextmenu": [
        FieldCall(field='oncontextmenu', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='oncontextmenu', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
        FieldCall(field='oncontextmenu', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='oncontextmenu', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "oncontextrestored": [
        FieldCall(field='oncontextrestored', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncontextrestored', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='oncontextrestored', demands=['OffscreenCanvas'], returns='((this:OffscreenCanvas,ev:Event)=>any)'),
        FieldCall(field='oncontextrestored', demands=['OffscreenCanvas', '((this:OffscreenCanvas,ev:Event)=>any)'], returns='None'),
    ],
    "oncontrollerchange": [
        FieldCall(field='oncontrollerchange', demands=['ServiceWorkerContainer'], returns='((this:ServiceWorkerContainer,ev:Event)=>any)'),
        FieldCall(field='oncontrollerchange', demands=['ServiceWorkerContainer', '((this:ServiceWorkerContainer,ev:Event)=>any)'], returns='None'),
    ],
    "oncopy": [
        FieldCall(field='oncopy', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'),
        FieldCall(field='oncopy', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'], returns='None'),
    ],
    "oncuechange": [
        FieldCall(field='oncuechange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oncuechange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='oncuechange', demands=['TextTrack'], returns='((this:TextTrack,ev:Event)=>any)'),
        FieldCall(field='oncuechange', demands=['TextTrack', '((this:TextTrack,ev:Event)=>any)'], returns='None'),
    ],
    "oncut": [
        FieldCall(field='oncut', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'),
        FieldCall(field='oncut', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'], returns='None'),
    ],
    "ondataavailable": [
        FieldCall(field='ondataavailable', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:BlobEvent)=>any)'),
        FieldCall(field='ondataavailable', demands=['MediaRecorder', '((this:MediaRecorder,ev:BlobEvent)=>any)'], returns='None'),
    ],
    "ondatachannel": [
        FieldCall(field='ondatachannel', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:RTCDataChannelEvent)=>any)'),
        FieldCall(field='ondatachannel', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:RTCDataChannelEvent)=>any)'], returns='None'),
    ],
    "ondblclick": [
        FieldCall(field='ondblclick', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='ondblclick', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "ondequeue": [
        FieldCall(field='ondequeue', demands=['AudioDecoder'], returns='((this:AudioDecoder,ev:Event)=>any)'),
        FieldCall(field='ondequeue', demands=['AudioDecoder', '((this:AudioDecoder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='ondequeue', demands=['AudioEncoder'], returns='((this:AudioEncoder,ev:Event)=>any)'),
        FieldCall(field='ondequeue', demands=['AudioEncoder', '((this:AudioEncoder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='ondequeue', demands=['VideoDecoder'], returns='((this:VideoDecoder,ev:Event)=>any)'),
        FieldCall(field='ondequeue', demands=['VideoDecoder', '((this:VideoDecoder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='ondequeue', demands=['VideoEncoder'], returns='((this:VideoEncoder,ev:Event)=>any)'),
        FieldCall(field='ondequeue', demands=['VideoEncoder', '((this:VideoEncoder,ev:Event)=>any)'], returns='None'),
    ],
    "ondevicechange": [
        FieldCall(field='ondevicechange', demands=['MediaDevices'], returns='((this:MediaDevices,ev:Event)=>any)'),
        FieldCall(field='ondevicechange', demands=['MediaDevices', '((this:MediaDevices,ev:Event)=>any)'], returns='None'),
    ],
    "ondevicemotion": [
        FieldCall(field='ondevicemotion', demands=['Window'], returns='((this:Window,ev:DeviceMotionEvent)=>any)'),
        FieldCall(field='ondevicemotion', demands=['Window', '((this:Window,ev:DeviceMotionEvent)=>any)'], returns='None'),
    ],
    "ondeviceorientation": [
        FieldCall(field='ondeviceorientation', demands=['Window'], returns='((this:Window,ev:DeviceOrientationEvent)=>any)'),
        FieldCall(field='ondeviceorientation', demands=['Window', '((this:Window,ev:DeviceOrientationEvent)=>any)'], returns='None'),
    ],
    "ondeviceorientationabsolute": [
        FieldCall(field='ondeviceorientationabsolute', demands=['Window'], returns='((this:Window,ev:DeviceOrientationEvent)=>any)'),
        FieldCall(field='ondeviceorientationabsolute', demands=['Window', '((this:Window,ev:DeviceOrientationEvent)=>any)'], returns='None'),
    ],
    "ondisconnect": [
        FieldCall(field='ondisconnect', demands=['RemotePlayback'], returns='((this:RemotePlayback,ev:Event)=>any)'),
        FieldCall(field='ondisconnect', demands=['RemotePlayback', '((this:RemotePlayback,ev:Event)=>any)'], returns='None'),
    ],
    "ondispose": [
        FieldCall(field='ondispose', demands=['NavigationHistoryEntry'], returns='((this:NavigationHistoryEntry,ev:Event)=>any)'),
        FieldCall(field='ondispose', demands=['NavigationHistoryEntry', '((this:NavigationHistoryEntry,ev:Event)=>any)'], returns='None'),
    ],
    "ondrag": [
        FieldCall(field='ondrag', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondrag', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondragend": [
        FieldCall(field='ondragend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondragend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondragenter": [
        FieldCall(field='ondragenter', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondragenter', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondragleave": [
        FieldCall(field='ondragleave', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondragleave', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondragover": [
        FieldCall(field='ondragover', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondragover', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondragstart": [
        FieldCall(field='ondragstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondragstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondrop": [
        FieldCall(field='ondrop', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:DragEvent)=>any)'),
        FieldCall(field='ondrop', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:DragEvent)=>any)'], returns='None'),
    ],
    "ondurationchange": [
        FieldCall(field='ondurationchange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='ondurationchange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onemptied": [
        FieldCall(field='onemptied', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onemptied', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onencrypted": [
        FieldCall(field='onencrypted', demands=['HTMLMediaElement'], returns='((this:HTMLMediaElement,ev:MediaEncryptedEvent)=>any)'),
        FieldCall(field='onencrypted', demands=['HTMLMediaElement', '((this:HTMLMediaElement,ev:MediaEncryptedEvent)=>any)'], returns='None'),
    ],
    "onend": [
        FieldCall(field='onend', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onend', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onended": [
        FieldCall(field='onended', demands=['AudioScheduledSourceNode'], returns='((this:AudioScheduledSourceNode,ev:Event)=>any)'),
        FieldCall(field='onended', demands=['AudioScheduledSourceNode', '((this:AudioScheduledSourceNode,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onended', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onended', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onended', demands=['MediaStreamTrack'], returns='((this:MediaStreamTrack,ev:Event)=>any)'),
        FieldCall(field='onended', demands=['MediaStreamTrack', '((this:MediaStreamTrack,ev:Event)=>any)'], returns='None'),
    ],
    "onenter": [
        FieldCall(field='onenter', demands=['TextTrackCue'], returns='((this:TextTrackCue,ev:Event)=>any)'),
        FieldCall(field='onenter', demands=['TextTrackCue', '((this:TextTrackCue,ev:Event)=>any)'], returns='None'),
    ],
    "onenterpictureinpicture": [
        FieldCall(field='onenterpictureinpicture', demands=['HTMLVideoElement'], returns='((this:HTMLVideoElement,ev:PictureInPictureEvent)=>any)'),
        FieldCall(field='onenterpictureinpicture', demands=['HTMLVideoElement', '((this:HTMLVideoElement,ev:PictureInPictureEvent)=>any)'], returns='None'),
    ],
    "onerror": [
        FieldCall(field='onerror', demands=['AbstractWorker'], returns='((this:AbstractWorker,ev:ErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['AbstractWorker', '((this:AbstractWorker,ev:ErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['EventSource'], returns='((this:EventSource,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['EventSource', '((this:EventSource,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onerror', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onerror', demands=['GlobalEventHandlers'], returns='OnErrorEventHandler'),
        FieldCall(field='onerror', demands=['GlobalEventHandlers', 'OnErrorEventHandler'], returns='None'),
        FieldCall(field='onerror', demands=['IDBDatabase'], returns='((this:IDBDatabase,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['IDBDatabase', '((this:IDBDatabase,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['IDBRequest'], returns='((this:IDBRequest<T>,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['IDBRequest', '((this:IDBRequest'], returns='None'),
        FieldCall(field='onerror', demands=['IDBTransaction'], returns='((this:IDBTransaction,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['IDBTransaction', '((this:IDBTransaction,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:ErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['MediaRecorder', '((this:MediaRecorder,ev:ErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['Notification'], returns='((this:Notification,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['Notification', '((this:Notification,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:RTCErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:RTCErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['RTCDtlsTransport'], returns='((this:RTCDtlsTransport,ev:RTCErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['RTCDtlsTransport', '((this:RTCDtlsTransport,ev:RTCErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['SourceBuffer'], returns='((this:SourceBuffer,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['SourceBuffer', '((this:SourceBuffer,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['WebSocket'], returns='((this:WebSocket,ev:Event)=>any)'),
        FieldCall(field='onerror', demands=['WebSocket', '((this:WebSocket,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onerror', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['Worker'], returns='(this:Worker,e:ErrorEvent)=>any'),
        FieldCall(field='onerror', demands=['Worker', '(this:Worker,e:ErrorEvent)=>any'], returns='None'),
        FieldCall(field='onerror', demands=['Window'], returns='((this:Window,ev:ErrorEvent)=>any)'),
        FieldCall(field='onerror', demands=['Window', '((this:Window,ev:ErrorEvent)=>any)'], returns='None'),
        FieldCall(field='onerror', demands=['WebSocket'], returns='((this:WebSocket,ev:Event'),
        FieldCall(field='onerror', demands=['WebSocket', '((this:WebSocket,ev:Event'], returns='None'),
    ],
    "onexit": [
        FieldCall(field='onexit', demands=['TextTrackCue'], returns='((this:TextTrackCue,ev:Event)=>any)'),
        FieldCall(field='onexit', demands=['TextTrackCue', '((this:TextTrackCue,ev:Event)=>any)'], returns='None'),
    ],
    "onfinish": [
        FieldCall(field='onfinish', demands=['Animation'], returns='((this:Animation,ev:AnimationPlaybackEvent)=>any)'),
        FieldCall(field='onfinish', demands=['Animation', '((this:Animation,ev:AnimationPlaybackEvent)=>any)'], returns='None'),
    ],
    "onfocus": [
        FieldCall(field='onfocus', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:FocusEvent)=>any)'),
        FieldCall(field='onfocus', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:FocusEvent)=>any)'], returns='None'),
    ],
    "onformdata": [
        FieldCall(field='onformdata', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:FormDataEvent)=>any)'),
        FieldCall(field='onformdata', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:FormDataEvent)=>any)'], returns='None'),
    ],
    "onfullscreenchange": [
        FieldCall(field='onfullscreenchange', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onfullscreenchange', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onfullscreenchange', demands=['Element'], returns='((this:Element,ev:Event)=>any)'),
        FieldCall(field='onfullscreenchange', demands=['Element', '((this:Element,ev:Event)=>any)'], returns='None'),
    ],
    "onfullscreenerror": [
        FieldCall(field='onfullscreenerror', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onfullscreenerror', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onfullscreenerror', demands=['Element'], returns='((this:Element,ev:Event)=>any)'),
        FieldCall(field='onfullscreenerror', demands=['Element', '((this:Element,ev:Event)=>any)'], returns='None'),
    ],
    "ongamepadconnected": [
        FieldCall(field='ongamepadconnected', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:GamepadEvent)=>any)'),
        FieldCall(field='ongamepadconnected', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:GamepadEvent)=>any)'], returns='None'),
    ],
    "ongamepaddisconnected": [
        FieldCall(field='ongamepaddisconnected', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:GamepadEvent)=>any)'),
        FieldCall(field='ongamepaddisconnected', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:GamepadEvent)=>any)'], returns='None'),
    ],
    "ongatheringstatechange": [
        FieldCall(field='ongatheringstatechange', demands=['RTCIceTransport'], returns='((this:RTCIceTransport,ev:Event)=>any)'),
        FieldCall(field='ongatheringstatechange', demands=['RTCIceTransport', '((this:RTCIceTransport,ev:Event)=>any)'], returns='None'),
    ],
    "ongotpointercapture": [
        FieldCall(field='ongotpointercapture', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='ongotpointercapture', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onhashchange": [
        FieldCall(field='onhashchange', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:HashChangeEvent)=>any)'),
        FieldCall(field='onhashchange', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:HashChangeEvent)=>any)'], returns='None'),
    ],
    "onicecandidate": [
        FieldCall(field='onicecandidate', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:RTCPeerConnectionIceEvent)=>any)'),
        FieldCall(field='onicecandidate', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:RTCPeerConnectionIceEvent)=>any)'], returns='None'),
    ],
    "onicecandidateerror": [
        FieldCall(field='onicecandidateerror', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:RTCPeerConnectionIceErrorEvent)=>any)'),
        FieldCall(field='onicecandidateerror', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:RTCPeerConnectionIceErrorEvent)=>any)'], returns='None'),
    ],
    "oniceconnectionstatechange": [
        FieldCall(field='oniceconnectionstatechange', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:Event)=>any)'),
        FieldCall(field='oniceconnectionstatechange', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:Event)=>any)'], returns='None'),
    ],
    "onicegatheringstatechange": [
        FieldCall(field='onicegatheringstatechange', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:Event)=>any)'),
        FieldCall(field='onicegatheringstatechange', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:Event)=>any)'], returns='None'),
    ],
    "oninput": [
        FieldCall(field='oninput', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oninput', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "oninvalid": [
        FieldCall(field='oninvalid', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='oninvalid', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onkeydown": [
        FieldCall(field='onkeydown', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'),
        FieldCall(field='onkeydown', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'], returns='None'),
    ],
    "onkeypress": [
        FieldCall(field='onkeypress', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'),
        FieldCall(field='onkeypress', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'], returns='None'),
    ],
    "onkeystatuseschange": [
        FieldCall(field='onkeystatuseschange', demands=['MediaKeySession'], returns='((this:MediaKeySession,ev:Event)=>any)'),
        FieldCall(field='onkeystatuseschange', demands=['MediaKeySession', '((this:MediaKeySession,ev:Event)=>any)'], returns='None'),
    ],
    "onkeyup": [
        FieldCall(field='onkeyup', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'),
        FieldCall(field='onkeyup', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:KeyboardEvent)=>any)'], returns='None'),
    ],
    "onlanguagechange": [
        FieldCall(field='onlanguagechange', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onlanguagechange', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onleavepictureinpicture": [
        FieldCall(field='onleavepictureinpicture', demands=['HTMLVideoElement'], returns='((this:HTMLVideoElement,ev:PictureInPictureEvent)=>any)'),
        FieldCall(field='onleavepictureinpicture', demands=['HTMLVideoElement', '((this:HTMLVideoElement,ev:PictureInPictureEvent)=>any)'], returns='None'),
    ],
    "online": [
        FieldCall(field='online', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='online', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "onload": [
        FieldCall(field='onload', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onload', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onload', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onload', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onload', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onload', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
        FieldCall(field='onload', demands=['Window'], returns='((this:Window,ev:Event)=>any)'),
        FieldCall(field='onload', demands=['Window', '((this:Window,ev:Event)=>any)'], returns='None'),
    ],
    "onloadeddata": [
        FieldCall(field='onloadeddata', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onloadeddata', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onloadedmetadata": [
        FieldCall(field='onloadedmetadata', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onloadedmetadata', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onloadend": [
        FieldCall(field='onloadend', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onloadend', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onloadend', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onloadend', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
    ],
    "onloading": [
        FieldCall(field='onloading', demands=['FontFaceSet'], returns='((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'),
        FieldCall(field='onloading', demands=['FontFaceSet', '((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'], returns='None'),
    ],
    "onloadingdone": [
        FieldCall(field='onloadingdone', demands=['FontFaceSet'], returns='((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'),
        FieldCall(field='onloadingdone', demands=['FontFaceSet', '((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'], returns='None'),
    ],
    "onloadingerror": [
        FieldCall(field='onloadingerror', demands=['FontFaceSet'], returns='((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'),
        FieldCall(field='onloadingerror', demands=['FontFaceSet', '((this:FontFaceSet,ev:FontFaceSetLoadEvent)=>any)'], returns='None'),
    ],
    "onloadstart": [
        FieldCall(field='onloadstart', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onloadstart', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onloadstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onloadstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onloadstart', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onloadstart', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
        FieldCall(field='onloadstart', demands=['FileReader'], returns=''),
        FieldCall(field='onloadstart', demands=['FileReader', ''], returns='None'),
    ],
    "onlostpointercapture": [
        FieldCall(field='onlostpointercapture', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onlostpointercapture', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onmark": [
        FieldCall(field='onmark', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onmark', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onmessage": [
        FieldCall(field='onmessage', demands=['BroadcastChannel'], returns='((this:BroadcastChannel,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['BroadcastChannel', '((this:BroadcastChannel,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['EventSource'], returns='((this:EventSource,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['EventSource', '((this:EventSource,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['MediaKeySession'], returns='((this:MediaKeySession,ev:MediaKeyMessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['MediaKeySession', '((this:MediaKeySession,ev:MediaKeyMessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['MessageEventTarget'], returns='((this:T,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['MessageEventTarget', '((this:T,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['ServiceWorkerContainer'], returns='((this:ServiceWorkerContainer,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['ServiceWorkerContainer', '((this:ServiceWorkerContainer,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['WebSocket'], returns='((this:WebSocket,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['WebSocket', '((this:WebSocket,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessage', demands=['Worker'], returns='(this:Worker,e:MessageEvent)=>any'),
        FieldCall(field='onmessage', demands=['Worker', '(this:Worker,e:MessageEvent)=>any'], returns='None'),
        FieldCall(field='onmessage', demands=['MessagePort'], returns='((this:MessagePort,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessage', demands=['MessagePort', '((this:MessagePort,ev:MessageEvent)=>any)'], returns='None'),
    ],
    "onmessageerror": [
        FieldCall(field='onmessageerror', demands=['BroadcastChannel'], returns='((this:BroadcastChannel,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessageerror', demands=['BroadcastChannel', '((this:BroadcastChannel,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessageerror', demands=['MessageEventTarget'], returns='((this:T,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessageerror', demands=['MessageEventTarget', '((this:T,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessageerror', demands=['ServiceWorkerContainer'], returns='((this:ServiceWorkerContainer,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessageerror', demands=['ServiceWorkerContainer', '((this:ServiceWorkerContainer,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessageerror', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessageerror', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:MessageEvent)=>any)'], returns='None'),
        FieldCall(field='onmessageerror', demands=['Worker'], returns='(this:Worker,e:MessageEvent)=>any'),
        FieldCall(field='onmessageerror', demands=['Worker', '(this:Worker,e:MessageEvent)=>any'], returns='None'),
        FieldCall(field='onmessageerror', demands=['MessagePort'], returns='((this:MessagePort,ev:MessageEvent)=>any)'),
        FieldCall(field='onmessageerror', demands=['MessagePort', '((this:MessagePort,ev:MessageEvent)=>any)'], returns='None'),
    ],
    "onmidimessage": [
        FieldCall(field='onmidimessage', demands=['MIDIInput'], returns='((this:MIDIInput,ev:MIDIMessageEvent)=>any)'),
        FieldCall(field='onmidimessage', demands=['MIDIInput', '((this:MIDIInput,ev:MIDIMessageEvent)=>any)'], returns='None'),
    ],
    "onmousedown": [
        FieldCall(field='onmousedown', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmousedown', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmouseenter": [
        FieldCall(field='onmouseenter', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmouseenter', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmouseleave": [
        FieldCall(field='onmouseleave', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmouseleave', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmousemove": [
        FieldCall(field='onmousemove', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmousemove', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmouseout": [
        FieldCall(field='onmouseout', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmouseout', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmouseover": [
        FieldCall(field='onmouseover', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmouseover', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmouseup": [
        FieldCall(field='onmouseup', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:MouseEvent)=>any)'),
        FieldCall(field='onmouseup', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:MouseEvent)=>any)'], returns='None'),
    ],
    "onmute": [
        FieldCall(field='onmute', demands=['MediaStreamTrack'], returns='((this:MediaStreamTrack,ev:Event)=>any)'),
        FieldCall(field='onmute', demands=['MediaStreamTrack', '((this:MediaStreamTrack,ev:Event)=>any)'], returns='None'),
    ],
    "onnegotiationneeded": [
        FieldCall(field='onnegotiationneeded', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:Event)=>any)'),
        FieldCall(field='onnegotiationneeded', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:Event)=>any)'], returns='None'),
    ],
    "onoffline": [
        FieldCall(field='onoffline', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onoffline', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "ononline": [
        FieldCall(field='ononline', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='ononline', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onopen": [
        FieldCall(field='onopen', demands=['EventSource'], returns='((this:EventSource,ev:Event)=>any)'),
        FieldCall(field='onopen', demands=['EventSource', '((this:EventSource,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onopen', demands=['RTCDataChannel'], returns='((this:RTCDataChannel,ev:Event)=>any)'),
        FieldCall(field='onopen', demands=['RTCDataChannel', '((this:RTCDataChannel,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onopen', demands=['WebSocket'], returns='((this:WebSocket,ev:Event)=>any)'),
        FieldCall(field='onopen', demands=['WebSocket', '((this:WebSocket,ev:Event)=>any)'], returns='None'),
    ],
    "onorientationchange": [
        FieldCall(field='onorientationchange', demands=['Window'], returns='((this:Window,ev:Event)=>any)'),
        FieldCall(field='onorientationchange', demands=['Window', '((this:Window,ev:Event)=>any)'], returns='None'),
    ],
    "onpagehide": [
        FieldCall(field='onpagehide', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)'),
        FieldCall(field='onpagehide', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)'], returns='None'),
    ],
    "onpagereveal": [
        FieldCall(field='onpagereveal', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PageRevealEvent)=>any)'),
        FieldCall(field='onpagereveal', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PageRevealEvent)=>any)'], returns='None'),
        FieldCall(field='onpagereveal', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onpagereveal', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onpageshow": [
        FieldCall(field='onpageshow', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)'),
        FieldCall(field='onpageshow', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PageTransitionEvent)=>any)'], returns='None'),
    ],
    "onpageswap": [
        FieldCall(field='onpageswap', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PageSwapEvent)=>any)'),
        FieldCall(field='onpageswap', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PageSwapEvent)=>any)'], returns='None'),
        FieldCall(field='onpageswap', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onpageswap', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onpaste": [
        FieldCall(field='onpaste', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'),
        FieldCall(field='onpaste', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ClipboardEvent)=>any)'], returns='None'),
    ],
    "onpause": [
        FieldCall(field='onpause', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onpause', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onpause', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:Event)=>any)'),
        FieldCall(field='onpause', demands=['MediaRecorder', '((this:MediaRecorder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onpause', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onpause', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onpayerdetailchange": [
        FieldCall(field='onpayerdetailchange', demands=['PaymentResponse'], returns='((this:PaymentResponse,ev:PaymentRequestUpdateEvent)=>any)'),
        FieldCall(field='onpayerdetailchange', demands=['PaymentResponse', '((this:PaymentResponse,ev:PaymentRequestUpdateEvent)=>any)'], returns='None'),
    ],
    "onpaymentmethodchange": [
        FieldCall(field='onpaymentmethodchange', demands=['PaymentRequest'], returns='((this:PaymentRequest,ev:PaymentMethodChangeEvent)=>any)'),
        FieldCall(field='onpaymentmethodchange', demands=['PaymentRequest', '((this:PaymentRequest,ev:PaymentMethodChangeEvent)=>any)'], returns='None'),
    ],
    "onplay": [
        FieldCall(field='onplay', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onplay', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onplaying": [
        FieldCall(field='onplaying', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onplaying', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onpointercancel": [
        FieldCall(field='onpointercancel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointercancel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerdown": [
        FieldCall(field='onpointerdown', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerdown', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerenter": [
        FieldCall(field='onpointerenter', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerenter', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerleave": [
        FieldCall(field='onpointerleave', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerleave', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerlockchange": [
        FieldCall(field='onpointerlockchange', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onpointerlockchange', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
    ],
    "onpointerlockerror": [
        FieldCall(field='onpointerlockerror', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onpointerlockerror', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
    ],
    "onpointermove": [
        FieldCall(field='onpointermove', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointermove', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerout": [
        FieldCall(field='onpointerout', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerout', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerover": [
        FieldCall(field='onpointerover', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerover', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpointerrawupdate": [
        FieldCall(field='onpointerrawupdate', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onpointerrawupdate', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onpointerup": [
        FieldCall(field='onpointerup', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:PointerEvent)=>any)'),
        FieldCall(field='onpointerup', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:PointerEvent)=>any)'], returns='None'),
    ],
    "onpopstate": [
        FieldCall(field='onpopstate', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PopStateEvent)=>any)'),
        FieldCall(field='onpopstate', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PopStateEvent)=>any)'], returns='None'),
    ],
    "onprocessorerror": [
        FieldCall(field='onprocessorerror', demands=['AudioWorkletNode'], returns='((this:AudioWorkletNode,ev:ErrorEvent)=>any)'),
        FieldCall(field='onprocessorerror', demands=['AudioWorkletNode', '((this:AudioWorkletNode,ev:ErrorEvent)=>any)'], returns='None'),
    ],
    "onprogress": [
        FieldCall(field='onprogress', demands=['FileReader'], returns='((this:FileReader,ev:ProgressEvent<FileReader>)=>any)'),
        FieldCall(field='onprogress', demands=['FileReader', '((this:FileReader,ev:ProgressEvent'], returns='None'),
        FieldCall(field='onprogress', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ProgressEvent)=>any)'),
        FieldCall(field='onprogress', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ProgressEvent)=>any)'], returns='None'),
        FieldCall(field='onprogress', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='onprogress', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
    ],
    "onratechange": [
        FieldCall(field='onratechange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onratechange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onreadystatechange": [
        FieldCall(field='onreadystatechange', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onreadystatechange', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onreadystatechange', demands=['XMLHttpRequest'], returns='((this:XMLHttpRequest,ev:Event)=>any)'),
        FieldCall(field='onreadystatechange', demands=['XMLHttpRequest', '((this:XMLHttpRequest,ev:Event)=>any)'], returns='None'),
    ],
    "onrejectionhandled": [
        FieldCall(field='onrejectionhandled', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)'),
        FieldCall(field='onrejectionhandled', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)'], returns='None'),
        FieldCall(field='onrejectionhandled', demands=['Window'], returns=''),
        FieldCall(field='onrejectionhandled', demands=['Window', ''], returns='None'),
    ],
    "onrelease": [
        FieldCall(field='onrelease', demands=['WakeLockSentinel'], returns='((this:WakeLockSentinel,ev:Event)=>any)'),
        FieldCall(field='onrelease', demands=['WakeLockSentinel', '((this:WakeLockSentinel,ev:Event)=>any)'], returns='None'),
    ],
    "onremove": [
        FieldCall(field='onremove', demands=['Animation'], returns='((this:Animation,ev:AnimationPlaybackEvent)=>any)'),
        FieldCall(field='onremove', demands=['Animation', '((this:Animation,ev:AnimationPlaybackEvent)=>any)'], returns='None'),
    ],
    "onremovesourcebuffer": [
        FieldCall(field='onremovesourcebuffer', demands=['SourceBufferList'], returns='((this:SourceBufferList,ev:Event)=>any)'),
        FieldCall(field='onremovesourcebuffer', demands=['SourceBufferList', '((this:SourceBufferList,ev:Event)=>any)'], returns='None'),
    ],
    "onremovetrack": [
        FieldCall(field='onremovetrack', demands=['MediaStream'], returns='((this:MediaStream,ev:MediaStreamTrackEvent)=>any)'),
        FieldCall(field='onremovetrack', demands=['MediaStream', '((this:MediaStream,ev:MediaStreamTrackEvent)=>any)'], returns='None'),
        FieldCall(field='onremovetrack', demands=['TextTrackList'], returns='((this:TextTrackList,ev:TrackEvent)=>any)'),
        FieldCall(field='onremovetrack', demands=['TextTrackList', '((this:TextTrackList,ev:TrackEvent)=>any)'], returns='None'),
    ],
    "onreset": [
        FieldCall(field='onreset', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onreset', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onresize": [
        FieldCall(field='onresize', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:UIEvent)=>any)'),
        FieldCall(field='onresize', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:UIEvent)=>any)'], returns='None'),
        FieldCall(field='onresize', demands=['PictureInPictureWindow'], returns='((this:PictureInPictureWindow,ev:Event)=>any)'),
        FieldCall(field='onresize', demands=['PictureInPictureWindow', '((this:PictureInPictureWindow,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onresize', demands=['VisualViewport'], returns='((this:VisualViewport,ev:Event)=>any)'),
        FieldCall(field='onresize', demands=['VisualViewport', '((this:VisualViewport,ev:Event)=>any)'], returns='None'),
    ],
    "onresourcetimingbufferfull": [
        FieldCall(field='onresourcetimingbufferfull', demands=['Performance'], returns='((this:Performance,ev:Event)=>any)'),
        FieldCall(field='onresourcetimingbufferfull', demands=['Performance', '((this:Performance,ev:Event)=>any)'], returns='None'),
    ],
    "onresume": [
        FieldCall(field='onresume', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:Event)=>any)'),
        FieldCall(field='onresume', demands=['MediaRecorder', '((this:MediaRecorder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onresume', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onresume', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onscroll": [
        FieldCall(field='onscroll', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onscroll', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onscroll', demands=['VisualViewport'], returns='((this:VisualViewport,ev:Event)=>any)'),
        FieldCall(field='onscroll', demands=['VisualViewport', '((this:VisualViewport,ev:Event)=>any)'], returns='None'),
    ],
    "onscrollend": [
        FieldCall(field='onscrollend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onscrollend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onsecuritypolicyviolation": [
        FieldCall(field='onsecuritypolicyviolation', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:SecurityPolicyViolationEvent)=>any)'),
        FieldCall(field='onsecuritypolicyviolation', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:SecurityPolicyViolationEvent)=>any)'], returns='None'),
    ],
    "onseeked": [
        FieldCall(field='onseeked', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onseeked', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onseeking": [
        FieldCall(field='onseeking', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onseeking', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onselect": [
        FieldCall(field='onselect', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onselect', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onselectedcandidatepairchange": [
        FieldCall(field='onselectedcandidatepairchange', demands=['RTCIceTransport'], returns='((this:RTCIceTransport,ev:Event)=>any)'),
        FieldCall(field='onselectedcandidatepairchange', demands=['RTCIceTransport', '((this:RTCIceTransport,ev:Event)=>any)'], returns='None'),
    ],
    "onselectionchange": [
        FieldCall(field='onselectionchange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onselectionchange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onselectstart": [
        FieldCall(field='onselectstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onselectstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onshippingaddresschange": [
        FieldCall(field='onshippingaddresschange', demands=['PaymentRequest'], returns='((this:PaymentRequest,ev:PaymentRequestUpdateEvent)=>any)'),
        FieldCall(field='onshippingaddresschange', demands=['PaymentRequest', '((this:PaymentRequest,ev:PaymentRequestUpdateEvent)=>any)'], returns='None'),
    ],
    "onshippingoptionchange": [
        FieldCall(field='onshippingoptionchange', demands=['PaymentRequest'], returns='((this:PaymentRequest,ev:PaymentRequestUpdateEvent)=>any)'),
        FieldCall(field='onshippingoptionchange', demands=['PaymentRequest', '((this:PaymentRequest,ev:PaymentRequestUpdateEvent)=>any)'], returns='None'),
    ],
    "onshow": [
        FieldCall(field='onshow', demands=['Notification'], returns='((this:Notification,ev:Event)=>any)'),
        FieldCall(field='onshow', demands=['Notification', '((this:Notification,ev:Event)=>any)'], returns='None'),
    ],
    "onsignalingstatechange": [
        FieldCall(field='onsignalingstatechange', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:Event)=>any)'),
        FieldCall(field='onsignalingstatechange', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:Event)=>any)'], returns='None'),
    ],
    "onslotchange": [
        FieldCall(field='onslotchange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onslotchange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onslotchange', demands=['ShadowRoot'], returns='((this:ShadowRoot,ev:Event)=>any)'),
        FieldCall(field='onslotchange', demands=['ShadowRoot', '((this:ShadowRoot,ev:Event)=>any)'], returns='None'),
    ],
    "onsourceclose": [
        FieldCall(field='onsourceclose', demands=['MediaSource'], returns='((this:MediaSource,ev:Event)=>any)'),
        FieldCall(field='onsourceclose', demands=['MediaSource', '((this:MediaSource,ev:Event)=>any)'], returns='None'),
    ],
    "onsourceended": [
        FieldCall(field='onsourceended', demands=['MediaSource'], returns='((this:MediaSource,ev:Event)=>any)'),
        FieldCall(field='onsourceended', demands=['MediaSource', '((this:MediaSource,ev:Event)=>any)'], returns='None'),
    ],
    "onsourceopen": [
        FieldCall(field='onsourceopen', demands=['MediaSource'], returns='((this:MediaSource,ev:Event)=>any)'),
        FieldCall(field='onsourceopen', demands=['MediaSource', '((this:MediaSource,ev:Event)=>any)'], returns='None'),
    ],
    "onstalled": [
        FieldCall(field='onstalled', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onstalled', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onstart": [
        FieldCall(field='onstart', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:Event)=>any)'),
        FieldCall(field='onstart', demands=['MediaRecorder', '((this:MediaRecorder,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onstart', demands=['SpeechSynthesisUtterance'], returns='((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'),
        FieldCall(field='onstart', demands=['SpeechSynthesisUtterance', '((this:SpeechSynthesisUtterance,ev:SpeechSynthesisEvent)=>any)'], returns='None'),
    ],
    "onstatechange": [
        FieldCall(field='onstatechange', demands=['BaseAudioContext'], returns='((this:BaseAudioContext,ev:Event)=>any)'),
        FieldCall(field='onstatechange', demands=['BaseAudioContext', '((this:BaseAudioContext,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['MIDIAccess'], returns='((this:MIDIAccess,ev:MIDIConnectionEvent)=>any)'),
        FieldCall(field='onstatechange', demands=['MIDIAccess', '((this:MIDIAccess,ev:MIDIConnectionEvent)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['MIDIPort'], returns='((this:MIDIPort,ev:MIDIConnectionEvent)=>any)'),
        FieldCall(field='onstatechange', demands=['MIDIPort', '((this:MIDIPort,ev:MIDIConnectionEvent)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['RTCDtlsTransport'], returns='((this:RTCDtlsTransport,ev:Event)=>any)'),
        FieldCall(field='onstatechange', demands=['RTCDtlsTransport', '((this:RTCDtlsTransport,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['RTCIceTransport'], returns='((this:RTCIceTransport,ev:Event)=>any)'),
        FieldCall(field='onstatechange', demands=['RTCIceTransport', '((this:RTCIceTransport,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['RTCSctpTransport'], returns='((this:RTCSctpTransport,ev:Event)=>any)'),
        FieldCall(field='onstatechange', demands=['RTCSctpTransport', '((this:RTCSctpTransport,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onstatechange', demands=['ServiceWorker'], returns='((this:ServiceWorker,ev:Event)=>any)'),
        FieldCall(field='onstatechange', demands=['ServiceWorker', '((this:ServiceWorker,ev:Event)=>any)'], returns='None'),
    ],
    "onstop": [
        FieldCall(field='onstop', demands=['MediaRecorder'], returns='((this:MediaRecorder,ev:Event)=>any)'),
        FieldCall(field='onstop', demands=['MediaRecorder', '((this:MediaRecorder,ev:Event)=>any)'], returns='None'),
    ],
    "onstorage": [
        FieldCall(field='onstorage', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:StorageEvent)=>any)'),
        FieldCall(field='onstorage', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:StorageEvent)=>any)'], returns='None'),
    ],
    "onsubmit": [
        FieldCall(field='onsubmit', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:SubmitEvent)=>any)'),
        FieldCall(field='onsubmit', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:SubmitEvent)=>any)'], returns='None'),
    ],
    "onsuccess": [
        FieldCall(field='onsuccess', demands=['IDBRequest'], returns='((this:IDBRequest<T>,ev:Event)=>any)'),
        FieldCall(field='onsuccess', demands=['IDBRequest', '((this:IDBRequest'], returns='None'),
    ],
    "onsuspend": [
        FieldCall(field='onsuspend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onsuspend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "ontimeout": [
        FieldCall(field='ontimeout', demands=['XMLHttpRequestEventTarget'], returns='((this:XMLHttpRequest,ev:ProgressEvent)=>any)'),
        FieldCall(field='ontimeout', demands=['XMLHttpRequestEventTarget', '((this:XMLHttpRequest,ev:ProgressEvent)=>any)'], returns='None'),
    ],
    "ontimeupdate": [
        FieldCall(field='ontimeupdate', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='ontimeupdate', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "ontoggle": [
        FieldCall(field='ontoggle', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:ToggleEvent)=>any)'),
        FieldCall(field='ontoggle', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:ToggleEvent)=>any)'], returns='None'),
        FieldCall(field='ontoggle', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='ontoggle', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "ontonechange": [
        FieldCall(field='ontonechange', demands=['RTCDTMFSender'], returns='((this:RTCDTMFSender,ev:RTCDTMFToneChangeEvent)=>any)'),
        FieldCall(field='ontonechange', demands=['RTCDTMFSender', '((this:RTCDTMFSender,ev:RTCDTMFToneChangeEvent)=>any)'], returns='None'),
    ],
    "ontouchcancel": [
        FieldCall(field='ontouchcancel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TouchEvent)=>any)'),
        FieldCall(field='ontouchcancel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TouchEvent)=>any)'], returns='None'),
    ],
    "ontouchend": [
        FieldCall(field='ontouchend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TouchEvent)=>any)'),
        FieldCall(field='ontouchend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TouchEvent)=>any)'], returns='None'),
    ],
    "ontouchmove": [
        FieldCall(field='ontouchmove', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TouchEvent)=>any)'),
        FieldCall(field='ontouchmove', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TouchEvent)=>any)'], returns='None'),
    ],
    "ontouchstart": [
        FieldCall(field='ontouchstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TouchEvent)=>any)'),
        FieldCall(field='ontouchstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TouchEvent)=>any)'], returns='None'),
    ],
    "ontrack": [
        FieldCall(field='ontrack', demands=['RTCPeerConnection'], returns='((this:RTCPeerConnection,ev:RTCTrackEvent)=>any)'),
        FieldCall(field='ontrack', demands=['RTCPeerConnection', '((this:RTCPeerConnection,ev:RTCTrackEvent)=>any)'], returns='None'),
    ],
    "ontransitioncancel": [
        FieldCall(field='ontransitioncancel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'),
        FieldCall(field='ontransitioncancel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'], returns='None'),
    ],
    "ontransitionend": [
        FieldCall(field='ontransitionend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'),
        FieldCall(field='ontransitionend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'], returns='None'),
    ],
    "ontransitionrun": [
        FieldCall(field='ontransitionrun', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'),
        FieldCall(field='ontransitionrun', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'], returns='None'),
    ],
    "ontransitionstart": [
        FieldCall(field='ontransitionstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'),
        FieldCall(field='ontransitionstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:TransitionEvent)=>any)'], returns='None'),
    ],
    "onunhandledrejection": [
        FieldCall(field='onunhandledrejection', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)'),
        FieldCall(field='onunhandledrejection', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:PromiseRejectionEvent)=>any)'], returns='None'),
        FieldCall(field='onunhandledrejection', demands=['Window'], returns=''),
        FieldCall(field='onunhandledrejection', demands=['Window', ''], returns='None'),
    ],
    "onunload": [
        FieldCall(field='onunload', demands=['WindowEventHandlers'], returns='((this:WindowEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onunload', demands=['WindowEventHandlers', '((this:WindowEventHandlers,ev:Event)=>any)'], returns='None'),
        FieldCall(field='onunload', demands=['Window'], returns='((this:Window,ev:Event)=>any)'),
        FieldCall(field='onunload', demands=['Window', '((this:Window,ev:Event)=>any)'], returns='None'),
    ],
    "onunmute": [
        FieldCall(field='onunmute', demands=['MediaStreamTrack'], returns='((this:MediaStreamTrack,ev:Event)=>any)'),
        FieldCall(field='onunmute', demands=['MediaStreamTrack', '((this:MediaStreamTrack,ev:Event)=>any)'], returns='None'),
    ],
    "onupdate": [
        FieldCall(field='onupdate', demands=['SourceBuffer'], returns='((this:SourceBuffer,ev:Event)=>any)'),
        FieldCall(field='onupdate', demands=['SourceBuffer', '((this:SourceBuffer,ev:Event)=>any)'], returns='None'),
    ],
    "onupdateend": [
        FieldCall(field='onupdateend', demands=['SourceBuffer'], returns='((this:SourceBuffer,ev:Event)=>any)'),
        FieldCall(field='onupdateend', demands=['SourceBuffer', '((this:SourceBuffer,ev:Event)=>any)'], returns='None'),
    ],
    "onupdatefound": [
        FieldCall(field='onupdatefound', demands=['ServiceWorkerRegistration'], returns='((this:ServiceWorkerRegistration,ev:Event)=>any)'),
        FieldCall(field='onupdatefound', demands=['ServiceWorkerRegistration', '((this:ServiceWorkerRegistration,ev:Event)=>any)'], returns='None'),
    ],
    "onupdatestart": [
        FieldCall(field='onupdatestart', demands=['SourceBuffer'], returns='((this:SourceBuffer,ev:Event)=>any)'),
        FieldCall(field='onupdatestart', demands=['SourceBuffer', '((this:SourceBuffer,ev:Event)=>any)'], returns='None'),
    ],
    "onupgradeneeded": [
        FieldCall(field='onupgradeneeded', demands=['IDBOpenDBRequest'], returns='((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)'),
        FieldCall(field='onupgradeneeded', demands=['IDBOpenDBRequest', '((this:IDBOpenDBRequest,ev:IDBVersionChangeEvent)=>any)'], returns='None'),
    ],
    "onversionchange": [
        FieldCall(field='onversionchange', demands=['IDBDatabase'], returns='((this:IDBDatabase,ev:IDBVersionChangeEvent)=>any)'),
        FieldCall(field='onversionchange', demands=['IDBDatabase', '((this:IDBDatabase,ev:IDBVersionChangeEvent)=>any)'], returns='None'),
    ],
    "onvisibilitychange": [
        FieldCall(field='onvisibilitychange', demands=['Document'], returns='((this:Document,ev:Event)=>any)'),
        FieldCall(field='onvisibilitychange', demands=['Document', '((this:Document,ev:Event)=>any)'], returns='None'),
    ],
    "onvoiceschanged": [
        FieldCall(field='onvoiceschanged', demands=['SpeechSynthesis'], returns='((this:SpeechSynthesis,ev:Event)=>any)'),
        FieldCall(field='onvoiceschanged', demands=['SpeechSynthesis', '((this:SpeechSynthesis,ev:Event)=>any)'], returns='None'),
    ],
    "onvolumechange": [
        FieldCall(field='onvolumechange', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onvolumechange', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwaiting": [
        FieldCall(field='onwaiting', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onwaiting', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwaitingforkey": [
        FieldCall(field='onwaitingforkey', demands=['HTMLMediaElement'], returns='((this:HTMLMediaElement,ev:Event)=>any)'),
        FieldCall(field='onwaitingforkey', demands=['HTMLMediaElement', '((this:HTMLMediaElement,ev:Event)=>any)'], returns='None'),
    ],
    "onwebkitanimationend": [
        FieldCall(field='onwebkitanimationend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onwebkitanimationend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwebkitanimationiteration": [
        FieldCall(field='onwebkitanimationiteration', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onwebkitanimationiteration', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwebkitanimationstart": [
        FieldCall(field='onwebkitanimationstart', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onwebkitanimationstart', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwebkittransitionend": [
        FieldCall(field='onwebkittransitionend', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:Event)=>any)'),
        FieldCall(field='onwebkittransitionend', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:Event)=>any)'], returns='None'),
    ],
    "onwheel": [
        FieldCall(field='onwheel', demands=['GlobalEventHandlers'], returns='((this:GlobalEventHandlers,ev:WheelEvent)=>any)'),
        FieldCall(field='onwheel', demands=['GlobalEventHandlers', '((this:GlobalEventHandlers,ev:WheelEvent)=>any)'], returns='None'),
    ],
    "opacity": [
        FieldCall(field='opacity', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='opacity', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "opacityProperty": [
        FieldCall(field='opacityProperty', demands=['CheckVisibilityOptions'], returns='bool'),
        FieldCall(field='opacityProperty', demands=['CheckVisibilityOptions', 'bool'], returns='None'),
    ],
    "open": [
        PrototypeCall(constructor='CacheStorage', fn='open', demands=['CacheStorage', 'str'], returns='Cache'),
        PrototypeCall(constructor='Document', fn='open', demands=['Document'], returns='Document'),
        PrototypeCall(constructor='HTMLDocument', fn='open', demands=['HTMLDocument'], returns='Document'),
        PrototypeCall(constructor='XMLDocument', fn='open', demands=['XMLDocument'], returns='Document'),
        PrototypeCall(constructor='Document', fn='open', demands=['Document', 'str'], returns='Document'),
        PrototypeCall(constructor='HTMLDocument', fn='open', demands=['HTMLDocument', 'str'], returns='Document'),
        PrototypeCall(constructor='XMLDocument', fn='open', demands=['XMLDocument', 'str'], returns='Document'),
        PrototypeCall(constructor='Document', fn='open', demands=['Document', 'str', 'str'], returns='Document'),
        PrototypeCall(constructor='HTMLDocument', fn='open', demands=['HTMLDocument', 'str', 'str'], returns='Document'),
        PrototypeCall(constructor='XMLDocument', fn='open', demands=['XMLDocument', 'str', 'str'], returns='Document'),
        PrototypeCall(constructor='Document', fn='open', demands=['Document', 'str', 'str', 'str'], returns='WindowProxy'),
        PrototypeCall(constructor='HTMLDocument', fn='open', demands=['HTMLDocument', 'str', 'str', 'str'], returns='WindowProxy'),
        PrototypeCall(constructor='XMLDocument', fn='open', demands=['XMLDocument', 'str', 'str', 'str'], returns='WindowProxy'),
        FieldCall(field='open', demands=['EventSourceEventMap'], returns='Event'),
        FieldCall(field='open', demands=['EventSourceEventMap', 'Event'], returns='None'),
        FieldCall(field='open', demands=['HTMLDetailsElement'], returns='bool'),
        FieldCall(field='open', demands=['HTMLDetailsElement', 'bool'], returns='None'),
        FieldCall(field='open', demands=['HTMLDialogElement'], returns='bool'),
        FieldCall(field='open', demands=['HTMLDialogElement', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBFactory', fn='open', demands=['IDBFactory', 'str'], returns='IDBOpenDBRequest'),
        PrototypeCall(constructor='IDBFactory', fn='open', demands=['IDBFactory', 'str', 'float'], returns='IDBOpenDBRequest'),
        PrototypeCall(constructor='MIDIPort', fn='open', demands=['MIDIPort'], returns='MIDIPort'),
        PrototypeCall(constructor='MIDIOutput', fn='open', demands=['MIDIOutput'], returns='MIDIPort'),
        PrototypeCall(constructor='MIDIInput', fn='open', demands=['MIDIInput'], returns='MIDIPort'),
        FieldCall(field='open', demands=['RTCDataChannelEventMap'], returns='Event'),
        FieldCall(field='open', demands=['RTCDataChannelEventMap', 'Event'], returns='None'),
        FieldCall(field='open', demands=['WebSocketEventMap'], returns='Event'),
        FieldCall(field='open', demands=['WebSocketEventMap', 'Event'], returns='None'),
        DirectCall(fn='open', receiver=None, demands=[], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str'], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str', 'str'], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str', 'str', 'str'], returns='WindowProxy'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool', 'str'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool', 'str', 'str'], returns='None'),
    ],
    "openCursor": [
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex'], returns='IDBRequest<IDBCursorWithValue'),
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest<IDBCursorWithValue'),
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex', 'IDBValidKey', 'IDBCursorDirection'], returns='IDBRequest<IDBCursorWithValue'),
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore'], returns='IDBRequest<IDBCursorWithValue'),
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest<IDBCursorWithValue'),
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore', 'IDBValidKey', 'IDBCursorDirection'], returns='IDBRequest<IDBCursorWithValue'),
    ],
    "openKeyCursor": [
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex'], returns='IDBRequest<IDBCursor'),
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex', 'IDBValidKey'], returns='IDBRequest<IDBCursor'),
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex', 'IDBValidKey', 'IDBCursorDirection'], returns='IDBRequest<IDBCursor'),
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore'], returns='IDBRequest<IDBCursor'),
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore', 'IDBValidKey'], returns='IDBRequest<IDBCursor'),
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore', 'IDBValidKey', 'IDBCursorDirection'], returns='IDBRequest<IDBCursor'),
    ],
    "opener": [
        FieldCall(field='opener', demands=['Window'], returns='*'),
        FieldCall(field='opener', demands=['Window', '*'], returns='None'),
    ],
    "operator": [
        FieldCall(field='operator', demands=['CSSMathValue'], returns='CSSMathOperator'),
        FieldCall(field='operator', demands=['SVGFECompositeElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='operator', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedEnumeration'),
    ],
    "optgroup": [
        FieldCall(field='optgroup', demands=['HTMLElementTagNameMap'], returns='HTMLOptGroupElement'),
        FieldCall(field='optgroup', demands=['HTMLElementTagNameMap', 'HTMLOptGroupElement'], returns='None'),
    ],
    "optimizeForLatency": [
        FieldCall(field='optimizeForLatency', demands=['VideoDecoderConfig'], returns='bool'),
        FieldCall(field='optimizeForLatency', demands=['VideoDecoderConfig', 'bool'], returns='None'),
    ],
    "optimum": [
        FieldCall(field='optimum', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='optimum', demands=['HTMLMeterElement', 'float'], returns='None'),
    ],
    "option": [
        FieldCall(field='option', demands=['HTMLElementTagNameMap'], returns='HTMLOptionElement'),
        FieldCall(field='option', demands=['HTMLElementTagNameMap', 'HTMLOptionElement'], returns='None'),
    ],
    "options": [
        FieldCall(field='options', demands=['HTMLDataListElement'], returns='HTMLCollectionOf'),
        FieldCall(field='options', demands=['HTMLSelectElement'], returns='HTMLOptionsCollection'),
        FieldCall(field='options', demands=['PushSubscription'], returns='PushSubscriptionOptions'),
    ],
    "opus": [
        FieldCall(field='opus', demands=['AudioEncoderConfig'], returns='OpusEncoderConfig'),
        FieldCall(field='opus', demands=['AudioEncoderConfig', 'OpusEncoderConfig'], returns='None'),
    ],
    "or": [
        PrototypeCall(constructor='Atomics', fn='or', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='or', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "order": [
        FieldCall(field='order', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='order', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "orderX": [
        FieldCall(field='orderX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "orderY": [
        FieldCall(field='orderY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "ordered": [
        FieldCall(field='ordered', demands=['RTCDataChannelInit'], returns='bool'),
        FieldCall(field='ordered', demands=['RTCDataChannelInit', 'bool'], returns='None'),
        FieldCall(field='ordered', demands=['RTCDataChannel'], returns='bool'),
    ],
    "organization": [
        FieldCall(field='organization', demands=['AddressErrors'], returns='str'),
        FieldCall(field='organization', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='organization', demands=['PaymentAddress'], returns='str'),
    ],
    "orientAngle": [
        FieldCall(field='orientAngle', demands=['SVGMarkerElement'], returns='SVGAnimatedAngle'),
    ],
    "orientType": [
        FieldCall(field='orientType', demands=['SVGMarkerElement'], returns='SVGAnimatedEnumeration'),
    ],
    "orientation": [
        FieldCall(field='orientation', demands=['Screen'], returns='ScreenOrientation'),
        FieldCall(field='orientation', demands=['Window'], returns='float'),
    ],
    "orientationX": [
        FieldCall(field='orientationX', demands=['PannerOptions'], returns='float'),
        FieldCall(field='orientationX', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='orientationX', demands=['PannerNode'], returns='AudioParam'),
    ],
    "orientationY": [
        FieldCall(field='orientationY', demands=['PannerOptions'], returns='float'),
        FieldCall(field='orientationY', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='orientationY', demands=['PannerNode'], returns='AudioParam'),
    ],
    "orientationZ": [
        FieldCall(field='orientationZ', demands=['PannerOptions'], returns='float'),
        FieldCall(field='orientationZ', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='orientationZ', demands=['PannerNode'], returns='AudioParam'),
    ],
    "orientationchange": [
        FieldCall(field='orientationchange', demands=['WindowEventMap'], returns='Event'),
        FieldCall(field='orientationchange', demands=['WindowEventMap', 'Event'], returns='None'),
    ],
    "origin": [
        FieldCall(field='origin', demands=['MessageEventInit'], returns='str'),
        FieldCall(field='origin', demands=['MessageEventInit', 'str'], returns='None'),
        FieldCall(field='origin', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='origin', demands=['Location'], returns='str'),
        FieldCall(field='origin', demands=['MessageEvent'], returns='str'),
        FieldCall(field='origin', demands=['URL'], returns='str'),
        FieldCall(field='origin', demands=['WindowOrWorkerGlobalScope'], returns='str'),
    ],
    "originAgentCluster": [
        FieldCall(field='originAgentCluster', demands=['Window'], returns='bool'),
    ],
    "originTime": [
        FieldCall(field='originTime', demands=['DocumentTimelineOptions'], returns='DOMHighResTimeStamp'),
        FieldCall(field='originTime', demands=['DocumentTimelineOptions', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "originalPolicy": [
        FieldCall(field='originalPolicy', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='originalPolicy', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='originalPolicy', demands=['CSPViolationReportBody'], returns='str'),
        FieldCall(field='originalPolicy', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "orphans": [
        FieldCall(field='orphans', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='orphans', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "oth": [
        FieldCall(field='oth', demands=['JsonWebKey'], returns='list'),
        FieldCall(field='oth', demands=['JsonWebKey', 'list'], returns='None'),
    ],
    "outerHTML": [
        FieldCall(field='outerHTML', demands=['Element'], returns='str'),
        FieldCall(field='outerHTML', demands=['Element', 'str'], returns='None'),
    ],
    "outerHeight": [
        FieldCall(field='outerHeight', demands=['Window'], returns='float'),
    ],
    "outerText": [
        FieldCall(field='outerText', demands=['HTMLElement'], returns='str'),
        FieldCall(field='outerText', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "outerWidth": [
        FieldCall(field='outerWidth', demands=['Window'], returns='float'),
    ],
    "outgoingHighWaterMark": [
        FieldCall(field='outgoingHighWaterMark', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='outgoingHighWaterMark', demands=['WebTransportDatagramDuplexStream', 'float'], returns='None'),
    ],
    "outgoingMaxAge": [
        FieldCall(field='outgoingMaxAge', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='outgoingMaxAge', demands=['WebTransportDatagramDuplexStream', 'float'], returns='None'),
    ],
    "outline": [
        FieldCall(field='outline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='outline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "outlineColor": [
        FieldCall(field='outlineColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='outlineColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "outlineOffset": [
        FieldCall(field='outlineOffset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='outlineOffset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "outlineStyle": [
        FieldCall(field='outlineStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='outlineStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "outlineWidth": [
        FieldCall(field='outlineWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='outlineWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "output": [
        FieldCall(field='output', demands=['AudioDecoderInit'], returns='AudioDataOutputCallback'),
        FieldCall(field='output', demands=['AudioDecoderInit', 'AudioDataOutputCallback'], returns='None'),
        FieldCall(field='output', demands=['AudioEncoderInit'], returns='EncodedAudioChunkOutputCallback'),
        FieldCall(field='output', demands=['AudioEncoderInit', 'EncodedAudioChunkOutputCallback'], returns='None'),
        FieldCall(field='output', demands=['VideoDecoderInit'], returns='VideoFrameOutputCallback'),
        FieldCall(field='output', demands=['VideoDecoderInit', 'VideoFrameOutputCallback'], returns='None'),
        FieldCall(field='output', demands=['VideoEncoderInit'], returns='EncodedVideoChunkOutputCallback'),
        FieldCall(field='output', demands=['VideoEncoderInit', 'EncodedVideoChunkOutputCallback'], returns='None'),
        FieldCall(field='output', demands=['HTMLElementTagNameMap'], returns='HTMLOutputElement'),
        FieldCall(field='output', demands=['HTMLElementTagNameMap', 'HTMLOutputElement'], returns='None'),
    ],
    "outputBuffer": [
        FieldCall(field='outputBuffer', demands=['AudioProcessingEventInit'], returns='AudioBuffer'),
        FieldCall(field='outputBuffer', demands=['AudioProcessingEventInit', 'AudioBuffer'], returns='None'),
        FieldCall(field='outputBuffer', demands=['AudioProcessingEvent'], returns='AudioBuffer'),
    ],
    "outputChannelCount": [
        FieldCall(field='outputChannelCount', demands=['AudioWorkletNodeOptions'], returns='list'),
        FieldCall(field='outputChannelCount', demands=['AudioWorkletNodeOptions', 'list'], returns='None'),
    ],
    "outputLatency": [
        FieldCall(field='outputLatency', demands=['AudioContext'], returns='float'),
    ],
    "outputs": [
        FieldCall(field='outputs', demands=['MIDIAccess'], returns='MIDIOutputMap'),
    ],
    "overflow": [
        FieldCall(field='overflow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowAnchor": [
        FieldCall(field='overflowAnchor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowAnchor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowBlock": [
        FieldCall(field='overflowBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowClipMargin": [
        FieldCall(field='overflowClipMargin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowClipMargin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowInline": [
        FieldCall(field='overflowInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowWrap": [
        FieldCall(field='overflowWrap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowWrap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowX": [
        FieldCall(field='overflowX', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowX', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overflowY": [
        FieldCall(field='overflowY', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overflowY', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overrideColors": [
        FieldCall(field='overrideColors', demands=['CSSFontPaletteValuesRule'], returns='str'),
    ],
    "overrideMimeType": [
        PrototypeCall(constructor='XMLHttpRequest', fn='overrideMimeType', demands=['XMLHttpRequest', 'str'], returns='None'),
    ],
    "oversample": [
        FieldCall(field='oversample', demands=['WaveShaperOptions'], returns='OverSampleType'),
        FieldCall(field='oversample', demands=['WaveShaperOptions', 'OverSampleType'], returns='None'),
        FieldCall(field='oversample', demands=['WaveShaperNode'], returns='OverSampleType'),
        FieldCall(field='oversample', demands=['WaveShaperNode', 'OverSampleType'], returns='None'),
    ],
    "overscrollBehavior": [
        FieldCall(field='overscrollBehavior', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overscrollBehavior', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overscrollBehaviorBlock": [
        FieldCall(field='overscrollBehaviorBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overscrollBehaviorBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overscrollBehaviorInline": [
        FieldCall(field='overscrollBehaviorInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overscrollBehaviorInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overscrollBehaviorX": [
        FieldCall(field='overscrollBehaviorX', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overscrollBehaviorX', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "overscrollBehaviorY": [
        FieldCall(field='overscrollBehaviorY', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='overscrollBehaviorY', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "ownKeys": [
        PrototypeCall(constructor='ProxyHandler', fn='ownKeys', demands=['ProxyHandler', 'T'], returns='ArrayLike<string'),
    ],
    "ownerDocument": [
        FieldCall(field='ownerDocument', demands=['Attr'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['CharacterData'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['Document'], returns='None'),
        FieldCall(field='ownerDocument', demands=['DocumentFragment'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['DocumentType'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['Element'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['Node'], returns='Document'),
        FieldCall(field='ownerDocument', demands=['ProcessingInstruction'], returns='Document'),
    ],
    "ownerElement": [
        FieldCall(field='ownerElement', demands=['Attr'], returns='Element'),
    ],
    "ownerNode": [
        FieldCall(field='ownerNode', demands=['StyleSheet'], returns='Element'),
    ],
    "ownerRule": [
        FieldCall(field='ownerRule', demands=['CSSStyleSheet'], returns='CSSRule'),
    ],
    "ownerSVGElement": [
        FieldCall(field='ownerSVGElement', demands=['SVGElement'], returns='SVGSVGElement'),
    ],
    "p": [
        FieldCall(field='p', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='p', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='p', demands=['HTMLElementTagNameMap'], returns='HTMLParagraphElement'),
        FieldCall(field='p', demands=['HTMLElementTagNameMap', 'HTMLParagraphElement'], returns='None'),
    ],
    "p1": [
        FieldCall(field='p1', demands=['DOMQuadInit'], returns='DOMPointInit'),
        FieldCall(field='p1', demands=['DOMQuadInit', 'DOMPointInit'], returns='None'),
        FieldCall(field='p1', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p2": [
        FieldCall(field='p2', demands=['DOMQuadInit'], returns='DOMPointInit'),
        FieldCall(field='p2', demands=['DOMQuadInit', 'DOMPointInit'], returns='None'),
        FieldCall(field='p2', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p3": [
        FieldCall(field='p3', demands=['DOMQuadInit'], returns='DOMPointInit'),
        FieldCall(field='p3', demands=['DOMQuadInit', 'DOMPointInit'], returns='None'),
        FieldCall(field='p3', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p4": [
        FieldCall(field='p4', demands=['DOMQuadInit'], returns='DOMPointInit'),
        FieldCall(field='p4', demands=['DOMQuadInit', 'DOMPointInit'], returns='None'),
        FieldCall(field='p4', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "packetlossperc": [
        FieldCall(field='packetlossperc', demands=['OpusEncoderConfig'], returns='float'),
        FieldCall(field='packetlossperc', demands=['OpusEncoderConfig', 'float'], returns='None'),
    ],
    "packetsDiscarded": [
        FieldCall(field='packetsDiscarded', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='packetsDiscarded', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "packetsDiscardedOnSend": [
        FieldCall(field='packetsDiscardedOnSend', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='packetsDiscardedOnSend', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "packetsLost": [
        FieldCall(field='packetsLost', demands=['RTCReceivedRtpStreamStats'], returns='float'),
        FieldCall(field='packetsLost', demands=['RTCReceivedRtpStreamStats', 'float'], returns='None'),
    ],
    "packetsReceived": [
        FieldCall(field='packetsReceived', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='packetsReceived', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
        FieldCall(field='packetsReceived', demands=['RTCReceivedRtpStreamStats'], returns='float'),
        FieldCall(field='packetsReceived', demands=['RTCReceivedRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='packetsReceived', demands=['RTCTransportStats'], returns='float'),
        FieldCall(field='packetsReceived', demands=['RTCTransportStats', 'float'], returns='None'),
    ],
    "packetsSent": [
        FieldCall(field='packetsSent', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='packetsSent', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
        FieldCall(field='packetsSent', demands=['RTCSentRtpStreamStats'], returns='float'),
        FieldCall(field='packetsSent', demands=['RTCSentRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='packetsSent', demands=['RTCTransportStats'], returns='float'),
        FieldCall(field='packetsSent', demands=['RTCTransportStats', 'float'], returns='None'),
    ],
    "pad": [
        FieldCall(field='pad', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='pad', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "padEnd": [
        PrototypeCall(constructor='String', fn='padEnd', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='padEnd', demands=['str', 'float', 'str'], returns='str'),
    ],
    "padStart": [
        PrototypeCall(constructor='String', fn='padStart', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='padStart', demands=['str', 'float', 'str'], returns='str'),
    ],
    "padding": [
        FieldCall(field='padding', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='padding', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingBlock": [
        FieldCall(field='paddingBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingBlockEnd": [
        FieldCall(field='paddingBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingBlockStart": [
        FieldCall(field='paddingBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingBottom": [
        FieldCall(field='paddingBottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingBottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingInline": [
        FieldCall(field='paddingInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingInlineEnd": [
        FieldCall(field='paddingInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingInlineStart": [
        FieldCall(field='paddingInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingLeft": [
        FieldCall(field='paddingLeft', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingLeft', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingRight": [
        FieldCall(field='paddingRight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingRight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "paddingTop": [
        FieldCall(field='paddingTop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paddingTop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "page": [
        FieldCall(field='page', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='page', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pageBreakAfter": [
        FieldCall(field='pageBreakAfter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='pageBreakAfter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pageBreakBefore": [
        FieldCall(field='pageBreakBefore', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='pageBreakBefore', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pageBreakInside": [
        FieldCall(field='pageBreakInside', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='pageBreakInside', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pageLeft": [
        FieldCall(field='pageLeft', demands=['VisualViewport'], returns='float'),
    ],
    "pageTop": [
        FieldCall(field='pageTop', demands=['VisualViewport'], returns='float'),
    ],
    "pageX": [
        FieldCall(field='pageX', demands=['TouchInit'], returns='float'),
        FieldCall(field='pageX', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='pageX', demands=['MouseEvent'], returns='float'),
        FieldCall(field='pageX', demands=['Touch'], returns='float'),
    ],
    "pageXOffset": [
        FieldCall(field='pageXOffset', demands=['Window'], returns='float'),
    ],
    "pageY": [
        FieldCall(field='pageY', demands=['TouchInit'], returns='float'),
        FieldCall(field='pageY', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='pageY', demands=['MouseEvent'], returns='float'),
        FieldCall(field='pageY', demands=['Touch'], returns='float'),
    ],
    "pageYOffset": [
        FieldCall(field='pageYOffset', demands=['Window'], returns='float'),
    ],
    "pagehide": [
        FieldCall(field='pagehide', demands=['WindowEventHandlersEventMap'], returns='PageTransitionEvent'),
        FieldCall(field='pagehide', demands=['WindowEventHandlersEventMap', 'PageTransitionEvent'], returns='None'),
    ],
    "pagereveal": [
        FieldCall(field='pagereveal', demands=['WindowEventHandlersEventMap'], returns='PageRevealEvent'),
        FieldCall(field='pagereveal', demands=['WindowEventHandlersEventMap', 'PageRevealEvent'], returns='None'),
        FieldCall(field='pagereveal', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='pagereveal', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "pageshow": [
        FieldCall(field='pageshow', demands=['WindowEventHandlersEventMap'], returns='PageTransitionEvent'),
        FieldCall(field='pageshow', demands=['WindowEventHandlersEventMap', 'PageTransitionEvent'], returns='None'),
    ],
    "pageswap": [
        FieldCall(field='pageswap', demands=['WindowEventHandlersEventMap'], returns='PageSwapEvent'),
        FieldCall(field='pageswap', demands=['WindowEventHandlersEventMap', 'PageSwapEvent'], returns='None'),
        FieldCall(field='pageswap', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='pageswap', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "paintOrder": [
        FieldCall(field='paintOrder', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='paintOrder', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pan": [
        FieldCall(field='pan', demands=['StereoPannerOptions'], returns='float'),
        FieldCall(field='pan', demands=['StereoPannerOptions', 'float'], returns='None'),
        FieldCall(field='pan', demands=['StereoPannerNode'], returns='AudioParam'),
    ],
    "panningModel": [
        FieldCall(field='panningModel', demands=['PannerOptions'], returns='PanningModelType'),
        FieldCall(field='panningModel', demands=['PannerOptions', 'PanningModelType'], returns='None'),
        FieldCall(field='panningModel', demands=['PannerNode'], returns='PanningModelType'),
        FieldCall(field='panningModel', demands=['PannerNode', 'PanningModelType'], returns='None'),
    ],
    "param": [
        FieldCall(field='param', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLParamElement'),
        FieldCall(field='param', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLParamElement'], returns='None'),
    ],
    "parameterData": [
        FieldCall(field='parameterData', demands=['AudioWorkletNodeOptions'], returns='Record'),
        FieldCall(field='parameterData', demands=['AudioWorkletNodeOptions', 'Record'], returns='None'),
    ],
    "parameters": [
        FieldCall(field='parameters', demands=['AudioWorkletNode'], returns='AudioParamMap'),
    ],
    "parent": [
        FieldCall(field='parent', demands=['Window'], returns='WindowProxy'),
    ],
    "parentElement": [
        FieldCall(field='parentElement', demands=['Node'], returns='HTMLElement'),
    ],
    "parentNode": [
        FieldCall(field='parentNode', demands=['Node'], returns='ParentNode'),
        PrototypeCall(constructor='TreeWalker', fn='parentNode', demands=['TreeWalker'], returns='Node'),
    ],
    "parentRule": [
        FieldCall(field='parentRule', demands=['CSSRule'], returns='CSSRule'),
        FieldCall(field='parentRule', demands=['CSSStyleDeclaration'], returns='CSSRule'),
    ],
    "parentStyleSheet": [
        FieldCall(field='parentStyleSheet', demands=['CSSRule'], returns='CSSStyleSheet'),
        FieldCall(field='parentStyleSheet', demands=['StyleSheet'], returns='CSSStyleSheet'),
    ],
    "parse": [
        PrototypeCall(constructor='DateConstructor', fn='parse', demands=['DateConstructor', 'str'], returns='float'),
        PrototypeCall(constructor='JSON', fn='parse', demands=['JSON', 'str'], returns='*'),
        PrototypeCall(constructor='JSON', fn='parse', demands=['JSON', 'str', '(this:any,key:string,value:any)=>any'], returns='*'),
    ],
    "parseFloat": [
        PrototypeCall(constructor='NumberConstructor', fn='parseFloat', demands=['NumberConstructor', 'str'], returns='float'),
    ],
    "parseFromString": [
        PrototypeCall(constructor='DOMParser', fn='parseFromString', demands=['DOMParser', 'str', 'DOMParserSupportedType'], returns='Document'),
    ],
    "parseInt": [
        PrototypeCall(constructor='NumberConstructor', fn='parseInt', demands=['NumberConstructor', 'str'], returns='float'),
        PrototypeCall(constructor='NumberConstructor', fn='parseInt', demands=['NumberConstructor', 'str', 'float'], returns='float'),
    ],
    "part": [
        PrototypeCall(constructor='Element', fn='part', demands=['Element'], returns='DOMTokenList'),
        PrototypeCall(constructor='MathMLElement', fn='part', demands=['MathMLElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='SVGElement', fn='part', demands=['SVGElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLElement', fn='part', demands=['HTMLElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='Element', fn='part', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='part', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='part', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='part', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "partitioned": [
        FieldCall(field='partitioned', demands=['CookieInit'], returns='bool'),
        FieldCall(field='partitioned', demands=['CookieInit', 'bool'], returns='None'),
        FieldCall(field='partitioned', demands=['CookieStoreDeleteOptions'], returns='bool'),
        FieldCall(field='partitioned', demands=['CookieStoreDeleteOptions', 'bool'], returns='None'),
    ],
    "passOp": [
        FieldCall(field='passOp', demands=['GPUStencilFaceState'], returns='GPUStencilOperation'),
        FieldCall(field='passOp', demands=['GPUStencilFaceState', 'GPUStencilOperation'], returns='None'),
    ],
    "passive": [
        FieldCall(field='passive', demands=['AddEventListenerOptions'], returns='bool'),
        FieldCall(field='passive', demands=['AddEventListenerOptions', 'bool'], returns='None'),
    ],
    "password": [
        FieldCall(field='password', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='password', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='password', demands=['URL'], returns='str'),
        FieldCall(field='password', demands=['URL', 'str'], returns='None'),
        FieldCall(field='password', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='password', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='password', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='password', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='password', demands=['URLPattern'], returns='str'),
    ],
    "paste": [
        FieldCall(field='paste', demands=['GlobalEventHandlersEventMap'], returns='ClipboardEvent'),
        FieldCall(field='paste', demands=['GlobalEventHandlersEventMap', 'ClipboardEvent'], returns='None'),
    ],
    "path": [
        FieldCall(field='path', demands=['CookieInit'], returns='str'),
        FieldCall(field='path', demands=['CookieInit', 'str'], returns='None'),
        FieldCall(field='path', demands=['CookieStoreDeleteOptions'], returns='str'),
        FieldCall(field='path', demands=['CookieStoreDeleteOptions', 'str'], returns='None'),
        FieldCall(field='path', demands=['SVGElementTagNameMap'], returns='SVGPathElement'),
        FieldCall(field='path', demands=['SVGElementTagNameMap', 'SVGPathElement'], returns='None'),
    ],
    "pathLength": [
        FieldCall(field='pathLength', demands=['SVGGeometryElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='pathLength', demands=['SVGPathElement'], returns='SVGAnimatedNumber'),
    ],
    "pathname": [
        FieldCall(field='pathname', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='pathname', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='pathname', demands=['Location'], returns='str'),
        FieldCall(field='pathname', demands=['Location', 'str'], returns='None'),
        FieldCall(field='pathname', demands=['URL'], returns='str'),
        FieldCall(field='pathname', demands=['URL', 'str'], returns='None'),
        FieldCall(field='pathname', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='pathname', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='pathname', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='pathname', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='pathname', demands=['URLPattern'], returns='str'),
    ],
    "pattern": [
        FieldCall(field='pattern', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='pattern', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='pattern', demands=['SVGElementTagNameMap'], returns='SVGPatternElement'),
        FieldCall(field='pattern', demands=['SVGElementTagNameMap', 'SVGPatternElement'], returns='None'),
    ],
    "patternContentUnits": [
        FieldCall(field='patternContentUnits', demands=['SVGPatternElement'], returns='SVGAnimatedEnumeration'),
    ],
    "patternMismatch": [
        FieldCall(field='patternMismatch', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='patternMismatch', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='patternMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "patternTransform": [
        FieldCall(field='patternTransform', demands=['SVGPatternElement'], returns='SVGAnimatedTransformList'),
    ],
    "patternUnits": [
        FieldCall(field='patternUnits', demands=['SVGPatternElement'], returns='SVGAnimatedEnumeration'),
    ],
    "pause": [
        PrototypeCall(constructor='Animation', fn='pause', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='pause', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='pause', demands=['CSSTransition'], returns='None'),
        FieldCall(field='pause', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='pause', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='pause', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='pause', demands=['HTMLAudioElement'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='pause', demands=['HTMLVideoElement'], returns='None'),
        FieldCall(field='pause', demands=['MediaRecorderEventMap'], returns='Event'),
        FieldCall(field='pause', demands=['MediaRecorderEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='pause', demands=['MediaRecorder'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='pause', demands=['SpeechSynthesis'], returns='None'),
        FieldCall(field='pause', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='pause', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='Atomics', fn='pause', demands=['Atomics'], returns='None'),
        PrototypeCall(constructor='Atomics', fn='pause', demands=['Atomics', 'float'], returns='None'),
    ],
    "pauseAnimations": [
        PrototypeCall(constructor='SVGSVGElement', fn='pauseAnimations', demands=['SVGSVGElement'], returns='None'),
    ],
    "pauseCount": [
        FieldCall(field='pauseCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='pauseCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "pauseOnExit": [
        FieldCall(field='pauseOnExit', demands=['TextTrackCue'], returns='bool'),
        FieldCall(field='pauseOnExit', demands=['TextTrackCue', 'bool'], returns='None'),
    ],
    "pauseTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='pauseTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "paused": [
        FieldCall(field='paused', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='paused', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "payer": [
        FieldCall(field='payer', demands=['PaymentValidationErrors'], returns='PayerErrors'),
        FieldCall(field='payer', demands=['PaymentValidationErrors', 'PayerErrors'], returns='None'),
    ],
    "payerEmail": [
        FieldCall(field='payerEmail', demands=['PaymentResponse'], returns='str'),
    ],
    "payerName": [
        FieldCall(field='payerName', demands=['PaymentResponse'], returns='str'),
    ],
    "payerPhone": [
        FieldCall(field='payerPhone', demands=['PaymentResponse'], returns='str'),
    ],
    "payerdetailchange": [
        FieldCall(field='payerdetailchange', demands=['PaymentResponseEventMap'], returns='PaymentRequestUpdateEvent'),
        FieldCall(field='payerdetailchange', demands=['PaymentResponseEventMap', 'PaymentRequestUpdateEvent'], returns='None'),
    ],
    "payloadType": [
        FieldCall(field='payloadType', demands=['RTCEncodedFrameMetadata'], returns='float'),
        FieldCall(field='payloadType', demands=['RTCEncodedFrameMetadata', 'float'], returns='None'),
        FieldCall(field='payloadType', demands=['RTCRtpCodecParameters'], returns='float'),
        FieldCall(field='payloadType', demands=['RTCRtpCodecParameters', 'float'], returns='None'),
        FieldCall(field='payloadType', demands=['RTCEncodedAudioFrameMetadata'], returns='float'),
        FieldCall(field='payloadType', demands=['RTCEncodedAudioFrameMetadata', 'float'], returns='None'),
        FieldCall(field='payloadType', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='payloadType', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
    ],
    "paymentMethodErrors": [
        FieldCall(field='paymentMethodErrors', demands=['PaymentDetailsUpdate'], returns='*'),
        FieldCall(field='paymentMethodErrors', demands=['PaymentDetailsUpdate', '*'], returns='None'),
    ],
    "paymentmethodchange": [
        FieldCall(field='paymentmethodchange', demands=['PaymentRequestEventMap'], returns='PaymentMethodChangeEvent'),
        FieldCall(field='paymentmethodchange', demands=['PaymentRequestEventMap', 'PaymentMethodChangeEvent'], returns='None'),
    ],
    "pdfViewerEnabled": [
        FieldCall(field='pdfViewerEnabled', demands=['NavigatorPlugins'], returns='bool'),
    ],
    "peerIdentity": [
        FieldCall(field='peerIdentity', demands=['MediaStreamConstraints'], returns='str'),
        FieldCall(field='peerIdentity', demands=['MediaStreamConstraints', 'str'], returns='None'),
    ],
    "pending": [
        FieldCall(field='pending', demands=['LockManagerSnapshot'], returns='list'),
        FieldCall(field='pending', demands=['LockManagerSnapshot', 'list'], returns='None'),
        FieldCall(field='pending', demands=['PaymentItem'], returns='bool'),
        FieldCall(field='pending', demands=['PaymentItem', 'bool'], returns='None'),
        FieldCall(field='pending', demands=['Animation'], returns='bool'),
        FieldCall(field='pending', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "pendingLocalDescription": [
        FieldCall(field='pendingLocalDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "pendingRemoteDescription": [
        FieldCall(field='pendingRemoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "percent": [
        FieldCall(field='percent', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='percent', demands=['CSSNumericType', 'float'], returns='None'),
    ],
    "percentHint": [
        FieldCall(field='percentHint', demands=['CSSNumericType'], returns='CSSNumericBaseType'),
        FieldCall(field='percentHint', demands=['CSSNumericType', 'CSSNumericBaseType'], returns='None'),
    ],
    "performance": [
        FieldCall(field='performance', demands=['WindowOrWorkerGlobalScope'], returns='Performance'),
    ],
    "performanceTime": [
        FieldCall(field='performanceTime', demands=['AudioTimestamp'], returns='DOMHighResTimeStamp'),
        FieldCall(field='performanceTime', demands=['AudioTimestamp', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "periodicWave": [
        FieldCall(field='periodicWave', demands=['OscillatorOptions'], returns='PeriodicWave'),
        FieldCall(field='periodicWave', demands=['OscillatorOptions', 'PeriodicWave'], returns='None'),
    ],
    "permissionState": [
        PrototypeCall(constructor='PushManager', fn='permissionState', demands=['PushManager'], returns='PermissionState'),
        PrototypeCall(constructor='PushManager', fn='permissionState', demands=['PushManager', 'PushSubscriptionOptionsInit'], returns='PermissionState'),
    ],
    "permissions": [
        FieldCall(field='permissions', demands=['Navigator'], returns='Permissions'),
    ],
    "persist": [
        PrototypeCall(constructor='Animation', fn='persist', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='persist', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='persist', demands=['CSSTransition'], returns='None'),
        PrototypeCall(constructor='StorageManager', fn='persist', demands=['StorageManager'], returns='bool'),
    ],
    "persisted": [
        FieldCall(field='persisted', demands=['PageTransitionEventInit'], returns='bool'),
        FieldCall(field='persisted', demands=['PageTransitionEventInit', 'bool'], returns='None'),
        FieldCall(field='persisted', demands=['PageTransitionEvent'], returns='bool'),
        PrototypeCall(constructor='StorageManager', fn='persisted', demands=['StorageManager'], returns='bool'),
    ],
    "persistentState": [
        FieldCall(field='persistentState', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='MediaKeysRequirement'),
        FieldCall(field='persistentState', demands=['MediaCapabilitiesKeySystemConfiguration', 'MediaKeysRequirement'], returns='None'),
        FieldCall(field='persistentState', demands=['MediaKeySystemConfiguration'], returns='MediaKeysRequirement'),
        FieldCall(field='persistentState', demands=['MediaKeySystemConfiguration', 'MediaKeysRequirement'], returns='None'),
    ],
    "personalbar": [
        FieldCall(field='personalbar', demands=['Window'], returns='BarProp'),
    ],
    "perspective": [
        FieldCall(field='perspective', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='perspective', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "perspectiveOrigin": [
        FieldCall(field='perspectiveOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='perspectiveOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "phone": [
        FieldCall(field='phone', demands=['AddressErrors'], returns='str'),
        FieldCall(field='phone', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='phone', demands=['PayerErrors'], returns='str'),
        FieldCall(field='phone', demands=['PayerErrors', 'str'], returns='None'),
        FieldCall(field='phone', demands=['PaymentAddress'], returns='str'),
    ],
    "picture": [
        FieldCall(field='picture', demands=['HTMLElementTagNameMap'], returns='HTMLPictureElement'),
        FieldCall(field='picture', demands=['HTMLElementTagNameMap', 'HTMLPictureElement'], returns='None'),
    ],
    "pictureInPictureElement": [
        FieldCall(field='pictureInPictureElement', demands=['DocumentOrShadowRoot'], returns='Element'),
    ],
    "pictureInPictureEnabled": [
        FieldCall(field='pictureInPictureEnabled', demands=['Document'], returns='bool'),
    ],
    "pictureInPictureWindow": [
        FieldCall(field='pictureInPictureWindow', demands=['PictureInPictureEventInit'], returns='PictureInPictureWindow'),
        FieldCall(field='pictureInPictureWindow', demands=['PictureInPictureEventInit', 'PictureInPictureWindow'], returns='None'),
        FieldCall(field='pictureInPictureWindow', demands=['PictureInPictureEvent'], returns='PictureInPictureWindow'),
    ],
    "ping": [
        FieldCall(field='ping', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='ping', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='ping', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='ping', demands=['HTMLAreaElement', 'str'], returns='None'),
    ],
    "pipeThrough": [
        PrototypeCall(constructor='ReadableStream', fn='pipeThrough', demands=['ReadableStream', 'ReadableWritablePair'], returns='ReadableStream'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='pipeThrough', demands=['WebTransportReceiveStream', 'ReadableWritablePair'], returns='ReadableStream'),
        PrototypeCall(constructor='ReadableStream', fn='pipeThrough', demands=['ReadableStream', 'ReadableWritablePair', 'StreamPipeOptions'], returns='ReadableStream'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='pipeThrough', demands=['WebTransportReceiveStream', 'ReadableWritablePair', 'StreamPipeOptions'], returns='ReadableStream'),
    ],
    "pipeTo": [
        PrototypeCall(constructor='ReadableStream', fn='pipeTo', demands=['ReadableStream', 'WritableStream'], returns='None'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='pipeTo', demands=['WebTransportReceiveStream', 'WritableStream'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='pipeTo', demands=['ReadableStream', 'WritableStream', 'StreamPipeOptions'], returns='None'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='pipeTo', demands=['WebTransportReceiveStream', 'WritableStream', 'StreamPipeOptions'], returns='None'),
    ],
    "pitch": [
        FieldCall(field='pitch', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='pitch', demands=['SpeechSynthesisUtterance', 'float'], returns='None'),
    ],
    "pixelDepth": [
        FieldCall(field='pixelDepth', demands=['Screen'], returns='float'),
    ],
    "pixelStorei": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='pixelStorei', demands=['WebGLRenderingContext', 'GLenum', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='pixelStorei', demands=['WebGL2RenderingContext', 'GLenum', 'GLint'], returns='None'),
    ],
    "placeContent": [
        FieldCall(field='placeContent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='placeContent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "placeItems": [
        FieldCall(field='placeItems', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='placeItems', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "placeSelf": [
        FieldCall(field='placeSelf', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='placeSelf', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "placeholder": [
        FieldCall(field='placeholder', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='placeholder', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='placeholder', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='placeholder', demands=['HTMLTextAreaElement', 'str'], returns='None'),
    ],
    "plaintext": [
        FieldCall(field='plaintext', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='plaintext', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "planeIndex": [
        FieldCall(field='planeIndex', demands=['AudioDataCopyToOptions'], returns='float'),
        FieldCall(field='planeIndex', demands=['AudioDataCopyToOptions', 'float'], returns='None'),
    ],
    "platform": [
        FieldCall(field='platform', demands=['NavigatorID'], returns='str'),
    ],
    "play": [
        PrototypeCall(constructor='Animation', fn='play', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='play', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='play', demands=['CSSTransition'], returns='None'),
        FieldCall(field='play', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='play', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='play', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='play', demands=['HTMLAudioElement'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='play', demands=['HTMLVideoElement'], returns='None'),
    ],
    "playEffect": [
        PrototypeCall(constructor='GamepadHapticActuator', fn='playEffect', demands=['GamepadHapticActuator', 'GamepadHapticEffectType'], returns='GamepadHapticsResult'),
        PrototypeCall(constructor='GamepadHapticActuator', fn='playEffect', demands=['GamepadHapticActuator', 'GamepadHapticEffectType', 'GamepadEffectParameters'], returns='GamepadHapticsResult'),
    ],
    "playState": [
        FieldCall(field='playState', demands=['Animation'], returns='AnimationPlayState'),
    ],
    "playbackRate": [
        FieldCall(field='playbackRate', demands=['AudioBufferSourceOptions'], returns='float'),
        FieldCall(field='playbackRate', demands=['AudioBufferSourceOptions', 'float'], returns='None'),
        FieldCall(field='playbackRate', demands=['EffectTiming'], returns='float'),
        FieldCall(field='playbackRate', demands=['EffectTiming', 'float'], returns='None'),
        FieldCall(field='playbackRate', demands=['MediaPositionState'], returns='float'),
        FieldCall(field='playbackRate', demands=['MediaPositionState', 'float'], returns='None'),
        FieldCall(field='playbackRate', demands=['OptionalEffectTiming'], returns='float'),
        FieldCall(field='playbackRate', demands=['OptionalEffectTiming', 'float'], returns='None'),
        FieldCall(field='playbackRate', demands=['Animation'], returns='float'),
        FieldCall(field='playbackRate', demands=['Animation', 'float'], returns='None'),
        FieldCall(field='playbackRate', demands=['AudioBufferSourceNode'], returns='AudioParam'),
        FieldCall(field='playbackRate', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='playbackRate', demands=['HTMLMediaElement', 'float'], returns='None'),
    ],
    "playbackState": [
        FieldCall(field='playbackState', demands=['MediaSession'], returns='MediaSessionPlaybackState'),
        FieldCall(field='playbackState', demands=['MediaSession', 'MediaSessionPlaybackState'], returns='None'),
    ],
    "playbackTime": [
        FieldCall(field='playbackTime', demands=['AudioProcessingEventInit'], returns='float'),
        FieldCall(field='playbackTime', demands=['AudioProcessingEventInit', 'float'], returns='None'),
        FieldCall(field='playbackTime', demands=['AudioProcessingEvent'], returns='float'),
    ],
    "played": [
        FieldCall(field='played', demands=['HTMLMediaElement'], returns='TimeRanges'),
    ],
    "playing": [
        FieldCall(field='playing', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='playing', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "playoutId": [
        FieldCall(field='playoutId', demands=['RTCInboundRtpStreamStats'], returns='str'),
        FieldCall(field='playoutId', demands=['RTCInboundRtpStreamStats', 'str'], returns='None'),
    ],
    "playsInline": [
        FieldCall(field='playsInline', demands=['HTMLVideoElement'], returns='bool'),
        FieldCall(field='playsInline', demands=['HTMLVideoElement', 'bool'], returns='None'),
    ],
    "pliCount": [
        FieldCall(field='pliCount', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='pliCount', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='pliCount', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='pliCount', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "plugins": [
        FieldCall(field='plugins', demands=['Document'], returns='HTMLCollectionOf'),
        FieldCall(field='plugins', demands=['NavigatorPlugins'], returns='PluginArray'),
    ],
    "pointerBeforeReferenceNode": [
        FieldCall(field='pointerBeforeReferenceNode', demands=['NodeIterator'], returns='bool'),
    ],
    "pointerEvents": [
        FieldCall(field='pointerEvents', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='pointerEvents', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "pointerId": [
        FieldCall(field='pointerId', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='pointerId', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='pointerId', demands=['PointerEvent'], returns='float'),
    ],
    "pointerLockElement": [
        FieldCall(field='pointerLockElement', demands=['DocumentOrShadowRoot'], returns='Element'),
    ],
    "pointerType": [
        FieldCall(field='pointerType', demands=['PointerEventInit'], returns='str'),
        FieldCall(field='pointerType', demands=['PointerEventInit', 'str'], returns='None'),
        FieldCall(field='pointerType', demands=['PointerEvent'], returns='str'),
    ],
    "pointercancel": [
        FieldCall(field='pointercancel', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointercancel', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerdown": [
        FieldCall(field='pointerdown', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerdown', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerenter": [
        FieldCall(field='pointerenter', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerenter', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerleave": [
        FieldCall(field='pointerleave', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerleave', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerlockchange": [
        FieldCall(field='pointerlockchange', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='pointerlockchange', demands=['DocumentEventMap', 'Event'], returns='None'),
    ],
    "pointerlockerror": [
        FieldCall(field='pointerlockerror', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='pointerlockerror', demands=['DocumentEventMap', 'Event'], returns='None'),
    ],
    "pointermove": [
        FieldCall(field='pointermove', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointermove', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerout": [
        FieldCall(field='pointerout', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerout', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerover": [
        FieldCall(field='pointerover', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerover', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "pointerrawupdate": [
        FieldCall(field='pointerrawupdate', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='pointerrawupdate', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "pointerup": [
        FieldCall(field='pointerup', demands=['GlobalEventHandlersEventMap'], returns='PointerEvent'),
        FieldCall(field='pointerup', demands=['GlobalEventHandlersEventMap', 'PointerEvent'], returns='None'),
    ],
    "points": [
        FieldCall(field='points', demands=['SVGAnimatedPoints'], returns='SVGPointList'),
    ],
    "pointsAtX": [
        FieldCall(field='pointsAtX', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "pointsAtY": [
        FieldCall(field='pointsAtY', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "pointsAtZ": [
        FieldCall(field='pointsAtZ', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "polygon": [
        FieldCall(field='polygon', demands=['SVGElementTagNameMap'], returns='SVGPolygonElement'),
        FieldCall(field='polygon', demands=['SVGElementTagNameMap', 'SVGPolygonElement'], returns='None'),
    ],
    "polygonOffset": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='polygonOffset', demands=['WebGLRenderingContext', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='polygonOffset', demands=['WebGL2RenderingContext', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "polyline": [
        FieldCall(field='polyline', demands=['SVGElementTagNameMap'], returns='SVGPolylineElement'),
        FieldCall(field='polyline', demands=['SVGElementTagNameMap', 'SVGPolylineElement'], returns='None'),
    ],
    "pop": [
        PrototypeCall(constructor='Array', fn='pop', demands=['list'], returns='T'),
    ],
    "popover": [
        FieldCall(field='popover', demands=['HTMLElement'], returns='str'),
        FieldCall(field='popover', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "popoverTargetAction": [
        FieldCall(field='popoverTargetAction', demands=['PopoverInvokerElement'], returns='str'),
        FieldCall(field='popoverTargetAction', demands=['PopoverInvokerElement', 'str'], returns='None'),
    ],
    "popoverTargetElement": [
        FieldCall(field='popoverTargetElement', demands=['PopoverInvokerElement'], returns='Element'),
        FieldCall(field='popoverTargetElement', demands=['PopoverInvokerElement', 'Element'], returns='None'),
    ],
    "popstate": [
        FieldCall(field='popstate', demands=['WindowEventHandlersEventMap'], returns='PopStateEvent'),
        FieldCall(field='popstate', demands=['WindowEventHandlersEventMap', 'PopStateEvent'], returns='None'),
    ],
    "port": [
        FieldCall(field='port', demands=['MIDIConnectionEventInit'], returns='MIDIPort'),
        FieldCall(field='port', demands=['MIDIConnectionEventInit', 'MIDIPort'], returns='None'),
        FieldCall(field='port', demands=['RTCPeerConnectionIceErrorEventInit'], returns='float'),
        FieldCall(field='port', demands=['RTCPeerConnectionIceErrorEventInit', 'float'], returns='None'),
        FieldCall(field='port', demands=['AudioWorkletNode'], returns='MessagePort'),
        FieldCall(field='port', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='port', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='port', demands=['Location'], returns='str'),
        FieldCall(field='port', demands=['Location', 'str'], returns='None'),
        FieldCall(field='port', demands=['MIDIConnectionEvent'], returns='MIDIPort'),
        FieldCall(field='port', demands=['RTCIceCandidate'], returns='float'),
        FieldCall(field='port', demands=['RTCPeerConnectionIceErrorEvent'], returns='float'),
        FieldCall(field='port', demands=['SharedWorker'], returns='MessagePort'),
        FieldCall(field='port', demands=['URL'], returns='str'),
        FieldCall(field='port', demands=['URL', 'str'], returns='None'),
        FieldCall(field='port', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='port', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='port', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='port', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='port', demands=['URLPattern'], returns='str'),
    ],
    "port1": [
        FieldCall(field='port1', demands=['MessageChannel'], returns='MessagePort'),
    ],
    "port2": [
        FieldCall(field='port2', demands=['MessageChannel'], returns='MessagePort'),
    ],
    "ports": [
        FieldCall(field='ports', demands=['MessageEventInit'], returns='list'),
        FieldCall(field='ports', demands=['MessageEventInit', 'list'], returns='None'),
        FieldCall(field='ports', demands=['MessageEvent'], returns='ReadonlyArray'),
    ],
    "position": [
        FieldCall(field='position', demands=['MediaPositionState'], returns='float'),
        FieldCall(field='position', demands=['MediaPositionState', 'float'], returns='None'),
        FieldCall(field='position', demands=['WriteParams'], returns='float'),
        FieldCall(field='position', demands=['WriteParams', 'float'], returns='None'),
        FieldCall(field='position', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='position', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='position', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='position', demands=['VTTCue'], returns='LineAndPositionSetting'),
        FieldCall(field='position', demands=['VTTCue', 'LineAndPositionSetting'], returns='None'),
    ],
    "positionAlign": [
        FieldCall(field='positionAlign', demands=['VTTCue'], returns='PositionAlignSetting'),
        FieldCall(field='positionAlign', demands=['VTTCue', 'PositionAlignSetting'], returns='None'),
    ],
    "positionX": [
        FieldCall(field='positionX', demands=['PannerOptions'], returns='float'),
        FieldCall(field='positionX', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='positionX', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionX', demands=['PannerNode'], returns='AudioParam'),
    ],
    "positionY": [
        FieldCall(field='positionY', demands=['PannerOptions'], returns='float'),
        FieldCall(field='positionY', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='positionY', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionY', demands=['PannerNode'], returns='AudioParam'),
    ],
    "positionZ": [
        FieldCall(field='positionZ', demands=['PannerOptions'], returns='float'),
        FieldCall(field='positionZ', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='positionZ', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionZ', demands=['PannerNode'], returns='AudioParam'),
    ],
    "postMessage": [
        PrototypeCall(constructor='BroadcastChannel', fn='postMessage', demands=['BroadcastChannel', '*'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*', 'list'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*', 'StructuredSerializeOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*', 'list'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*', 'StructuredSerializeOptions'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'str'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'str', 'list'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'WindowPostMessageOptions'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*', 'list'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*', 'StructuredSerializeOptions'], returns='None'),
    ],
    "postalCode": [
        FieldCall(field='postalCode', demands=['AddressErrors'], returns='str'),
        FieldCall(field='postalCode', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='postalCode', demands=['PaymentAddress'], returns='str'),
    ],
    "poster": [
        FieldCall(field='poster', demands=['HTMLVideoElement'], returns='str'),
        FieldCall(field='poster', demands=['HTMLVideoElement', 'str'], returns='None'),
    ],
    "pow": [
        PrototypeCall(constructor='Math', fn='pow', demands=['Math', 'float', 'float'], returns='float'),
    ],
    "powerEfficient": [
        FieldCall(field='powerEfficient', demands=['MediaCapabilitiesInfo'], returns='bool'),
        FieldCall(field='powerEfficient', demands=['MediaCapabilitiesInfo', 'bool'], returns='None'),
    ],
    "powerPreference": [
        FieldCall(field='powerPreference', demands=['WebGLContextAttributes'], returns='WebGLPowerPreference'),
        FieldCall(field='powerPreference', demands=['WebGLContextAttributes', 'WebGLPowerPreference'], returns='None'),
    ],
    "pre": [
        FieldCall(field='pre', demands=['HTMLElementTagNameMap'], returns='HTMLPreElement'),
        FieldCall(field='pre', demands=['HTMLElementTagNameMap', 'HTMLPreElement'], returns='None'),
    ],
    "preMultiplySelf": [
        PrototypeCall(constructor='DOMMatrix', fn='preMultiplySelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='preMultiplySelf', demands=['DOMMatrix', 'DOMMatrixInit'], returns='DOMMatrix'),
    ],
    "precision": [
        FieldCall(field='precision', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "predictedEvents": [
        FieldCall(field='predictedEvents', demands=['PointerEventInit'], returns='list'),
        FieldCall(field='predictedEvents', demands=['PointerEventInit', 'list'], returns='None'),
    ],
    "preferAnimation": [
        FieldCall(field='preferAnimation', demands=['ImageDecoderInit'], returns='bool'),
        FieldCall(field='preferAnimation', demands=['ImageDecoderInit', 'bool'], returns='None'),
    ],
    "preferCurrentTab": [
        FieldCall(field='preferCurrentTab', demands=['MediaStreamConstraints'], returns='bool'),
        FieldCall(field='preferCurrentTab', demands=['MediaStreamConstraints', 'bool'], returns='None'),
    ],
    "prefix": [
        FieldCall(field='prefix', demands=['Attr'], returns='str'),
        FieldCall(field='prefix', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='prefix', demands=['CSSCounterStyleRule', 'str'], returns='None'),
        FieldCall(field='prefix', demands=['CSSNamespaceRule'], returns='str'),
        FieldCall(field='prefix', demands=['Element'], returns='str'),
    ],
    "preload": [
        FieldCall(field='preload', demands=['HTMLMediaElement'], returns='"none"'),
        FieldCall(field='preload', demands=['HTMLMediaElement', '"none"'], returns='None'),
    ],
    "premultipliedAlpha": [
        FieldCall(field='premultipliedAlpha', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='premultipliedAlpha', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "premultiplyAlpha": [
        FieldCall(field='premultiplyAlpha', demands=['ImageBitmapOptions'], returns='PremultiplyAlpha'),
        FieldCall(field='premultiplyAlpha', demands=['ImageBitmapOptions', 'PremultiplyAlpha'], returns='None'),
    ],
    "prepend": [
        PrototypeCall(constructor='Element', fn='prepend', demands=['Element', '*'], returns='None'),
        PrototypeCall(constructor='Document', fn='prepend', demands=['Document', '*'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='prepend', demands=['DocumentFragment', '*'], returns='None'),
    ],
    "presentationStyle": [
        FieldCall(field='presentationStyle', demands=['ClipboardItemOptions'], returns='PresentationStyle'),
        FieldCall(field='presentationStyle', demands=['ClipboardItemOptions', 'PresentationStyle'], returns='None'),
        FieldCall(field='presentationStyle', demands=['ClipboardItem'], returns='PresentationStyle'),
    ],
    "presentationTime": [
        FieldCall(field='presentationTime', demands=['VideoFrameCallbackMetadata'], returns='DOMHighResTimeStamp'),
        FieldCall(field='presentationTime', demands=['VideoFrameCallbackMetadata', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "presentedFrames": [
        FieldCall(field='presentedFrames', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='presentedFrames', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
    ],
    "preserveAlpha": [
        FieldCall(field='preserveAlpha', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedBoolean'),
    ],
    "preserveAspectRatio": [
        FieldCall(field='preserveAspectRatio', demands=['SVGFEImageElement'], returns='SVGAnimatedPreserveAspectRatio'),
        FieldCall(field='preserveAspectRatio', demands=['SVGFitToViewBox'], returns='SVGAnimatedPreserveAspectRatio'),
        FieldCall(field='preserveAspectRatio', demands=['SVGImageElement'], returns='SVGAnimatedPreserveAspectRatio'),
    ],
    "preserveDrawingBuffer": [
        FieldCall(field='preserveDrawingBuffer', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='preserveDrawingBuffer', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "preservesPitch": [
        FieldCall(field='preservesPitch', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='preservesPitch', demands=['HTMLMediaElement', 'bool'], returns='None'),
    ],
    "pressed": [
        FieldCall(field='pressed', demands=['GamepadButton'], returns='bool'),
    ],
    "pressure": [
        FieldCall(field='pressure', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='pressure', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='pressure', demands=['PointerEvent'], returns='float'),
    ],
    "preventAbort": [
        FieldCall(field='preventAbort', demands=['StreamPipeOptions'], returns='bool'),
        FieldCall(field='preventAbort', demands=['StreamPipeOptions', 'bool'], returns='None'),
    ],
    "preventCancel": [
        FieldCall(field='preventCancel', demands=['ReadableStreamIteratorOptions'], returns='bool'),
        FieldCall(field='preventCancel', demands=['ReadableStreamIteratorOptions', 'bool'], returns='None'),
        FieldCall(field='preventCancel', demands=['StreamPipeOptions'], returns='bool'),
        FieldCall(field='preventCancel', demands=['StreamPipeOptions', 'bool'], returns='None'),
    ],
    "preventClose": [
        FieldCall(field='preventClose', demands=['StreamPipeOptions'], returns='bool'),
        FieldCall(field='preventClose', demands=['StreamPipeOptions', 'bool'], returns='None'),
    ],
    "preventDefault": [
        PrototypeCall(constructor='Event', fn='preventDefault', demands=['Event'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='preventDefault', demands=['SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='preventDefault', demands=['FontFaceSetLoadEvent'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='preventDefault', demands=['UIEvent'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='preventDefault', demands=['RTCErrorEvent'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='preventDefault', demands=['BeforeUnloadEvent'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='preventDefault', demands=['OfflineAudioCompletionEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='preventDefault', demands=['RTCPeerConnectionIceErrorEvent'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='preventDefault', demands=['SubmitEvent'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='preventDefault', demands=['PopStateEvent'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='preventDefault', demands=['PageRevealEvent'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='preventDefault', demands=['FormDataEvent'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='preventDefault', demands=['CookieChangeEvent'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='preventDefault', demands=['ErrorEvent'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='preventDefault', demands=['AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='preventDefault', demands=['PaymentRequestUpdateEvent'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='preventDefault', demands=['PromiseRejectionEvent'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='preventDefault', demands=['ClipboardEvent'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='preventDefault', demands=['MediaEncryptedEvent'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='preventDefault', demands=['MediaKeyMessageEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='preventDefault', demands=['RTCPeerConnectionIceEvent'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='preventDefault', demands=['IDBVersionChangeEvent'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='preventDefault', demands=['GamepadEvent'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='preventDefault', demands=['MediaQueryListEvent'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='preventDefault', demands=['TransitionEvent'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='preventDefault', demands=['PictureInPictureEvent'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='preventDefault', demands=['RTCDataChannelEvent'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='preventDefault', demands=['TrackEvent'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='preventDefault', demands=['SecurityPolicyViolationEvent'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='preventDefault', demands=['AnimationEvent'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='preventDefault', demands=['MediaStreamTrackEvent'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='preventDefault', demands=['RTCDTMFToneChangeEvent'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='preventDefault', demands=['AudioProcessingEvent'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='preventDefault', demands=['ToggleEvent'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='preventDefault', demands=['DeviceOrientationEvent'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='preventDefault', demands=['PageSwapEvent'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='preventDefault', demands=['StorageEvent'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='preventDefault', demands=['ContentVisibilityAutoStateChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='preventDefault', demands=['MIDIMessageEvent'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='preventDefault', demands=['CloseEvent'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='preventDefault', demands=['ProgressEvent'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='preventDefault', demands=['HashChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='preventDefault', demands=['MIDIConnectionEvent'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='preventDefault', demands=['PageTransitionEvent'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='preventDefault', demands=['DeviceMotionEvent'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='preventDefault', demands=['WebGLContextEvent'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='preventDefault', demands=['BlobEvent'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='preventDefault', demands=['RTCTrackEvent'], returns='None'),
    ],
    "preventExtensions": [
        PrototypeCall(constructor='ObjectConstructor', fn='preventExtensions', demands=['ObjectConstructor', 'T'], returns='T'),
        PrototypeCall(constructor='ProxyHandler', fn='preventExtensions', demands=['ProxyHandler', 'T'], returns='bool'),
    ],
    "preventScroll": [
        FieldCall(field='preventScroll', demands=['FocusOptions'], returns='bool'),
        FieldCall(field='preventScroll', demands=['FocusOptions', 'bool'], returns='None'),
    ],
    "preventSilentAccess": [
        PrototypeCall(constructor='CredentialsContainer', fn='preventSilentAccess', demands=['CredentialsContainer'], returns='None'),
    ],
    "previousElementSibling": [
        FieldCall(field='previousElementSibling', demands=['NonDocumentTypeChildNode'], returns='Element'),
    ],
    "previousNode": [
        PrototypeCall(constructor='NodeIterator', fn='previousNode', demands=['NodeIterator'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='previousNode', demands=['TreeWalker'], returns='Node'),
    ],
    "previousSibling": [
        FieldCall(field='previousSibling', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='previousSibling', demands=['Node'], returns='ChildNode'),
        PrototypeCall(constructor='TreeWalker', fn='previousSibling', demands=['TreeWalker'], returns='Node'),
    ],
    "prf": [
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientInputs'], returns='AuthenticationExtensionsPRFInputs'),
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientInputs', 'AuthenticationExtensionsPRFInputs'], returns='None'),
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientInputsJSON'], returns='AuthenticationExtensionsPRFInputsJSON'),
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientInputsJSON', 'AuthenticationExtensionsPRFInputsJSON'], returns='None'),
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientOutputs'], returns='AuthenticationExtensionsPRFOutputs'),
        FieldCall(field='prf', demands=['AuthenticationExtensionsClientOutputs', 'AuthenticationExtensionsPRFOutputs'], returns='None'),
    ],
    "primaries": [
        FieldCall(field='primaries', demands=['VideoColorSpaceInit'], returns='VideoColorPrimaries'),
        FieldCall(field='primaries', demands=['VideoColorSpaceInit', 'VideoColorPrimaries'], returns='None'),
        FieldCall(field='primaries', demands=['VideoColorSpace'], returns='VideoColorPrimaries'),
    ],
    "primaryKey": [
        FieldCall(field='primaryKey', demands=['IDBCursor'], returns='IDBValidKey'),
    ],
    "primitiveUnits": [
        FieldCall(field='primitiveUnits', demands=['SVGFilterElement'], returns='SVGAnimatedEnumeration'),
    ],
    "print": [
        DirectCall(fn='print', receiver=None, demands=[], returns='None'),
    ],
    "printColorAdjust": [
        FieldCall(field='printColorAdjust', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='printColorAdjust', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "priority": [
        FieldCall(field='priority', demands=['RTCRtpEncodingParameters'], returns='RTCPriorityType'),
        FieldCall(field='priority', demands=['RTCRtpEncodingParameters', 'RTCPriorityType'], returns='None'),
        FieldCall(field='priority', demands=['RequestInit'], returns='RequestPriority'),
        FieldCall(field='priority', demands=['RequestInit', 'RequestPriority'], returns='None'),
        FieldCall(field='priority', demands=['Highlight'], returns='float'),
        FieldCall(field='priority', demands=['Highlight', 'float'], returns='None'),
        FieldCall(field='priority', demands=['RTCIceCandidate'], returns='float'),
    ],
    "private": [
        FieldCall(field='private', demands=['ClassMethodDecoratorContext'], returns='bool'),
        FieldCall(field='private', demands=['ClassGetterDecoratorContext'], returns='bool'),
        FieldCall(field='private', demands=['ClassSetterDecoratorContext'], returns='bool'),
        FieldCall(field='private', demands=['ClassAccessorDecoratorContext'], returns='bool'),
        FieldCall(field='private', demands=['ClassFieldDecoratorContext'], returns='bool'),
    ],
    "privateKey": [
        FieldCall(field='privateKey', demands=['CryptoKeyPair'], returns='CryptoKey'),
        FieldCall(field='privateKey', demands=['CryptoKeyPair', 'CryptoKey'], returns='None'),
    ],
    "processingDuration": [
        FieldCall(field='processingDuration', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='processingDuration', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
    ],
    "processingEnd": [
        FieldCall(field='processingEnd', demands=['PerformanceEventTiming'], returns='DOMHighResTimeStamp'),
    ],
    "processingStart": [
        FieldCall(field='processingStart', demands=['PerformanceEventTiming'], returns='DOMHighResTimeStamp'),
    ],
    "processorOptions": [
        FieldCall(field='processorOptions', demands=['AudioWorkletNodeOptions'], returns='*'),
        FieldCall(field='processorOptions', demands=['AudioWorkletNodeOptions', '*'], returns='None'),
    ],
    "processorerror": [
        FieldCall(field='processorerror', demands=['AudioWorkletNodeEventMap'], returns='ErrorEvent'),
        FieldCall(field='processorerror', demands=['AudioWorkletNodeEventMap', 'ErrorEvent'], returns='None'),
    ],
    "product": [
        FieldCall(field='product', demands=['NavigatorID'], returns='str'),
    ],
    "productSub": [
        FieldCall(field='productSub', demands=['NavigatorID'], returns='str'),
    ],
    "profile": [
        PrototypeCall(constructor='Console', fn='profile', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='profile', demands=['Console', 'str'], returns='None'),
    ],
    "profileEnd": [
        PrototypeCall(constructor='Console', fn='profileEnd', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='profileEnd', demands=['Console', 'str'], returns='None'),
    ],
    "progress": [
        FieldCall(field='progress', demands=['ComputedEffectTiming'], returns='float'),
        FieldCall(field='progress', demands=['ComputedEffectTiming', 'float'], returns='None'),
        FieldCall(field='progress', demands=['FileReaderEventMap'], returns='ProgressEvent'),
        FieldCall(field='progress', demands=['FileReaderEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='progress', demands=['GlobalEventHandlersEventMap'], returns='ProgressEvent'),
        FieldCall(field='progress', demands=['GlobalEventHandlersEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='progress', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='progress', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
        FieldCall(field='progress', demands=['HTMLElementTagNameMap'], returns='HTMLProgressElement'),
        FieldCall(field='progress', demands=['HTMLElementTagNameMap', 'HTMLProgressElement'], returns='None'),
    ],
    "promise": [
        FieldCall(field='promise', demands=['PromiseRejectionEventInit'], returns='*'),
        FieldCall(field='promise', demands=['PromiseRejectionEventInit', '*'], returns='None'),
        FieldCall(field='promise', demands=['PromiseRejectionEvent'], returns='*'),
        FieldCall(field='promise', demands=['PromiseWithResolvers'], returns='T'),
        FieldCall(field='promise', demands=['PromiseWithResolvers', 'T'], returns='None'),
    ],
    "prompt": [
        PrototypeCall(constructor='RemotePlayback', fn='prompt', demands=['RemotePlayback'], returns='None'),
        DirectCall(fn='prompt', receiver=None, demands=[], returns='str'),
        DirectCall(fn='prompt', receiver=None, demands=['str'], returns='str'),
        DirectCall(fn='prompt', receiver=None, demands=['str', 'str'], returns='str'),
        FieldCall(field='prompt', demands=['Window'], returns='(message?:string,defaultValue?:string)=>string'),
        FieldCall(field='prompt', demands=['Window', '(message?:string,defaultValue?:string)=>string'], returns='None'),
    ],
    "propertyIsEnumerable": [
        PrototypeCall(constructor='Object', fn='propertyIsEnumerable', demands=['Object', 'PropertyKey'], returns='bool'),
    ],
    "propertyName": [
        FieldCall(field='propertyName', demands=['TransitionEventInit'], returns='str'),
        FieldCall(field='propertyName', demands=['TransitionEventInit', 'str'], returns='None'),
        FieldCall(field='propertyName', demands=['TransitionEvent'], returns='str'),
    ],
    "protocol": [
        FieldCall(field='protocol', demands=['RTCDataChannelInit'], returns='str'),
        FieldCall(field='protocol', demands=['RTCDataChannelInit', 'str'], returns='None'),
        FieldCall(field='protocol', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='protocol', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='protocol', demands=['Location'], returns='str'),
        FieldCall(field='protocol', demands=['Location', 'str'], returns='None'),
        FieldCall(field='protocol', demands=['RTCDataChannel'], returns='str'),
        FieldCall(field='protocol', demands=['RTCIceCandidate'], returns='RTCIceProtocol'),
        FieldCall(field='protocol', demands=['URL'], returns='str'),
        FieldCall(field='protocol', demands=['URL', 'str'], returns='None'),
        FieldCall(field='protocol', demands=['WebSocket'], returns='str'),
        FieldCall(field='protocol', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='protocol', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='protocol', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='protocol', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='protocol', demands=['URLPattern'], returns='str'),
    ],
    "prototype": [
        FieldCall(field='prototype', demands=['BigIntConstructor'], returns='BigInt'),
        FieldCall(field='prototype', demands=['BigInt64ArrayConstructor'], returns='BigInt64Array'),
        FieldCall(field='prototype', demands=['BigUint64ArrayConstructor'], returns='BigUint64Array'),
        FieldCall(field='prototype', demands=['AggregateErrorConstructor'], returns='AggregateError'),
        FieldCall(field='prototype', demands=['WeakRefConstructor'], returns='WeakRef'),
        FieldCall(field='prototype', demands=['FinalizationRegistryConstructor'], returns='FinalizationRegistry'),
        FieldCall(field='prototype', demands=['SymbolConstructor'], returns='Symbol'),
        FieldCall(field='prototype', demands=['ObjectConstructor'], returns='Object'),
        FieldCall(field='prototype', demands=['*'], returns='*'),
        FieldCall(field='prototype', demands=['*', '*'], returns='None'),
        FieldCall(field='prototype', demands=['FunctionConstructor'], returns='*'),
        FieldCall(field='prototype', demands=['StringConstructor'], returns='str'),
        FieldCall(field='prototype', demands=['BooleanConstructor'], returns='bool'),
        FieldCall(field='prototype', demands=['NumberConstructor'], returns='float'),
        FieldCall(field='prototype', demands=['DateConstructor'], returns='Date'),
        FieldCall(field='prototype', demands=['RegExpConstructor'], returns='regex'),
        FieldCall(field='prototype', demands=['ErrorConstructor'], returns='Error'),
        FieldCall(field='prototype', demands=['EvalErrorConstructor'], returns='EvalError'),
        FieldCall(field='prototype', demands=['RangeErrorConstructor'], returns='RangeError'),
        FieldCall(field='prototype', demands=['ReferenceErrorConstructor'], returns='ReferenceError'),
        FieldCall(field='prototype', demands=['SyntaxErrorConstructor'], returns='SyntaxError'),
        FieldCall(field='prototype', demands=['TypeErrorConstructor'], returns='TypeError'),
        FieldCall(field='prototype', demands=['URIErrorConstructor'], returns='URIError'),
        FieldCall(field='prototype', demands=['ArrayConstructor'], returns='list'),
        FieldCall(field='prototype', demands=['ArrayBufferConstructor'], returns='ArrayBuffer'),
        FieldCall(field='prototype', demands=['DataViewConstructor'], returns='DataView'),
        FieldCall(field='prototype', demands=['Int8ArrayConstructor'], returns='Int8Array'),
        FieldCall(field='prototype', demands=['Uint8ArrayConstructor'], returns='Uint8Array'),
        FieldCall(field='prototype', demands=['Uint8ClampedArrayConstructor'], returns='Uint8ClampedArray'),
        FieldCall(field='prototype', demands=['Int16ArrayConstructor'], returns='Int16Array'),
        FieldCall(field='prototype', demands=['Uint16ArrayConstructor'], returns='Uint16Array'),
        FieldCall(field='prototype', demands=['Int32ArrayConstructor'], returns='Int32Array'),
        FieldCall(field='prototype', demands=['Uint32ArrayConstructor'], returns='Uint32Array'),
        FieldCall(field='prototype', demands=['Float32ArrayConstructor'], returns='Float32Array'),
        FieldCall(field='prototype', demands=['Float64ArrayConstructor'], returns='Float64Array'),
        FieldCall(field='prototype', demands=['SuppressedErrorConstructor'], returns='SuppressedError'),
        FieldCall(field='prototype', demands=['DisposableStackConstructor'], returns='DisposableStack'),
        FieldCall(field='prototype', demands=['AsyncDisposableStackConstructor'], returns='AsyncDisposableStack'),
        FieldCall(field='prototype', demands=['MapConstructor'], returns='Map'),
        FieldCall(field='prototype', demands=['WeakMapConstructor'], returns='WeakMap'),
        FieldCall(field='prototype', demands=['SetConstructor'], returns='Set'),
        FieldCall(field='prototype', demands=['WeakSetConstructor'], returns='WeakSet'),
        FieldCall(field='prototype', demands=['GeneratorFunction'], returns='Generator'),
        FieldCall(field='prototype', demands=['GeneratorFunctionConstructor'], returns='GeneratorFunction'),
        FieldCall(field='prototype', demands=['PromiseConstructor'], returns='*'),
        FieldCall(field='prototype', demands=['SharedArrayBufferConstructor'], returns='SharedArrayBuffer'),
        FieldCall(field='prototype', demands=['AsyncGeneratorFunction'], returns='AsyncGenerator'),
        FieldCall(field='prototype', demands=['AsyncGeneratorFunctionConstructor'], returns='AsyncGeneratorFunction'),
        FieldCall(field='prototype', demands=['Float16ArrayConstructor'], returns='Float16Array'),
    ],
    "pseudoElement": [
        FieldCall(field='pseudoElement', demands=['AnimationEventInit'], returns='str'),
        FieldCall(field='pseudoElement', demands=['AnimationEventInit', 'str'], returns='None'),
        FieldCall(field='pseudoElement', demands=['KeyframeEffectOptions'], returns='str'),
        FieldCall(field='pseudoElement', demands=['KeyframeEffectOptions', 'str'], returns='None'),
        FieldCall(field='pseudoElement', demands=['TransitionEventInit'], returns='str'),
        FieldCall(field='pseudoElement', demands=['TransitionEventInit', 'str'], returns='None'),
        FieldCall(field='pseudoElement', demands=['AnimationEvent'], returns='str'),
        FieldCall(field='pseudoElement', demands=['KeyframeEffect'], returns='str'),
        FieldCall(field='pseudoElement', demands=['KeyframeEffect', 'str'], returns='None'),
        FieldCall(field='pseudoElement', demands=['TransitionEvent'], returns='str'),
    ],
    "pubKeyCredParams": [
        FieldCall(field='pubKeyCredParams', demands=['PublicKeyCredentialCreationOptions'], returns='list'),
        FieldCall(field='pubKeyCredParams', demands=['PublicKeyCredentialCreationOptions', 'list'], returns='None'),
        FieldCall(field='pubKeyCredParams', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='list'),
        FieldCall(field='pubKeyCredParams', demands=['PublicKeyCredentialCreationOptionsJSON', 'list'], returns='None'),
    ],
    "public": [
        FieldCall(field='public', demands=['EcdhKeyDeriveParams'], returns='CryptoKey'),
        FieldCall(field='public', demands=['EcdhKeyDeriveParams', 'CryptoKey'], returns='None'),
    ],
    "publicExponent": [
        FieldCall(field='publicExponent', demands=['RsaKeyAlgorithm'], returns='BigInteger'),
        FieldCall(field='publicExponent', demands=['RsaKeyAlgorithm', 'BigInteger'], returns='None'),
        FieldCall(field='publicExponent', demands=['RsaKeyGenParams'], returns='BigInteger'),
        FieldCall(field='publicExponent', demands=['RsaKeyGenParams', 'BigInteger'], returns='None'),
        FieldCall(field='publicExponent', demands=['RsaKeyGenParams'], returns='Uint8Array'),
        FieldCall(field='publicExponent', demands=['RsaKeyGenParams', 'Uint8Array'], returns='None'),
        FieldCall(field='publicExponent', demands=['RsaKeyAlgorithm'], returns='Uint8Array'),
        FieldCall(field='publicExponent', demands=['RsaKeyAlgorithm', 'Uint8Array'], returns='None'),
    ],
    "publicId": [
        FieldCall(field='publicId', demands=['DocumentType'], returns='str'),
    ],
    "publicKey": [
        FieldCall(field='publicKey', demands=['CredentialCreationOptions'], returns='PublicKeyCredentialCreationOptions'),
        FieldCall(field='publicKey', demands=['CredentialCreationOptions', 'PublicKeyCredentialCreationOptions'], returns='None'),
        FieldCall(field='publicKey', demands=['CredentialRequestOptions'], returns='PublicKeyCredentialRequestOptions'),
        FieldCall(field='publicKey', demands=['CredentialRequestOptions', 'PublicKeyCredentialRequestOptions'], returns='None'),
        FieldCall(field='publicKey', demands=['CryptoKeyPair'], returns='CryptoKey'),
        FieldCall(field='publicKey', demands=['CryptoKeyPair', 'CryptoKey'], returns='None'),
    ],
    "pull": [
        FieldCall(field='pull', demands=['UnderlyingByteSource'], returns='(controller:ReadableByteStreamController)=>void'),
        FieldCall(field='pull', demands=['UnderlyingByteSource', '(controller:ReadableByteStreamController)=>void'], returns='None'),
        FieldCall(field='pull', demands=['UnderlyingDefaultSource'], returns='(controller:ReadableStreamDefaultController<R>)=>void'),
        FieldCall(field='pull', demands=['UnderlyingDefaultSource', '(controller:ReadableStreamDefaultController'], returns='None'),
        FieldCall(field='pull', demands=['UnderlyingSource'], returns='UnderlyingSourcePullCallback'),
        FieldCall(field='pull', demands=['UnderlyingSource', 'UnderlyingSourcePullCallback'], returns='None'),
        FieldCall(field='pull', demands=['UnderlyingDefaultSource'], returns='(controller:ReadableStreamDefaultController<R>,)=>void'),
    ],
    "push": [
        PrototypeCall(constructor='Array', fn='push', demands=['list', '*'], returns='float'),
    ],
    "pushManager": [
        FieldCall(field='pushManager', demands=['ServiceWorkerRegistration'], returns='PushManager'),
    ],
    "pushState": [
        PrototypeCall(constructor='History', fn='pushState', demands=['History', '*', 'str'], returns='None'),
        PrototypeCall(constructor='History', fn='pushState', demands=['History', '*', 'str', 'str'], returns='None'),
    ],
    "put": [
        PrototypeCall(constructor='Cache', fn='put', demands=['Cache', 'RequestInfo', 'Response'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='put', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='put', demands=['IDBObjectStore', '*', 'IDBValidKey'], returns='IDBRequest'),
    ],
    "putImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='putImageData', demands=['CanvasRenderingContext2D', 'ImageData', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='putImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='putImageData', demands=['CanvasRenderingContext2D', 'ImageData', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='putImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "q": [
        FieldCall(field='q', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='q', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='q', demands=['HTMLElementTagNameMap'], returns='HTMLQuoteElement'),
        FieldCall(field='q', demands=['HTMLElementTagNameMap', 'HTMLQuoteElement'], returns='None'),
    ],
    "qi": [
        FieldCall(field='qi', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='qi', demands=['JsonWebKey', 'str'], returns='None'),
    ],
    "qpSum": [
        FieldCall(field='qpSum', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='qpSum', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='qpSum', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='qpSum', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "quadraticCurveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='quadraticCurveTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='quadraticCurveTo', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='quadraticCurveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "quality": [
        FieldCall(field='quality', demands=['ImageEncodeOptions'], returns='float'),
        FieldCall(field='quality', demands=['ImageEncodeOptions', 'float'], returns='None'),
    ],
    "qualityLimitationDurations": [
        FieldCall(field='qualityLimitationDurations', demands=['RTCOutboundRtpStreamStats'], returns='Record'),
        FieldCall(field='qualityLimitationDurations', demands=['RTCOutboundRtpStreamStats', 'Record'], returns='None'),
    ],
    "qualityLimitationReason": [
        FieldCall(field='qualityLimitationReason', demands=['RTCOutboundRtpStreamStats'], returns='RTCQualityLimitationReason'),
        FieldCall(field='qualityLimitationReason', demands=['RTCOutboundRtpStreamStats', 'RTCQualityLimitationReason'], returns='None'),
    ],
    "qualityLimitationResolutionChanges": [
        FieldCall(field='qualityLimitationResolutionChanges', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='qualityLimitationResolutionChanges', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "quantizer": [
        FieldCall(field='quantizer', demands=['VideoEncoderEncodeOptionsForAvc'], returns='float'),
        FieldCall(field='quantizer', demands=['VideoEncoderEncodeOptionsForAvc', 'float'], returns='None'),
    ],
    "query": [
        PrototypeCall(constructor='LockManager', fn='query', demands=['LockManager'], returns='LockManagerSnapshot'),
        PrototypeCall(constructor='Permissions', fn='query', demands=['Permissions', 'PermissionDescriptor'], returns='PermissionStatus'),
    ],
    "queryCommandEnabled": [
        PrototypeCall(constructor='Document', fn='queryCommandEnabled', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='queryCommandEnabled', demands=['HTMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='queryCommandEnabled', demands=['XMLDocument', 'str'], returns='bool'),
    ],
    "queryCommandIndeterm": [
        PrototypeCall(constructor='Document', fn='queryCommandIndeterm', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='queryCommandIndeterm', demands=['HTMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='queryCommandIndeterm', demands=['XMLDocument', 'str'], returns='bool'),
    ],
    "queryCommandState": [
        PrototypeCall(constructor='Document', fn='queryCommandState', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='queryCommandState', demands=['HTMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='queryCommandState', demands=['XMLDocument', 'str'], returns='bool'),
    ],
    "queryCommandSupported": [
        PrototypeCall(constructor='Document', fn='queryCommandSupported', demands=['Document', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLDocument', fn='queryCommandSupported', demands=['HTMLDocument', 'str'], returns='bool'),
        PrototypeCall(constructor='XMLDocument', fn='queryCommandSupported', demands=['XMLDocument', 'str'], returns='bool'),
    ],
    "queryCommandValue": [
        PrototypeCall(constructor='Document', fn='queryCommandValue', demands=['Document', 'str'], returns='str'),
        PrototypeCall(constructor='HTMLDocument', fn='queryCommandValue', demands=['HTMLDocument', 'str'], returns='str'),
        PrototypeCall(constructor='XMLDocument', fn='queryCommandValue', demands=['XMLDocument', 'str'], returns='str'),
    ],
    "querySelector": [
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'K'], returns='HTMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'K'], returns='SVGElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'K'], returns='MathMLElementTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'K'], returns='HTMLElementDeprecatedTagNameMap[K]'),
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'str'], returns='E'),
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'str'], returns='E'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'str'], returns='E'),
    ],
    "querySelectorAll": [
        PrototypeCall(constructor='Element', fn='querySelectorAll', demands=['Element', 'K'], returns='NodeListOf'),
        PrototypeCall(constructor='Document', fn='querySelectorAll', demands=['Document', 'K'], returns='NodeListOf'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelectorAll', demands=['DocumentFragment', 'K'], returns='NodeListOf'),
        PrototypeCall(constructor='Element', fn='querySelectorAll', demands=['Element', 'str'], returns='NodeListOf'),
        PrototypeCall(constructor='Document', fn='querySelectorAll', demands=['Document', 'str'], returns='NodeListOf'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelectorAll', demands=['DocumentFragment', 'str'], returns='NodeListOf'),
    ],
    "queueMicrotask": [
        DirectCall(fn='queueMicrotask', receiver=None, demands=['VoidFunction'], returns='None'),
    ],
    "quota": [
        FieldCall(field='quota', demands=['StorageEstimate'], returns='float'),
        FieldCall(field='quota', demands=['StorageEstimate', 'float'], returns='None'),
    ],
    "quotes": [
        FieldCall(field='quotes', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='quotes', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "r": [
        FieldCall(field='r', demands=['RsaOtherPrimesInfo'], returns='str'),
        FieldCall(field='r', demands=['RsaOtherPrimesInfo', 'str'], returns='None'),
        FieldCall(field='r', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='r', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='r', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='r', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "race": [
        PrototypeCall(constructor='PromiseConstructor', fn='race', demands=['PromiseConstructor', 'Iterable<T'], returns='Awaited'),
        PrototypeCall(constructor='PromiseConstructor', fn='race', demands=['PromiseConstructor', 'T'], returns='Awaited'),
    ],
    "radialGradient": [
        FieldCall(field='radialGradient', demands=['SVGElementTagNameMap'], returns='SVGRadialGradientElement'),
        FieldCall(field='radialGradient', demands=['SVGElementTagNameMap', 'SVGRadialGradientElement'], returns='None'),
    ],
    "radiusX": [
        FieldCall(field='radiusX', demands=['TouchInit'], returns='float'),
        FieldCall(field='radiusX', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='radiusX', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='radiusX', demands=['Touch'], returns='float'),
    ],
    "radiusY": [
        FieldCall(field='radiusY', demands=['TouchInit'], returns='float'),
        FieldCall(field='radiusY', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='radiusY', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='radiusY', demands=['Touch'], returns='float'),
    ],
    "random": [
        PrototypeCall(constructor='Math', fn='random', demands=['Math'], returns='float'),
    ],
    "randomUUID": [
        PrototypeCall(constructor='Crypto', fn='randomUUID', demands=['Crypto'], returns='`${string}-${string}-${string}-${string}-${string}`'),
    ],
    "range": [
        FieldCall(field='range', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='range', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "rangeCount": [
        FieldCall(field='rangeCount', demands=['Selection'], returns='float'),
    ],
    "rangeMax": [
        FieldCall(field='rangeMax', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "rangeMin": [
        FieldCall(field='rangeMin', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "rangeOverflow": [
        FieldCall(field='rangeOverflow', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='rangeOverflow', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='rangeOverflow', demands=['ValidityState'], returns='bool'),
    ],
    "rangeUnderflow": [
        FieldCall(field='rangeUnderflow', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='rangeUnderflow', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='rangeUnderflow', demands=['ValidityState'], returns='bool'),
    ],
    "rate": [
        FieldCall(field='rate', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='rate', demands=['SpeechSynthesisUtterance', 'float'], returns='None'),
    ],
    "ratechange": [
        FieldCall(field='ratechange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='ratechange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "ratio": [
        FieldCall(field='ratio', demands=['DynamicsCompressorOptions'], returns='float'),
        FieldCall(field='ratio', demands=['DynamicsCompressorOptions', 'float'], returns='None'),
        FieldCall(field='ratio', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "raw": [
        FieldCall(field='raw', demands=['TemplateStringsArray'], returns='list'),
        PrototypeCall(constructor='StringConstructor', fn='raw', demands=['StringConstructor', 'list', '*'], returns='str'),
    ],
    "rawId": [
        FieldCall(field='rawId', demands=['PublicKeyCredential'], returns='ArrayBuffer'),
    ],
    "rb": [
        FieldCall(field='rb', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='rb', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "read": [
        FieldCall(field='read', demands=['AuthenticationExtensionsLargeBlobInputs'], returns='bool'),
        FieldCall(field='read', demands=['AuthenticationExtensionsLargeBlobInputs', 'bool'], returns='None'),
        FieldCall(field='read', demands=['AuthenticationExtensionsLargeBlobInputsJSON'], returns='bool'),
        FieldCall(field='read', demands=['AuthenticationExtensionsLargeBlobInputsJSON', 'bool'], returns='None'),
        FieldCall(field='read', demands=['TextEncoderEncodeIntoResult'], returns='float'),
        FieldCall(field='read', demands=['TextEncoderEncodeIntoResult', 'float'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='read', demands=['Clipboard'], returns='ClipboardItems'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='read', demands=['ReadableStreamBYOBReader', 'T'], returns='ReadableStreamReadResult'),
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='read', demands=['ReadableStreamDefaultReader'], returns='ReadableStreamReadResult'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='read', demands=['ReadableStreamBYOBReader', 'T', 'ReadableStreamBYOBReaderReadOptions'], returns='ReadableStreamReadResult'),
    ],
    "readAsArrayBuffer": [
        PrototypeCall(constructor='FileReader', fn='readAsArrayBuffer', demands=['FileReader', 'Blob'], returns='None'),
    ],
    "readAsBinaryString": [
        PrototypeCall(constructor='FileReader', fn='readAsBinaryString', demands=['FileReader', 'Blob'], returns='None'),
    ],
    "readAsDataURL": [
        PrototypeCall(constructor='FileReader', fn='readAsDataURL', demands=['FileReader', 'Blob'], returns='None'),
    ],
    "readAsText": [
        PrototypeCall(constructor='FileReader', fn='readAsText', demands=['FileReader', 'Blob'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='readAsText', demands=['FileReader', 'Blob', 'str'], returns='None'),
    ],
    "readBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readBuffer', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "readEntries": [
        PrototypeCall(constructor='FileSystemDirectoryReader', fn='readEntries', demands=['FileSystemDirectoryReader', 'FileSystemEntriesCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryReader', fn='readEntries', demands=['FileSystemDirectoryReader', 'FileSystemEntriesCallback', 'ErrorCallback'], returns='None'),
    ],
    "readOnly": [
        FieldCall(field='readOnly', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='readOnly', demands=['HTMLInputElement', 'bool'], returns='None'),
        FieldCall(field='readOnly', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='readOnly', demands=['HTMLTextAreaElement', 'bool'], returns='None'),
    ],
    "readPixels": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='readPixels', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
    ],
    "readText": [
        PrototypeCall(constructor='Clipboard', fn='readText', demands=['Clipboard'], returns='str'),
    ],
    "readable": [
        FieldCall(field='readable', demands=['ReadableWritablePair'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['ReadableWritablePair', 'ReadableStream'], returns='None'),
        FieldCall(field='readable', demands=['CompressionStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['DecompressionStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['GenericTransformStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['TextDecoderStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['TextEncoderStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['TransformStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['WebTransportBidirectionalStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['WebTransportDatagramDuplexStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['WebTransportBidirectionalStream'], returns='WebTransportReceiveStream'),
        FieldCall(field='readable', demands=['WebTransportDatagramDuplexStream'], returns='WebTransportReceiveStream'),
    ],
    "readableType": [
        FieldCall(field='readableType', demands=['Transformer'], returns='None'),
        FieldCall(field='readableType', demands=['Transformer', 'None'], returns='None'),
    ],
    "ready": [
        FieldCall(field='ready', demands=['Animation'], returns='Animation'),
        FieldCall(field='ready', demands=['FontFaceSet'], returns='FontFaceSet'),
        FieldCall(field='ready', demands=['ImageTrackList'], returns='None'),
        FieldCall(field='ready', demands=['ServiceWorkerContainer'], returns='ServiceWorkerRegistration'),
        FieldCall(field='ready', demands=['ViewTransition'], returns='None'),
        FieldCall(field='ready', demands=['WebTransport'], returns='None'),
        FieldCall(field='ready', demands=['WritableStreamDefaultWriter'], returns='None'),
    ],
    "readyState": [
        FieldCall(field='readyState', demands=['Document'], returns='DocumentReadyState'),
        FieldCall(field='readyState', demands=['EventSource'], returns='float'),
        FieldCall(field='readyState', demands=['FileReader'], returns='typeofFileReader.EMPTY'),
        FieldCall(field='readyState', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='readyState', demands=['HTMLTrackElement'], returns='float'),
        FieldCall(field='readyState', demands=['IDBRequest'], returns='IDBRequestReadyState'),
        FieldCall(field='readyState', demands=['MediaSource'], returns='ReadyState'),
        FieldCall(field='readyState', demands=['MediaStreamTrack'], returns='MediaStreamTrackState'),
        FieldCall(field='readyState', demands=['RTCDataChannel'], returns='RTCDataChannelState'),
        FieldCall(field='readyState', demands=['WebSocket'], returns='float'),
        FieldCall(field='readyState', demands=['XMLHttpRequest'], returns='float'),
        FieldCall(field='readyState', demands=['FileReader'], returns=''),
    ],
    "readystatechange": [
        FieldCall(field='readystatechange', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='readystatechange', demands=['DocumentEventMap', 'Event'], returns='None'),
        FieldCall(field='readystatechange', demands=['XMLHttpRequestEventMap'], returns='Event'),
        FieldCall(field='readystatechange', demands=['XMLHttpRequestEventMap', 'Event'], returns='None'),
    ],
    "real": [
        FieldCall(field='real', demands=['PeriodicWaveOptions'], returns='number[]'),
        FieldCall(field='real', demands=['PeriodicWaveOptions', 'list'], returns='None'),
    ],
    "reason": [
        FieldCall(field='reason', demands=['CloseEventInit'], returns='str'),
        FieldCall(field='reason', demands=['CloseEventInit', 'str'], returns='None'),
        FieldCall(field='reason', demands=['PromiseRejectionEventInit'], returns='*'),
        FieldCall(field='reason', demands=['PromiseRejectionEventInit', '*'], returns='None'),
        FieldCall(field='reason', demands=['WebTransportCloseInfo'], returns='str'),
        FieldCall(field='reason', demands=['WebTransportCloseInfo', 'str'], returns='None'),
        FieldCall(field='reason', demands=['AbortSignal'], returns='*'),
        FieldCall(field='reason', demands=['CloseEvent'], returns='str'),
        FieldCall(field='reason', demands=['PromiseRejectionEvent'], returns='*'),
        FieldCall(field='reason', demands=['PromiseRejectedResult'], returns='*'),
        FieldCall(field='reason', demands=['PromiseRejectedResult', '*'], returns='None'),
        FieldCall(field='reason', demands=['WebSocketError'], returns='str'),
        FieldCall(field='reason', demands=['GPUDeviceLostInfo'], returns='GPUDeviceLostReason'),
    ],
    "receiveTime": [
        FieldCall(field='receiveTime', demands=['VideoFrameCallbackMetadata'], returns='DOMHighResTimeStamp'),
        FieldCall(field='receiveTime', demands=['VideoFrameCallbackMetadata', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "receivedAlert": [
        FieldCall(field='receivedAlert', demands=['RTCErrorInit'], returns='float'),
        FieldCall(field='receivedAlert', demands=['RTCErrorInit', 'float'], returns='None'),
        FieldCall(field='receivedAlert', demands=['RTCError'], returns='float'),
    ],
    "receiver": [
        FieldCall(field='receiver', demands=['RTCTrackEventInit'], returns='RTCRtpReceiver'),
        FieldCall(field='receiver', demands=['RTCTrackEventInit', 'RTCRtpReceiver'], returns='None'),
        FieldCall(field='receiver', demands=['RTCRtpTransceiver'], returns='RTCRtpReceiver'),
        FieldCall(field='receiver', demands=['RTCTrackEvent'], returns='RTCRtpReceiver'),
    ],
    "recipient": [
        FieldCall(field='recipient', demands=['AddressErrors'], returns='str'),
        FieldCall(field='recipient', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='recipient', demands=['PaymentAddress'], returns='str'),
    ],
    "rect": [
        FieldCall(field='rect', demands=['VideoFrameCopyToOptions'], returns='DOMRectInit'),
        FieldCall(field='rect', demands=['VideoFrameCopyToOptions', 'DOMRectInit'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='rect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='rect', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='rect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        FieldCall(field='rect', demands=['SVGElementTagNameMap'], returns='SVGRectElement'),
        FieldCall(field='rect', demands=['SVGElementTagNameMap', 'SVGRectElement'], returns='None'),
    ],
    "recursive": [
        FieldCall(field='recursive', demands=['FileSystemRemoveOptions'], returns='bool'),
        FieldCall(field='recursive', demands=['FileSystemRemoveOptions', 'bool'], returns='None'),
    ],
    "redEyeReduction": [
        FieldCall(field='redEyeReduction', demands=['PhotoCapabilities'], returns='RedEyeReduction'),
        FieldCall(field='redEyeReduction', demands=['PhotoCapabilities', 'RedEyeReduction'], returns='None'),
        FieldCall(field='redEyeReduction', demands=['PhotoSettings'], returns='bool'),
        FieldCall(field='redEyeReduction', demands=['PhotoSettings', 'bool'], returns='None'),
    ],
    "redirect": [
        FieldCall(field='redirect', demands=['RequestInit'], returns='RequestRedirect'),
        FieldCall(field='redirect', demands=['RequestInit', 'RequestRedirect'], returns='None'),
        FieldCall(field='redirect', demands=['Request'], returns='RequestRedirect'),
    ],
    "redirectCount": [
        FieldCall(field='redirectCount', demands=['PerformanceNavigation'], returns='float'),
        FieldCall(field='redirectCount', demands=['PerformanceNavigationTiming'], returns='float'),
    ],
    "redirectEnd": [
        FieldCall(field='redirectEnd', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='redirectEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "redirectStart": [
        FieldCall(field='redirectStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='redirectStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "redirected": [
        FieldCall(field='redirected', demands=['Response'], returns='bool'),
    ],
    "reduce": [
        PrototypeCall(constructor='BigInt64Array', fn='reduce', demands=['BigInt64Array', '(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigInt64Array'], returns='bigint'),
        PrototypeCall(constructor='BigInt64Array', fn='reduce', demands=['BigInt64Array', '(previousValue:U,currentValue:bigint,currentIndex:number,array:BigInt64Array', 'U'], returns='U'),
        PrototypeCall(constructor='BigUint64Array', fn='reduce', demands=['BigUint64Array', '(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigUint64Array'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='reduce', demands=['BigUint64Array', '(previousValue:U,currentValue:bigint,currentIndex:number,array:BigUint64Array', 'U'], returns='U'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduce', demands=['ReadonlyArray', '(previousValue:T,currentValue:T,currentIndex:number,array:readonlyT[])=>T'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduce', demands=['ReadonlyArray', '(previousValue:T,currentValue:T,currentIndex:number,array:readonlyT[])=>T', 'T'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduce', demands=['ReadonlyArray', '(previousValue:U,currentValue:T,currentIndex:number,array:readonlyT[])=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Array', fn='reduce', demands=['list', '(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T'], returns='T'),
        PrototypeCall(constructor='Array', fn='reduce', demands=['list', '(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T', 'T'], returns='T'),
        PrototypeCall(constructor='Array', fn='reduce', demands=['list', '(previousValue:U,currentValue:T,currentIndex:number,array:T[])=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int8Array', fn='reduce', demands=['Int8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='reduce', demands=['Int8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='reduce', demands=['Int8Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint8Array', fn='reduce', demands=['Uint8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='reduce', demands=['Uint8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='reduce', demands=['Uint8Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduce', demands=['Uint8ClampedArray', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduce', demands=['Uint8ClampedArray', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduce', demands=['Uint8ClampedArray', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int16Array', fn='reduce', demands=['Int16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='reduce', demands=['Int16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='reduce', demands=['Int16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint16Array', fn='reduce', demands=['Uint16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='reduce', demands=['Uint16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='reduce', demands=['Uint16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int32Array', fn='reduce', demands=['Int32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='reduce', demands=['Int32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='reduce', demands=['Int32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint32Array', fn='reduce', demands=['Uint32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='reduce', demands=['Uint32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='reduce', demands=['Uint32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float32Array', fn='reduce', demands=['Float32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='reduce', demands=['Float32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='reduce', demands=['Float32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float64Array', fn='reduce', demands=['Float64Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='reduce', demands=['Float64Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='reduce', demands=['Float64Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float16Array', fn='reduce', demands=['Float16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='reduce', demands=['Float16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='reduce', demands=['Float16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
    ],
    "reduceRight": [
        PrototypeCall(constructor='BigInt64Array', fn='reduceRight', demands=['BigInt64Array', '(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigInt64Array'], returns='bigint'),
        PrototypeCall(constructor='BigInt64Array', fn='reduceRight', demands=['BigInt64Array', '(previousValue:U,currentValue:bigint,currentIndex:number,array:BigInt64Array', 'U'], returns='U'),
        PrototypeCall(constructor='BigUint64Array', fn='reduceRight', demands=['BigUint64Array', '(previousValue:bigint,currentValue:bigint,currentIndex:number,array:BigUint64Array'], returns='bigint'),
        PrototypeCall(constructor='BigUint64Array', fn='reduceRight', demands=['BigUint64Array', '(previousValue:U,currentValue:bigint,currentIndex:number,array:BigUint64Array', 'U'], returns='U'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduceRight', demands=['ReadonlyArray', '(previousValue:T,currentValue:T,currentIndex:number,array:readonlyT[])=>T'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduceRight', demands=['ReadonlyArray', '(previousValue:T,currentValue:T,currentIndex:number,array:readonlyT[])=>T', 'T'], returns='T'),
        PrototypeCall(constructor='ReadonlyArray', fn='reduceRight', demands=['ReadonlyArray', '(previousValue:U,currentValue:T,currentIndex:number,array:readonlyT[])=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Array', fn='reduceRight', demands=['list', '(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T'], returns='T'),
        PrototypeCall(constructor='Array', fn='reduceRight', demands=['list', '(previousValue:T,currentValue:T,currentIndex:number,array:T[])=>T', 'T'], returns='T'),
        PrototypeCall(constructor='Array', fn='reduceRight', demands=['list', '(previousValue:U,currentValue:T,currentIndex:number,array:T[])=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int8Array', fn='reduceRight', demands=['Int8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='reduceRight', demands=['Int8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='reduceRight', demands=['Int8Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint8Array', fn='reduceRight', demands=['Uint8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='reduceRight', demands=['Uint8Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8Array', fn='reduceRight', demands=['Uint8Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduceRight', demands=['Uint8ClampedArray', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduceRight', demands=['Uint8ClampedArray', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reduceRight', demands=['Uint8ClampedArray', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int16Array', fn='reduceRight', demands=['Int16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='reduceRight', demands=['Int16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int16Array', fn='reduceRight', demands=['Int16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint16Array', fn='reduceRight', demands=['Uint16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='reduceRight', demands=['Uint16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint16Array', fn='reduceRight', demands=['Uint16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Int32Array', fn='reduceRight', demands=['Int32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='reduceRight', demands=['Int32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Int32Array', fn='reduceRight', demands=['Int32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Uint32Array', fn='reduceRight', demands=['Uint32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='reduceRight', demands=['Uint32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Uint32Array', fn='reduceRight', demands=['Uint32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float32Array', fn='reduceRight', demands=['Float32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='reduceRight', demands=['Float32Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float32Array', fn='reduceRight', demands=['Float32Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float64Array', fn='reduceRight', demands=['Float64Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='reduceRight', demands=['Float64Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float64Array', fn='reduceRight', demands=['Float64Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
        PrototypeCall(constructor='Float16Array', fn='reduceRight', demands=['Float16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='reduceRight', demands=['Float16Array', '(previousValue:number,currentValue:number,currentIndex:number,array:this)=>number', 'float'], returns='float'),
        PrototypeCall(constructor='Float16Array', fn='reduceRight', demands=['Float16Array', '(previousValue:U,currentValue:number,currentIndex:number,array:this)=>U', 'U'], returns='U'),
    ],
    "reducedSize": [
        FieldCall(field='reducedSize', demands=['RTCRtcpParameters'], returns='bool'),
        FieldCall(field='reducedSize', demands=['RTCRtcpParameters', 'bool'], returns='None'),
    ],
    "reduction": [
        FieldCall(field='reduction', demands=['DynamicsCompressorNode'], returns='float'),
    ],
    "refDistance": [
        FieldCall(field='refDistance', demands=['PannerOptions'], returns='float'),
        FieldCall(field='refDistance', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='refDistance', demands=['PannerNode'], returns='float'),
        FieldCall(field='refDistance', demands=['PannerNode', 'float'], returns='None'),
    ],
    "refX": [
        FieldCall(field='refX', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "refY": [
        FieldCall(field='refY', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "referenceNode": [
        FieldCall(field='referenceNode', demands=['NodeIterator'], returns='Node'),
    ],
    "referrer": [
        FieldCall(field='referrer', demands=['RequestInit'], returns='str'),
        FieldCall(field='referrer', demands=['RequestInit', 'str'], returns='None'),
        FieldCall(field='referrer', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='referrer', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='referrer', demands=['CSPViolationReportBody'], returns='str'),
        FieldCall(field='referrer', demands=['Document'], returns='str'),
        FieldCall(field='referrer', demands=['Request'], returns='str'),
        FieldCall(field='referrer', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "referrerPolicy": [
        FieldCall(field='referrerPolicy', demands=['RequestInit'], returns='ReferrerPolicy'),
        FieldCall(field='referrerPolicy', demands=['RequestInit', 'ReferrerPolicy'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAreaElement', 'str'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLIFrameElement'], returns='ReferrerPolicy'),
        FieldCall(field='referrerPolicy', demands=['HTMLIFrameElement', 'ReferrerPolicy'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='referrerPolicy', demands=['Request'], returns='ReferrerPolicy'),
    ],
    "refresh": [
        PrototypeCall(constructor='PluginArray', fn='refresh', demands=['PluginArray'], returns='None'),
    ],
    "region": [
        FieldCall(field='region', demands=['AddressErrors'], returns='str'),
        FieldCall(field='region', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='region', demands=['PaymentAddress'], returns='str'),
        FieldCall(field='region', demands=['VTTCue'], returns='VTTRegion'),
        FieldCall(field='region', demands=['VTTCue', 'VTTRegion'], returns='None'),
    ],
    "regionAnchorX": [
        FieldCall(field='regionAnchorX', demands=['VTTRegion'], returns='float'),
        FieldCall(field='regionAnchorX', demands=['VTTRegion', 'float'], returns='None'),
    ],
    "regionAnchorY": [
        FieldCall(field='regionAnchorY', demands=['VTTRegion'], returns='float'),
        FieldCall(field='regionAnchorY', demands=['VTTRegion', 'float'], returns='None'),
    ],
    "register": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'str'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'str', 'RegistrationOptions'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='FinalizationRegistry', fn='register', demands=['FinalizationRegistry', 'WeakKey', 'T'], returns='None'),
        PrototypeCall(constructor='FinalizationRegistry', fn='register', demands=['FinalizationRegistry', 'WeakKey', 'T', 'WeakKey'], returns='None'),
    ],
    "registerProtocolHandler": [
        PrototypeCall(constructor='Navigator', fn='registerProtocolHandler', demands=['Navigator', 'str', 'str'], returns='None'),
    ],
    "reject": [
        FieldCall(field='reject', demands=['PromiseWithResolvers'], returns='(reason?:any)=>void'),
        FieldCall(field='reject', demands=['PromiseWithResolvers', '(reason?:any)=>void'], returns='None'),
        PrototypeCall(constructor='PromiseConstructor', fn='reject', demands=['PromiseConstructor'], returns='T'),
        PrototypeCall(constructor='PromiseConstructor', fn='reject', demands=['PromiseConstructor', '*'], returns='T'),
    ],
    "rejectionhandled": [
        FieldCall(field='rejectionhandled', demands=['WindowEventHandlersEventMap'], returns='PromiseRejectionEvent'),
        FieldCall(field='rejectionhandled', demands=['WindowEventHandlersEventMap', 'PromiseRejectionEvent'], returns='None'),
        FieldCall(field='rejectionhandled', demands=['WindowEventMap'], returns='PromiseRejectionEvent'),
        FieldCall(field='rejectionhandled', demands=['WindowEventMap', 'PromiseRejectionEvent'], returns='None'),
    ],
    "rel": [
        FieldCall(field='rel', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='rel', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAreaElement', 'str'], returns='None'),
        FieldCall(field='rel', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLFormElement', 'str'], returns='None'),
        FieldCall(field='rel', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='rel', demands=['SVGAElement'], returns='str'),
        FieldCall(field='rel', demands=['SVGAElement', 'str'], returns='None'),
    ],
    "relList": [
        PrototypeCall(constructor='HTMLAnchorElement', fn='relList', demands=['HTMLAnchorElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='relList', demands=['HTMLAnchorElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='relList', demands=['HTMLAreaElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLAreaElement', fn='relList', demands=['HTMLAreaElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='relList', demands=['HTMLFormElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLFormElement', fn='relList', demands=['HTMLFormElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='relList', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLLinkElement', fn='relList', demands=['HTMLLinkElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='relList', demands=['SVGAElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='SVGAElement', fn='relList', demands=['SVGAElement', 'str'], returns='None'),
    ],
    "relatedAddress": [
        FieldCall(field='relatedAddress', demands=['RTCIceCandidate'], returns='str'),
    ],
    "relatedPort": [
        FieldCall(field='relatedPort', demands=['RTCIceCandidate'], returns='float'),
    ],
    "relatedTarget": [
        FieldCall(field='relatedTarget', demands=['FocusEventInit'], returns='EventTarget'),
        FieldCall(field='relatedTarget', demands=['FocusEventInit', 'EventTarget'], returns='None'),
        FieldCall(field='relatedTarget', demands=['MouseEventInit'], returns='EventTarget'),
        FieldCall(field='relatedTarget', demands=['MouseEventInit', 'EventTarget'], returns='None'),
        FieldCall(field='relatedTarget', demands=['FocusEvent'], returns='EventTarget'),
        FieldCall(field='relatedTarget', demands=['MouseEvent'], returns='EventTarget'),
    ],
    "release": [
        FieldCall(field='release', demands=['DynamicsCompressorOptions'], returns='float'),
        FieldCall(field='release', demands=['DynamicsCompressorOptions', 'float'], returns='None'),
        FieldCall(field='release', demands=['DynamicsCompressorNode'], returns='AudioParam'),
        FieldCall(field='release', demands=['WakeLockSentinelEventMap'], returns='Event'),
        FieldCall(field='release', demands=['WakeLockSentinelEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='release', demands=['WakeLockSentinel'], returns='None'),
    ],
    "releaseEvents": [
        PrototypeCall(constructor='Document', fn='releaseEvents', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='releaseEvents', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='releaseEvents', demands=['XMLDocument'], returns='None'),
        DirectCall(fn='releaseEvents', receiver=None, demands=[], returns='None'),
    ],
    "releaseLock": [
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='releaseLock', demands=['ReadableStreamBYOBReader'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='releaseLock', demands=['ReadableStreamDefaultReader'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='releaseLock', demands=['WebTransportWriter'], returns='None'),
    ],
    "releasePointerCapture": [
        PrototypeCall(constructor='Element', fn='releasePointerCapture', demands=['Element', 'float'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='releasePointerCapture', demands=['MathMLElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='releasePointerCapture', demands=['SVGElement', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='releasePointerCapture', demands=['HTMLElement', 'float'], returns='None'),
    ],
    "released": [
        FieldCall(field='released', demands=['WakeLockSentinel'], returns='bool'),
    ],
    "reload": [
        PrototypeCall(constructor='Location', fn='reload', demands=['Location'], returns='None'),
        PrototypeCall(constructor='Location', fn='reload', demands=['Location', 'bool'], returns='None'),
    ],
    "remote": [
        FieldCall(field='remote', demands=['HTMLMediaElement'], returns='RemotePlayback'),
        FieldCall(field='remote', demands=['RTCIceCandidatePair'], returns='RTCIceCandidate'),
        FieldCall(field='remote', demands=['RTCIceCandidatePair', 'RTCIceCandidate'], returns='None'),
    ],
    "remoteCandidateId": [
        FieldCall(field='remoteCandidateId', demands=['RTCIceCandidatePairStats'], returns='str'),
        FieldCall(field='remoteCandidateId', demands=['RTCIceCandidatePairStats', 'str'], returns='None'),
    ],
    "remoteCertificateId": [
        FieldCall(field='remoteCertificateId', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='remoteCertificateId', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "remoteDescription": [
        FieldCall(field='remoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "remoteId": [
        FieldCall(field='remoteId', demands=['RTCInboundRtpStreamStats'], returns='str'),
        FieldCall(field='remoteId', demands=['RTCInboundRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='remoteId', demands=['RTCOutboundRtpStreamStats'], returns='str'),
        FieldCall(field='remoteId', demands=['RTCOutboundRtpStreamStats', 'str'], returns='None'),
    ],
    "remove": [
        FieldCall(field='remove', demands=['AnimationEventMap'], returns='AnimationPlaybackEvent'),
        FieldCall(field='remove', demands=['AnimationEventMap', 'AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='remove', demands=['DocumentType'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='remove', demands=['CharacterData'], returns='None'),
        PrototypeCall(constructor='Element', fn='remove', demands=['Element'], returns='None'),
        PrototypeCall(constructor='DOMTokenList', fn='remove', demands=['DOMTokenList', '*'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='remove', demands=['DataTransferItemList', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='remove', demands=['HTMLOptionsCollection', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='remove', demands=['HTMLSelectElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='remove', demands=['HTMLSelectElement', 'float'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='remove', demands=['MediaKeySession'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='remove', demands=['SourceBuffer', 'float', 'float'], returns='None'),
    ],
    "removeAllRanges": [
        PrototypeCall(constructor='Selection', fn='removeAllRanges', demands=['Selection'], returns='None'),
    ],
    "removeAttribute": [
        PrototypeCall(constructor='Element', fn='removeAttribute', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeAttribute', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeAttribute', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeAttribute', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "removeAttributeNS": [
        PrototypeCall(constructor='Element', fn='removeAttributeNS', demands=['Element', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeAttributeNS', demands=['MathMLElement', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeAttributeNS', demands=['SVGElement', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeAttributeNS', demands=['HTMLElement', 'str', 'str'], returns='None'),
    ],
    "removeAttributeNode": [
        PrototypeCall(constructor='Element', fn='removeAttributeNode', demands=['Element', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='MathMLElement', fn='removeAttributeNode', demands=['MathMLElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='SVGElement', fn='removeAttributeNode', demands=['SVGElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='HTMLElement', fn='removeAttributeNode', demands=['HTMLElement', 'Attr'], returns='Attr'),
    ],
    "removeChild": [
        PrototypeCall(constructor='Node', fn='removeChild', demands=['Node', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentType', fn='removeChild', demands=['DocumentType', 'T'], returns='T'),
        PrototypeCall(constructor='CharacterData', fn='removeChild', demands=['CharacterData', 'T'], returns='T'),
        PrototypeCall(constructor='Element', fn='removeChild', demands=['Element', 'T'], returns='T'),
        PrototypeCall(constructor='Attr', fn='removeChild', demands=['Attr', 'T'], returns='T'),
        PrototypeCall(constructor='Document', fn='removeChild', demands=['Document', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentFragment', fn='removeChild', demands=['DocumentFragment', 'T'], returns='T'),
    ],
    "removeCue": [
        PrototypeCall(constructor='TextTrack', fn='removeCue', demands=['TextTrack', 'TextTrackCue'], returns='None'),
    ],
    "removeEntry": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='removeEntry', demands=['FileSystemDirectoryHandle', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='removeEntry', demands=['FileSystemDirectoryHandle', 'str', 'FileSystemRemoveOptions'], returns='None'),
    ],
    "removeEventListener": [
        PrototypeCall(constructor='AbortSignal', fn='removeEventListener', demands=['AbortSignal', 'K', '(this:AbortSignal,ev:AbortSignalEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='removeEventListener', demands=['AbortSignal', 'K', '(this:AbortSignal,ev:AbortSignalEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='removeEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='removeEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'K', '(this:AbstractWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Animation', fn='removeEventListener', demands=['Animation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Animation', fn='removeEventListener', demands=['Animation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'K', '(this:Animation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Animation', fn='removeEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Animation', fn='removeEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioBufferSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'K', '(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'K', '(this:AudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='removeEventListener', demands=['AudioDecoder', 'K', '(this:AudioDecoder,ev:AudioDecoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='removeEventListener', demands=['AudioDecoder', 'K', '(this:AudioDecoder,ev:AudioDecoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='removeEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='removeEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='removeEventListener', demands=['AudioEncoder', 'K', '(this:AudioEncoder,ev:AudioEncoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='removeEventListener', demands=['AudioEncoder', 'K', '(this:AudioEncoder,ev:AudioEncoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='removeEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='removeEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='removeEventListener', demands=['AudioScheduledSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='removeEventListener', demands=['AudioScheduledSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='removeEventListener', demands=['AudioBufferSourceNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'K', '(this:AudioScheduledSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='removeEventListener', demands=['AudioScheduledSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='removeEventListener', demands=['AudioScheduledSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='removeEventListener', demands=['AudioWorkletNode', 'K', '(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='removeEventListener', demands=['AudioWorkletNode', 'K', '(this:AudioWorkletNode,ev:AudioWorkletNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='removeEventListener', demands=['AudioWorkletNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioWorkletNode', fn='removeEventListener', demands=['AudioWorkletNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='removeEventListener', demands=['BaseAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='removeEventListener', demands=['BaseAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='removeEventListener', demands=['AudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'K', '(this:BaseAudioContext,ev:BaseAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='removeEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='removeEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='removeEventListener', demands=['BroadcastChannel', 'K', '(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='removeEventListener', demands=['BroadcastChannel', 'K', '(this:BroadcastChannel,ev:BroadcastChannelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='removeEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='removeEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'K', '(this:CSSAnimation,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='removeEventListener', demands=['CSSAnimation', 'K', '(this:CSSAnimation,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'K', '(this:CSSTransition,ev:AnimationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='removeEventListener', demands=['CSSTransition', 'K', '(this:CSSTransition,ev:AnimationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:CanvasCaptureMediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'K', '(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='removeEventListener', demands=['ConstantSourceNode', 'K', '(this:ConstantSourceNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='removeEventListener', demands=['CookieStore', 'K', '(this:CookieStore,ev:CookieStoreEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='removeEventListener', demands=['CookieStore', 'K', '(this:CookieStore,ev:CookieStoreEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='removeEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='removeEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'K', '(this:Document,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Element', fn='removeEventListener', demands=['Element', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Element', fn='removeEventListener', demands=['Element', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:Element,ev:ElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Element', fn='removeEventListener', demands=['Element', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Element', fn='removeEventListener', demands=['Element', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'K', '(this:EventSource,ev:EventSourceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'K', '(this:EventSource,ev:EventSourceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'str', '(this:EventSource,event:MessageEvent)=>any'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'str', '(this:EventSource,event:MessageEvent)=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='removeEventListener', demands=['EventTarget', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='removeEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='removeEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='removeEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='removeEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='removeEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='removeEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='removeEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='removeEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='removeEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='removeEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='removeEventListener', demands=['Clipboard', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='removeEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='removeEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='removeEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='removeEventListener', demands=['AudioNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='removeEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='removeEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='removeEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='removeEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='removeEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='removeEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='removeEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='removeEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='removeEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='removeEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='removeEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='removeEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='removeEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Notification', fn='removeEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='removeEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='removeEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='removeEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='removeEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Performance', fn='removeEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='removeEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='removeEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='removeEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='removeEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='removeEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='removeEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='removeEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='removeEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='removeEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='removeEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='Node', fn='removeEventListener', demands=['Node', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='removeEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='removeEventListener', demands=['EventTarget', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='removeEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='removeEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='removeEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='removeEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='removeEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='removeEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='removeEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='removeEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='removeEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='removeEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='removeEventListener', demands=['Clipboard', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='removeEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='removeEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='BaseAudioContext', fn='removeEventListener', demands=['BaseAudioContext', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='removeEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Animation', fn='removeEventListener', demands=['Animation', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='removeEventListener', demands=['BroadcastChannel', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='removeEventListener', demands=['AudioNode', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='removeEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='removeEventListener', demands=['EventSource', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='removeEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AbortSignal', fn='removeEventListener', demands=['AbortSignal', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='removeEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='removeEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='removeEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='removeEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='removeEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='removeEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='removeEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='removeEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='removeEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='removeEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='removeEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Notification', fn='removeEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='removeEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='removeEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='removeEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='removeEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='removeEventListener', demands=['CookieStore', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Performance', fn='removeEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='removeEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='removeEventListener', demands=['AudioEncoder', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='removeEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='removeEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='removeEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='removeEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='removeEventListener', demands=['AudioDecoder', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='removeEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='removeEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='removeEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='removeEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='removeEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='Node', fn='removeEventListener', demands=['Node', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='removeEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'str', 'EventListenerOrEventListenerObject', 'EventListenerOptions'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='removeEventListener', demands=['FileReader', 'K', '(this:FileReader,ev:FileReaderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='removeEventListener', demands=['FileReader', 'K', '(this:FileReader,ev:FileReaderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='removeEventListener', demands=['FileReader', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='removeEventListener', demands=['FontFaceSet', 'K', '(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='removeEventListener', demands=['FontFaceSet', 'K', '(this:FontFaceSet,ev:FontFaceSetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='removeEventListener', demands=['FontFaceSet', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='removeEventListener', demands=['FontFaceSet', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Document', fn='removeEventListener', demands=['Document', 'K', '(this:GlobalEventHandlers,ev:GlobalEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLAnchorElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLAreaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLAudioElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLBRElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLBaseElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLBodyElement,ev:HTMLBodyElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLButtonElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLCanvasElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLDListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLDataElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLDataListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLDetailsElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLDialogElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLDirectoryElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLDivElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'K', '(this:HTMLDocument,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='removeEventListener', demands=['HTMLDocument', 'K', '(this:HTMLDocument,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='removeEventListener', demands=['HTMLElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='removeEventListener', demands=['HTMLDetailsElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='removeEventListener', demands=['HTMLDialogElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='removeEventListener', demands=['HTMLDListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='removeEventListener', demands=['HTMLAnchorElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='removeEventListener', demands=['HTMLBaseElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='removeEventListener', demands=['HTMLAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='removeEventListener', demands=['HTMLDivElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='removeEventListener', demands=['HTMLDataListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='removeEventListener', demands=['HTMLButtonElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='removeEventListener', demands=['HTMLDirectoryElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='removeEventListener', demands=['HTMLCanvasElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='removeEventListener', demands=['HTMLDataElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='removeEventListener', demands=['HTMLBRElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='removeEventListener', demands=['HTMLEmbedElement', 'K', '(this:HTMLEmbedElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='removeEventListener', demands=['HTMLFieldSetElement', 'K', '(this:HTMLFieldSetElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='removeEventListener', demands=['HTMLFontElement', 'K', '(this:HTMLFontElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='removeEventListener', demands=['HTMLFormElement', 'K', '(this:HTMLFormElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='removeEventListener', demands=['HTMLFrameElement', 'K', '(this:HTMLFrameElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:HTMLFrameSetElement,ev:HTMLFrameSetElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='removeEventListener', demands=['HTMLHRElement', 'K', '(this:HTMLHRElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='removeEventListener', demands=['HTMLHeadElement', 'K', '(this:HTMLHeadElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='removeEventListener', demands=['HTMLHeadingElement', 'K', '(this:HTMLHeadingElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='removeEventListener', demands=['HTMLHtmlElement', 'K', '(this:HTMLHtmlElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='removeEventListener', demands=['HTMLIFrameElement', 'K', '(this:HTMLIFrameElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='removeEventListener', demands=['HTMLImageElement', 'K', '(this:HTMLImageElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='removeEventListener', demands=['HTMLInputElement', 'K', '(this:HTMLInputElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='removeEventListener', demands=['HTMLLIElement', 'K', '(this:HTMLLIElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='removeEventListener', demands=['HTMLLabelElement', 'K', '(this:HTMLLabelElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='removeEventListener', demands=['HTMLLegendElement', 'K', '(this:HTMLLegendElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='removeEventListener', demands=['HTMLLinkElement', 'K', '(this:HTMLLinkElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='removeEventListener', demands=['HTMLMapElement', 'K', '(this:HTMLMapElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='removeEventListener', demands=['HTMLMarqueeElement', 'K', '(this:HTMLMarqueeElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='removeEventListener', demands=['HTMLMediaElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='removeEventListener', demands=['HTMLAudioElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLMediaElement,ev:HTMLMediaElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='removeEventListener', demands=['HTMLMenuElement', 'K', '(this:HTMLMenuElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='removeEventListener', demands=['HTMLMetaElement', 'K', '(this:HTMLMetaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='removeEventListener', demands=['HTMLMeterElement', 'K', '(this:HTMLMeterElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'K', '(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='removeEventListener', demands=['HTMLModElement', 'K', '(this:HTMLModElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='removeEventListener', demands=['HTMLOListElement', 'K', '(this:HTMLOListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='removeEventListener', demands=['HTMLObjectElement', 'K', '(this:HTMLObjectElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='removeEventListener', demands=['HTMLOptGroupElement', 'K', '(this:HTMLOptGroupElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='removeEventListener', demands=['HTMLOptionElement', 'K', '(this:HTMLOptionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='removeEventListener', demands=['HTMLOutputElement', 'K', '(this:HTMLOutputElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='removeEventListener', demands=['HTMLParagraphElement', 'K', '(this:HTMLParagraphElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='removeEventListener', demands=['HTMLParamElement', 'K', '(this:HTMLParamElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='removeEventListener', demands=['HTMLPictureElement', 'K', '(this:HTMLPictureElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='removeEventListener', demands=['HTMLPreElement', 'K', '(this:HTMLPreElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='removeEventListener', demands=['HTMLProgressElement', 'K', '(this:HTMLProgressElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='removeEventListener', demands=['HTMLQuoteElement', 'K', '(this:HTMLQuoteElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='removeEventListener', demands=['HTMLScriptElement', 'K', '(this:HTMLScriptElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='removeEventListener', demands=['HTMLSelectElement', 'K', '(this:HTMLSelectElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='removeEventListener', demands=['HTMLSlotElement', 'K', '(this:HTMLSlotElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='removeEventListener', demands=['HTMLSourceElement', 'K', '(this:HTMLSourceElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='removeEventListener', demands=['HTMLSpanElement', 'K', '(this:HTMLSpanElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='removeEventListener', demands=['HTMLStyleElement', 'K', '(this:HTMLStyleElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='removeEventListener', demands=['HTMLTableCaptionElement', 'K', '(this:HTMLTableCaptionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='removeEventListener', demands=['HTMLTableCellElement', 'K', '(this:HTMLTableCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='removeEventListener', demands=['HTMLTableColElement', 'K', '(this:HTMLTableColElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='removeEventListener', demands=['HTMLTableDataCellElement', 'K', '(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='removeEventListener', demands=['HTMLTableDataCellElement', 'K', '(this:HTMLTableDataCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='removeEventListener', demands=['HTMLTableDataCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableDataCellElement', fn='removeEventListener', demands=['HTMLTableDataCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='removeEventListener', demands=['HTMLTableElement', 'K', '(this:HTMLTableElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='removeEventListener', demands=['HTMLTableHeaderCellElement', 'K', '(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='removeEventListener', demands=['HTMLTableHeaderCellElement', 'K', '(this:HTMLTableHeaderCellElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='removeEventListener', demands=['HTMLTableHeaderCellElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='HTMLTableHeaderCellElement', fn='removeEventListener', demands=['HTMLTableHeaderCellElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='removeEventListener', demands=['HTMLTableRowElement', 'K', '(this:HTMLTableRowElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='removeEventListener', demands=['HTMLTableSectionElement', 'K', '(this:HTMLTableSectionElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='removeEventListener', demands=['HTMLTemplateElement', 'K', '(this:HTMLTemplateElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='removeEventListener', demands=['HTMLTextAreaElement', 'K', '(this:HTMLTextAreaElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='removeEventListener', demands=['HTMLTimeElement', 'K', '(this:HTMLTimeElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='removeEventListener', demands=['HTMLTitleElement', 'K', '(this:HTMLTitleElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='removeEventListener', demands=['HTMLTrackElement', 'K', '(this:HTMLTrackElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='removeEventListener', demands=['HTMLUListElement', 'K', '(this:HTMLUListElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='removeEventListener', demands=['HTMLUnknownElement', 'K', '(this:HTMLUnknownElement,ev:HTMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='removeEventListener', demands=['HTMLVideoElement', 'K', '(this:HTMLVideoElement,ev:HTMLVideoElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='removeEventListener', demands=['IDBDatabase', 'K', '(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='removeEventListener', demands=['IDBDatabase', 'K', '(this:IDBDatabase,ev:IDBDatabaseEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='removeEventListener', demands=['IDBDatabase', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBOpenDBRequest,ev:IDBOpenDBRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='removeEventListener', demands=['IDBRequest', 'K', '(this:IDBRequest'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBRequest'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='removeEventListener', demands=['IDBRequest', 'K', '(this:IDBRequest', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBOpenDBRequest', fn='removeEventListener', demands=['IDBOpenDBRequest', 'K', '(this:IDBRequest', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBRequest', fn='removeEventListener', demands=['IDBRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='removeEventListener', demands=['IDBTransaction', 'K', '(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='removeEventListener', demands=['IDBTransaction', 'K', '(this:IDBTransaction,ev:IDBTransactionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='IDBTransaction', fn='removeEventListener', demands=['IDBTransaction', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='removeEventListener', demands=['MIDIAccess', 'K', '(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='removeEventListener', demands=['MIDIAccess', 'K', '(this:MIDIAccess,ev:MIDIAccessEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIAccess', fn='removeEventListener', demands=['MIDIAccess', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'K', '(this:MIDIInput,ev:MIDIInputEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'K', '(this:MIDIInput,ev:MIDIInputEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'K', '(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'K', '(this:MIDIOutput,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='removeEventListener', demands=['MIDIPort', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='removeEventListener', demands=['MIDIPort', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='removeEventListener', demands=['MIDIOutput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIInput', fn='removeEventListener', demands=['MIDIInput', 'K', '(this:MIDIPort,ev:MIDIPortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='removeEventListener', demands=['MIDIPort', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:MathMLElement,ev:MathMLElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='removeEventListener', demands=['MathMLElement', 'K', '(this:MathMLElement,ev:MathMLElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='removeEventListener', demands=['MediaDevices', 'K', '(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='removeEventListener', demands=['MediaDevices', 'K', '(this:MediaDevices,ev:MediaDevicesEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaDevices', fn='removeEventListener', demands=['MediaDevices', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='removeEventListener', demands=['MediaKeySession', 'K', '(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='removeEventListener', demands=['MediaKeySession', 'K', '(this:MediaKeySession,ev:MediaKeySessionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='removeEventListener', demands=['MediaKeySession', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='removeEventListener', demands=['MediaQueryList', 'K', '(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='removeEventListener', demands=['MediaQueryList', 'K', '(this:MediaQueryList,ev:MediaQueryListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaQueryList', fn='removeEventListener', demands=['MediaQueryList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='removeEventListener', demands=['MediaRecorder', 'K', '(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='removeEventListener', demands=['MediaRecorder', 'K', '(this:MediaRecorder,ev:MediaRecorderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='removeEventListener', demands=['MediaRecorder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='removeEventListener', demands=['MediaSource', 'K', '(this:MediaSource,ev:MediaSourceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='removeEventListener', demands=['MediaSource', 'K', '(this:MediaSource,ev:MediaSourceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='removeEventListener', demands=['MediaSource', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='removeEventListener', demands=['MediaStream', 'K', '(this:MediaStream,ev:MediaStreamEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='removeEventListener', demands=['MediaStream', 'K', '(this:MediaStream,ev:MediaStreamEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStream', fn='removeEventListener', demands=['MediaStream', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='removeEventListener', demands=['MediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='removeEventListener', demands=['MediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='removeEventListener', demands=['CanvasCaptureMediaStreamTrack', 'K', '(this:MediaStreamTrack,ev:MediaStreamTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='removeEventListener', demands=['MediaStreamTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'K', '(this:T,ev:MessageEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'K', '(this:MessagePort,ev:MessagePortEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='removeEventListener', demands=['MessagePort', 'K', '(this:MessagePort,ev:MessagePortEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='removeEventListener', demands=['NavigationHistoryEntry', 'K', '(this:NavigationHistoryEntry,ev:NavigationHistoryEntryEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='removeEventListener', demands=['NavigationHistoryEntry', 'K', '(this:NavigationHistoryEntry,ev:NavigationHistoryEntryEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='removeEventListener', demands=['NavigationHistoryEntry', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Notification', fn='removeEventListener', demands=['Notification', 'K', '(this:Notification,ev:NotificationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Notification', fn='removeEventListener', demands=['Notification', 'K', '(this:Notification,ev:NotificationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Notification', fn='removeEventListener', demands=['Notification', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'K', '(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='removeEventListener', demands=['OfflineAudioContext', 'K', '(this:OfflineAudioContext,ev:OfflineAudioContextEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='removeEventListener', demands=['OffscreenCanvas', 'K', '(this:OffscreenCanvas,ev:OffscreenCanvasEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='removeEventListener', demands=['OffscreenCanvas', 'K', '(this:OffscreenCanvas,ev:OffscreenCanvasEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvas', fn='removeEventListener', demands=['OffscreenCanvas', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'K', '(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='removeEventListener', demands=['OscillatorNode', 'K', '(this:OscillatorNode,ev:AudioScheduledSourceNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='removeEventListener', demands=['PaymentRequest', 'K', '(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='removeEventListener', demands=['PaymentRequest', 'K', '(this:PaymentRequest,ev:PaymentRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='removeEventListener', demands=['PaymentRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='removeEventListener', demands=['PaymentResponse', 'K', '(this:PaymentResponse,ev:PaymentResponseEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='removeEventListener', demands=['PaymentResponse', 'K', '(this:PaymentResponse,ev:PaymentResponseEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='removeEventListener', demands=['PaymentResponse', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='Performance', fn='removeEventListener', demands=['Performance', 'K', '(this:Performance,ev:PerformanceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Performance', fn='removeEventListener', demands=['Performance', 'K', '(this:Performance,ev:PerformanceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Performance', fn='removeEventListener', demands=['Performance', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='removeEventListener', demands=['PermissionStatus', 'K', '(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='removeEventListener', demands=['PermissionStatus', 'K', '(this:PermissionStatus,ev:PermissionStatusEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PermissionStatus', fn='removeEventListener', demands=['PermissionStatus', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='removeEventListener', demands=['PictureInPictureWindow', 'K', '(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='removeEventListener', demands=['PictureInPictureWindow', 'K', '(this:PictureInPictureWindow,ev:PictureInPictureWindowEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='PictureInPictureWindow', fn='removeEventListener', demands=['PictureInPictureWindow', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='removeEventListener', demands=['RTCDTMFSender', 'K', '(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='removeEventListener', demands=['RTCDTMFSender', 'K', '(this:RTCDTMFSender,ev:RTCDTMFSenderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='removeEventListener', demands=['RTCDTMFSender', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='removeEventListener', demands=['RTCDataChannel', 'K', '(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='removeEventListener', demands=['RTCDataChannel', 'K', '(this:RTCDataChannel,ev:RTCDataChannelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='removeEventListener', demands=['RTCDataChannel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='removeEventListener', demands=['RTCDtlsTransport', 'K', '(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='removeEventListener', demands=['RTCDtlsTransport', 'K', '(this:RTCDtlsTransport,ev:RTCDtlsTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCDtlsTransport', fn='removeEventListener', demands=['RTCDtlsTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='removeEventListener', demands=['RTCIceTransport', 'K', '(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='removeEventListener', demands=['RTCIceTransport', 'K', '(this:RTCIceTransport,ev:RTCIceTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCIceTransport', fn='removeEventListener', demands=['RTCIceTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeEventListener', demands=['RTCPeerConnection', 'K', '(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeEventListener', demands=['RTCPeerConnection', 'K', '(this:RTCPeerConnection,ev:RTCPeerConnectionEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeEventListener', demands=['RTCPeerConnection', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='removeEventListener', demands=['RTCSctpTransport', 'K', '(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='removeEventListener', demands=['RTCSctpTransport', 'K', '(this:RTCSctpTransport,ev:RTCSctpTransportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RTCSctpTransport', fn='removeEventListener', demands=['RTCSctpTransport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='removeEventListener', demands=['RemotePlayback', 'K', '(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='removeEventListener', demands=['RemotePlayback', 'K', '(this:RemotePlayback,ev:RemotePlaybackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='removeEventListener', demands=['RemotePlayback', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'K', '(this:SVGAElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'K', '(this:SVGAElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimateElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimateMotionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimateTransformElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateElement', fn='removeEventListener', demands=['SVGAnimateElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateTransformElement', fn='removeEventListener', demands=['SVGAnimateTransformElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimateMotionElement', fn='removeEventListener', demands=['SVGAnimateMotionElement', 'K', '(this:SVGAnimationElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'K', '(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'K', '(this:SVGCircleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGClipPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGComponentTransferFunctionElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'K', '(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'K', '(this:SVGDefsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'K', '(this:SVGDescElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'K', '(this:SVGDescElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='removeEventListener', demands=['SVGElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGComponentTransferFunctionElement', fn='removeEventListener', demands=['SVGComponentTransferFunctionElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGClipPathElement', fn='removeEventListener', demands=['SVGClipPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAnimationElement', fn='removeEventListener', demands=['SVGAnimationElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDescElement', fn='removeEventListener', demands=['SVGDescElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGEllipseElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEBlendElement', fn='removeEventListener', demands=['SVGFEBlendElement', 'K', '(this:SVGFEBlendElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEColorMatrixElement', fn='removeEventListener', demands=['SVGFEColorMatrixElement', 'K', '(this:SVGFEColorMatrixElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEComponentTransferElement', fn='removeEventListener', demands=['SVGFEComponentTransferElement', 'K', '(this:SVGFEComponentTransferElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFECompositeElement', fn='removeEventListener', demands=['SVGFECompositeElement', 'K', '(this:SVGFECompositeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEConvolveMatrixElement', fn='removeEventListener', demands=['SVGFEConvolveMatrixElement', 'K', '(this:SVGFEConvolveMatrixElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDiffuseLightingElement', fn='removeEventListener', demands=['SVGFEDiffuseLightingElement', 'K', '(this:SVGFEDiffuseLightingElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDisplacementMapElement', fn='removeEventListener', demands=['SVGFEDisplacementMapElement', 'K', '(this:SVGFEDisplacementMapElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDistantLightElement', fn='removeEventListener', demands=['SVGFEDistantLightElement', 'K', '(this:SVGFEDistantLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='removeEventListener', demands=['SVGFEDropShadowElement', 'K', '(this:SVGFEDropShadowElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFloodElement', fn='removeEventListener', demands=['SVGFEFloodElement', 'K', '(this:SVGFEFloodElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncAElement', fn='removeEventListener', demands=['SVGFEFuncAElement', 'K', '(this:SVGFEFuncAElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncBElement', fn='removeEventListener', demands=['SVGFEFuncBElement', 'K', '(this:SVGFEFuncBElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncGElement', fn='removeEventListener', demands=['SVGFEFuncGElement', 'K', '(this:SVGFEFuncGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEFuncRElement', fn='removeEventListener', demands=['SVGFEFuncRElement', 'K', '(this:SVGFEFuncRElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='removeEventListener', demands=['SVGFEGaussianBlurElement', 'K', '(this:SVGFEGaussianBlurElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEImageElement', fn='removeEventListener', demands=['SVGFEImageElement', 'K', '(this:SVGFEImageElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeElement', fn='removeEventListener', demands=['SVGFEMergeElement', 'K', '(this:SVGFEMergeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMergeNodeElement', fn='removeEventListener', demands=['SVGFEMergeNodeElement', 'K', '(this:SVGFEMergeNodeElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEMorphologyElement', fn='removeEventListener', demands=['SVGFEMorphologyElement', 'K', '(this:SVGFEMorphologyElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEOffsetElement', fn='removeEventListener', demands=['SVGFEOffsetElement', 'K', '(this:SVGFEOffsetElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFEPointLightElement', fn='removeEventListener', demands=['SVGFEPointLightElement', 'K', '(this:SVGFEPointLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpecularLightingElement', fn='removeEventListener', demands=['SVGFESpecularLightingElement', 'K', '(this:SVGFESpecularLightingElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFESpotLightElement', fn='removeEventListener', demands=['SVGFESpotLightElement', 'K', '(this:SVGFESpotLightElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'K', '(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETileElement', fn='removeEventListener', demands=['SVGFETileElement', 'K', '(this:SVGFETileElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFETurbulenceElement', fn='removeEventListener', demands=['SVGFETurbulenceElement', 'K', '(this:SVGFETurbulenceElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'K', '(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGFilterElement', fn='removeEventListener', demands=['SVGFilterElement', 'K', '(this:SVGFilterElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGForeignObjectElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'K', '(this:SVGGElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'K', '(this:SVGGElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGEllipseElement', fn='removeEventListener', demands=['SVGEllipseElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGCircleElement', fn='removeEventListener', demands=['SVGCircleElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'K', '(this:SVGGeometryElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGradientElement', fn='removeEventListener', demands=['SVGGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='removeEventListener', demands=['SVGGraphicsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGForeignObjectElement', fn='removeEventListener', demands=['SVGForeignObjectElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGElement', fn='removeEventListener', demands=['SVGGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGGeometryElement', fn='removeEventListener', demands=['SVGGeometryElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGAElement', fn='removeEventListener', demands=['SVGAElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGDefsElement', fn='removeEventListener', demands=['SVGDefsElement', 'K', '(this:SVGGraphicsElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'K', '(this:SVGImageElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGImageElement', fn='removeEventListener', demands=['SVGImageElement', 'K', '(this:SVGImageElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'K', '(this:SVGLineElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLineElement', fn='removeEventListener', demands=['SVGLineElement', 'K', '(this:SVGLineElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGLinearGradientElement', fn='removeEventListener', demands=['SVGLinearGradientElement', 'K', '(this:SVGLinearGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'K', '(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMPathElement', fn='removeEventListener', demands=['SVGMPathElement', 'K', '(this:SVGMPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMarkerElement', fn='removeEventListener', demands=['SVGMarkerElement', 'K', '(this:SVGMarkerElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'K', '(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMaskElement', fn='removeEventListener', demands=['SVGMaskElement', 'K', '(this:SVGMaskElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGMetadataElement', fn='removeEventListener', demands=['SVGMetadataElement', 'K', '(this:SVGMetadataElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'K', '(this:SVGPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPathElement', fn='removeEventListener', demands=['SVGPathElement', 'K', '(this:SVGPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'K', '(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPatternElement', fn='removeEventListener', demands=['SVGPatternElement', 'K', '(this:SVGPatternElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolygonElement', fn='removeEventListener', demands=['SVGPolygonElement', 'K', '(this:SVGPolygonElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGPolylineElement', fn='removeEventListener', demands=['SVGPolylineElement', 'K', '(this:SVGPolylineElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRadialGradientElement', fn='removeEventListener', demands=['SVGRadialGradientElement', 'K', '(this:SVGRadialGradientElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'K', '(this:SVGRectElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGRectElement', fn='removeEventListener', demands=['SVGRectElement', 'K', '(this:SVGRectElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:SVGSVGElement,ev:SVGSVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'K', '(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGScriptElement', fn='removeEventListener', demands=['SVGScriptElement', 'K', '(this:SVGScriptElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'K', '(this:SVGSetElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSetElement', fn='removeEventListener', demands=['SVGSetElement', 'K', '(this:SVGSetElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'K', '(this:SVGStopElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStopElement', fn='removeEventListener', demands=['SVGStopElement', 'K', '(this:SVGStopElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'K', '(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGStyleElement', fn='removeEventListener', demands=['SVGStyleElement', 'K', '(this:SVGStyleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSwitchElement', fn='removeEventListener', demands=['SVGSwitchElement', 'K', '(this:SVGSwitchElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSymbolElement', fn='removeEventListener', demands=['SVGSymbolElement', 'K', '(this:SVGSymbolElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTSpanElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextContentElement', fn='removeEventListener', demands=['SVGTextContentElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextContentElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='removeEventListener', demands=['SVGTextPathElement', 'K', '(this:SVGTextPathElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='removeEventListener', demands=['SVGTextPositioningElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTSpanElement', fn='removeEventListener', demands=['SVGTSpanElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTextElement', fn='removeEventListener', demands=['SVGTextElement', 'K', '(this:SVGTextPositioningElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'K', '(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGTitleElement', fn='removeEventListener', demands=['SVGTitleElement', 'K', '(this:SVGTitleElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'K', '(this:SVGUseElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGUseElement', fn='removeEventListener', demands=['SVGUseElement', 'K', '(this:SVGUseElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'K', '(this:SVGViewElement,ev:SVGElementEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGViewElement', fn='removeEventListener', demands=['SVGViewElement', 'K', '(this:SVGViewElement,ev:SVGElementEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='removeEventListener', demands=['ScreenOrientation', 'K', '(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='removeEventListener', demands=['ScreenOrientation', 'K', '(this:ScreenOrientation,ev:ScreenOrientationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='removeEventListener', demands=['ScreenOrientation', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='removeEventListener', demands=['ScriptProcessorNode', 'K', '(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='removeEventListener', demands=['ScriptProcessorNode', 'K', '(this:ScriptProcessorNode,ev:ScriptProcessorNodeEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='removeEventListener', demands=['ScriptProcessorNode', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ScriptProcessorNode', fn='removeEventListener', demands=['ScriptProcessorNode', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'K', '(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='removeEventListener', demands=['ServiceWorker', 'K', '(this:ServiceWorker,ev:ServiceWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='removeEventListener', demands=['ServiceWorkerContainer', 'K', '(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='removeEventListener', demands=['ServiceWorkerContainer', 'K', '(this:ServiceWorkerContainer,ev:ServiceWorkerContainerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='removeEventListener', demands=['ServiceWorkerContainer', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='removeEventListener', demands=['ServiceWorkerRegistration', 'K', '(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='removeEventListener', demands=['ServiceWorkerRegistration', 'K', '(this:ServiceWorkerRegistration,ev:ServiceWorkerRegistrationEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='removeEventListener', demands=['ServiceWorkerRegistration', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='removeEventListener', demands=['ShadowRoot', 'K', '(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='removeEventListener', demands=['ShadowRoot', 'K', '(this:ShadowRoot,ev:ShadowRootEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='removeEventListener', demands=['ShadowRoot', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='removeEventListener', demands=['ShadowRoot', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'K', '(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SharedWorker', fn='removeEventListener', demands=['SharedWorker', 'K', '(this:SharedWorker,ev:AbstractWorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='removeEventListener', demands=['SourceBuffer', 'K', '(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='removeEventListener', demands=['SourceBuffer', 'K', '(this:SourceBuffer,ev:SourceBufferEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='removeEventListener', demands=['SourceBuffer', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='removeEventListener', demands=['SourceBufferList', 'K', '(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='removeEventListener', demands=['SourceBufferList', 'K', '(this:SourceBufferList,ev:SourceBufferListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SourceBufferList', fn='removeEventListener', demands=['SourceBufferList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='removeEventListener', demands=['SpeechSynthesis', 'K', '(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='removeEventListener', demands=['SpeechSynthesis', 'K', '(this:SpeechSynthesis,ev:SpeechSynthesisEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='removeEventListener', demands=['SpeechSynthesis', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='removeEventListener', demands=['SpeechSynthesisUtterance', 'K', '(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='removeEventListener', demands=['SpeechSynthesisUtterance', 'K', '(this:SpeechSynthesisUtterance,ev:SpeechSynthesisUtteranceEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisUtterance', fn='removeEventListener', demands=['SpeechSynthesisUtterance', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='removeEventListener', demands=['TextTrack', 'K', '(this:TextTrack,ev:TextTrackEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='removeEventListener', demands=['TextTrack', 'K', '(this:TextTrack,ev:TextTrackEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrack', fn='removeEventListener', demands=['TextTrack', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='removeEventListener', demands=['TextTrackCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='removeEventListener', demands=['TextTrackCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'K', '(this:TextTrackCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='TextTrackCue', fn='removeEventListener', demands=['TextTrackCue', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='removeEventListener', demands=['TextTrackList', 'K', '(this:TextTrackList,ev:TextTrackListEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='removeEventListener', demands=['TextTrackList', 'K', '(this:TextTrackList,ev:TextTrackListEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='TextTrackList', fn='removeEventListener', demands=['TextTrackList', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'K', '(this:VTTCue,ev:TextTrackCueEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VTTCue', fn='removeEventListener', demands=['VTTCue', 'K', '(this:VTTCue,ev:TextTrackCueEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='removeEventListener', demands=['VideoDecoder', 'K', '(this:VideoDecoder,ev:VideoDecoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='removeEventListener', demands=['VideoDecoder', 'K', '(this:VideoDecoder,ev:VideoDecoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='removeEventListener', demands=['VideoDecoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='removeEventListener', demands=['VideoEncoder', 'K', '(this:VideoEncoder,ev:VideoEncoderEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='removeEventListener', demands=['VideoEncoder', 'K', '(this:VideoEncoder,ev:VideoEncoderEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='removeEventListener', demands=['VideoEncoder', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='removeEventListener', demands=['VisualViewport', 'K', '(this:VisualViewport,ev:VisualViewportEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='removeEventListener', demands=['VisualViewport', 'K', '(this:VisualViewport,ev:VisualViewportEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='VisualViewport', fn='removeEventListener', demands=['VisualViewport', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='removeEventListener', demands=['WakeLockSentinel', 'K', '(this:WakeLockSentinel,ev:WakeLockSentinelEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='removeEventListener', demands=['WakeLockSentinel', 'K', '(this:WakeLockSentinel,ev:WakeLockSentinelEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='WakeLockSentinel', fn='removeEventListener', demands=['WakeLockSentinel', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='removeEventListener', demands=['WebSocket', 'K', '(this:WebSocket,ev:WebSocketEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='removeEventListener', demands=['WebSocket', 'K', '(this:WebSocket,ev:WebSocketEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='removeEventListener', demands=['WebSocket', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K])=>any'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K])=>any', 'bool'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['str', 'EventListenerOrEventListenerObject'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='removeEventListener', demands=['HTMLFrameSetElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Window', fn='removeEventListener', demands=['Window', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='removeEventListener', demands=['HTMLBodyElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGSVGElement', fn='removeEventListener', demands=['SVGSVGElement', 'K', '(this:WindowEventHandlers,ev:WindowEventHandlersEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:Worker,ev:WorkerEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='Worker', fn='removeEventListener', demands=['Worker', 'K', '(this:Worker,ev:WorkerEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'K', '(this:XMLDocument,ev:DocumentEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='removeEventListener', demands=['XMLDocument', 'K', '(this:XMLDocument,ev:DocumentEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequest,ev:XMLHttpRequestEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='removeEventListener', demands=['XMLHttpRequestEventTarget', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='removeEventListener', demands=['XMLHttpRequestEventTarget', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='removeEventListener', demands=['XMLHttpRequest', 'K', '(this:XMLHttpRequestEventTarget,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'str', 'EventListenerOrEventListenerObject'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestEventTarget', fn='removeEventListener', demands=['XMLHttpRequestEventTarget', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'str', 'EventListenerOrEventListenerObject', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequestUpload', fn='removeEventListener', demands=['XMLHttpRequestUpload', 'K', '(this:XMLHttpRequestUpload,ev:XMLHttpRequestEventTargetEventMap[K])=>any', 'bool'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K],)=>any'], returns='None'),
        DirectCall(fn='removeEventListener', receiver=None, demands=['K', '(this:Window,ev:WindowEventMap[K],)=>any', 'bool'], returns='None'),
    ],
    "removeItem": [
        PrototypeCall(constructor='SVGLengthList', fn='removeItem', demands=['SVGLengthList', 'float'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='removeItem', demands=['SVGNumberList', 'float'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='removeItem', demands=['SVGPointList', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='removeItem', demands=['SVGStringList', 'float'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='removeItem', demands=['SVGTransformList', 'float'], returns='SVGTransform'),
        PrototypeCall(constructor='Storage', fn='removeItem', demands=['Storage', 'str'], returns='None'),
    ],
    "removeListener": [
        PrototypeCall(constructor='MediaQueryList', fn='removeListener', demands=['MediaQueryList', '((this:MediaQueryList,ev:MediaQueryListEvent)=>any)'], returns='None'),
    ],
    "removeNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='removeNamedItem', demands=['NamedNodeMap', 'str'], returns='Attr'),
    ],
    "removeNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='removeNamedItemNS', demands=['NamedNodeMap', 'str', 'str'], returns='Attr'),
    ],
    "removeParameter": [
        PrototypeCall(constructor='XSLTProcessor', fn='removeParameter', demands=['XSLTProcessor', 'str', 'str'], returns='None'),
    ],
    "removeProperty": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='removeProperty', demands=['CSSStyleDeclaration', 'str'], returns='str'),
    ],
    "removeRange": [
        PrototypeCall(constructor='Selection', fn='removeRange', demands=['Selection', 'Range'], returns='None'),
    ],
    "removeRule": [
        PrototypeCall(constructor='CSSStyleSheet', fn='removeRule', demands=['CSSStyleSheet'], returns='None'),
        PrototypeCall(constructor='CSSStyleSheet', fn='removeRule', demands=['CSSStyleSheet', 'float'], returns='None'),
    ],
    "removeSourceBuffer": [
        PrototypeCall(constructor='MediaSource', fn='removeSourceBuffer', demands=['MediaSource', 'SourceBuffer'], returns='None'),
    ],
    "removeTrack": [
        PrototypeCall(constructor='MediaStream', fn='removeTrack', demands=['MediaStream', 'MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='removeTrack', demands=['RTCPeerConnection', 'RTCRtpSender'], returns='None'),
    ],
    "removedNodes": [
        FieldCall(field='removedNodes', demands=['MutationRecord'], returns='NodeList'),
    ],
    "removedSamplesForAcceleration": [
        FieldCall(field='removedSamplesForAcceleration', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='removedSamplesForAcceleration', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "removesourcebuffer": [
        FieldCall(field='removesourcebuffer', demands=['SourceBufferListEventMap'], returns='Event'),
        FieldCall(field='removesourcebuffer', demands=['SourceBufferListEventMap', 'Event'], returns='None'),
    ],
    "removetrack": [
        FieldCall(field='removetrack', demands=['MediaStreamEventMap'], returns='MediaStreamTrackEvent'),
        FieldCall(field='removetrack', demands=['MediaStreamEventMap', 'MediaStreamTrackEvent'], returns='None'),
        FieldCall(field='removetrack', demands=['TextTrackListEventMap'], returns='TrackEvent'),
        FieldCall(field='removetrack', demands=['TextTrackListEventMap', 'TrackEvent'], returns='None'),
    ],
    "renderTime": [
        FieldCall(field='renderTime', demands=['LargestContentfulPaint'], returns='DOMHighResTimeStamp'),
    ],
    "renderbufferStorage": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='renderbufferStorage', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='renderbufferStorage', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "renderbufferStorageMultisample": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='renderbufferStorageMultisample', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "renderedBuffer": [
        FieldCall(field='renderedBuffer', demands=['OfflineAudioCompletionEventInit'], returns='AudioBuffer'),
        FieldCall(field='renderedBuffer', demands=['OfflineAudioCompletionEventInit', 'AudioBuffer'], returns='None'),
        FieldCall(field='renderedBuffer', demands=['OfflineAudioCompletionEvent'], returns='AudioBuffer'),
    ],
    "repeat": [
        FieldCall(field='repeat', demands=['KeyboardEventInit'], returns='bool'),
        FieldCall(field='repeat', demands=['KeyboardEventInit', 'bool'], returns='None'),
        FieldCall(field='repeat', demands=['KeyboardEvent'], returns='bool'),
        PrototypeCall(constructor='String', fn='repeat', demands=['str', 'float'], returns='str'),
    ],
    "repetitionCount": [
        FieldCall(field='repetitionCount', demands=['ImageTrack'], returns='float'),
    ],
    "replace": [
        PrototypeCall(constructor='CSSStyleSheet', fn='replace', demands=['CSSStyleSheet', 'str'], returns='CSSStyleSheet'),
        PrototypeCall(constructor='DOMTokenList', fn='replace', demands=['DOMTokenList', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='Location', fn='replace', demands=['Location', 'str'], returns='None'),
        FieldCall(field='replace', demands=['SymbolConstructor'], returns='uniquesymbol'),
        PrototypeCall(constructor='String', fn='replace', demands=['str', '{[Symbol.replace](string:string,replaceValue:string):string;}', 'str'], returns='str'),
        PrototypeCall(constructor='String', fn='replace', demands=['str', '{[Symbol.replace](string:string,replacer:(substring:string,...args:any[])=>string):string;}', '(substring:string,...args:any[])=>string'], returns='str'),
        PrototypeCall(constructor='String', fn='replace', demands=['str', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='String', fn='replace', demands=['str', 'str', '(substring:string,...args:any[])=>string'], returns='str'),
    ],
    "replaceAll": [
        PrototypeCall(constructor='String', fn='replaceAll', demands=['str', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='String', fn='replaceAll', demands=['str', 'str', '(substring:string,...args:any[])=>string'], returns='str'),
    ],
    "replaceChild": [
        PrototypeCall(constructor='Node', fn='replaceChild', demands=['Node', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentType', fn='replaceChild', demands=['DocumentType', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='CharacterData', fn='replaceChild', demands=['CharacterData', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='Element', fn='replaceChild', demands=['Element', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='Attr', fn='replaceChild', demands=['Attr', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='Document', fn='replaceChild', demands=['Document', 'Node', 'T'], returns='T'),
        PrototypeCall(constructor='DocumentFragment', fn='replaceChild', demands=['DocumentFragment', 'Node', 'T'], returns='T'),
    ],
    "replaceChildren": [
        PrototypeCall(constructor='Element', fn='replaceChildren', demands=['Element', '*'], returns='None'),
        PrototypeCall(constructor='Document', fn='replaceChildren', demands=['Document', '*'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='replaceChildren', demands=['DocumentFragment', '*'], returns='None'),
    ],
    "replaceData": [
        PrototypeCall(constructor='CharacterData', fn='replaceData', demands=['CharacterData', 'float', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='Text', fn='replaceData', demands=['Text', 'float', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='ProcessingInstruction', fn='replaceData', demands=['ProcessingInstruction', 'float', 'float', 'str'], returns='None'),
        PrototypeCall(constructor='Comment', fn='replaceData', demands=['Comment', 'float', 'float', 'str'], returns='None'),
    ],
    "replaceItem": [
        PrototypeCall(constructor='SVGLengthList', fn='replaceItem', demands=['SVGLengthList', 'SVGLength', 'float'], returns='SVGLength'),
        PrototypeCall(constructor='SVGNumberList', fn='replaceItem', demands=['SVGNumberList', 'SVGNumber', 'float'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGPointList', fn='replaceItem', demands=['SVGPointList', 'DOMPoint', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGStringList', fn='replaceItem', demands=['SVGStringList', 'str', 'float'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='replaceItem', demands=['SVGTransformList', 'SVGTransform', 'float'], returns='SVGTransform'),
    ],
    "replaceState": [
        FieldCall(field='replaceState', demands=['Animation'], returns='AnimationReplaceState'),
        PrototypeCall(constructor='History', fn='replaceState', demands=['History', '*', 'str'], returns='None'),
        PrototypeCall(constructor='History', fn='replaceState', demands=['History', '*', 'str', 'str'], returns='None'),
    ],
    "replaceSync": [
        PrototypeCall(constructor='CSSStyleSheet', fn='replaceSync', demands=['CSSStyleSheet', 'str'], returns='None'),
    ],
    "replaceTrack": [
        PrototypeCall(constructor='RTCRtpSender', fn='replaceTrack', demands=['RTCRtpSender', 'MediaStreamTrack'], returns='None'),
    ],
    "replaceWith": [
        PrototypeCall(constructor='DocumentType', fn='replaceWith', demands=['DocumentType', '*'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='replaceWith', demands=['CharacterData', '*'], returns='None'),
        PrototypeCall(constructor='Element', fn='replaceWith', demands=['Element', '*'], returns='None'),
    ],
    "reportError": [
        DirectCall(fn='reportError', receiver=None, demands=['*'], returns='None'),
    ],
    "reportValidity": [
        PrototypeCall(constructor='ElementInternals', fn='reportValidity', demands=['ElementInternals'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='reportValidity', demands=['HTMLButtonElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='reportValidity', demands=['HTMLFieldSetElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='reportValidity', demands=['HTMLFormElement'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='reportValidity', demands=['HTMLInputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLObjectElement', fn='reportValidity', demands=['HTMLObjectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='reportValidity', demands=['HTMLOutputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='reportValidity', demands=['HTMLSelectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='reportValidity', demands=['HTMLTextAreaElement'], returns='bool'),
    ],
    "request": [
        FieldCall(field='request', demands=['IDBCursor'], returns='IDBRequest'),
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'LockGrantedCallback'], returns='T'),
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'LockOptions', 'LockGrantedCallback'], returns='T'),
        PrototypeCall(constructor='WakeLock', fn='request', demands=['WakeLock'], returns='WakeLockSentinel'),
        PrototypeCall(constructor='WakeLock', fn='request', demands=['WakeLock', 'WakeLockType'], returns='WakeLockSentinel'),
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'LockGrantedCallback'], returns='*'),
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'LockOptions', 'LockGrantedCallback'], returns='*'),
    ],
    "requestAnimationFrame": [
        PrototypeCall(constructor='Window', fn='requestAnimationFrame', demands=['Window', 'FrameRequestCallback'], returns='float'),
    ],
    "requestClose": [
        PrototypeCall(constructor='HTMLDialogElement', fn='requestClose', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='requestClose', demands=['HTMLDialogElement', 'str'], returns='None'),
    ],
    "requestData": [
        PrototypeCall(constructor='MediaRecorder', fn='requestData', demands=['MediaRecorder'], returns='None'),
    ],
    "requestFrame": [
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='requestFrame', demands=['CanvasCaptureMediaStreamTrack'], returns='None'),
    ],
    "requestFullscreen": [
        PrototypeCall(constructor='Element', fn='requestFullscreen', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='requestFullscreen', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='requestFullscreen', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='requestFullscreen', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='requestFullscreen', demands=['Element', 'FullscreenOptions'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='requestFullscreen', demands=['MathMLElement', 'FullscreenOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='requestFullscreen', demands=['SVGElement', 'FullscreenOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='requestFullscreen', demands=['HTMLElement', 'FullscreenOptions'], returns='None'),
    ],
    "requestId": [
        FieldCall(field='requestId', demands=['PaymentResponse'], returns='str'),
    ],
    "requestIdleCallback": [
        DirectCall(fn='requestIdleCallback', receiver=None, demands=['IdleRequestCallback'], returns='float'),
        DirectCall(fn='requestIdleCallback', receiver=None, demands=['IdleRequestCallback', 'IdleRequestOptions'], returns='float'),
    ],
    "requestMIDIAccess": [
        PrototypeCall(constructor='Navigator', fn='requestMIDIAccess', demands=['Navigator'], returns='MIDIAccess'),
        PrototypeCall(constructor='Navigator', fn='requestMIDIAccess', demands=['Navigator', 'MIDIOptions'], returns='MIDIAccess'),
    ],
    "requestMediaKeySystemAccess": [
        PrototypeCall(constructor='Navigator', fn='requestMediaKeySystemAccess', demands=['Navigator', 'str', 'list'], returns='MediaKeySystemAccess'),
        PrototypeCall(constructor='Navigator', fn='requestMediaKeySystemAccess', demands=['Navigator', 'str', 'Iterable'], returns='MediaKeySystemAccess'),
    ],
    "requestPayerEmail": [
        FieldCall(field='requestPayerEmail', demands=['PaymentOptions'], returns='bool'),
        FieldCall(field='requestPayerEmail', demands=['PaymentOptions', 'bool'], returns='None'),
    ],
    "requestPayerName": [
        FieldCall(field='requestPayerName', demands=['PaymentOptions'], returns='bool'),
        FieldCall(field='requestPayerName', demands=['PaymentOptions', 'bool'], returns='None'),
    ],
    "requestPayerPhone": [
        FieldCall(field='requestPayerPhone', demands=['PaymentOptions'], returns='bool'),
        FieldCall(field='requestPayerPhone', demands=['PaymentOptions', 'bool'], returns='None'),
    ],
    "requestPictureInPicture": [
        PrototypeCall(constructor='HTMLVideoElement', fn='requestPictureInPicture', demands=['HTMLVideoElement'], returns='PictureInPictureWindow'),
    ],
    "requestPointerLock": [
        PrototypeCall(constructor='Element', fn='requestPointerLock', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='requestPointerLock', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='requestPointerLock', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='requestPointerLock', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='requestPointerLock', demands=['Element', 'PointerLockOptions'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='requestPointerLock', demands=['MathMLElement', 'PointerLockOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='requestPointerLock', demands=['SVGElement', 'PointerLockOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='requestPointerLock', demands=['HTMLElement', 'PointerLockOptions'], returns='None'),
    ],
    "requestShipping": [
        FieldCall(field='requestShipping', demands=['PaymentOptions'], returns='bool'),
        FieldCall(field='requestShipping', demands=['PaymentOptions', 'bool'], returns='None'),
    ],
    "requestStart": [
        FieldCall(field='requestStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='requestStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "requestStorageAccess": [
        PrototypeCall(constructor='Document', fn='requestStorageAccess', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='requestStorageAccess', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='requestStorageAccess', demands=['XMLDocument'], returns='None'),
    ],
    "requestSubmit": [
        PrototypeCall(constructor='HTMLFormElement', fn='requestSubmit', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='requestSubmit', demands=['HTMLFormElement', 'HTMLElement'], returns='None'),
    ],
    "requestVideoFrameCallback": [
        PrototypeCall(constructor='HTMLVideoElement', fn='requestVideoFrameCallback', demands=['HTMLVideoElement', 'VideoFrameRequestCallback'], returns='float'),
    ],
    "requestsReceived": [
        FieldCall(field='requestsReceived', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='requestsReceived', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "requestsSent": [
        FieldCall(field='requestsSent', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='requestsSent', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "requireInteraction": [
        FieldCall(field='requireInteraction', demands=['NotificationOptions'], returns='bool'),
        FieldCall(field='requireInteraction', demands=['NotificationOptions', 'bool'], returns='None'),
        FieldCall(field='requireInteraction', demands=['Notification'], returns='bool'),
    ],
    "requireResidentKey": [
        FieldCall(field='requireResidentKey', demands=['AuthenticatorSelectionCriteria'], returns='bool'),
        FieldCall(field='requireResidentKey', demands=['AuthenticatorSelectionCriteria', 'bool'], returns='None'),
    ],
    "requireUnreliable": [
        FieldCall(field='requireUnreliable', demands=['WebTransportOptions'], returns='bool'),
        FieldCall(field='requireUnreliable', demands=['WebTransportOptions', 'bool'], returns='None'),
    ],
    "required": [
        FieldCall(field='required', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLInputElement', 'bool'], returns='None'),
        FieldCall(field='required', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLSelectElement', 'bool'], returns='None'),
        FieldCall(field='required', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLTextAreaElement', 'bool'], returns='None'),
    ],
    "requiredExtensions": [
        FieldCall(field='requiredExtensions', demands=['SVGTests'], returns='SVGStringList'),
    ],
    "reset": [
        PrototypeCall(constructor='AudioDecoder', fn='reset', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='reset', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='reset', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='reset', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='GamepadHapticActuator', fn='reset', demands=['GamepadHapticActuator'], returns='GamepadHapticsResult'),
        FieldCall(field='reset', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='reset', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='reset', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='reset', demands=['ImageDecoder'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='reset', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='reset', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='XSLTProcessor', fn='reset', demands=['XSLTProcessor'], returns='None'),
    ],
    "resetTransform": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='resetTransform', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='resetTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
    ],
    "residentKey": [
        FieldCall(field='residentKey', demands=['AuthenticatorSelectionCriteria'], returns='ResidentKeyRequirement'),
        FieldCall(field='residentKey', demands=['AuthenticatorSelectionCriteria', 'ResidentKeyRequirement'], returns='None'),
    ],
    "resizable": [
        PrototypeCall(constructor='ArrayBuffer', fn='resizable', demands=['ArrayBuffer'], returns='bool'),
    ],
    "resize": [
        FieldCall(field='resize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='resize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='resize', demands=['GlobalEventHandlersEventMap'], returns='UIEvent'),
        FieldCall(field='resize', demands=['GlobalEventHandlersEventMap', 'UIEvent'], returns='None'),
        FieldCall(field='resize', demands=['PictureInPictureWindowEventMap'], returns='Event'),
        FieldCall(field='resize', demands=['PictureInPictureWindowEventMap', 'Event'], returns='None'),
        FieldCall(field='resize', demands=['VisualViewportEventMap'], returns='Event'),
        FieldCall(field='resize', demands=['VisualViewportEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='ArrayBuffer', fn='resize', demands=['ArrayBuffer'], returns='None'),
        PrototypeCall(constructor='ArrayBuffer', fn='resize', demands=['ArrayBuffer', 'float'], returns='None'),
    ],
    "resizeBy": [
        DirectCall(fn='resizeBy', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "resizeHeight": [
        FieldCall(field='resizeHeight', demands=['ImageBitmapOptions'], returns='float'),
        FieldCall(field='resizeHeight', demands=['ImageBitmapOptions', 'float'], returns='None'),
    ],
    "resizeQuality": [
        FieldCall(field='resizeQuality', demands=['ImageBitmapOptions'], returns='ResizeQuality'),
        FieldCall(field='resizeQuality', demands=['ImageBitmapOptions', 'ResizeQuality'], returns='None'),
    ],
    "resizeTo": [
        DirectCall(fn='resizeTo', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "resizeWidth": [
        FieldCall(field='resizeWidth', demands=['ImageBitmapOptions'], returns='float'),
        FieldCall(field='resizeWidth', demands=['ImageBitmapOptions', 'float'], returns='None'),
    ],
    "resolution": [
        FieldCall(field='resolution', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='resolution', demands=['CSSNumericType', 'float'], returns='None'),
    ],
    "resolve": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='resolve', demands=['FileSystemDirectoryHandle', 'FileSystemHandle'], returns='Promise<string[]'),
        PrototypeCall(constructor='ImportMeta', fn='resolve', demands=['ImportMeta', 'str'], returns='str'),
        FieldCall(field='resolve', demands=['PromiseWithResolvers'], returns='(value:T'),
        FieldCall(field='resolve', demands=['PromiseWithResolvers', '(value:T'], returns='None'),
        PrototypeCall(constructor='PromiseConstructor', fn='resolve', demands=['PromiseConstructor'], returns='None'),
        PrototypeCall(constructor='PromiseConstructor', fn='resolve', demands=['PromiseConstructor', 'T'], returns='Awaited'),
    ],
    "resource": [
        FieldCall(field='resource', demands=['GPUBindGroupEntry'], returns='GPUBindingResource'),
        FieldCall(field='resource', demands=['GPUBindGroupEntry', 'GPUBindingResource'], returns='None'),
    ],
    "resourcetimingbufferfull": [
        FieldCall(field='resourcetimingbufferfull', demands=['PerformanceEventMap'], returns='Event'),
        FieldCall(field='resourcetimingbufferfull', demands=['PerformanceEventMap', 'Event'], returns='None'),
    ],
    "respond": [
        PrototypeCall(constructor='ReadableStreamBYOBRequest', fn='respond', demands=['ReadableStreamBYOBRequest', 'float'], returns='None'),
    ],
    "respondWithNewView": [
        PrototypeCall(constructor='ReadableStreamBYOBRequest', fn='respondWithNewView', demands=['ReadableStreamBYOBRequest', 'ArrayBufferView'], returns='None'),
    ],
    "response": [
        FieldCall(field='response', demands=['PublicKeyCredential'], returns='AuthenticatorResponse'),
        FieldCall(field='response', demands=['XMLHttpRequest'], returns='*'),
    ],
    "responseEnd": [
        FieldCall(field='responseEnd', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='responseEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "responseStart": [
        FieldCall(field='responseStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='responseStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "responseStatus": [
        FieldCall(field='responseStatus', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "responseText": [
        FieldCall(field='responseText', demands=['XMLHttpRequest'], returns='str'),
    ],
    "responseType": [
        FieldCall(field='responseType', demands=['XMLHttpRequest'], returns='XMLHttpRequestResponseType'),
        FieldCall(field='responseType', demands=['XMLHttpRequest', 'XMLHttpRequestResponseType'], returns='None'),
    ],
    "responseURL": [
        FieldCall(field='responseURL', demands=['XMLHttpRequest'], returns='str'),
    ],
    "responseXML": [
        FieldCall(field='responseXML', demands=['XMLHttpRequest'], returns='Document'),
    ],
    "responsesReceived": [
        FieldCall(field='responsesReceived', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='responsesReceived', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "responsesSent": [
        FieldCall(field='responsesSent', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='responsesSent', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "restartIce": [
        PrototypeCall(constructor='RTCPeerConnection', fn='restartIce', demands=['RTCPeerConnection'], returns='None'),
    ],
    "restore": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='restore', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='restore', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
    ],
    "restoreContext": [
        PrototypeCall(constructor='WEBGL_lose_context', fn='restoreContext', demands=['WEBGL_lose_context'], returns='None'),
    ],
    "result": [
        FieldCall(field='result', demands=['FileReader'], returns='str'),
        FieldCall(field='result', demands=['IDBRequest'], returns='T'),
        FieldCall(field='result', demands=['SVGFilterPrimitiveStandardAttributes'], returns='SVGAnimatedString'),
    ],
    "resultType": [
        FieldCall(field='resultType', demands=['XPathResult'], returns='float'),
    ],
    "results": [
        FieldCall(field='results', demands=['AuthenticationExtensionsPRFOutputs'], returns='AuthenticationExtensionsPRFValues'),
        FieldCall(field='results', demands=['AuthenticationExtensionsPRFOutputs', 'AuthenticationExtensionsPRFValues'], returns='None'),
    ],
    "resume": [
        PrototypeCall(constructor='AudioContext', fn='resume', demands=['AudioContext'], returns='None'),
        FieldCall(field='resume', demands=['MediaRecorderEventMap'], returns='Event'),
        FieldCall(field='resume', demands=['MediaRecorderEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='resume', demands=['MediaRecorder'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='resume', demands=['OfflineAudioContext'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='resume', demands=['SpeechSynthesis'], returns='None'),
        FieldCall(field='resume', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='resume', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
    ],
    "resumeTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='resumeTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "retransmittedBytesReceived": [
        FieldCall(field='retransmittedBytesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='retransmittedBytesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "retransmittedBytesSent": [
        FieldCall(field='retransmittedBytesSent', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='retransmittedBytesSent', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "retransmittedPacketsReceived": [
        FieldCall(field='retransmittedPacketsReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='retransmittedPacketsReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "retransmittedPacketsSent": [
        FieldCall(field='retransmittedPacketsSent', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='retransmittedPacketsSent', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "retry": [
        PrototypeCall(constructor='PaymentResponse', fn='retry', demands=['PaymentResponse'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='retry', demands=['PaymentResponse', 'PaymentValidationErrors'], returns='None'),
    ],
    "return": [
        PrototypeCall(constructor='Iterator', fn='return', demands=['Iterator'], returns='IteratorResult'),
        PrototypeCall(constructor='Iterator', fn='return', demands=['Iterator', 'TReturn'], returns='IteratorResult'),
        PrototypeCall(constructor='Generator', fn='return', demands=['Generator', 'TReturn'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncIterator', fn='return', demands=['AsyncIterator'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncIterator', fn='return', demands=['AsyncIterator', 'TReturn'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncGenerator', fn='return', demands=['AsyncGenerator', 'TReturn'], returns='IteratorResult'),
    ],
    "returnValue": [
        FieldCall(field='returnValue', demands=['BeforeUnloadEvent'], returns='*'),
        FieldCall(field='returnValue', demands=['BeforeUnloadEvent', '*'], returns='None'),
        FieldCall(field='returnValue', demands=['Event'], returns='bool'),
        FieldCall(field='returnValue', demands=['Event', 'bool'], returns='None'),
        FieldCall(field='returnValue', demands=['HTMLDialogElement'], returns='str'),
        FieldCall(field='returnValue', demands=['HTMLDialogElement', 'str'], returns='None'),
    ],
    "rev": [
        FieldCall(field='rev', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='rev', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='rev', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='rev', demands=['HTMLLinkElement', 'str'], returns='None'),
    ],
    "reverse": [
        PrototypeCall(constructor='Animation', fn='reverse', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='reverse', demands=['CSSAnimation'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='reverse', demands=['CSSTransition'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='reverse', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='reverse', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='Array', fn='reverse', demands=['list'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='reverse', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='reverse', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='reverse', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='reverse', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='reverse', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='reverse', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='reverse', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='reverse', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='reverse', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='reverse', demands=['Float16Array'], returns='Float16Array'),
    ],
    "reversed": [
        FieldCall(field='reversed', demands=['HTMLOListElement'], returns='bool'),
        FieldCall(field='reversed', demands=['HTMLOListElement', 'bool'], returns='None'),
    ],
    "revocable": [
        PrototypeCall(constructor='ProxyConstructor', fn='revocable', demands=['ProxyConstructor', 'T', 'ProxyHandler'], returns='{proxy:T;revoke:()=>void;}'),
    ],
    "rid": [
        FieldCall(field='rid', demands=['RTCOutboundRtpStreamStats'], returns='str'),
        FieldCall(field='rid', demands=['RTCOutboundRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='rid', demands=['RTCRtpCodingParameters'], returns='str'),
        FieldCall(field='rid', demands=['RTCRtpCodingParameters', 'str'], returns='None'),
    ],
    "right": [
        FieldCall(field='right', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='right', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='right', demands=['DOMRectReadOnly'], returns='float'),
    ],
    "rightContext": [
        FieldCall(field='rightContext', demands=['RegExpConstructor'], returns='str'),
        FieldCall(field='rightContext', demands=['RegExpConstructor', 'str'], returns='None'),
    ],
    "rightTrigger": [
        FieldCall(field='rightTrigger', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='rightTrigger', demands=['GamepadEffectParameters', 'float'], returns='None'),
    ],
    "rk": [
        FieldCall(field='rk', demands=['CredentialPropertiesOutput'], returns='bool'),
        FieldCall(field='rk', demands=['CredentialPropertiesOutput', 'bool'], returns='None'),
    ],
    "robustness": [
        FieldCall(field='robustness', demands=['KeySystemTrackConfiguration'], returns='str'),
        FieldCall(field='robustness', demands=['KeySystemTrackConfiguration', 'str'], returns='None'),
        FieldCall(field='robustness', demands=['MediaKeySystemMediaCapability'], returns='str'),
        FieldCall(field='robustness', demands=['MediaKeySystemMediaCapability', 'str'], returns='None'),
    ],
    "role": [
        FieldCall(field='role', demands=['ARIAMixin'], returns='str'),
        FieldCall(field='role', demands=['ARIAMixin', 'str'], returns='None'),
    ],
    "rolloffFactor": [
        FieldCall(field='rolloffFactor', demands=['PannerOptions'], returns='float'),
        FieldCall(field='rolloffFactor', demands=['PannerOptions', 'float'], returns='None'),
        FieldCall(field='rolloffFactor', demands=['PannerNode'], returns='float'),
        FieldCall(field='rolloffFactor', demands=['PannerNode', 'float'], returns='None'),
    ],
    "root": [
        FieldCall(field='root', demands=['IntersectionObserverInit'], returns='Element'),
        FieldCall(field='root', demands=['IntersectionObserverInit', 'Element'], returns='None'),
        FieldCall(field='root', demands=['FileSystem'], returns='FileSystemDirectoryEntry'),
        FieldCall(field='root', demands=['IntersectionObserver'], returns='Element'),
        FieldCall(field='root', demands=['NodeIterator'], returns='Node'),
        FieldCall(field='root', demands=['TreeWalker'], returns='Node'),
    ],
    "rootBounds": [
        FieldCall(field='rootBounds', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "rootElement": [
        FieldCall(field='rootElement', demands=['Document'], returns='SVGSVGElement'),
    ],
    "rootMargin": [
        FieldCall(field='rootMargin', demands=['IntersectionObserverInit'], returns='str'),
        FieldCall(field='rootMargin', demands=['IntersectionObserverInit', 'str'], returns='None'),
        FieldCall(field='rootMargin', demands=['IntersectionObserver'], returns='str'),
    ],
    "rotate": [
        FieldCall(field='rotate', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='rotate', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='rotate', demands=['CanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='rotate', demands=['OffscreenCanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotate', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotate', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotate', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotate', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        FieldCall(field='rotate', demands=['SVGTextPositioningElement'], returns='SVGAnimatedNumberList'),
    ],
    "rotateAxisAngle": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngle', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngle', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngle', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngle', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngle', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateAxisAngleSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateFromVector": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVector', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVector', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVector', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateFromVectorSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotationAngle": [
        FieldCall(field='rotationAngle', demands=['TouchInit'], returns='float'),
        FieldCall(field='rotationAngle', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='rotationAngle', demands=['Touch'], returns='float'),
    ],
    "rotationRate": [
        FieldCall(field='rotationRate', demands=['DeviceMotionEventInit'], returns='DeviceMotionEventRotationRateInit'),
        FieldCall(field='rotationRate', demands=['DeviceMotionEventInit', 'DeviceMotionEventRotationRateInit'], returns='None'),
        FieldCall(field='rotationRate', demands=['DeviceMotionEvent'], returns='DeviceMotionEventRotationRate'),
    ],
    "round": [
        PrototypeCall(constructor='Math', fn='round', demands=['Math', 'float'], returns='float'),
    ],
    "roundRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='roundRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='roundRect', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='roundRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='roundRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='roundRect', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='roundRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "rowGap": [
        FieldCall(field='rowGap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='rowGap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "rowIndex": [
        FieldCall(field='rowIndex', demands=['HTMLTableRowElement'], returns='float'),
    ],
    "rowSpan": [
        FieldCall(field='rowSpan', demands=['HTMLTableCellElement'], returns='float'),
        FieldCall(field='rowSpan', demands=['HTMLTableCellElement', 'float'], returns='None'),
    ],
    "rows": [
        FieldCall(field='rows', demands=['HTMLFrameSetElement'], returns='str'),
        FieldCall(field='rows', demands=['HTMLFrameSetElement', 'str'], returns='None'),
        FieldCall(field='rows', demands=['HTMLTableElement'], returns='HTMLCollectionOf'),
        FieldCall(field='rows', demands=['HTMLTableSectionElement'], returns='HTMLCollectionOf'),
        FieldCall(field='rows', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='rows', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "rowsPerImage": [
        FieldCall(field='rowsPerImage', demands=['GPUTexelCopyBufferLayout'], returns='float'),
        FieldCall(field='rowsPerImage', demands=['GPUTexelCopyBufferLayout', 'float'], returns='None'),
    ],
    "rp": [
        FieldCall(field='rp', demands=['PublicKeyCredentialCreationOptions'], returns='PublicKeyCredentialRpEntity'),
        FieldCall(field='rp', demands=['PublicKeyCredentialCreationOptions', 'PublicKeyCredentialRpEntity'], returns='None'),
        FieldCall(field='rp', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='PublicKeyCredentialRpEntity'),
        FieldCall(field='rp', demands=['PublicKeyCredentialCreationOptionsJSON', 'PublicKeyCredentialRpEntity'], returns='None'),
        FieldCall(field='rp', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='rp', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "rpId": [
        FieldCall(field='rpId', demands=['PublicKeyCredentialRequestOptions'], returns='str'),
        FieldCall(field='rpId', demands=['PublicKeyCredentialRequestOptions', 'str'], returns='None'),
        FieldCall(field='rpId', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='str'),
        FieldCall(field='rpId', demands=['PublicKeyCredentialRequestOptionsJSON', 'str'], returns='None'),
    ],
    "rt": [
        FieldCall(field='rt', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='rt', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "rtc": [
        FieldCall(field='rtc', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='rtc', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "rtcp": [
        FieldCall(field='rtcp', demands=['RTCRtpParameters'], returns='RTCRtcpParameters'),
        FieldCall(field='rtcp', demands=['RTCRtpParameters', 'RTCRtcpParameters'], returns='None'),
    ],
    "rtcpMuxPolicy": [
        FieldCall(field='rtcpMuxPolicy', demands=['RTCConfiguration'], returns='RTCRtcpMuxPolicy'),
        FieldCall(field='rtcpMuxPolicy', demands=['RTCConfiguration', 'RTCRtcpMuxPolicy'], returns='None'),
    ],
    "rtpTimestamp": [
        FieldCall(field='rtpTimestamp', demands=['RTCEncodedFrameMetadata'], returns='float'),
        FieldCall(field='rtpTimestamp', demands=['RTCEncodedFrameMetadata', 'float'], returns='None'),
        FieldCall(field='rtpTimestamp', demands=['RTCRtpContributingSource'], returns='float'),
        FieldCall(field='rtpTimestamp', demands=['RTCRtpContributingSource', 'float'], returns='None'),
        FieldCall(field='rtpTimestamp', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='rtpTimestamp', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
    ],
    "rtxSsrc": [
        FieldCall(field='rtxSsrc', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='rtxSsrc', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
        FieldCall(field='rtxSsrc', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='rtxSsrc', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "ruby": [
        FieldCall(field='ruby', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='ruby', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "rubyAlign": [
        FieldCall(field='rubyAlign', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='rubyAlign', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "rubyPosition": [
        FieldCall(field='rubyPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='rubyPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "rules": [
        FieldCall(field='rules', demands=['CSSStyleSheet'], returns='CSSRuleList'),
        FieldCall(field='rules', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='rules', demands=['HTMLTableElement', 'str'], returns='None'),
    ],
    "rx": [
        FieldCall(field='rx', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='rx', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='rx', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='rx', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
    ],
    "ry": [
        FieldCall(field='ry', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='ry', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='ry', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='ry', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
    ],
    "s": [
        FieldCall(field='s', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='s', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "salt": [
        FieldCall(field='salt', demands=['HkdfParams'], returns='BufferSource'),
        FieldCall(field='salt', demands=['HkdfParams', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='salt', demands=['Pbkdf2Params'], returns='BufferSource'),
        FieldCall(field='salt', demands=['Pbkdf2Params', 'AllowSharedBufferSource'], returns='None'),
    ],
    "saltLength": [
        FieldCall(field='saltLength', demands=['RsaPssParams'], returns='float'),
        FieldCall(field='saltLength', demands=['RsaPssParams', 'float'], returns='None'),
    ],
    "sameDocument": [
        FieldCall(field='sameDocument', demands=['NavigationHistoryEntry'], returns='bool'),
    ],
    "sameSite": [
        FieldCall(field='sameSite', demands=['CookieInit'], returns='CookieSameSite'),
        FieldCall(field='sameSite', demands=['CookieInit', 'CookieSameSite'], returns='None'),
    ],
    "samp": [
        FieldCall(field='samp', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='samp', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "sample": [
        FieldCall(field='sample', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='sample', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='sample', demands=['CSPViolationReportBody'], returns='str'),
        FieldCall(field='sample', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "sampleCoverage": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='sampleCoverage', demands=['WebGLRenderingContext', 'GLclampf', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='sampleCoverage', demands=['WebGL2RenderingContext', 'GLclampf', 'GLboolean'], returns='None'),
    ],
    "sampleRate": [
        FieldCall(field='sampleRate', demands=['AudioBufferOptions'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioBufferOptions', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['AudioContextOptions'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioContextOptions', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['AudioDataInit'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioDataInit', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['AudioDecoderConfig'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioDecoderConfig', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['AudioEncoderConfig'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioEncoderConfig', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['MediaTrackCapabilities'], returns='ULongRange'),
        FieldCall(field='sampleRate', demands=['MediaTrackCapabilities', 'ULongRange'], returns='None'),
        FieldCall(field='sampleRate', demands=['MediaTrackConstraintSet'], returns='ConstrainULong'),
        FieldCall(field='sampleRate', demands=['MediaTrackConstraintSet', 'ConstrainULong'], returns='None'),
        FieldCall(field='sampleRate', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='sampleRate', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='sampleRate', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='sampleRate', demands=['OfflineAudioContextOptions'], returns='float'),
        FieldCall(field='sampleRate', demands=['OfflineAudioContextOptions', 'float'], returns='None'),
        FieldCall(field='sampleRate', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioData'], returns='float'),
        FieldCall(field='sampleRate', demands=['BaseAudioContext'], returns='float'),
    ],
    "sampleSize": [
        FieldCall(field='sampleSize', demands=['MediaTrackCapabilities'], returns='ULongRange'),
        FieldCall(field='sampleSize', demands=['MediaTrackCapabilities', 'ULongRange'], returns='None'),
        FieldCall(field='sampleSize', demands=['MediaTrackConstraintSet'], returns='ConstrainULong'),
        FieldCall(field='sampleSize', demands=['MediaTrackConstraintSet', 'ConstrainULong'], returns='None'),
        FieldCall(field='sampleSize', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='sampleSize', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='sampleSize', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='sampleSize', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
    ],
    "sampleType": [
        FieldCall(field='sampleType', demands=['GPUTextureBindingLayout'], returns='GPUTextureSampleType'),
        FieldCall(field='sampleType', demands=['GPUTextureBindingLayout', 'GPUTextureSampleType'], returns='None'),
    ],
    "samplerParameterf": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='samplerParameterf', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum', 'GLfloat'], returns='None'),
    ],
    "samplerParameteri": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='samplerParameteri', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum', 'GLint'], returns='None'),
    ],
    "samplerate": [
        FieldCall(field='samplerate', demands=['AudioConfiguration'], returns='float'),
        FieldCall(field='samplerate', demands=['AudioConfiguration', 'float'], returns='None'),
    ],
    "sandbox": [
        PrototypeCall(constructor='HTMLIFrameElement', fn='sandbox', demands=['HTMLIFrameElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='sandbox', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "save": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='save', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='save', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
    ],
    "scalabilityMode": [
        FieldCall(field='scalabilityMode', demands=['RTCOutboundRtpStreamStats'], returns='str'),
        FieldCall(field='scalabilityMode', demands=['RTCOutboundRtpStreamStats', 'str'], returns='None'),
        FieldCall(field='scalabilityMode', demands=['VideoConfiguration'], returns='str'),
        FieldCall(field='scalabilityMode', demands=['VideoConfiguration', 'str'], returns='None'),
        FieldCall(field='scalabilityMode', demands=['VideoEncoderConfig'], returns='str'),
        FieldCall(field='scalabilityMode', demands=['VideoEncoderConfig', 'str'], returns='None'),
    ],
    "scale": [
        FieldCall(field='scale', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scale', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='scale', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='scale', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        FieldCall(field='scale', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='scale', demands=['VisualViewport'], returns='float'),
    ],
    "scale3d": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3d', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3d', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3d', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3d', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3d', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scale3dSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scaleNonUniform": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleNonUniform', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleNonUniform', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleNonUniform', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scaleResolutionDownBy": [
        FieldCall(field='scaleResolutionDownBy', demands=['RTCRtpEncodingParameters'], returns='float'),
        FieldCall(field='scaleResolutionDownBy', demands=['RTCRtpEncodingParameters', 'float'], returns='None'),
    ],
    "scaleSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scheme": [
        FieldCall(field='scheme', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='scheme', demands=['HTMLMetaElement', 'str'], returns='None'),
    ],
    "scissor": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='scissor', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='scissor', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "scope": [
        FieldCall(field='scope', demands=['RegistrationOptions'], returns='str'),
        FieldCall(field='scope', demands=['RegistrationOptions', 'str'], returns='None'),
        FieldCall(field='scope', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='scope', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='scope', demands=['ServiceWorkerRegistration'], returns='str'),
    ],
    "screen": [
        FieldCall(field='screen', demands=['Window'], returns='Screen'),
    ],
    "screenLeft": [
        FieldCall(field='screenLeft', demands=['Window'], returns='float'),
    ],
    "screenTop": [
        FieldCall(field='screenTop', demands=['Window'], returns='float'),
    ],
    "screenX": [
        FieldCall(field='screenX', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='screenX', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='screenX', demands=['TouchInit'], returns='float'),
        FieldCall(field='screenX', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='screenX', demands=['MouseEvent'], returns='float'),
        FieldCall(field='screenX', demands=['Touch'], returns='float'),
        FieldCall(field='screenX', demands=['Window'], returns='float'),
    ],
    "screenY": [
        FieldCall(field='screenY', demands=['MouseEventInit'], returns='float'),
        FieldCall(field='screenY', demands=['MouseEventInit', 'float'], returns='None'),
        FieldCall(field='screenY', demands=['TouchInit'], returns='float'),
        FieldCall(field='screenY', demands=['TouchInit', 'float'], returns='None'),
        FieldCall(field='screenY', demands=['MouseEvent'], returns='float'),
        FieldCall(field='screenY', demands=['Touch'], returns='float'),
        FieldCall(field='screenY', demands=['Window'], returns='float'),
    ],
    "script": [
        FieldCall(field='script', demands=['HTMLElementTagNameMap'], returns='HTMLScriptElement'),
        FieldCall(field='script', demands=['HTMLElementTagNameMap', 'HTMLScriptElement'], returns='None'),
        FieldCall(field='script', demands=['SVGElementTagNameMap'], returns='SVGScriptElement'),
        FieldCall(field='script', demands=['SVGElementTagNameMap', 'SVGScriptElement'], returns='None'),
    ],
    "scriptURL": [
        FieldCall(field='scriptURL', demands=['ServiceWorker'], returns='str'),
    ],
    "scripts": [
        FieldCall(field='scripts', demands=['Document'], returns='HTMLCollectionOf'),
    ],
    "scroll": [
        PrototypeCall(constructor='Element', fn='scroll', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scroll', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scroll', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scroll', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='scroll', demands=['Element', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scroll', demands=['MathMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scroll', demands=['SVGElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scroll', demands=['HTMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='Element', fn='scroll', demands=['Element', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scroll', demands=['MathMLElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scroll', demands=['SVGElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scroll', demands=['HTMLElement', 'float', 'float'], returns='None'),
        FieldCall(field='scroll', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='scroll', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='scroll', demands=['VTTRegion'], returns='ScrollSetting'),
        FieldCall(field='scroll', demands=['VTTRegion', 'ScrollSetting'], returns='None'),
        FieldCall(field='scroll', demands=['VisualViewportEventMap'], returns='Event'),
        FieldCall(field='scroll', demands=['VisualViewportEventMap', 'Event'], returns='None'),
        DirectCall(fn='scroll', receiver=None, demands=[], returns='None'),
        DirectCall(fn='scroll', receiver=None, demands=['ScrollToOptions'], returns='None'),
        DirectCall(fn='scroll', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "scrollAmount": [
        FieldCall(field='scrollAmount', demands=['HTMLMarqueeElement'], returns='float'),
        FieldCall(field='scrollAmount', demands=['HTMLMarqueeElement', 'float'], returns='None'),
    ],
    "scrollBehavior": [
        FieldCall(field='scrollBehavior', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollBehavior', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollBy": [
        PrototypeCall(constructor='Element', fn='scrollBy', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollBy', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollBy', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollBy', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='scrollBy', demands=['Element', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollBy', demands=['MathMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollBy', demands=['SVGElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollBy', demands=['HTMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='Element', fn='scrollBy', demands=['Element', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollBy', demands=['MathMLElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollBy', demands=['SVGElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollBy', demands=['HTMLElement', 'float', 'float'], returns='None'),
        DirectCall(fn='scrollBy', receiver=None, demands=[], returns='None'),
        DirectCall(fn='scrollBy', receiver=None, demands=['ScrollToOptions'], returns='None'),
        DirectCall(fn='scrollBy', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "scrollDelay": [
        FieldCall(field='scrollDelay', demands=['HTMLMarqueeElement'], returns='float'),
        FieldCall(field='scrollDelay', demands=['HTMLMarqueeElement', 'float'], returns='None'),
    ],
    "scrollHeight": [
        FieldCall(field='scrollHeight', demands=['Element'], returns='float'),
    ],
    "scrollIntoView": [
        PrototypeCall(constructor='Element', fn='scrollIntoView', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollIntoView', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollIntoView', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollIntoView', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='scrollIntoView', demands=['Element', 'bool'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollIntoView', demands=['MathMLElement', 'bool'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollIntoView', demands=['SVGElement', 'bool'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollIntoView', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "scrollLeft": [
        FieldCall(field='scrollLeft', demands=['Element'], returns='float'),
        FieldCall(field='scrollLeft', demands=['Element', 'float'], returns='None'),
    ],
    "scrollMargin": [
        FieldCall(field='scrollMargin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMargin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginBlock": [
        FieldCall(field='scrollMarginBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginBlockEnd": [
        FieldCall(field='scrollMarginBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginBlockStart": [
        FieldCall(field='scrollMarginBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginBottom": [
        FieldCall(field='scrollMarginBottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginBottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginInline": [
        FieldCall(field='scrollMarginInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginInlineEnd": [
        FieldCall(field='scrollMarginInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginInlineStart": [
        FieldCall(field='scrollMarginInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginLeft": [
        FieldCall(field='scrollMarginLeft', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginLeft', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginRight": [
        FieldCall(field='scrollMarginRight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginRight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollMarginTop": [
        FieldCall(field='scrollMarginTop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollMarginTop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPadding": [
        FieldCall(field='scrollPadding', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPadding', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingBlock": [
        FieldCall(field='scrollPaddingBlock', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingBlock', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingBlockEnd": [
        FieldCall(field='scrollPaddingBlockEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingBlockEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingBlockStart": [
        FieldCall(field='scrollPaddingBlockStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingBlockStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingBottom": [
        FieldCall(field='scrollPaddingBottom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingBottom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingInline": [
        FieldCall(field='scrollPaddingInline', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingInline', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingInlineEnd": [
        FieldCall(field='scrollPaddingInlineEnd', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingInlineEnd', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingInlineStart": [
        FieldCall(field='scrollPaddingInlineStart', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingInlineStart', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingLeft": [
        FieldCall(field='scrollPaddingLeft', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingLeft', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingRight": [
        FieldCall(field='scrollPaddingRight', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingRight', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollPaddingTop": [
        FieldCall(field='scrollPaddingTop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollPaddingTop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollRestoration": [
        FieldCall(field='scrollRestoration', demands=['History'], returns='ScrollRestoration'),
        FieldCall(field='scrollRestoration', demands=['History', 'ScrollRestoration'], returns='None'),
    ],
    "scrollSnapAlign": [
        FieldCall(field='scrollSnapAlign', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollSnapAlign', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollSnapStop": [
        FieldCall(field='scrollSnapStop', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollSnapStop', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollSnapType": [
        FieldCall(field='scrollSnapType', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollSnapType', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollTo": [
        PrototypeCall(constructor='Element', fn='scrollTo', demands=['Element'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollTo', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollTo', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollTo', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='Element', fn='scrollTo', demands=['Element', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollTo', demands=['MathMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollTo', demands=['SVGElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollTo', demands=['HTMLElement', 'ScrollToOptions'], returns='None'),
        PrototypeCall(constructor='Element', fn='scrollTo', demands=['Element', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='scrollTo', demands=['MathMLElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='scrollTo', demands=['SVGElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='scrollTo', demands=['HTMLElement', 'float', 'float'], returns='None'),
        DirectCall(fn='scrollTo', receiver=None, demands=[], returns='None'),
        DirectCall(fn='scrollTo', receiver=None, demands=['ScrollToOptions'], returns='None'),
        DirectCall(fn='scrollTo', receiver=None, demands=['float', 'float'], returns='None'),
    ],
    "scrollTop": [
        FieldCall(field='scrollTop', demands=['Element'], returns='float'),
        FieldCall(field='scrollTop', demands=['Element', 'float'], returns='None'),
    ],
    "scrollWidth": [
        FieldCall(field='scrollWidth', demands=['Element'], returns='float'),
    ],
    "scrollX": [
        FieldCall(field='scrollX', demands=['Window'], returns='float'),
    ],
    "scrollY": [
        FieldCall(field='scrollY', demands=['Window'], returns='float'),
    ],
    "scrollbarColor": [
        FieldCall(field='scrollbarColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollbarColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollbarGutter": [
        FieldCall(field='scrollbarGutter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollbarGutter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollbarWidth": [
        FieldCall(field='scrollbarWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='scrollbarWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "scrollbars": [
        FieldCall(field='scrollbars', demands=['Window'], returns='BarProp'),
    ],
    "scrollend": [
        FieldCall(field='scrollend', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='scrollend', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "scrolling": [
        FieldCall(field='scrolling', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='scrolling', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='scrolling', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='scrolling', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "scrollingElement": [
        FieldCall(field='scrollingElement', demands=['Document'], returns='Element'),
    ],
    "sctp": [
        FieldCall(field='sctp', demands=['RTCPeerConnection'], returns='RTCSctpTransport'),
    ],
    "sctpCauseCode": [
        FieldCall(field='sctpCauseCode', demands=['RTCErrorInit'], returns='float'),
        FieldCall(field='sctpCauseCode', demands=['RTCErrorInit', 'float'], returns='None'),
        FieldCall(field='sctpCauseCode', demands=['RTCError'], returns='float'),
    ],
    "sdp": [
        FieldCall(field='sdp', demands=['RTCLocalSessionDescriptionInit'], returns='str'),
        FieldCall(field='sdp', demands=['RTCLocalSessionDescriptionInit', 'str'], returns='None'),
        FieldCall(field='sdp', demands=['RTCSessionDescriptionInit'], returns='str'),
        FieldCall(field='sdp', demands=['RTCSessionDescriptionInit', 'str'], returns='None'),
        FieldCall(field='sdp', demands=['RTCSessionDescription'], returns='str'),
    ],
    "sdpFmtpLine": [
        FieldCall(field='sdpFmtpLine', demands=['RTCRtpCodec'], returns='str'),
        FieldCall(field='sdpFmtpLine', demands=['RTCRtpCodec', 'str'], returns='None'),
    ],
    "sdpLineNumber": [
        FieldCall(field='sdpLineNumber', demands=['RTCErrorInit'], returns='float'),
        FieldCall(field='sdpLineNumber', demands=['RTCErrorInit', 'float'], returns='None'),
        FieldCall(field='sdpLineNumber', demands=['RTCError'], returns='float'),
    ],
    "sdpMLineIndex": [
        FieldCall(field='sdpMLineIndex', demands=['RTCIceCandidateInit'], returns='float'),
        FieldCall(field='sdpMLineIndex', demands=['RTCIceCandidateInit', 'float'], returns='None'),
        FieldCall(field='sdpMLineIndex', demands=['RTCIceCandidate'], returns='float'),
    ],
    "sdpMid": [
        FieldCall(field='sdpMid', demands=['RTCIceCandidateInit'], returns='str'),
        FieldCall(field='sdpMid', demands=['RTCIceCandidateInit', 'str'], returns='None'),
        FieldCall(field='sdpMid', demands=['RTCIceCandidate'], returns='str'),
    ],
    "seal": [
        PrototypeCall(constructor='ObjectConstructor', fn='seal', demands=['ObjectConstructor', 'T'], returns='T'),
    ],
    "search": [
        FieldCall(field='search', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='search', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='search', demands=['Location'], returns='str'),
        FieldCall(field='search', demands=['Location', 'str'], returns='None'),
        FieldCall(field='search', demands=['URL'], returns='str'),
        FieldCall(field='search', demands=['URL', 'str'], returns='None'),
        FieldCall(field='search', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='search', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
        FieldCall(field='search', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='search', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='search', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='search', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='search', demands=['URLPattern'], returns='str'),
        FieldCall(field='search', demands=['SymbolConstructor'], returns='uniquesymbol'),
        PrototypeCall(constructor='String', fn='search', demands=['str', '{[Symbol.search](string:string):number;}'], returns='float'),
        PrototypeCall(constructor='String', fn='search', demands=['str', 'str'], returns='float'),
    ],
    "searchParams": [
        FieldCall(field='searchParams', demands=['URL'], returns='URLSearchParams'),
    ],
    "second": [
        FieldCall(field='second', demands=['AuthenticationExtensionsPRFValues'], returns='BufferSource'),
        FieldCall(field='second', demands=['AuthenticationExtensionsPRFValues', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='second', demands=['AuthenticationExtensionsPRFValuesJSON'], returns='Base64URLString'),
        FieldCall(field='second', demands=['AuthenticationExtensionsPRFValuesJSON', 'Base64URLString'], returns='None'),
    ],
    "section": [
        FieldCall(field='section', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='section', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "sectionRowIndex": [
        FieldCall(field='sectionRowIndex', demands=['HTMLTableRowElement'], returns='float'),
    ],
    "secureConnectionStart": [
        FieldCall(field='secureConnectionStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='secureConnectionStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "securitypolicyviolation": [
        FieldCall(field='securitypolicyviolation', demands=['GlobalEventHandlersEventMap'], returns='SecurityPolicyViolationEvent'),
        FieldCall(field='securitypolicyviolation', demands=['GlobalEventHandlersEventMap', 'SecurityPolicyViolationEvent'], returns='None'),
    ],
    "seed": [
        FieldCall(field='seed', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "seek": [
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='seek', demands=['FileSystemWritableFileStream', 'float'], returns='None'),
    ],
    "seekOffset": [
        FieldCall(field='seekOffset', demands=['MediaSessionActionDetails'], returns='float'),
        FieldCall(field='seekOffset', demands=['MediaSessionActionDetails', 'float'], returns='None'),
    ],
    "seekTime": [
        FieldCall(field='seekTime', demands=['MediaSessionActionDetails'], returns='float'),
        FieldCall(field='seekTime', demands=['MediaSessionActionDetails', 'float'], returns='None'),
    ],
    "seekable": [
        FieldCall(field='seekable', demands=['HTMLMediaElement'], returns='TimeRanges'),
    ],
    "seeked": [
        FieldCall(field='seeked', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='seeked', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "seeking": [
        FieldCall(field='seeking', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='seeking', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='seeking', demands=['HTMLMediaElement'], returns='bool'),
    ],
    "select": [
        FieldCall(field='select', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='select', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='select', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='select', demands=['HTMLTextAreaElement'], returns='None'),
        FieldCall(field='select', demands=['HTMLElementTagNameMap'], returns='HTMLSelectElement'),
        FieldCall(field='select', demands=['HTMLElementTagNameMap', 'HTMLSelectElement'], returns='None'),
    ],
    "selectAllChildren": [
        PrototypeCall(constructor='Selection', fn='selectAllChildren', demands=['Selection', 'Node'], returns='None'),
    ],
    "selectNode": [
        PrototypeCall(constructor='Range', fn='selectNode', demands=['Range', 'Node'], returns='None'),
    ],
    "selectNodeContents": [
        PrototypeCall(constructor='Range', fn='selectNodeContents', demands=['Range', 'Node'], returns='None'),
    ],
    "selectSubString": [
        PrototypeCall(constructor='SVGTextContentElement', fn='selectSubString', demands=['SVGTextContentElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGTextPositioningElement', fn='selectSubString', demands=['SVGTextPositioningElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGTextPathElement', fn='selectSubString', demands=['SVGTextPathElement', 'float', 'float'], returns='None'),
    ],
    "selected": [
        FieldCall(field='selected', demands=['PaymentShippingOption'], returns='bool'),
        FieldCall(field='selected', demands=['PaymentShippingOption', 'bool'], returns='None'),
        FieldCall(field='selected', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='selected', demands=['HTMLOptionElement', 'bool'], returns='None'),
        FieldCall(field='selected', demands=['ImageTrack'], returns='bool'),
        FieldCall(field='selected', demands=['ImageTrack', 'bool'], returns='None'),
    ],
    "selectedCandidatePairChanges": [
        FieldCall(field='selectedCandidatePairChanges', demands=['RTCTransportStats'], returns='float'),
        FieldCall(field='selectedCandidatePairChanges', demands=['RTCTransportStats', 'float'], returns='None'),
    ],
    "selectedCandidatePairId": [
        FieldCall(field='selectedCandidatePairId', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='selectedCandidatePairId', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "selectedIndex": [
        FieldCall(field='selectedIndex', demands=['HTMLOptionsCollection'], returns='float'),
        FieldCall(field='selectedIndex', demands=['HTMLOptionsCollection', 'float'], returns='None'),
        FieldCall(field='selectedIndex', demands=['HTMLSelectElement'], returns='float'),
        FieldCall(field='selectedIndex', demands=['HTMLSelectElement', 'float'], returns='None'),
        FieldCall(field='selectedIndex', demands=['ImageTrackList'], returns='float'),
    ],
    "selectedOptions": [
        FieldCall(field='selectedOptions', demands=['HTMLSelectElement'], returns='HTMLCollectionOf'),
    ],
    "selectedTrack": [
        FieldCall(field='selectedTrack', demands=['ImageTrackList'], returns='ImageTrack'),
    ],
    "selectedcandidatepairchange": [
        FieldCall(field='selectedcandidatepairchange', demands=['RTCIceTransportEventMap'], returns='Event'),
        FieldCall(field='selectedcandidatepairchange', demands=['RTCIceTransportEventMap', 'Event'], returns='None'),
    ],
    "selectionDirection": [
        FieldCall(field='selectionDirection', demands=['HTMLInputElement'], returns='"forward"'),
        FieldCall(field='selectionDirection', demands=['HTMLInputElement', '"forward"'], returns='None'),
        FieldCall(field='selectionDirection', demands=['HTMLTextAreaElement'], returns='"forward"'),
        FieldCall(field='selectionDirection', demands=['HTMLTextAreaElement', '"forward"'], returns='None'),
    ],
    "selectionEnd": [
        FieldCall(field='selectionEnd', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='selectionEnd', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='selectionEnd', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='selectionEnd', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "selectionStart": [
        FieldCall(field='selectionStart', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='selectionStart', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='selectionStart', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='selectionStart', demands=['HTMLTextAreaElement', 'float'], returns='None'),
    ],
    "selectionchange": [
        FieldCall(field='selectionchange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='selectionchange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "selectorText": [
        FieldCall(field='selectorText', demands=['CSSPageRule'], returns='str'),
        FieldCall(field='selectorText', demands=['CSSPageRule', 'str'], returns='None'),
        FieldCall(field='selectorText', demands=['CSSStyleRule'], returns='str'),
        FieldCall(field='selectorText', demands=['CSSStyleRule', 'str'], returns='None'),
    ],
    "selectstart": [
        FieldCall(field='selectstart', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='selectstart', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "self": [
        FieldCall(field='self', demands=['Window'], returns='Window&typeofglobalThis'),
    ],
    "selfOnly": [
        FieldCall(field='selfOnly', demands=['ImportNodeOptions'], returns='bool'),
        FieldCall(field='selfOnly', demands=['ImportNodeOptions', 'bool'], returns='None'),
    ],
    "semantics": [
        FieldCall(field='semantics', demands=['MathMLElementTagNameMap'], returns='MathMLElement'),
        FieldCall(field='semantics', demands=['MathMLElementTagNameMap', 'MathMLElement'], returns='None'),
    ],
    "send": [
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'list'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'list', 'DOMHighResTimeStamp'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'Blob'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'ArrayBuffer'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='send', demands=['WebSocket', 'str'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='send', demands=['XMLHttpRequest'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='send', demands=['XMLHttpRequest', 'Document'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'Iterable'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'Iterable', 'DOMHighResTimeStamp'], returns='None'),
    ],
    "sendBeacon": [
        PrototypeCall(constructor='Navigator', fn='sendBeacon', demands=['Navigator', 'str'], returns='bool'),
        PrototypeCall(constructor='Navigator', fn='sendBeacon', demands=['Navigator', 'str', 'BodyInit'], returns='bool'),
    ],
    "sendEncodings": [
        FieldCall(field='sendEncodings', demands=['RTCRtpTransceiverInit'], returns='list'),
        FieldCall(field='sendEncodings', demands=['RTCRtpTransceiverInit', 'list'], returns='None'),
    ],
    "sendGroup": [
        FieldCall(field='sendGroup', demands=['WebTransportSendStreamOptions'], returns='WebTransportSendGroup'),
        FieldCall(field='sendGroup', demands=['WebTransportSendStreamOptions', 'WebTransportSendGroup'], returns='None'),
        FieldCall(field='sendGroup', demands=['WebTransportSendStream'], returns='WebTransportSendGroup'),
        FieldCall(field='sendGroup', demands=['WebTransportSendStream', 'WebTransportSendGroup'], returns='None'),
    ],
    "sendOrder": [
        FieldCall(field='sendOrder', demands=['WebTransportSendOptions'], returns='float'),
        FieldCall(field='sendOrder', demands=['WebTransportSendOptions', 'float'], returns='None'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStreamOptions'], returns='float'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStreamOptions', 'float'], returns='None'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStream'], returns='float'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStream', 'float'], returns='None'),
    ],
    "sender": [
        FieldCall(field='sender', demands=['RTCRtpTransceiver'], returns='RTCRtpSender'),
    ],
    "sentAlert": [
        FieldCall(field='sentAlert', demands=['RTCErrorInit'], returns='float'),
        FieldCall(field='sentAlert', demands=['RTCErrorInit', 'float'], returns='None'),
        FieldCall(field='sentAlert', demands=['RTCError'], returns='float'),
    ],
    "sequenceNumber": [
        FieldCall(field='sequenceNumber', demands=['RTCEncodedAudioFrameMetadata'], returns='float'),
        FieldCall(field='sequenceNumber', demands=['RTCEncodedAudioFrameMetadata', 'float'], returns='None'),
    ],
    "serializable": [
        FieldCall(field='serializable', demands=['ShadowRootInit'], returns='bool'),
        FieldCall(field='serializable', demands=['ShadowRootInit', 'bool'], returns='None'),
        FieldCall(field='serializable', demands=['ShadowRoot'], returns='bool'),
    ],
    "serializableShadowRoots": [
        FieldCall(field='serializableShadowRoots', demands=['GetHTMLOptions'], returns='bool'),
        FieldCall(field='serializableShadowRoots', demands=['GetHTMLOptions', 'bool'], returns='None'),
    ],
    "serializeToString": [
        PrototypeCall(constructor='XMLSerializer', fn='serializeToString', demands=['XMLSerializer', 'Node'], returns='str'),
    ],
    "serverCertificateHashes": [
        FieldCall(field='serverCertificateHashes', demands=['WebTransportOptions'], returns='list'),
        FieldCall(field='serverCertificateHashes', demands=['WebTransportOptions', 'list'], returns='None'),
    ],
    "serverTiming": [
        FieldCall(field='serverTiming', demands=['PerformanceResourceTiming'], returns='ReadonlyArray'),
    ],
    "serviceWorker": [
        FieldCall(field='serviceWorker', demands=['Navigator'], returns='ServiceWorkerContainer'),
    ],
    "sessionId": [
        FieldCall(field='sessionId', demands=['MediaKeySession'], returns='str'),
    ],
    "sessionStorage": [
        FieldCall(field='sessionStorage', demands=['WindowSessionStorage'], returns='Storage'),
        FieldCall(field='sessionStorage', demands=['Window'], returns='Storage'),
        FieldCall(field='sessionStorage', demands=['Window', 'Storage'], returns='None'),
    ],
    "sessionTypes": [
        FieldCall(field='sessionTypes', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='list'),
        FieldCall(field='sessionTypes', demands=['MediaCapabilitiesKeySystemConfiguration', 'list'], returns='None'),
        FieldCall(field='sessionTypes', demands=['MediaKeySystemConfiguration'], returns='list'),
        FieldCall(field='sessionTypes', demands=['MediaKeySystemConfiguration', 'list'], returns='None'),
    ],
    "set": [
        PrototypeCall(constructor='CookieStore', fn='set', demands=['CookieStore', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='set', demands=['CookieStore', 'CookieInit'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'Blob'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'Blob', 'str'], returns='None'),
        PrototypeCall(constructor='Headers', fn='set', demands=['Headers', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='set', demands=['StylePropertyMap', 'str', '*'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='set', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        FieldCall(field='set', demands=['SVGElementTagNameMap'], returns='SVGSetElement'),
        FieldCall(field='set', demands=['SVGElementTagNameMap', 'SVGSetElement'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='set', demands=['BigInt64Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='set', demands=['BigInt64Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='BigUint64Array', fn='set', demands=['BigUint64Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='BigUint64Array', fn='set', demands=['BigUint64Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='PropertyDescriptor', fn='set', demands=['PropertyDescriptor', '*'], returns='None'),
        FieldCall(field='set', demands=['TypedPropertyDescriptor'], returns='(value:T)=>void'),
        FieldCall(field='set', demands=['TypedPropertyDescriptor', '(value:T)=>void'], returns='None'),
        PrototypeCall(constructor='Int8Array', fn='set', demands=['Int8Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Int8Array', fn='set', demands=['Int8Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Uint8Array', fn='set', demands=['Uint8Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Uint8Array', fn='set', demands=['Uint8Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='set', demands=['Uint8ClampedArray', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='set', demands=['Uint8ClampedArray', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Int16Array', fn='set', demands=['Int16Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Int16Array', fn='set', demands=['Int16Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Uint16Array', fn='set', demands=['Uint16Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Uint16Array', fn='set', demands=['Uint16Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Int32Array', fn='set', demands=['Int32Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Int32Array', fn='set', demands=['Int32Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Uint32Array', fn='set', demands=['Uint32Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Uint32Array', fn='set', demands=['Uint32Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Float32Array', fn='set', demands=['Float32Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Float32Array', fn='set', demands=['Float32Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='Float64Array', fn='set', demands=['Float64Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Float64Array', fn='set', demands=['Float64Array', 'ArrayLike', 'float'], returns='None'),
        PrototypeCall(constructor='HighlightRegistry', fn='set', demands=['HighlightRegistry', 'K', 'V'], returns='Map'),
        PrototypeCall(constructor='WeakMap', fn='set', demands=['WeakMap', 'K', 'V'], returns='WeakMap'),
        PrototypeCall(constructor='ProxyHandler', fn='set', demands=['ProxyHandler', 'T', 'str', '*', '*'], returns='bool'),
        PrototypeCall(constructor='ClassAccessorDecoratorTarget', fn='set', demands=['ClassAccessorDecoratorTarget', 'This', 'Value'], returns='None'),
        PrototypeCall(constructor='ClassAccessorDecoratorResult', fn='set', demands=['ClassAccessorDecoratorResult', 'This', 'Value'], returns='None'),
        PrototypeCall(constructor='Float16Array', fn='set', demands=['Float16Array', 'ArrayLike'], returns='None'),
        PrototypeCall(constructor='Float16Array', fn='set', demands=['Float16Array', 'ArrayLike', 'float'], returns='None'),
    ],
    "setActionHandler": [
        PrototypeCall(constructor='MediaSession', fn='setActionHandler', demands=['MediaSession', 'MediaSessionAction', 'MediaSessionActionHandler'], returns='None'),
    ],
    "setAppBadge": [
        PrototypeCall(constructor='Navigator', fn='setAppBadge', demands=['Navigator'], returns='None'),
        PrototypeCall(constructor='Navigator', fn='setAppBadge', demands=['Navigator', 'float'], returns='None'),
    ],
    "setAttribute": [
        PrototypeCall(constructor='Element', fn='setAttribute', demands=['Element', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='setAttribute', demands=['MathMLElement', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='setAttribute', demands=['SVGElement', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='setAttribute', demands=['HTMLElement', 'str', 'str'], returns='None'),
    ],
    "setAttributeNS": [
        PrototypeCall(constructor='Element', fn='setAttributeNS', demands=['Element', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='setAttributeNS', demands=['MathMLElement', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='setAttributeNS', demands=['SVGElement', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='setAttributeNS', demands=['HTMLElement', 'str', 'str', 'str'], returns='None'),
    ],
    "setAttributeNode": [
        PrototypeCall(constructor='Element', fn='setAttributeNode', demands=['Element', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='MathMLElement', fn='setAttributeNode', demands=['MathMLElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='SVGElement', fn='setAttributeNode', demands=['SVGElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='HTMLElement', fn='setAttributeNode', demands=['HTMLElement', 'Attr'], returns='Attr'),
    ],
    "setAttributeNodeNS": [
        PrototypeCall(constructor='Element', fn='setAttributeNodeNS', demands=['Element', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='MathMLElement', fn='setAttributeNodeNS', demands=['MathMLElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='SVGElement', fn='setAttributeNodeNS', demands=['SVGElement', 'Attr'], returns='Attr'),
        PrototypeCall(constructor='HTMLElement', fn='setAttributeNodeNS', demands=['HTMLElement', 'Attr'], returns='Attr'),
    ],
    "setBaseAndExtent": [
        PrototypeCall(constructor='Selection', fn='setBaseAndExtent', demands=['Selection', 'Node', 'float', 'Node', 'float'], returns='None'),
    ],
    "setBigInt64": [
        PrototypeCall(constructor='DataView', fn='setBigInt64', demands=['DataView', 'float', 'bigint'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setBigInt64', demands=['DataView', 'float', 'bigint', 'bool'], returns='None'),
    ],
    "setBigUint64": [
        PrototypeCall(constructor='DataView', fn='setBigUint64', demands=['DataView', 'float', 'bigint'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setBigUint64', demands=['DataView', 'float', 'bigint', 'bool'], returns='None'),
    ],
    "setCameraActive": [
        PrototypeCall(constructor='MediaSession', fn='setCameraActive', demands=['MediaSession', 'bool'], returns='None'),
    ],
    "setCodecPreferences": [
        PrototypeCall(constructor='RTCRtpTransceiver', fn='setCodecPreferences', demands=['RTCRtpTransceiver', 'list'], returns='None'),
        PrototypeCall(constructor='RTCRtpTransceiver', fn='setCodecPreferences', demands=['RTCRtpTransceiver', 'Iterable'], returns='None'),
    ],
    "setConfiguration": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setConfiguration', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setConfiguration', demands=['RTCPeerConnection', 'RTCConfiguration'], returns='None'),
    ],
    "setCurrentTime": [
        PrototypeCall(constructor='SVGSVGElement', fn='setCurrentTime', demands=['SVGSVGElement', 'float'], returns='None'),
    ],
    "setCustomValidity": [
        PrototypeCall(constructor='HTMLButtonElement', fn='setCustomValidity', demands=['HTMLButtonElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='setCustomValidity', demands=['HTMLFieldSetElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setCustomValidity', demands=['HTMLInputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='setCustomValidity', demands=['HTMLObjectElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='setCustomValidity', demands=['HTMLOutputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='setCustomValidity', demands=['HTMLSelectElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setCustomValidity', demands=['HTMLTextAreaElement', 'str'], returns='None'),
    ],
    "setData": [
        PrototypeCall(constructor='DataTransfer', fn='setData', demands=['DataTransfer', 'str', 'str'], returns='None'),
    ],
    "setDate": [
        PrototypeCall(constructor='Date', fn='setDate', demands=['Date', 'float'], returns='float'),
    ],
    "setDragImage": [
        PrototypeCall(constructor='DataTransfer', fn='setDragImage', demands=['DataTransfer', 'Element', 'float', 'float'], returns='None'),
    ],
    "setEnd": [
        PrototypeCall(constructor='Range', fn='setEnd', demands=['Range', 'Node', 'float'], returns='None'),
    ],
    "setEndAfter": [
        PrototypeCall(constructor='Range', fn='setEndAfter', demands=['Range', 'Node'], returns='None'),
    ],
    "setEndBefore": [
        PrototypeCall(constructor='Range', fn='setEndBefore', demands=['Range', 'Node'], returns='None'),
    ],
    "setFloat16": [
        PrototypeCall(constructor='DataView', fn='setFloat16', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setFloat16', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setFloat32": [
        PrototypeCall(constructor='DataView', fn='setFloat32', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setFloat32', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setFloat64": [
        PrototypeCall(constructor='DataView', fn='setFloat64', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setFloat64', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setFormValue": [
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File', 'File'], returns='None'),
    ],
    "setFullYear": [
        PrototypeCall(constructor='Date', fn='setFullYear', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setFullYear', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setFullYear', demands=['Date', 'float', 'float', 'float'], returns='float'),
    ],
    "setHTMLUnsafe": [
        PrototypeCall(constructor='Element', fn='setHTMLUnsafe', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='setHTMLUnsafe', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='setHTMLUnsafe', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='setHTMLUnsafe', demands=['HTMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='setHTMLUnsafe', demands=['ShadowRoot', 'str'], returns='None'),
    ],
    "setHeaderValue": [
        PrototypeCall(constructor='NavigationPreloadManager', fn='setHeaderValue', demands=['NavigationPreloadManager', 'str'], returns='None'),
    ],
    "setHours": [
        PrototypeCall(constructor='Date', fn='setHours', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setHours', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setHours', demands=['Date', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setHours', demands=['Date', 'float', 'float', 'float', 'float'], returns='float'),
    ],
    "setInt16": [
        PrototypeCall(constructor='DataView', fn='setInt16', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setInt16', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setInt32": [
        PrototypeCall(constructor='DataView', fn='setInt32', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setInt32', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setInt8": [
        PrototypeCall(constructor='DataView', fn='setInt8', demands=['DataView', 'float', 'float'], returns='None'),
    ],
    "setInterval": [
        DirectCall(fn='setInterval', receiver=None, demands=['TimerHandler', 'float'], returns='float'),
        DirectCall(fn='setInterval', receiver=None, demands=['TimerHandler', 'float', '*'], returns='float'),
    ],
    "setItem": [
        PrototypeCall(constructor='Storage', fn='setItem', demands=['Storage', 'str', 'str'], returns='None'),
    ],
    "setKeyframes": [
        PrototypeCall(constructor='KeyframeEffect', fn='setKeyframes', demands=['KeyframeEffect', 'list'], returns='None'),
    ],
    "setLineDash": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setLineDash', demands=['CanvasRenderingContext2D', 'list'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setLineDash', demands=['OffscreenCanvasRenderingContext2D', 'list'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setLineDash', demands=['CanvasRenderingContext2D', 'Iterable'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setLineDash', demands=['OffscreenCanvasRenderingContext2D', 'Iterable'], returns='None'),
    ],
    "setLiveSeekableRange": [
        PrototypeCall(constructor='MediaSource', fn='setLiveSeekableRange', demands=['MediaSource', 'float', 'float'], returns='None'),
    ],
    "setLocalDescription": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection', 'RTCLocalSessionDescriptionInit'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection', 'RTCLocalSessionDescriptionInit', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "setMatrix": [
        PrototypeCall(constructor='SVGTransform', fn='setMatrix', demands=['SVGTransform'], returns='None'),
        PrototypeCall(constructor='SVGTransform', fn='setMatrix', demands=['SVGTransform', 'DOMMatrix2DInit'], returns='None'),
    ],
    "setMatrixValue": [
        PrototypeCall(constructor='DOMMatrix', fn='setMatrixValue', demands=['DOMMatrix', 'str'], returns='DOMMatrix'),
    ],
    "setMediaKeys": [
        PrototypeCall(constructor='HTMLMediaElement', fn='setMediaKeys', demands=['HTMLMediaElement', 'MediaKeys'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='setMediaKeys', demands=['HTMLAudioElement', 'MediaKeys'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='setMediaKeys', demands=['HTMLVideoElement', 'MediaKeys'], returns='None'),
    ],
    "setMicrophoneActive": [
        PrototypeCall(constructor='MediaSession', fn='setMicrophoneActive', demands=['MediaSession', 'bool'], returns='None'),
    ],
    "setMilliseconds": [
        PrototypeCall(constructor='Date', fn='setMilliseconds', demands=['Date', 'float'], returns='float'),
    ],
    "setMinutes": [
        PrototypeCall(constructor='Date', fn='setMinutes', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setMinutes', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setMinutes', demands=['Date', 'float', 'float', 'float'], returns='float'),
    ],
    "setMonth": [
        PrototypeCall(constructor='Date', fn='setMonth', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setMonth', demands=['Date', 'float', 'float'], returns='float'),
    ],
    "setNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='setNamedItem', demands=['NamedNodeMap', 'Attr'], returns='Attr'),
    ],
    "setNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='setNamedItemNS', demands=['NamedNodeMap', 'Attr'], returns='Attr'),
    ],
    "setOrientToAngle": [
        PrototypeCall(constructor='SVGMarkerElement', fn='setOrientToAngle', demands=['SVGMarkerElement', 'SVGAngle'], returns='None'),
    ],
    "setOrientToAuto": [
        PrototypeCall(constructor='SVGMarkerElement', fn='setOrientToAuto', demands=['SVGMarkerElement'], returns='None'),
    ],
    "setOrientation": [
        PrototypeCall(constructor='AudioListener', fn='setOrientation', demands=['AudioListener', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='setOrientation', demands=['PannerNode', 'float', 'float', 'float'], returns='None'),
    ],
    "setParameter": [
        PrototypeCall(constructor='XSLTProcessor', fn='setParameter', demands=['XSLTProcessor', 'str', 'str', '*'], returns='None'),
    ],
    "setParameters": [
        PrototypeCall(constructor='RTCRtpSender', fn='setParameters', demands=['RTCRtpSender', 'RTCRtpSendParameters'], returns='None'),
        PrototypeCall(constructor='RTCRtpSender', fn='setParameters', demands=['RTCRtpSender', 'RTCRtpSendParameters', 'RTCSetParameterOptions'], returns='None'),
    ],
    "setPeriodicWave": [
        PrototypeCall(constructor='OscillatorNode', fn='setPeriodicWave', demands=['OscillatorNode', 'PeriodicWave'], returns='None'),
    ],
    "setPointerCapture": [
        PrototypeCall(constructor='Element', fn='setPointerCapture', demands=['Element', 'float'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='setPointerCapture', demands=['MathMLElement', 'float'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='setPointerCapture', demands=['SVGElement', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='setPointerCapture', demands=['HTMLElement', 'float'], returns='None'),
    ],
    "setPosition": [
        PrototypeCall(constructor='AudioListener', fn='setPosition', demands=['AudioListener', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='setPosition', demands=['PannerNode', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Selection', fn='setPosition', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='setPosition', demands=['Selection', 'Node', 'float'], returns='None'),
    ],
    "setPositionState": [
        PrototypeCall(constructor='MediaSession', fn='setPositionState', demands=['MediaSession'], returns='None'),
        PrototypeCall(constructor='MediaSession', fn='setPositionState', demands=['MediaSession', 'MediaPositionState'], returns='None'),
    ],
    "setProperty": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='setProperty', demands=['CSSStyleDeclaration', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='CSSStyleDeclaration', fn='setProperty', demands=['CSSStyleDeclaration', 'str', 'str', 'str'], returns='None'),
    ],
    "setPrototypeOf": [
        PrototypeCall(constructor='ObjectConstructor', fn='setPrototypeOf', demands=['ObjectConstructor', '*', 'dict'], returns='*'),
        PrototypeCall(constructor='ProxyHandler', fn='setPrototypeOf', demands=['ProxyHandler', 'T', 'dict'], returns='bool'),
    ],
    "setRangeText": [
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str', 'float', 'float', 'SelectionMode'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str', 'float', 'float', 'SelectionMode'], returns='None'),
    ],
    "setRemoteDescription": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setRemoteDescription', demands=['RTCPeerConnection', 'RTCSessionDescriptionInit'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setRemoteDescription', demands=['RTCPeerConnection', 'RTCSessionDescriptionInit', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "setRequestHeader": [
        PrototypeCall(constructor='XMLHttpRequest', fn='setRequestHeader', demands=['XMLHttpRequest', 'str', 'str'], returns='None'),
    ],
    "setResourceTimingBufferSize": [
        PrototypeCall(constructor='Performance', fn='setResourceTimingBufferSize', demands=['Performance', 'float'], returns='None'),
    ],
    "setRotate": [
        PrototypeCall(constructor='SVGTransform', fn='setRotate', demands=['SVGTransform', 'float', 'float', 'float'], returns='None'),
    ],
    "setScale": [
        PrototypeCall(constructor='SVGTransform', fn='setScale', demands=['SVGTransform', 'float', 'float'], returns='None'),
    ],
    "setSeconds": [
        PrototypeCall(constructor='Date', fn='setSeconds', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setSeconds', demands=['Date', 'float', 'float'], returns='float'),
    ],
    "setSelectionRange": [
        PrototypeCall(constructor='HTMLInputElement', fn='setSelectionRange', demands=['HTMLInputElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setSelectionRange', demands=['HTMLInputElement', 'float', 'float', '"forward"'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setSelectionRange', demands=['HTMLTextAreaElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setSelectionRange', demands=['HTMLTextAreaElement', 'float', 'float', '"forward"'], returns='None'),
    ],
    "setServerCertificate": [
        PrototypeCall(constructor='MediaKeys', fn='setServerCertificate', demands=['MediaKeys', 'AllowSharedBufferSource'], returns='bool'),
    ],
    "setSinkId": [
        PrototypeCall(constructor='HTMLMediaElement', fn='setSinkId', demands=['HTMLMediaElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLAudioElement', fn='setSinkId', demands=['HTMLAudioElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLVideoElement', fn='setSinkId', demands=['HTMLVideoElement', 'str'], returns='None'),
    ],
    "setSkewX": [
        PrototypeCall(constructor='SVGTransform', fn='setSkewX', demands=['SVGTransform', 'float'], returns='None'),
    ],
    "setSkewY": [
        PrototypeCall(constructor='SVGTransform', fn='setSkewY', demands=['SVGTransform', 'float'], returns='None'),
    ],
    "setStart": [
        PrototypeCall(constructor='Range', fn='setStart', demands=['Range', 'Node', 'float'], returns='None'),
    ],
    "setStartAfter": [
        PrototypeCall(constructor='Range', fn='setStartAfter', demands=['Range', 'Node'], returns='None'),
    ],
    "setStartBefore": [
        PrototypeCall(constructor='Range', fn='setStartBefore', demands=['Range', 'Node'], returns='None'),
    ],
    "setStatus": [
        PrototypeCall(constructor='NavigatorLogin', fn='setStatus', demands=['NavigatorLogin', 'LoginStatus'], returns='None'),
    ],
    "setStdDeviation": [
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='setStdDeviation', demands=['SVGFEDropShadowElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='setStdDeviation', demands=['SVGFEGaussianBlurElement', 'float', 'float'], returns='None'),
    ],
    "setStreams": [
        PrototypeCall(constructor='RTCRtpSender', fn='setStreams', demands=['RTCRtpSender', '*'], returns='None'),
    ],
    "setTargetAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setTargetAtTime', demands=['AudioParam', 'float', 'float', 'float'], returns='AudioParam'),
    ],
    "setTime": [
        PrototypeCall(constructor='Date', fn='setTime', demands=['Date', 'float'], returns='float'),
    ],
    "setTimeout": [
        DirectCall(fn='setTimeout', receiver=None, demands=['TimerHandler', 'float'], returns='float'),
        DirectCall(fn='setTimeout', receiver=None, demands=['TimerHandler', 'float', '*'], returns='float'),
    ],
    "setTransform": [
        PrototypeCall(constructor='CanvasPattern', fn='setTransform', demands=['CanvasPattern'], returns='None'),
        PrototypeCall(constructor='CanvasPattern', fn='setTransform', demands=['CanvasPattern', 'DOMMatrix2DInit'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D', 'DOMMatrix2DInit'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D', 'DOMMatrix2DInit'], returns='None'),
    ],
    "setTranslate": [
        PrototypeCall(constructor='SVGTransform', fn='setTranslate', demands=['SVGTransform', 'float', 'float'], returns='None'),
    ],
    "setUTCDate": [
        PrototypeCall(constructor='Date', fn='setUTCDate', demands=['Date', 'float'], returns='float'),
    ],
    "setUTCFullYear": [
        PrototypeCall(constructor='Date', fn='setUTCFullYear', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCFullYear', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCFullYear', demands=['Date', 'float', 'float', 'float'], returns='float'),
    ],
    "setUTCHours": [
        PrototypeCall(constructor='Date', fn='setUTCHours', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCHours', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCHours', demands=['Date', 'float', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCHours', demands=['Date', 'float', 'float', 'float', 'float'], returns='float'),
    ],
    "setUTCMilliseconds": [
        PrototypeCall(constructor='Date', fn='setUTCMilliseconds', demands=['Date', 'float'], returns='float'),
    ],
    "setUTCMinutes": [
        PrototypeCall(constructor='Date', fn='setUTCMinutes', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCMinutes', demands=['Date', 'float', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCMinutes', demands=['Date', 'float', 'float', 'float'], returns='float'),
    ],
    "setUTCMonth": [
        PrototypeCall(constructor='Date', fn='setUTCMonth', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCMonth', demands=['Date', 'float', 'float'], returns='float'),
    ],
    "setUTCSeconds": [
        PrototypeCall(constructor='Date', fn='setUTCSeconds', demands=['Date', 'float'], returns='float'),
        PrototypeCall(constructor='Date', fn='setUTCSeconds', demands=['Date', 'float', 'float'], returns='float'),
    ],
    "setUint16": [
        PrototypeCall(constructor='DataView', fn='setUint16', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setUint16', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setUint32": [
        PrototypeCall(constructor='DataView', fn='setUint32', demands=['DataView', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DataView', fn='setUint32', demands=['DataView', 'float', 'float', 'bool'], returns='None'),
    ],
    "setUint8": [
        PrototypeCall(constructor='DataView', fn='setUint8', demands=['DataView', 'float', 'float'], returns='None'),
    ],
    "setValidity": [
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'ValidityStateFlags'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'ValidityStateFlags', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'ValidityStateFlags', 'str', 'HTMLElement'], returns='None'),
    ],
    "setValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "setValueCurveAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setValueCurveAtTime', demands=['AudioParam', 'list', 'float', 'float'], returns='AudioParam'),
        PrototypeCall(constructor='AudioParam', fn='setValueCurveAtTime', demands=['AudioParam', 'Iterable', 'float', 'float'], returns='AudioParam'),
    ],
    "shaderLocation": [
        FieldCall(field='shaderLocation', demands=['GPUVertexAttribute'], returns='float'),
        FieldCall(field='shaderLocation', demands=['GPUVertexAttribute', 'float'], returns='None'),
    ],
    "shaderSource": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='shaderSource', demands=['WebGLRenderingContext', 'WebGLShader', 'str'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='shaderSource', demands=['WebGL2RenderingContext', 'WebGLShader', 'str'], returns='None'),
    ],
    "shadowBlur": [
        FieldCall(field='shadowBlur', demands=['CanvasShadowStyles'], returns='float'),
        FieldCall(field='shadowBlur', demands=['CanvasShadowStyles', 'float'], returns='None'),
    ],
    "shadowColor": [
        FieldCall(field='shadowColor', demands=['CanvasShadowStyles'], returns='str'),
        FieldCall(field='shadowColor', demands=['CanvasShadowStyles', 'str'], returns='None'),
    ],
    "shadowOffsetX": [
        FieldCall(field='shadowOffsetX', demands=['CanvasShadowStyles'], returns='float'),
        FieldCall(field='shadowOffsetX', demands=['CanvasShadowStyles', 'float'], returns='None'),
    ],
    "shadowOffsetY": [
        FieldCall(field='shadowOffsetY', demands=['CanvasShadowStyles'], returns='float'),
        FieldCall(field='shadowOffsetY', demands=['CanvasShadowStyles', 'float'], returns='None'),
    ],
    "shadowRoot": [
        FieldCall(field='shadowRoot', demands=['Element'], returns='ShadowRoot'),
        FieldCall(field='shadowRoot', demands=['ElementInternals'], returns='ShadowRoot'),
    ],
    "shadowRootClonable": [
        FieldCall(field='shadowRootClonable', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootClonable', demands=['HTMLTemplateElement', 'bool'], returns='None'),
    ],
    "shadowRootDelegatesFocus": [
        FieldCall(field='shadowRootDelegatesFocus', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootDelegatesFocus', demands=['HTMLTemplateElement', 'bool'], returns='None'),
    ],
    "shadowRootMode": [
        FieldCall(field='shadowRootMode', demands=['HTMLTemplateElement'], returns='str'),
        FieldCall(field='shadowRootMode', demands=['HTMLTemplateElement', 'str'], returns='None'),
    ],
    "shadowRootSerializable": [
        FieldCall(field='shadowRootSerializable', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootSerializable', demands=['HTMLTemplateElement', 'bool'], returns='None'),
    ],
    "shadowRoots": [
        FieldCall(field='shadowRoots', demands=['CaretPositionFromPointOptions'], returns='list'),
        FieldCall(field='shadowRoots', demands=['CaretPositionFromPointOptions', 'list'], returns='None'),
        FieldCall(field='shadowRoots', demands=['GetComposedRangesOptions'], returns='list'),
        FieldCall(field='shadowRoots', demands=['GetComposedRangesOptions', 'list'], returns='None'),
        FieldCall(field='shadowRoots', demands=['GetHTMLOptions'], returns='list'),
        FieldCall(field='shadowRoots', demands=['GetHTMLOptions', 'list'], returns='None'),
    ],
    "shape": [
        FieldCall(field='shape', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='shape', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='shape', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='shape', demands=['HTMLAreaElement', 'str'], returns='None'),
    ],
    "shapeImageThreshold": [
        FieldCall(field='shapeImageThreshold', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='shapeImageThreshold', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "shapeMargin": [
        FieldCall(field='shapeMargin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='shapeMargin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "shapeOutside": [
        FieldCall(field='shapeOutside', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='shapeOutside', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "shapeRendering": [
        FieldCall(field='shapeRendering', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='shapeRendering', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "share": [
        PrototypeCall(constructor='Navigator', fn='share', demands=['Navigator'], returns='None'),
        PrototypeCall(constructor='Navigator', fn='share', demands=['Navigator', 'ShareData'], returns='None'),
    ],
    "sheet": [
        FieldCall(field='sheet', demands=['LinkStyle'], returns='CSSStyleSheet'),
    ],
    "shift": [
        PrototypeCall(constructor='Array', fn='shift', demands=['list'], returns='T'),
    ],
    "shiftKey": [
        FieldCall(field='shiftKey', demands=['EventModifierInit'], returns='bool'),
        FieldCall(field='shiftKey', demands=['EventModifierInit', 'bool'], returns='None'),
        FieldCall(field='shiftKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='shiftKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='shiftKey', demands=['TouchEvent'], returns='bool'),
    ],
    "shippingAddress": [
        FieldCall(field='shippingAddress', demands=['PaymentValidationErrors'], returns='AddressErrors'),
        FieldCall(field='shippingAddress', demands=['PaymentValidationErrors', 'AddressErrors'], returns='None'),
        FieldCall(field='shippingAddress', demands=['PaymentRequest'], returns='PaymentAddress'),
        FieldCall(field='shippingAddress', demands=['PaymentResponse'], returns='PaymentAddress'),
    ],
    "shippingAddressErrors": [
        FieldCall(field='shippingAddressErrors', demands=['PaymentDetailsUpdate'], returns='AddressErrors'),
        FieldCall(field='shippingAddressErrors', demands=['PaymentDetailsUpdate', 'AddressErrors'], returns='None'),
    ],
    "shippingOption": [
        FieldCall(field='shippingOption', demands=['PaymentRequest'], returns='str'),
        FieldCall(field='shippingOption', demands=['PaymentResponse'], returns='str'),
    ],
    "shippingOptions": [
        FieldCall(field='shippingOptions', demands=['PaymentDetailsBase'], returns='list'),
        FieldCall(field='shippingOptions', demands=['PaymentDetailsBase', 'list'], returns='None'),
    ],
    "shippingType": [
        FieldCall(field='shippingType', demands=['PaymentOptions'], returns='PaymentShippingType'),
        FieldCall(field='shippingType', demands=['PaymentOptions', 'PaymentShippingType'], returns='None'),
        FieldCall(field='shippingType', demands=['PaymentRequest'], returns='PaymentShippingType'),
    ],
    "shippingaddresschange": [
        FieldCall(field='shippingaddresschange', demands=['PaymentRequestEventMap'], returns='PaymentRequestUpdateEvent'),
        FieldCall(field='shippingaddresschange', demands=['PaymentRequestEventMap', 'PaymentRequestUpdateEvent'], returns='None'),
    ],
    "shippingoptionchange": [
        FieldCall(field='shippingoptionchange', demands=['PaymentRequestEventMap'], returns='PaymentRequestUpdateEvent'),
        FieldCall(field='shippingoptionchange', demands=['PaymentRequestEventMap', 'PaymentRequestUpdateEvent'], returns='None'),
    ],
    "show": [
        PrototypeCall(constructor='HTMLDialogElement', fn='show', demands=['HTMLDialogElement'], returns='None'),
        FieldCall(field='show', demands=['NotificationEventMap'], returns='Event'),
        FieldCall(field='show', demands=['NotificationEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='show', demands=['PaymentRequest'], returns='PaymentResponse'),
        PrototypeCall(constructor='PaymentRequest', fn='show', demands=['PaymentRequest', 'PaymentDetailsUpdate'], returns='PaymentResponse'),
    ],
    "showModal": [
        PrototypeCall(constructor='HTMLDialogElement', fn='showModal', demands=['HTMLDialogElement'], returns='None'),
    ],
    "showNotification": [
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='showNotification', demands=['ServiceWorkerRegistration', 'str'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='showNotification', demands=['ServiceWorkerRegistration', 'str', 'NotificationOptions'], returns='None'),
    ],
    "showPicker": [
        PrototypeCall(constructor='HTMLInputElement', fn='showPicker', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='showPicker', demands=['HTMLSelectElement'], returns='None'),
    ],
    "showPopover": [
        PrototypeCall(constructor='HTMLElement', fn='showPopover', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadElement', fn='showPopover', demands=['HTMLHeadElement'], returns='None'),
        PrototypeCall(constructor='HTMLModElement', fn='showPopover', demands=['HTMLModElement'], returns='None'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='showPopover', demands=['HTMLDetailsElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableElement', fn='showPopover', demands=['HTMLTableElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='showPopover', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLImageElement', fn='showPopover', demands=['HTMLImageElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='showPopover', demands=['HTMLOptGroupElement'], returns='None'),
        PrototypeCall(constructor='HTMLDListElement', fn='showPopover', demands=['HTMLDListElement'], returns='None'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='showPopover', demands=['HTMLTemplateElement'], returns='None'),
        PrototypeCall(constructor='HTMLTitleElement', fn='showPopover', demands=['HTMLTitleElement'], returns='None'),
        PrototypeCall(constructor='HTMLPreElement', fn='showPopover', demands=['HTMLPreElement'], returns='None'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='showPopover', demands=['HTMLAnchorElement'], returns='None'),
        PrototypeCall(constructor='HTMLPictureElement', fn='showPopover', demands=['HTMLPictureElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='showPopover', demands=['HTMLTableRowElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='showPopover', demands=['HTMLTableSectionElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='showPopover', demands=['HTMLFrameSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBaseElement', fn='showPopover', demands=['HTMLBaseElement'], returns='None'),
        PrototypeCall(constructor='HTMLFontElement', fn='showPopover', demands=['HTMLFontElement'], returns='None'),
        PrototypeCall(constructor='HTMLAreaElement', fn='showPopover', demands=['HTMLAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLOListElement', fn='showPopover', demands=['HTMLOListElement'], returns='None'),
        PrototypeCall(constructor='HTMLBodyElement', fn='showPopover', demands=['HTMLBodyElement'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='showPopover', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='showPopover', demands=['HTMLSelectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='showPopover', demands=['HTMLTableCaptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLScriptElement', fn='showPopover', demands=['HTMLScriptElement'], returns='None'),
        PrototypeCall(constructor='HTMLLIElement', fn='showPopover', demands=['HTMLLIElement'], returns='None'),
        PrototypeCall(constructor='HTMLStyleElement', fn='showPopover', demands=['HTMLStyleElement'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='showPopover', demands=['HTMLTextAreaElement'], returns='None'),
        PrototypeCall(constructor='HTMLDivElement', fn='showPopover', demands=['HTMLDivElement'], returns='None'),
        PrototypeCall(constructor='HTMLProgressElement', fn='showPopover', demands=['HTMLProgressElement'], returns='None'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='showPopover', demands=['HTMLIFrameElement'], returns='None'),
        PrototypeCall(constructor='HTMLMeterElement', fn='showPopover', demands=['HTMLMeterElement'], returns='None'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='showPopover', demands=['HTMLHeadingElement'], returns='None'),
        PrototypeCall(constructor='HTMLObjectElement', fn='showPopover', demands=['HTMLObjectElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='showPopover', demands=['HTMLTableCellElement'], returns='None'),
        PrototypeCall(constructor='HTMLLegendElement', fn='showPopover', demands=['HTMLLegendElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataListElement', fn='showPopover', demands=['HTMLDataListElement'], returns='None'),
        PrototypeCall(constructor='HTMLUListElement', fn='showPopover', demands=['HTMLUListElement'], returns='None'),
        PrototypeCall(constructor='HTMLLabelElement', fn='showPopover', demands=['HTMLLabelElement'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='showPopover', demands=['HTMLButtonElement'], returns='None'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='showPopover', demands=['HTMLParagraphElement'], returns='None'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='showPopover', demands=['HTMLDirectoryElement'], returns='None'),
        PrototypeCall(constructor='HTMLSourceElement', fn='showPopover', demands=['HTMLSourceElement'], returns='None'),
        PrototypeCall(constructor='HTMLMenuElement', fn='showPopover', demands=['HTMLMenuElement'], returns='None'),
        PrototypeCall(constructor='HTMLTrackElement', fn='showPopover', demands=['HTMLTrackElement'], returns='None'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='showPopover', demands=['HTMLQuoteElement'], returns='None'),
        PrototypeCall(constructor='HTMLSpanElement', fn='showPopover', demands=['HTMLSpanElement'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='showPopover', demands=['HTMLOutputElement'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='showPopover', demands=['HTMLMarqueeElement'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='showPopover', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='showPopover', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='showPopover', demands=['HTMLCanvasElement'], returns='None'),
        PrototypeCall(constructor='HTMLTableColElement', fn='showPopover', demands=['HTMLTableColElement'], returns='None'),
        PrototypeCall(constructor='HTMLDataElement', fn='showPopover', demands=['HTMLDataElement'], returns='None'),
        PrototypeCall(constructor='HTMLParamElement', fn='showPopover', demands=['HTMLParamElement'], returns='None'),
        PrototypeCall(constructor='HTMLMapElement', fn='showPopover', demands=['HTMLMapElement'], returns='None'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='showPopover', demands=['HTMLUnknownElement'], returns='None'),
        PrototypeCall(constructor='HTMLHRElement', fn='showPopover', demands=['HTMLHRElement'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='showPopover', demands=['HTMLFieldSetElement'], returns='None'),
        PrototypeCall(constructor='HTMLBRElement', fn='showPopover', demands=['HTMLBRElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionElement', fn='showPopover', demands=['HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='showPopover', demands=['HTMLLinkElement'], returns='None'),
        PrototypeCall(constructor='HTMLMetaElement', fn='showPopover', demands=['HTMLMetaElement'], returns='None'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='showPopover', demands=['HTMLHtmlElement'], returns='None'),
        PrototypeCall(constructor='HTMLTimeElement', fn='showPopover', demands=['HTMLTimeElement'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='showPopover', demands=['HTMLSlotElement'], returns='None'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='showPopover', demands=['HTMLEmbedElement'], returns='None'),
        PrototypeCall(constructor='HTMLFrameElement', fn='showPopover', demands=['HTMLFrameElement'], returns='None'),
    ],
    "sign": [
        PrototypeCall(constructor='SubtleCrypto', fn='sign', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AllowSharedBufferSource'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Math', fn='sign', demands=['Math', 'float'], returns='float'),
    ],
    "signal": [
        FieldCall(field='signal', demands=['AddEventListenerOptions'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['AddEventListenerOptions', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['CredentialCreationOptions'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['CredentialCreationOptions', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['CredentialRequestOptions'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['CredentialRequestOptions', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['LockOptions'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['LockOptions', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['RequestInit'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['RequestInit', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['StreamPipeOptions'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['StreamPipeOptions', 'AbortSignal'], returns='None'),
        FieldCall(field='signal', demands=['AbortController'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['Request'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['WritableStreamDefaultController'], returns='AbortSignal'),
    ],
    "signalingState": [
        FieldCall(field='signalingState', demands=['RTCPeerConnection'], returns='RTCSignalingState'),
    ],
    "signalingstatechange": [
        FieldCall(field='signalingstatechange', demands=['RTCPeerConnectionEventMap'], returns='Event'),
        FieldCall(field='signalingstatechange', demands=['RTCPeerConnectionEventMap', 'Event'], returns='None'),
    ],
    "signature": [
        FieldCall(field='signature', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "silent": [
        FieldCall(field='silent', demands=['NotificationOptions'], returns='bool'),
        FieldCall(field='silent', demands=['NotificationOptions', 'bool'], returns='None'),
        FieldCall(field='silent', demands=['Notification'], returns='bool'),
    ],
    "silentConcealedSamples": [
        FieldCall(field='silentConcealedSamples', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='silentConcealedSamples', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "sin": [
        PrototypeCall(constructor='Math', fn='sin', demands=['Math', 'float'], returns='float'),
    ],
    "singleNodeValue": [
        FieldCall(field='singleNodeValue', demands=['XPathResult'], returns='Node'),
    ],
    "sinh": [
        PrototypeCall(constructor='Math', fn='sinh', demands=['Math', 'float'], returns='float'),
    ],
    "sinkId": [
        FieldCall(field='sinkId', demands=['HTMLMediaElement'], returns='str'),
    ],
    "size": [
        FieldCall(field='size', demands=['QueuingStrategy'], returns='QueuingStrategySize'),
        FieldCall(field='size', demands=['QueuingStrategy', 'QueuingStrategySize'], returns='None'),
        FieldCall(field='size', demands=['WriteParams'], returns='float'),
        FieldCall(field='size', demands=['WriteParams', 'float'], returns='None'),
        FieldCall(field='size', demands=['Blob'], returns='float'),
        FieldCall(field='size', demands=['ByteLengthQueuingStrategy'], returns='QueuingStrategySize'),
        FieldCall(field='size', demands=['CountQueuingStrategy'], returns='QueuingStrategySize'),
        FieldCall(field='size', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='size', demands=['HTMLFontElement', 'str'], returns='None'),
        FieldCall(field='size', demands=['HTMLHRElement'], returns='str'),
        FieldCall(field='size', demands=['HTMLHRElement', 'str'], returns='None'),
        FieldCall(field='size', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='size', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='size', demands=['HTMLSelectElement'], returns='float'),
        FieldCall(field='size', demands=['HTMLSelectElement', 'float'], returns='None'),
        FieldCall(field='size', demands=['LargestContentfulPaint'], returns='float'),
        FieldCall(field='size', demands=['MediaKeyStatusMap'], returns='float'),
        FieldCall(field='size', demands=['StylePropertyMapReadOnly'], returns='float'),
        FieldCall(field='size', demands=['URLSearchParams'], returns='float'),
        FieldCall(field='size', demands=['VTTCue'], returns='float'),
        FieldCall(field='size', demands=['VTTCue', 'float'], returns='None'),
        FieldCall(field='size', demands=['WebGLActiveInfo'], returns='GLint'),
        FieldCall(field='size', demands=['GPUBufferDescriptor'], returns='float'),
        FieldCall(field='size', demands=['GPUBufferDescriptor', 'float'], returns='None'),
        FieldCall(field='size', demands=['GPUBufferBinding'], returns='float'),
        FieldCall(field='size', demands=['GPUBufferBinding', 'float'], returns='None'),
        FieldCall(field='size', demands=['Map'], returns='float'),
        FieldCall(field='size', demands=['ReadonlyMap'], returns='float'),
        FieldCall(field='size', demands=['Set'], returns='float'),
        FieldCall(field='size', demands=['ReadonlySet'], returns='float'),
        FieldCall(field='size', demands=['ReadonlySetLike'], returns='float'),
    ],
    "sizes": [
        FieldCall(field='sizes', demands=['MediaImage'], returns='str'),
        FieldCall(field='sizes', demands=['MediaImage', 'str'], returns='None'),
        FieldCall(field='sizes', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='sizes', demands=['HTMLImageElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLLinkElement', fn='sizes', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        PrototypeCall(constructor='HTMLLinkElement', fn='sizes', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='sizes', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='sizes', demands=['HTMLSourceElement', 'str'], returns='None'),
    ],
    "skewX": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewX', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewX', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewX', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewX', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "skewXSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='skewXSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewXSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "skewY": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewY', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewY', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewY', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewY', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "skewYSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='skewYSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewYSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "skipTransition": [
        PrototypeCall(constructor='ViewTransition', fn='skipTransition', demands=['ViewTransition'], returns='None'),
    ],
    "skipped": [
        FieldCall(field='skipped', demands=['ContentVisibilityAutoStateChangeEventInit'], returns='bool'),
        FieldCall(field='skipped', demands=['ContentVisibilityAutoStateChangeEventInit', 'bool'], returns='None'),
        FieldCall(field='skipped', demands=['ContentVisibilityAutoStateChangeEvent'], returns='bool'),
    ],
    "slice": [
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob'], returns='Blob'),
        PrototypeCall(constructor='File', fn='slice', demands=['File'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'float'], returns='Blob'),
        PrototypeCall(constructor='File', fn='slice', demands=['File', 'float'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'float', 'float'], returns='Blob'),
        PrototypeCall(constructor='File', fn='slice', demands=['File', 'float', 'float'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'float', 'float', 'str'], returns='Blob'),
        PrototypeCall(constructor='File', fn='slice', demands=['File', 'float', 'float', 'str'], returns='Blob'),
        PrototypeCall(constructor='BigInt64Array', fn='slice', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='slice', demands=['BigInt64Array', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='slice', demands=['BigInt64Array', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='slice', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='slice', demands=['BigUint64Array', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='slice', demands=['BigUint64Array', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='String', fn='slice', demands=['str'], returns='str'),
        PrototypeCall(constructor='String', fn='slice', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='slice', demands=['str', 'float', 'float'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='slice', demands=['ReadonlyArray'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='slice', demands=['ReadonlyArray', 'float'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='slice', demands=['ReadonlyArray', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='ConcatArray', fn='slice', demands=['ConcatArray'], returns='list'),
        PrototypeCall(constructor='ConcatArray', fn='slice', demands=['ConcatArray', 'float'], returns='list'),
        PrototypeCall(constructor='ConcatArray', fn='slice', demands=['ConcatArray', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='slice', demands=['list'], returns='list'),
        PrototypeCall(constructor='Array', fn='slice', demands=['list', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='slice', demands=['list', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='ArrayBuffer', fn='slice', demands=['ArrayBuffer'], returns='ArrayBuffer'),
        PrototypeCall(constructor='ArrayBuffer', fn='slice', demands=['ArrayBuffer', 'float'], returns='ArrayBuffer'),
        PrototypeCall(constructor='ArrayBuffer', fn='slice', demands=['ArrayBuffer', 'float', 'float'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Int8Array', fn='slice', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='slice', demands=['Int8Array', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='slice', demands=['Int8Array', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='slice', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='slice', demands=['Uint8Array', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='slice', demands=['Uint8Array', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='slice', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='slice', demands=['Uint8ClampedArray', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='slice', demands=['Uint8ClampedArray', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='slice', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='slice', demands=['Int16Array', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='slice', demands=['Int16Array', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='slice', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='slice', demands=['Uint16Array', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='slice', demands=['Uint16Array', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='slice', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='slice', demands=['Int32Array', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='slice', demands=['Int32Array', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='slice', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='slice', demands=['Uint32Array', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='slice', demands=['Uint32Array', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='slice', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='slice', demands=['Float32Array', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='slice', demands=['Float32Array', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='slice', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='slice', demands=['Float64Array', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='slice', demands=['Float64Array', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='SharedArrayBuffer', fn='slice', demands=['SharedArrayBuffer'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='SharedArrayBuffer', fn='slice', demands=['SharedArrayBuffer', 'float'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='SharedArrayBuffer', fn='slice', demands=['SharedArrayBuffer', 'float', 'float'], returns='SharedArrayBuffer'),
        PrototypeCall(constructor='Float16Array', fn='slice', demands=['Float16Array'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='slice', demands=['Float16Array', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='slice', demands=['Float16Array', 'float', 'float'], returns='Float16Array'),
    ],
    "slope": [
        FieldCall(field='slope', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "slot": [
        FieldCall(field='slot', demands=['Element'], returns='str'),
        FieldCall(field='slot', demands=['Element', 'str'], returns='None'),
        FieldCall(field='slot', demands=['HTMLElementTagNameMap'], returns='HTMLSlotElement'),
        FieldCall(field='slot', demands=['HTMLElementTagNameMap', 'HTMLSlotElement'], returns='None'),
    ],
    "slotAssignment": [
        FieldCall(field='slotAssignment', demands=['ShadowRootInit'], returns='SlotAssignmentMode'),
        FieldCall(field='slotAssignment', demands=['ShadowRootInit', 'SlotAssignmentMode'], returns='None'),
        FieldCall(field='slotAssignment', demands=['ShadowRoot'], returns='SlotAssignmentMode'),
    ],
    "slotchange": [
        FieldCall(field='slotchange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='slotchange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='slotchange', demands=['ShadowRootEventMap'], returns='Event'),
        FieldCall(field='slotchange', demands=['ShadowRootEventMap', 'Event'], returns='None'),
    ],
    "small": [
        FieldCall(field='small', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='small', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='String', fn='small', demands=['str'], returns='str'),
    ],
    "smooth": [
        FieldCall(field='smooth', demands=['MediaCapabilitiesInfo'], returns='bool'),
        FieldCall(field='smooth', demands=['MediaCapabilitiesInfo', 'bool'], returns='None'),
    ],
    "smoothingTimeConstant": [
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserOptions'], returns='float'),
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserOptions', 'float'], returns='None'),
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserNode', 'float'], returns='None'),
    ],
    "snapToLines": [
        FieldCall(field='snapToLines', demands=['VTTCue'], returns='bool'),
        FieldCall(field='snapToLines', demands=['VTTCue', 'bool'], returns='None'),
    ],
    "snapshotItem": [
        PrototypeCall(constructor='XPathResult', fn='snapshotItem', demands=['XPathResult', 'float'], returns='Node'),
    ],
    "snapshotLength": [
        FieldCall(field='snapshotLength', demands=['XPathResult'], returns='float'),
    ],
    "software": [
        FieldCall(field='software', demands=['MIDIOptions'], returns='bool'),
        FieldCall(field='software', demands=['MIDIOptions', 'bool'], returns='None'),
    ],
    "some": [
        PrototypeCall(constructor='BigInt64Array', fn='some', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array'], returns='bool'),
        PrototypeCall(constructor='BigInt64Array', fn='some', demands=['BigInt64Array', '(value:bigint,index:number,array:BigInt64Array', '*'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='some', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array'], returns='bool'),
        PrototypeCall(constructor='BigUint64Array', fn='some', demands=['BigUint64Array', '(value:bigint,index:number,array:BigUint64Array', '*'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='some', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown'], returns='bool'),
        PrototypeCall(constructor='ReadonlyArray', fn='some', demands=['ReadonlyArray', '(value:T,index:number,array:readonlyT[])=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Array', fn='some', demands=['list', '(value:T,index:number,array:T[])=>unknown'], returns='bool'),
        PrototypeCall(constructor='Array', fn='some', demands=['list', '(value:T,index:number,array:T[])=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='some', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int8Array', fn='some', demands=['Int8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='some', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint8Array', fn='some', demands=['Uint8Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='some', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='some', demands=['Uint8ClampedArray', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='some', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int16Array', fn='some', demands=['Int16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='some', demands=['Uint16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint16Array', fn='some', demands=['Uint16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='some', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Int32Array', fn='some', demands=['Int32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='some', demands=['Uint32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Uint32Array', fn='some', demands=['Uint32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='some', demands=['Float32Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float32Array', fn='some', demands=['Float32Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='some', demands=['Float64Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float64Array', fn='some', demands=['Float64Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='some', demands=['Float16Array', '(value:number,index:number,array:this)=>unknown'], returns='bool'),
        PrototypeCall(constructor='Float16Array', fn='some', demands=['Float16Array', '(value:number,index:number,array:this)=>unknown', '*'], returns='bool'),
    ],
    "sort": [
        PrototypeCall(constructor='URLSearchParams', fn='sort', demands=['URLSearchParams'], returns='None'),
        PrototypeCall(constructor='BigInt64Array', fn='sort', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='sort', demands=['BigInt64Array', '(a:bigint,b:bigint)=>number'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='sort', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='sort', demands=['BigUint64Array', '(a:bigint,b:bigint)=>number'], returns='BigUint64Array'),
        PrototypeCall(constructor='Array', fn='sort', demands=['list'], returns='list'),
        PrototypeCall(constructor='Array', fn='sort', demands=['list', '(a:T,b:T)=>number'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='sort', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='sort', demands=['Int8Array', '(a:number,b:number)=>number'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='sort', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='sort', demands=['Uint8Array', '(a:number,b:number)=>number'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='sort', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='sort', demands=['Uint8ClampedArray', '(a:number,b:number)=>number'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='sort', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='sort', demands=['Int16Array', '(a:number,b:number)=>number'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='sort', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='sort', demands=['Uint16Array', '(a:number,b:number)=>number'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='sort', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='sort', demands=['Int32Array', '(a:number,b:number)=>number'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='sort', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='sort', demands=['Uint32Array', '(a:number,b:number)=>number'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='sort', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='sort', demands=['Float32Array', '(a:number,b:number)=>number'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='sort', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='sort', demands=['Float64Array', '(a:number,b:number)=>number'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='sort', demands=['Float16Array'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='sort', demands=['Float16Array', '(a:number,b:number)=>number'], returns='Float16Array'),
    ],
    "sortingCode": [
        FieldCall(field='sortingCode', demands=['AddressErrors'], returns='str'),
        FieldCall(field='sortingCode', demands=['AddressErrors', 'str'], returns='None'),
        FieldCall(field='sortingCode', demands=['PaymentAddress'], returns='str'),
    ],
    "source": [
        FieldCall(field='source', demands=['MessageEventInit'], returns='MessageEventSource'),
        FieldCall(field='source', demands=['MessageEventInit', 'MessageEventSource'], returns='None'),
        FieldCall(field='source', demands=['RTCRtpContributingSource'], returns='float'),
        FieldCall(field='source', demands=['RTCRtpContributingSource', 'float'], returns='None'),
        FieldCall(field='source', demands=['WebTransportErrorOptions'], returns='WebTransportErrorSource'),
        FieldCall(field='source', demands=['WebTransportErrorOptions', 'WebTransportErrorSource'], returns='None'),
        FieldCall(field='source', demands=['IDBCursor'], returns='IDBObjectStore'),
        FieldCall(field='source', demands=['IDBRequest'], returns='IDBObjectStore'),
        FieldCall(field='source', demands=['MessageEvent'], returns='MessageEventSource'),
        FieldCall(field='source', demands=['WebTransportError'], returns='WebTransportErrorSource'),
        FieldCall(field='source', demands=['HTMLElementTagNameMap'], returns='HTMLSourceElement'),
        FieldCall(field='source', demands=['HTMLElementTagNameMap', 'HTMLSourceElement'], returns='None'),
        FieldCall(field='source', demands=['regex'], returns='str'),
    ],
    "sourceBuffers": [
        FieldCall(field='sourceBuffers', demands=['MediaSource'], returns='SourceBufferList'),
    ],
    "sourceFile": [
        FieldCall(field='sourceFile', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='sourceFile', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='sourceFile', demands=['CSPViolationReportBody'], returns='str'),
        FieldCall(field='sourceFile', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "sourceclose": [
        FieldCall(field='sourceclose', demands=['MediaSourceEventMap'], returns='Event'),
        FieldCall(field='sourceclose', demands=['MediaSourceEventMap', 'Event'], returns='None'),
    ],
    "sourceended": [
        FieldCall(field='sourceended', demands=['MediaSourceEventMap'], returns='Event'),
        FieldCall(field='sourceended', demands=['MediaSourceEventMap', 'Event'], returns='None'),
    ],
    "sourceopen": [
        FieldCall(field='sourceopen', demands=['MediaSourceEventMap'], returns='Event'),
        FieldCall(field='sourceopen', demands=['MediaSourceEventMap', 'Event'], returns='None'),
    ],
    "spacer": [
        FieldCall(field='spacer', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLUnknownElement'),
        FieldCall(field='spacer', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLUnknownElement'], returns='None'),
    ],
    "spacing": [
        FieldCall(field='spacing', demands=['SVGTextPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "span": [
        FieldCall(field='span', demands=['HTMLTableColElement'], returns='float'),
        FieldCall(field='span', demands=['HTMLTableColElement', 'float'], returns='None'),
        FieldCall(field='span', demands=['HTMLElementTagNameMap'], returns='HTMLSpanElement'),
        FieldCall(field='span', demands=['HTMLElementTagNameMap', 'HTMLSpanElement'], returns='None'),
    ],
    "spatialIndex": [
        FieldCall(field='spatialIndex', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='spatialIndex', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
    ],
    "spatialRendering": [
        FieldCall(field='spatialRendering', demands=['AudioConfiguration'], returns='bool'),
        FieldCall(field='spatialRendering', demands=['AudioConfiguration', 'bool'], returns='None'),
    ],
    "speak": [
        PrototypeCall(constructor='SpeechSynthesis', fn='speak', demands=['SpeechSynthesis', 'SpeechSynthesisUtterance'], returns='None'),
    ],
    "speakAs": [
        FieldCall(field='speakAs', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='speakAs', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "speaking": [
        FieldCall(field='speaking', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "species": [
        FieldCall(field='species', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "specified": [
        FieldCall(field='specified', demands=['Attr'], returns='bool'),
    ],
    "specularConstant": [
        FieldCall(field='specularConstant', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "specularExponent": [
        FieldCall(field='specularExponent', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='specularExponent', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "speechSynthesis": [
        FieldCall(field='speechSynthesis', demands=['Window'], returns='SpeechSynthesis'),
    ],
    "speed": [
        FieldCall(field='speed', demands=['GeolocationCoordinates'], returns='float'),
    ],
    "spellcheck": [
        FieldCall(field='spellcheck', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='spellcheck', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "splice": [
        PrototypeCall(constructor='Array', fn='splice', demands=['list', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='splice', demands=['list', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='splice', demands=['list', 'float', 'float', '*'], returns='list'),
    ],
    "split": [
        FieldCall(field='split', demands=['SymbolConstructor'], returns='uniquesymbol'),
        PrototypeCall(constructor='String', fn='split', demands=['str'], returns='list'),
        PrototypeCall(constructor='String', fn='split', demands=['str', 'regex'], returns='list'),
        PrototypeCall(constructor='String', fn='split', demands=['str', 'regex', 'float'], returns='list'),
        PrototypeCall(constructor='String', fn='split', demands=['str', 'str'], returns='list'),
        PrototypeCall(constructor='String', fn='split', demands=['str', 'str', 'float'], returns='list'),
    ],
    "splitText": [
        PrototypeCall(constructor='Text', fn='splitText', demands=['Text', 'float'], returns='Text'),
        PrototypeCall(constructor='CDATASection', fn='splitText', demands=['CDATASection', 'float'], returns='Text'),
    ],
    "spreadMethod": [
        FieldCall(field='spreadMethod', demands=['SVGGradientElement'], returns='SVGAnimatedEnumeration'),
    ],
    "sqrt": [
        PrototypeCall(constructor='Math', fn='sqrt', demands=['Math', 'float'], returns='float'),
    ],
    "src": [
        FieldCall(field='src', demands=['MediaImage'], returns='str'),
        FieldCall(field='src', demands=['MediaImage', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLFrameElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLMediaElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLMediaElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLSourceElement', 'str'], returns='None'),
        FieldCall(field='src', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLTrackElement', 'str'], returns='None'),
    ],
    "srcElement": [
        FieldCall(field='srcElement', demands=['Event'], returns='EventTarget'),
    ],
    "srcObject": [
        FieldCall(field='srcObject', demands=['HTMLMediaElement'], returns='MediaProvider'),
        FieldCall(field='srcObject', demands=['HTMLMediaElement', 'MediaProvider'], returns='None'),
    ],
    "srcdoc": [
        FieldCall(field='srcdoc', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='srcdoc', demands=['HTMLIFrameElement', 'str'], returns='None'),
    ],
    "srclang": [
        FieldCall(field='srclang', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='srclang', demands=['HTMLTrackElement', 'str'], returns='None'),
    ],
    "srcset": [
        FieldCall(field='srcset', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='srcset', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='srcset', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='srcset', demands=['HTMLSourceElement', 'str'], returns='None'),
    ],
    "srtpCipher": [
        FieldCall(field='srtpCipher', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='srtpCipher', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "ssrc": [
        FieldCall(field='ssrc', demands=['RTCRtpStreamStats'], returns='float'),
        FieldCall(field='ssrc', demands=['RTCRtpStreamStats', 'float'], returns='None'),
    ],
    "stack": [
        FieldCall(field='stack', demands=['Error'], returns='str'),
        FieldCall(field='stack', demands=['Error', 'str'], returns='None'),
    ],
    "stackTraceLimit": [
        FieldCall(field='stackTraceLimit', demands=['ErrorConstructor'], returns='float'),
        FieldCall(field='stackTraceLimit', demands=['ErrorConstructor', 'float'], returns='None'),
    ],
    "stalled": [
        FieldCall(field='stalled', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='stalled', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "standby": [
        FieldCall(field='standby', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='standby', demands=['HTMLObjectElement', 'str'], returns='None'),
    ],
    "start": [
        FieldCall(field='start', demands=['PerformanceMeasureOptions'], returns='str'),
        FieldCall(field='start', demands=['PerformanceMeasureOptions', 'str'], returns='None'),
        FieldCall(field='start', demands=['Transformer'], returns='TransformerStartCallback'),
        FieldCall(field='start', demands=['Transformer', 'TransformerStartCallback'], returns='None'),
        FieldCall(field='start', demands=['UnderlyingByteSource'], returns='(controller:ReadableByteStreamController)=>any'),
        FieldCall(field='start', demands=['UnderlyingByteSource', '(controller:ReadableByteStreamController)=>any'], returns='None'),
        FieldCall(field='start', demands=['UnderlyingDefaultSource'], returns='(controller:ReadableStreamDefaultController'),
        FieldCall(field='start', demands=['UnderlyingDefaultSource', '(controller:ReadableStreamDefaultController'], returns='None'),
        FieldCall(field='start', demands=['UnderlyingSink'], returns='UnderlyingSinkStartCallback'),
        FieldCall(field='start', demands=['UnderlyingSink', 'UnderlyingSinkStartCallback'], returns='None'),
        FieldCall(field='start', demands=['UnderlyingSource'], returns='UnderlyingSourceStartCallback'),
        FieldCall(field='start', demands=['UnderlyingSource', 'UnderlyingSourceStartCallback'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='start', demands=['AudioScheduledSourceNode'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='start', demands=['ConstantSourceNode'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='start', demands=['OscillatorNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='start', demands=['AudioScheduledSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='start', demands=['ConstantSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='start', demands=['OscillatorNode', 'float'], returns='None'),
        FieldCall(field='start', demands=['CSSScopeRule'], returns='str'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='start', demands=['HTMLMarqueeElement'], returns='None'),
        FieldCall(field='start', demands=['HTMLOListElement'], returns='float'),
        FieldCall(field='start', demands=['HTMLOListElement', 'float'], returns='None'),
        FieldCall(field='start', demands=['MediaRecorderEventMap'], returns='Event'),
        FieldCall(field='start', demands=['MediaRecorderEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='start', demands=['MediaRecorder'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='start', demands=['MediaRecorder', 'float'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='start', demands=['MessagePort'], returns='None'),
        FieldCall(field='start', demands=['SpeechSynthesisUtteranceEventMap'], returns='SpeechSynthesisEvent'),
        FieldCall(field='start', demands=['SpeechSynthesisUtteranceEventMap', 'SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='TimeRanges', fn='start', demands=['TimeRanges', 'float'], returns='float'),
    ],
    "startContainer": [
        FieldCall(field='startContainer', demands=['StaticRangeInit'], returns='Node'),
        FieldCall(field='startContainer', demands=['StaticRangeInit', 'Node'], returns='None'),
        FieldCall(field='startContainer', demands=['AbstractRange'], returns='Node'),
    ],
    "startDelay": [
        FieldCall(field='startDelay', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='startDelay', demands=['GamepadEffectParameters', 'float'], returns='None'),
    ],
    "startMessages": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='startMessages', demands=['ServiceWorkerContainer'], returns='None'),
    ],
    "startOffset": [
        FieldCall(field='startOffset', demands=['StaticRangeInit'], returns='float'),
        FieldCall(field='startOffset', demands=['StaticRangeInit', 'float'], returns='None'),
        FieldCall(field='startOffset', demands=['AbstractRange'], returns='float'),
        FieldCall(field='startOffset', demands=['SVGTextPathElement'], returns='SVGAnimatedLength'),
    ],
    "startRendering": [
        PrototypeCall(constructor='OfflineAudioContext', fn='startRendering', demands=['OfflineAudioContext'], returns='AudioBuffer'),
    ],
    "startTime": [
        FieldCall(field='startTime', demands=['ComputedEffectTiming'], returns='CSSNumberish'),
        FieldCall(field='startTime', demands=['ComputedEffectTiming', 'CSSNumberish'], returns='None'),
        FieldCall(field='startTime', demands=['PerformanceMarkOptions'], returns='DOMHighResTimeStamp'),
        FieldCall(field='startTime', demands=['PerformanceMarkOptions', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='startTime', demands=['Animation'], returns='CSSNumberish'),
        FieldCall(field='startTime', demands=['Animation', 'CSSNumberish'], returns='None'),
        FieldCall(field='startTime', demands=['PerformanceEntry'], returns='DOMHighResTimeStamp'),
        FieldCall(field='startTime', demands=['TextTrackCue'], returns='float'),
        FieldCall(field='startTime', demands=['TextTrackCue', 'float'], returns='None'),
        FieldCall(field='startTime', demands=['PerformanceMarkOptions'], returns='float'),
        FieldCall(field='startTime', demands=['PerformanceMarkOptions', 'float'], returns='None'),
        FieldCall(field='startTime', demands=['PerformanceEntry'], returns='float'),
    ],
    "startViewTransition": [
        PrototypeCall(constructor='Document', fn='startViewTransition', demands=['Document'], returns='ViewTransition'),
        PrototypeCall(constructor='HTMLDocument', fn='startViewTransition', demands=['HTMLDocument'], returns='ViewTransition'),
        PrototypeCall(constructor='XMLDocument', fn='startViewTransition', demands=['XMLDocument'], returns='ViewTransition'),
        PrototypeCall(constructor='Document', fn='startViewTransition', demands=['Document', 'ViewTransitionUpdateCallback'], returns='ViewTransition'),
        PrototypeCall(constructor='HTMLDocument', fn='startViewTransition', demands=['HTMLDocument', 'ViewTransitionUpdateCallback'], returns='ViewTransition'),
        PrototypeCall(constructor='XMLDocument', fn='startViewTransition', demands=['XMLDocument', 'ViewTransitionUpdateCallback'], returns='ViewTransition'),
    ],
    "startsWith": [
        PrototypeCall(constructor='String', fn='startsWith', demands=['str', 'str'], returns='bool'),
        PrototypeCall(constructor='String', fn='startsWith', demands=['str', 'str', 'float'], returns='bool'),
    ],
    "state": [
        FieldCall(field='state', demands=['PopStateEventInit'], returns='*'),
        FieldCall(field='state', demands=['PopStateEventInit', '*'], returns='None'),
        FieldCall(field='state', demands=['RTCIceCandidatePairStats'], returns='RTCStatsIceCandidatePairState'),
        FieldCall(field='state', demands=['RTCIceCandidatePairStats', 'RTCStatsIceCandidatePairState'], returns='None'),
        FieldCall(field='state', demands=['AudioDecoder'], returns='CodecState'),
        FieldCall(field='state', demands=['AudioEncoder'], returns='CodecState'),
        FieldCall(field='state', demands=['BaseAudioContext'], returns='AudioContextState'),
        FieldCall(field='state', demands=['History'], returns='*'),
        FieldCall(field='state', demands=['MIDIPort'], returns='MIDIPortDeviceState'),
        FieldCall(field='state', demands=['MediaRecorder'], returns='RecordingState'),
        FieldCall(field='state', demands=['PermissionStatus'], returns='PermissionState'),
        FieldCall(field='state', demands=['PopStateEvent'], returns='*'),
        FieldCall(field='state', demands=['RTCDtlsTransport'], returns='RTCDtlsTransportState'),
        FieldCall(field='state', demands=['RTCIceTransport'], returns='RTCIceTransportState'),
        FieldCall(field='state', demands=['RTCSctpTransport'], returns='RTCSctpTransportState'),
        FieldCall(field='state', demands=['RemotePlayback'], returns='RemotePlaybackState'),
        FieldCall(field='state', demands=['ServiceWorker'], returns='ServiceWorkerState'),
        FieldCall(field='state', demands=['VideoDecoder'], returns='CodecState'),
        FieldCall(field='state', demands=['VideoEncoder'], returns='CodecState'),
    ],
    "statechange": [
        FieldCall(field='statechange', demands=['BaseAudioContextEventMap'], returns='Event'),
        FieldCall(field='statechange', demands=['BaseAudioContextEventMap', 'Event'], returns='None'),
        FieldCall(field='statechange', demands=['MIDIAccessEventMap'], returns='MIDIConnectionEvent'),
        FieldCall(field='statechange', demands=['MIDIAccessEventMap', 'MIDIConnectionEvent'], returns='None'),
        FieldCall(field='statechange', demands=['MIDIPortEventMap'], returns='MIDIConnectionEvent'),
        FieldCall(field='statechange', demands=['MIDIPortEventMap', 'MIDIConnectionEvent'], returns='None'),
        FieldCall(field='statechange', demands=['RTCDtlsTransportEventMap'], returns='Event'),
        FieldCall(field='statechange', demands=['RTCDtlsTransportEventMap', 'Event'], returns='None'),
        FieldCall(field='statechange', demands=['RTCIceTransportEventMap'], returns='Event'),
        FieldCall(field='statechange', demands=['RTCIceTransportEventMap', 'Event'], returns='None'),
        FieldCall(field='statechange', demands=['RTCSctpTransportEventMap'], returns='Event'),
        FieldCall(field='statechange', demands=['RTCSctpTransportEventMap', 'Event'], returns='None'),
        FieldCall(field='statechange', demands=['ServiceWorkerEventMap'], returns='Event'),
        FieldCall(field='statechange', demands=['ServiceWorkerEventMap', 'Event'], returns='None'),
    ],
    "states": [
        FieldCall(field='states', demands=['ElementInternals'], returns='CustomStateSet'),
    ],
    "static": [
        FieldCall(field='static', demands=['ClassMethodDecoratorContext'], returns='bool'),
        FieldCall(field='static', demands=['ClassGetterDecoratorContext'], returns='bool'),
        FieldCall(field='static', demands=['ClassSetterDecoratorContext'], returns='bool'),
        FieldCall(field='static', demands=['ClassAccessorDecoratorContext'], returns='bool'),
        FieldCall(field='static', demands=['ClassFieldDecoratorContext'], returns='bool'),
    ],
    "status": [
        FieldCall(field='status', demands=['ResponseInit'], returns='float'),
        FieldCall(field='status', demands=['ResponseInit', 'float'], returns='None'),
        FieldCall(field='status', demands=['FontFace'], returns='FontFaceLoadStatus'),
        FieldCall(field='status', demands=['FontFaceSet'], returns='FontFaceSetLoadStatus'),
        FieldCall(field='status', demands=['Response'], returns='float'),
        FieldCall(field='status', demands=['Window'], returns='str'),
        FieldCall(field='status', demands=['Window', 'str'], returns='None'),
        FieldCall(field='status', demands=['XMLHttpRequest'], returns='float'),
        FieldCall(field='status', demands=['PromiseFulfilledResult'], returns='"fulfilled"'),
        FieldCall(field='status', demands=['PromiseFulfilledResult', '"fulfilled"'], returns='None'),
        FieldCall(field='status', demands=['PromiseRejectedResult'], returns='"rejected"'),
        FieldCall(field='status', demands=['PromiseRejectedResult', '"rejected"'], returns='None'),
    ],
    "statusCode": [
        FieldCall(field='statusCode', demands=['SecurityPolicyViolationEventInit'], returns='float'),
        FieldCall(field='statusCode', demands=['SecurityPolicyViolationEventInit', 'float'], returns='None'),
        FieldCall(field='statusCode', demands=['CSPViolationReportBody'], returns='float'),
        FieldCall(field='statusCode', demands=['SecurityPolicyViolationEvent'], returns='float'),
    ],
    "statusMessage": [
        FieldCall(field='statusMessage', demands=['WebGLContextEventInit'], returns='str'),
        FieldCall(field='statusMessage', demands=['WebGLContextEventInit', 'str'], returns='None'),
        FieldCall(field='statusMessage', demands=['WebGLContextEvent'], returns='str'),
    ],
    "statusText": [
        FieldCall(field='statusText', demands=['ResponseInit'], returns='str'),
        FieldCall(field='statusText', demands=['ResponseInit', 'str'], returns='None'),
        FieldCall(field='statusText', demands=['Response'], returns='str'),
        FieldCall(field='statusText', demands=['XMLHttpRequest'], returns='str'),
    ],
    "statusbar": [
        FieldCall(field='statusbar', demands=['Window'], returns='BarProp'),
    ],
    "stdDeviationX": [
        FieldCall(field='stdDeviationX', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='stdDeviationX', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedNumber'),
    ],
    "stdDeviationY": [
        FieldCall(field='stdDeviationY', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='stdDeviationY', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedNumber'),
    ],
    "steal": [
        FieldCall(field='steal', demands=['LockOptions'], returns='bool'),
        FieldCall(field='steal', demands=['LockOptions', 'bool'], returns='None'),
    ],
    "stencil": [
        FieldCall(field='stencil', demands=['WebGLContextAttributes'], returns='bool'),
        FieldCall(field='stencil', demands=['WebGLContextAttributes', 'bool'], returns='None'),
    ],
    "stencilBack": [
        FieldCall(field='stencilBack', demands=['GPUDepthStencilState'], returns='GPUStencilFaceState'),
        FieldCall(field='stencilBack', demands=['GPUDepthStencilState', 'GPUStencilFaceState'], returns='None'),
    ],
    "stencilFront": [
        FieldCall(field='stencilFront', demands=['GPUDepthStencilState'], returns='GPUStencilFaceState'),
        FieldCall(field='stencilFront', demands=['GPUDepthStencilState', 'GPUStencilFaceState'], returns='None'),
    ],
    "stencilFunc": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilFunc', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilFunc', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLuint'], returns='None'),
    ],
    "stencilFuncSeparate": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilFuncSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLint', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilFuncSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLint', 'GLuint'], returns='None'),
    ],
    "stencilMask": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilMask', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilMask', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
    ],
    "stencilMaskSeparate": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilMaskSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilMaskSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint'], returns='None'),
    ],
    "stencilOp": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilOp', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilOp', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "stencilOpSeparate": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilOpSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilOpSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "stencilReadMask": [
        FieldCall(field='stencilReadMask', demands=['GPUDepthStencilState'], returns='float'),
        FieldCall(field='stencilReadMask', demands=['GPUDepthStencilState', 'float'], returns='None'),
    ],
    "stencilWriteMask": [
        FieldCall(field='stencilWriteMask', demands=['GPUDepthStencilState'], returns='float'),
        FieldCall(field='stencilWriteMask', demands=['GPUDepthStencilState', 'float'], returns='None'),
    ],
    "step": [
        FieldCall(field='step', demands=['MediaSettingsRange'], returns='float'),
        FieldCall(field='step', demands=['MediaSettingsRange', 'float'], returns='None'),
        FieldCall(field='step', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='step', demands=['HTMLInputElement', 'str'], returns='None'),
    ],
    "stepDown": [
        PrototypeCall(constructor='HTMLInputElement', fn='stepDown', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='stepDown', demands=['HTMLInputElement', 'float'], returns='None'),
    ],
    "stepMismatch": [
        FieldCall(field='stepMismatch', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='stepMismatch', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='stepMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "stepMode": [
        FieldCall(field='stepMode', demands=['GPUVertexBufferLayout'], returns='GPUVertexStepMode'),
        FieldCall(field='stepMode', demands=['GPUVertexBufferLayout', 'GPUVertexStepMode'], returns='None'),
    ],
    "stepUp": [
        PrototypeCall(constructor='HTMLInputElement', fn='stepUp', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='stepUp', demands=['HTMLInputElement', 'float'], returns='None'),
    ],
    "sticky": [
        FieldCall(field='sticky', demands=['regex'], returns='bool'),
    ],
    "stitchTiles": [
        FieldCall(field='stitchTiles', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedEnumeration'),
    ],
    "stop": [
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='stop', demands=['AudioScheduledSourceNode'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='stop', demands=['ConstantSourceNode'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='stop', demands=['AudioBufferSourceNode'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='stop', demands=['OscillatorNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='stop', demands=['AudioScheduledSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='ConstantSourceNode', fn='stop', demands=['ConstantSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='stop', demands=['AudioBufferSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='OscillatorNode', fn='stop', demands=['OscillatorNode', 'float'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='stop', demands=['HTMLMarqueeElement'], returns='None'),
        FieldCall(field='stop', demands=['MediaRecorderEventMap'], returns='Event'),
        FieldCall(field='stop', demands=['MediaRecorderEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='stop', demands=['MediaRecorder'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='stop', demands=['MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='stop', demands=['CanvasCaptureMediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='RTCRtpTransceiver', fn='stop', demands=['RTCRtpTransceiver'], returns='None'),
        DirectCall(fn='stop', receiver=None, demands=[], returns='None'),
        FieldCall(field='stop', demands=['SVGElementTagNameMap'], returns='SVGStopElement'),
        FieldCall(field='stop', demands=['SVGElementTagNameMap', 'SVGStopElement'], returns='None'),
    ],
    "stopColor": [
        FieldCall(field='stopColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='stopColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "stopImmediatePropagation": [
        PrototypeCall(constructor='Event', fn='stopImmediatePropagation', demands=['Event'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='stopImmediatePropagation', demands=['SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='stopImmediatePropagation', demands=['FontFaceSetLoadEvent'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='stopImmediatePropagation', demands=['UIEvent'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='stopImmediatePropagation', demands=['RTCErrorEvent'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='stopImmediatePropagation', demands=['BeforeUnloadEvent'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='stopImmediatePropagation', demands=['OfflineAudioCompletionEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='stopImmediatePropagation', demands=['RTCPeerConnectionIceErrorEvent'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='stopImmediatePropagation', demands=['SubmitEvent'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='stopImmediatePropagation', demands=['PopStateEvent'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='stopImmediatePropagation', demands=['PageRevealEvent'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='stopImmediatePropagation', demands=['FormDataEvent'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='stopImmediatePropagation', demands=['CookieChangeEvent'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='stopImmediatePropagation', demands=['ErrorEvent'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='stopImmediatePropagation', demands=['AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='stopImmediatePropagation', demands=['PaymentRequestUpdateEvent'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='stopImmediatePropagation', demands=['PromiseRejectionEvent'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='stopImmediatePropagation', demands=['ClipboardEvent'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='stopImmediatePropagation', demands=['MediaEncryptedEvent'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='stopImmediatePropagation', demands=['MediaKeyMessageEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='stopImmediatePropagation', demands=['RTCPeerConnectionIceEvent'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='stopImmediatePropagation', demands=['IDBVersionChangeEvent'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='stopImmediatePropagation', demands=['GamepadEvent'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='stopImmediatePropagation', demands=['MediaQueryListEvent'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='stopImmediatePropagation', demands=['TransitionEvent'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='stopImmediatePropagation', demands=['PictureInPictureEvent'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='stopImmediatePropagation', demands=['RTCDataChannelEvent'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='stopImmediatePropagation', demands=['TrackEvent'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='stopImmediatePropagation', demands=['SecurityPolicyViolationEvent'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='stopImmediatePropagation', demands=['AnimationEvent'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='stopImmediatePropagation', demands=['MediaStreamTrackEvent'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='stopImmediatePropagation', demands=['RTCDTMFToneChangeEvent'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='stopImmediatePropagation', demands=['AudioProcessingEvent'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='stopImmediatePropagation', demands=['ToggleEvent'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='stopImmediatePropagation', demands=['DeviceOrientationEvent'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='stopImmediatePropagation', demands=['PageSwapEvent'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='stopImmediatePropagation', demands=['StorageEvent'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='stopImmediatePropagation', demands=['ContentVisibilityAutoStateChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='stopImmediatePropagation', demands=['MIDIMessageEvent'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='stopImmediatePropagation', demands=['CloseEvent'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='stopImmediatePropagation', demands=['ProgressEvent'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='stopImmediatePropagation', demands=['HashChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='stopImmediatePropagation', demands=['MIDIConnectionEvent'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='stopImmediatePropagation', demands=['PageTransitionEvent'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='stopImmediatePropagation', demands=['DeviceMotionEvent'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='stopImmediatePropagation', demands=['WebGLContextEvent'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='stopImmediatePropagation', demands=['BlobEvent'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='stopImmediatePropagation', demands=['RTCTrackEvent'], returns='None'),
    ],
    "stopOpacity": [
        FieldCall(field='stopOpacity', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='stopOpacity', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "stopPropagation": [
        PrototypeCall(constructor='Event', fn='stopPropagation', demands=['Event'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesisEvent', fn='stopPropagation', demands=['SpeechSynthesisEvent'], returns='None'),
        PrototypeCall(constructor='FontFaceSetLoadEvent', fn='stopPropagation', demands=['FontFaceSetLoadEvent'], returns='None'),
        PrototypeCall(constructor='UIEvent', fn='stopPropagation', demands=['UIEvent'], returns='None'),
        PrototypeCall(constructor='RTCErrorEvent', fn='stopPropagation', demands=['RTCErrorEvent'], returns='None'),
        PrototypeCall(constructor='BeforeUnloadEvent', fn='stopPropagation', demands=['BeforeUnloadEvent'], returns='None'),
        PrototypeCall(constructor='OfflineAudioCompletionEvent', fn='stopPropagation', demands=['OfflineAudioCompletionEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceErrorEvent', fn='stopPropagation', demands=['RTCPeerConnectionIceErrorEvent'], returns='None'),
        PrototypeCall(constructor='SubmitEvent', fn='stopPropagation', demands=['SubmitEvent'], returns='None'),
        PrototypeCall(constructor='PopStateEvent', fn='stopPropagation', demands=['PopStateEvent'], returns='None'),
        PrototypeCall(constructor='PageRevealEvent', fn='stopPropagation', demands=['PageRevealEvent'], returns='None'),
        PrototypeCall(constructor='FormDataEvent', fn='stopPropagation', demands=['FormDataEvent'], returns='None'),
        PrototypeCall(constructor='CookieChangeEvent', fn='stopPropagation', demands=['CookieChangeEvent'], returns='None'),
        PrototypeCall(constructor='ErrorEvent', fn='stopPropagation', demands=['ErrorEvent'], returns='None'),
        PrototypeCall(constructor='AnimationPlaybackEvent', fn='stopPropagation', demands=['AnimationPlaybackEvent'], returns='None'),
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='stopPropagation', demands=['PaymentRequestUpdateEvent'], returns='None'),
        PrototypeCall(constructor='PromiseRejectionEvent', fn='stopPropagation', demands=['PromiseRejectionEvent'], returns='None'),
        PrototypeCall(constructor='ClipboardEvent', fn='stopPropagation', demands=['ClipboardEvent'], returns='None'),
        PrototypeCall(constructor='MediaEncryptedEvent', fn='stopPropagation', demands=['MediaEncryptedEvent'], returns='None'),
        PrototypeCall(constructor='MediaKeyMessageEvent', fn='stopPropagation', demands=['MediaKeyMessageEvent'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnectionIceEvent', fn='stopPropagation', demands=['RTCPeerConnectionIceEvent'], returns='None'),
        PrototypeCall(constructor='IDBVersionChangeEvent', fn='stopPropagation', demands=['IDBVersionChangeEvent'], returns='None'),
        PrototypeCall(constructor='GamepadEvent', fn='stopPropagation', demands=['GamepadEvent'], returns='None'),
        PrototypeCall(constructor='MediaQueryListEvent', fn='stopPropagation', demands=['MediaQueryListEvent'], returns='None'),
        PrototypeCall(constructor='TransitionEvent', fn='stopPropagation', demands=['TransitionEvent'], returns='None'),
        PrototypeCall(constructor='PictureInPictureEvent', fn='stopPropagation', demands=['PictureInPictureEvent'], returns='None'),
        PrototypeCall(constructor='RTCDataChannelEvent', fn='stopPropagation', demands=['RTCDataChannelEvent'], returns='None'),
        PrototypeCall(constructor='TrackEvent', fn='stopPropagation', demands=['TrackEvent'], returns='None'),
        PrototypeCall(constructor='SecurityPolicyViolationEvent', fn='stopPropagation', demands=['SecurityPolicyViolationEvent'], returns='None'),
        PrototypeCall(constructor='AnimationEvent', fn='stopPropagation', demands=['AnimationEvent'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrackEvent', fn='stopPropagation', demands=['MediaStreamTrackEvent'], returns='None'),
        PrototypeCall(constructor='RTCDTMFToneChangeEvent', fn='stopPropagation', demands=['RTCDTMFToneChangeEvent'], returns='None'),
        PrototypeCall(constructor='AudioProcessingEvent', fn='stopPropagation', demands=['AudioProcessingEvent'], returns='None'),
        PrototypeCall(constructor='ToggleEvent', fn='stopPropagation', demands=['ToggleEvent'], returns='None'),
        PrototypeCall(constructor='DeviceOrientationEvent', fn='stopPropagation', demands=['DeviceOrientationEvent'], returns='None'),
        PrototypeCall(constructor='PageSwapEvent', fn='stopPropagation', demands=['PageSwapEvent'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='stopPropagation', demands=['StorageEvent'], returns='None'),
        PrototypeCall(constructor='ContentVisibilityAutoStateChangeEvent', fn='stopPropagation', demands=['ContentVisibilityAutoStateChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIMessageEvent', fn='stopPropagation', demands=['MIDIMessageEvent'], returns='None'),
        PrototypeCall(constructor='CloseEvent', fn='stopPropagation', demands=['CloseEvent'], returns='None'),
        PrototypeCall(constructor='ProgressEvent', fn='stopPropagation', demands=['ProgressEvent'], returns='None'),
        PrototypeCall(constructor='HashChangeEvent', fn='stopPropagation', demands=['HashChangeEvent'], returns='None'),
        PrototypeCall(constructor='MIDIConnectionEvent', fn='stopPropagation', demands=['MIDIConnectionEvent'], returns='None'),
        PrototypeCall(constructor='PageTransitionEvent', fn='stopPropagation', demands=['PageTransitionEvent'], returns='None'),
        PrototypeCall(constructor='DeviceMotionEvent', fn='stopPropagation', demands=['DeviceMotionEvent'], returns='None'),
        PrototypeCall(constructor='WebGLContextEvent', fn='stopPropagation', demands=['WebGLContextEvent'], returns='None'),
        PrototypeCall(constructor='BlobEvent', fn='stopPropagation', demands=['BlobEvent'], returns='None'),
        PrototypeCall(constructor='RTCTrackEvent', fn='stopPropagation', demands=['RTCTrackEvent'], returns='None'),
    ],
    "storage": [
        FieldCall(field='storage', demands=['NavigatorStorage'], returns='StorageManager'),
        FieldCall(field='storage', demands=['WindowEventHandlersEventMap'], returns='StorageEvent'),
        FieldCall(field='storage', demands=['WindowEventHandlersEventMap', 'StorageEvent'], returns='None'),
    ],
    "storageArea": [
        FieldCall(field='storageArea', demands=['StorageEventInit'], returns='Storage'),
        FieldCall(field='storageArea', demands=['StorageEventInit', 'Storage'], returns='None'),
        FieldCall(field='storageArea', demands=['StorageEvent'], returns='Storage'),
    ],
    "store": [
        PrototypeCall(constructor='CredentialsContainer', fn='store', demands=['CredentialsContainer', 'Credential'], returns='None'),
        PrototypeCall(constructor='Atomics', fn='store', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='store', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "stream": [
        FieldCall(field='stream', demands=['TextDecodeOptions'], returns='bool'),
        FieldCall(field='stream', demands=['TextDecodeOptions', 'bool'], returns='None'),
        PrototypeCall(constructor='Blob', fn='stream', demands=['Blob'], returns='ReadableStream'),
        PrototypeCall(constructor='File', fn='stream', demands=['File'], returns='ReadableStream'),
        FieldCall(field='stream', demands=['MediaRecorder'], returns='MediaStream'),
        FieldCall(field='stream', demands=['MediaStreamAudioDestinationNode'], returns='MediaStream'),
    ],
    "streamErrorCode": [
        FieldCall(field='streamErrorCode', demands=['WebTransportErrorOptions'], returns='float'),
        FieldCall(field='streamErrorCode', demands=['WebTransportErrorOptions', 'float'], returns='None'),
        FieldCall(field='streamErrorCode', demands=['WebTransportError'], returns='float'),
    ],
    "streams": [
        FieldCall(field='streams', demands=['RTCRtpTransceiverInit'], returns='list'),
        FieldCall(field='streams', demands=['RTCRtpTransceiverInit', 'list'], returns='None'),
        FieldCall(field='streams', demands=['RTCTrackEventInit'], returns='list'),
        FieldCall(field='streams', demands=['RTCTrackEventInit', 'list'], returns='None'),
        FieldCall(field='streams', demands=['RTCTrackEvent'], returns='ReadonlyArray'),
    ],
    "stretch": [
        FieldCall(field='stretch', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='stretch', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='stretch', demands=['FontFace'], returns='str'),
        FieldCall(field='stretch', demands=['FontFace', 'str'], returns='None'),
    ],
    "stride": [
        FieldCall(field='stride', demands=['PlaneLayout'], returns='float'),
        FieldCall(field='stride', demands=['PlaneLayout', 'float'], returns='None'),
    ],
    "strike": [
        FieldCall(field='strike', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='strike', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='String', fn='strike', demands=['str'], returns='str'),
    ],
    "stringValue": [
        FieldCall(field='stringValue', demands=['XPathResult'], returns='str'),
    ],
    "stringify": [
        PrototypeCall(constructor='JSON', fn='stringify', demands=['JSON', '*'], returns='str'),
        PrototypeCall(constructor='JSON', fn='stringify', demands=['JSON', '*', '(this:any,key:string,value:any)=>any'], returns='str'),
        PrototypeCall(constructor='JSON', fn='stringify', demands=['JSON', '*', '(this:any,key:string,value:any)=>any', 'str'], returns='str'),
        PrototypeCall(constructor='JSON', fn='stringify', demands=['JSON', '*', '(number'], returns='str'),
        PrototypeCall(constructor='JSON', fn='stringify', demands=['JSON', '*', '(number', 'str'], returns='str'),
    ],
    "stroke": [
        FieldCall(field='stroke', demands=['SVGBoundingBoxOptions'], returns='bool'),
        FieldCall(field='stroke', demands=['SVGBoundingBoxOptions', 'bool'], returns='None'),
        FieldCall(field='stroke', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='stroke', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='stroke', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='stroke', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='stroke', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='stroke', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
    ],
    "strokeDasharray": [
        FieldCall(field='strokeDasharray', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeDasharray', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeDashoffset": [
        FieldCall(field='strokeDashoffset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeDashoffset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeLinecap": [
        FieldCall(field='strokeLinecap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeLinecap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeLinejoin": [
        FieldCall(field='strokeLinejoin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeLinejoin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeMiterlimit": [
        FieldCall(field='strokeMiterlimit', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeMiterlimit', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeOpacity": [
        FieldCall(field='strokeOpacity', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeOpacity', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strokeRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "strokeStyle": [
        FieldCall(field='strokeStyle', demands=['CanvasFillStrokeStyles'], returns='str'),
        FieldCall(field='strokeStyle', demands=['CanvasFillStrokeStyles', 'str'], returns='None'),
    ],
    "strokeText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
    ],
    "strokeWidth": [
        FieldCall(field='strokeWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='strokeWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "strong": [
        FieldCall(field='strong', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='strong', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "strongMagnitude": [
        FieldCall(field='strongMagnitude', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='strongMagnitude', demands=['GamepadEffectParameters', 'float'], returns='None'),
    ],
    "structuredClone": [
        DirectCall(fn='structuredClone', receiver=None, demands=['T'], returns='T'),
        DirectCall(fn='structuredClone', receiver=None, demands=['T', 'StructuredSerializeOptions'], returns='T'),
    ],
    "style": [
        FieldCall(field='style', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='style', demands=['FontFaceDescriptors', 'str'], returns='None'),
        PrototypeCall(constructor='CSSFontFaceRule', fn='style', demands=['CSSFontFaceRule'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='CSSFontFaceRule', fn='style', demands=['CSSFontFaceRule', 'str'], returns='None'),
        PrototypeCall(constructor='CSSKeyframeRule', fn='style', demands=['CSSKeyframeRule'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='CSSKeyframeRule', fn='style', demands=['CSSKeyframeRule', 'str'], returns='None'),
        PrototypeCall(constructor='CSSNestedDeclarations', fn='style', demands=['CSSNestedDeclarations'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='CSSNestedDeclarations', fn='style', demands=['CSSNestedDeclarations', 'str'], returns='None'),
        PrototypeCall(constructor='CSSPageRule', fn='style', demands=['CSSPageRule'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='CSSPageRule', fn='style', demands=['CSSPageRule', 'str'], returns='None'),
        PrototypeCall(constructor='CSSStyleRule', fn='style', demands=['CSSStyleRule'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='CSSStyleRule', fn='style', demands=['CSSStyleRule', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='style', demands=['MathMLElement'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='SVGElement', fn='style', demands=['SVGElement'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='HTMLElement', fn='style', demands=['HTMLElement'], returns='CSSStyleDeclaration'),
        PrototypeCall(constructor='MathMLElement', fn='style', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='style', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='style', demands=['HTMLElement', 'str'], returns='None'),
        FieldCall(field='style', demands=['FontFace'], returns='str'),
        FieldCall(field='style', demands=['FontFace', 'str'], returns='None'),
        FieldCall(field='style', demands=['HTMLElementTagNameMap'], returns='HTMLStyleElement'),
        FieldCall(field='style', demands=['HTMLElementTagNameMap', 'HTMLStyleElement'], returns='None'),
        FieldCall(field='style', demands=['SVGElementTagNameMap'], returns='SVGStyleElement'),
        FieldCall(field='style', demands=['SVGElementTagNameMap', 'SVGStyleElement'], returns='None'),
        FieldCall(field='style', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='style', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "styleMap": [
        FieldCall(field='styleMap', demands=['CSSStyleRule'], returns='StylePropertyMap'),
    ],
    "styleSheet": [
        FieldCall(field='styleSheet', demands=['CSSImportRule'], returns='CSSStyleSheet'),
    ],
    "styleSheets": [
        FieldCall(field='styleSheets', demands=['DocumentOrShadowRoot'], returns='StyleSheetList'),
    ],
    "sub": [
        PrototypeCall(constructor='CSSNumericValue', fn='sub', demands=['CSSNumericValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='sub', demands=['CSSUnitValue', '*'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSMathValue', fn='sub', demands=['CSSMathValue', '*'], returns='CSSNumericValue'),
        FieldCall(field='sub', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='sub', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='Atomics', fn='sub', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='String', fn='sub', demands=['str'], returns='str'),
        PrototypeCall(constructor='Atomics', fn='sub', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "subarray": [
        PrototypeCall(constructor='BigInt64Array', fn='subarray', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='subarray', demands=['BigInt64Array', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='subarray', demands=['BigInt64Array', 'float', 'float'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='subarray', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='subarray', demands=['BigUint64Array', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='subarray', demands=['BigUint64Array', 'float', 'float'], returns='BigUint64Array'),
        PrototypeCall(constructor='Int8Array', fn='subarray', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='subarray', demands=['Int8Array', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='subarray', demands=['Int8Array', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='subarray', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='subarray', demands=['Uint8Array', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='subarray', demands=['Uint8Array', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='subarray', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='subarray', demands=['Uint8ClampedArray', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='subarray', demands=['Uint8ClampedArray', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='subarray', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='subarray', demands=['Int16Array', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='subarray', demands=['Int16Array', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='subarray', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='subarray', demands=['Uint16Array', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='subarray', demands=['Uint16Array', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='subarray', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='subarray', demands=['Int32Array', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='subarray', demands=['Int32Array', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='subarray', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='subarray', demands=['Uint32Array', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='subarray', demands=['Uint32Array', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='subarray', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='subarray', demands=['Float32Array', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='subarray', demands=['Float32Array', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='subarray', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='subarray', demands=['Float64Array', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='subarray', demands=['Float64Array', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='subarray', demands=['Float16Array'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='subarray', demands=['Float16Array', 'float'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='subarray', demands=['Float16Array', 'float', 'float'], returns='Float16Array'),
    ],
    "submit": [
        FieldCall(field='submit', demands=['GlobalEventHandlersEventMap'], returns='SubmitEvent'),
        FieldCall(field='submit', demands=['GlobalEventHandlersEventMap', 'SubmitEvent'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='submit', demands=['HTMLFormElement'], returns='None'),
    ],
    "submitter": [
        FieldCall(field='submitter', demands=['SubmitEventInit'], returns='HTMLElement'),
        FieldCall(field='submitter', demands=['SubmitEventInit', 'HTMLElement'], returns='None'),
        FieldCall(field='submitter', demands=['SubmitEvent'], returns='HTMLElement'),
    ],
    "subscribe": [
        PrototypeCall(constructor='CookieStoreManager', fn='subscribe', demands=['CookieStoreManager', 'list'], returns='None'),
        PrototypeCall(constructor='PushManager', fn='subscribe', demands=['PushManager'], returns='PushSubscription'),
        PrototypeCall(constructor='PushManager', fn='subscribe', demands=['PushManager', 'PushSubscriptionOptionsInit'], returns='PushSubscription'),
        PrototypeCall(constructor='CookieStoreManager', fn='subscribe', demands=['CookieStoreManager', 'Iterable'], returns='None'),
    ],
    "substr": [
        PrototypeCall(constructor='String', fn='substr', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='substr', demands=['str', 'float', 'float'], returns='str'),
    ],
    "substring": [
        PrototypeCall(constructor='String', fn='substring', demands=['str', 'float'], returns='str'),
        PrototypeCall(constructor='String', fn='substring', demands=['str', 'float', 'float'], returns='str'),
    ],
    "substringData": [
        PrototypeCall(constructor='CharacterData', fn='substringData', demands=['CharacterData', 'float', 'float'], returns='str'),
        PrototypeCall(constructor='Text', fn='substringData', demands=['Text', 'float', 'float'], returns='str'),
        PrototypeCall(constructor='ProcessingInstruction', fn='substringData', demands=['ProcessingInstruction', 'float', 'float'], returns='str'),
        PrototypeCall(constructor='Comment', fn='substringData', demands=['Comment', 'float', 'float'], returns='str'),
    ],
    "subtle": [
        FieldCall(field='subtle', demands=['Crypto'], returns='SubtleCrypto'),
    ],
    "subtree": [
        FieldCall(field='subtree', demands=['GetAnimationsOptions'], returns='bool'),
        FieldCall(field='subtree', demands=['GetAnimationsOptions', 'bool'], returns='None'),
        FieldCall(field='subtree', demands=['MutationObserverInit'], returns='bool'),
        FieldCall(field='subtree', demands=['MutationObserverInit', 'bool'], returns='None'),
    ],
    "success": [
        FieldCall(field='success', demands=['IDBRequestEventMap'], returns='Event'),
        FieldCall(field='success', demands=['IDBRequestEventMap', 'Event'], returns='None'),
    ],
    "suffix": [
        FieldCall(field='suffix', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='suffix', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "suffixes": [
        FieldCall(field='suffixes', demands=['MimeType'], returns='str'),
    ],
    "summary": [
        FieldCall(field='summary', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='summary', demands=['HTMLTableElement', 'str'], returns='None'),
        FieldCall(field='summary', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='summary', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "sup": [
        FieldCall(field='sup', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='sup', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='String', fn='sup', demands=['str'], returns='str'),
    ],
    "support": [
        FieldCall(field='support', demands=['AuthenticationExtensionsLargeBlobInputs'], returns='str'),
        FieldCall(field='support', demands=['AuthenticationExtensionsLargeBlobInputs', 'str'], returns='None'),
        FieldCall(field='support', demands=['AuthenticationExtensionsLargeBlobInputsJSON'], returns='str'),
        FieldCall(field='support', demands=['AuthenticationExtensionsLargeBlobInputsJSON', 'str'], returns='None'),
    ],
    "supported": [
        FieldCall(field='supported', demands=['AudioDecoderSupport'], returns='bool'),
        FieldCall(field='supported', demands=['AudioDecoderSupport', 'bool'], returns='None'),
        FieldCall(field='supported', demands=['AudioEncoderSupport'], returns='bool'),
        FieldCall(field='supported', demands=['AudioEncoderSupport', 'bool'], returns='None'),
        FieldCall(field='supported', demands=['AuthenticationExtensionsLargeBlobOutputs'], returns='bool'),
        FieldCall(field='supported', demands=['AuthenticationExtensionsLargeBlobOutputs', 'bool'], returns='None'),
        FieldCall(field='supported', demands=['MediaCapabilitiesInfo'], returns='bool'),
        FieldCall(field='supported', demands=['MediaCapabilitiesInfo', 'bool'], returns='None'),
        FieldCall(field='supported', demands=['VideoDecoderSupport'], returns='bool'),
        FieldCall(field='supported', demands=['VideoDecoderSupport', 'bool'], returns='None'),
        FieldCall(field='supported', demands=['VideoEncoderSupport'], returns='bool'),
        FieldCall(field='supported', demands=['VideoEncoderSupport', 'bool'], returns='None'),
    ],
    "supportedMethods": [
        FieldCall(field='supportedMethods', demands=['PaymentDetailsModifier'], returns='str'),
        FieldCall(field='supportedMethods', demands=['PaymentDetailsModifier', 'str'], returns='None'),
        FieldCall(field='supportedMethods', demands=['PaymentMethodData'], returns='str'),
        FieldCall(field='supportedMethods', demands=['PaymentMethodData', 'str'], returns='None'),
    ],
    "supports": [
        PrototypeCall(constructor='DOMTokenList', fn='supports', demands=['DOMTokenList', 'str'], returns='bool'),
    ],
    "supportsText": [
        FieldCall(field='supportsText', demands=['CSSImportRule'], returns='str'),
    ],
    "suppressed": [
        FieldCall(field='suppressed', demands=['SuppressedError'], returns='*'),
        FieldCall(field='suppressed', demands=['SuppressedError', '*'], returns='None'),
    ],
    "surfaceScale": [
        FieldCall(field='surfaceScale', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='surfaceScale', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "surroundContents": [
        PrototypeCall(constructor='Range', fn='surroundContents', demands=['Range', 'Node'], returns='None'),
    ],
    "suspend": [
        PrototypeCall(constructor='AudioContext', fn='suspend', demands=['AudioContext'], returns='None'),
        FieldCall(field='suspend', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='suspend', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='suspend', demands=['OfflineAudioContext', 'float'], returns='None'),
    ],
    "suspendRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='suspendRedraw', demands=['SVGSVGElement', 'float'], returns='float'),
    ],
    "svg": [
        FieldCall(field='svg', demands=['SVGElementTagNameMap'], returns='SVGSVGElement'),
        FieldCall(field='svg', demands=['SVGElementTagNameMap', 'SVGSVGElement'], returns='None'),
    ],
    "switch": [
        FieldCall(field='switch', demands=['SVGElementTagNameMap'], returns='SVGSwitchElement'),
        FieldCall(field='switch', demands=['SVGElementTagNameMap', 'SVGSwitchElement'], returns='None'),
    ],
    "symbol": [
        FieldCall(field='symbol', demands=['SVGElementTagNameMap'], returns='SVGSymbolElement'),
        FieldCall(field='symbol', demands=['SVGElementTagNameMap', 'SVGSymbolElement'], returns='None'),
        FieldCall(field='symbol', demands=['WeakKeyTypes'], returns='symbol'),
        FieldCall(field='symbol', demands=['WeakKeyTypes', 'symbol'], returns='None'),
    ],
    "symbols": [
        FieldCall(field='symbols', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='symbols', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "symmetricDifference": [
        PrototypeCall(constructor='Highlight', fn='symmetricDifference', demands=['Highlight', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='symmetricDifference', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='FontFaceSet', fn='symmetricDifference', demands=['FontFaceSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='CustomStateSet', fn='symmetricDifference', demands=['CustomStateSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='ReadonlySet', fn='symmetricDifference', demands=['ReadonlySet', 'ReadonlySetLike'], returns='Set<T'),
    ],
    "synchronizationSource": [
        FieldCall(field='synchronizationSource', demands=['RTCEncodedFrameMetadata'], returns='float'),
        FieldCall(field='synchronizationSource', demands=['RTCEncodedFrameMetadata', 'float'], returns='None'),
        FieldCall(field='synchronizationSource', demands=['RTCEncodedAudioFrameMetadata'], returns='float'),
        FieldCall(field='synchronizationSource', demands=['RTCEncodedAudioFrameMetadata', 'float'], returns='None'),
        FieldCall(field='synchronizationSource', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='synchronizationSource', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
    ],
    "syntax": [
        FieldCall(field='syntax', demands=['PropertyDefinition'], returns='str'),
        FieldCall(field='syntax', demands=['PropertyDefinition', 'str'], returns='None'),
        FieldCall(field='syntax', demands=['CSSPropertyRule'], returns='str'),
    ],
    "sysex": [
        FieldCall(field='sysex', demands=['MIDIOptions'], returns='bool'),
        FieldCall(field='sysex', demands=['MIDIOptions', 'bool'], returns='None'),
    ],
    "sysexEnabled": [
        FieldCall(field='sysexEnabled', demands=['MIDIAccess'], returns='bool'),
    ],
    "system": [
        FieldCall(field='system', demands=['CSSCounterStyleRule'], returns='str'),
        FieldCall(field='system', demands=['CSSCounterStyleRule', 'str'], returns='None'),
    ],
    "systemId": [
        FieldCall(field='systemId', demands=['DocumentType'], returns='str'),
    ],
    "systemLanguage": [
        FieldCall(field='systemLanguage', demands=['SVGTests'], returns='SVGStringList'),
    ],
    "t": [
        FieldCall(field='t', demands=['RsaOtherPrimesInfo'], returns='str'),
        FieldCall(field='t', demands=['RsaOtherPrimesInfo', 'str'], returns='None'),
    ],
    "tBodies": [
        FieldCall(field='tBodies', demands=['HTMLTableElement'], returns='HTMLCollectionOf'),
    ],
    "tFoot": [
        FieldCall(field='tFoot', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
        FieldCall(field='tFoot', demands=['HTMLTableElement', 'HTMLTableSectionElement'], returns='None'),
    ],
    "tHead": [
        FieldCall(field='tHead', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
        FieldCall(field='tHead', demands=['HTMLTableElement', 'HTMLTableSectionElement'], returns='None'),
    ],
    "tabIndex": [
        FieldCall(field='tabIndex', demands=['HTMLOrSVGElement'], returns='float'),
        FieldCall(field='tabIndex', demands=['HTMLOrSVGElement', 'float'], returns='None'),
    ],
    "tabSize": [
        FieldCall(field='tabSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='tabSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "table": [
        FieldCall(field='table', demands=['HTMLElementTagNameMap'], returns='HTMLTableElement'),
        FieldCall(field='table', demands=['HTMLElementTagNameMap', 'HTMLTableElement'], returns='None'),
        PrototypeCall(constructor='Console', fn='table', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='table', demands=['Console', '*'], returns='None'),
        PrototypeCall(constructor='Console', fn='table', demands=['Console', '*', 'list'], returns='None'),
    ],
    "tableLayout": [
        FieldCall(field='tableLayout', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='tableLayout', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "tableValues": [
        FieldCall(field='tableValues', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumberList'),
    ],
    "tag": [
        FieldCall(field='tag', demands=['GetNotificationOptions'], returns='str'),
        FieldCall(field='tag', demands=['GetNotificationOptions', 'str'], returns='None'),
        FieldCall(field='tag', demands=['NotificationOptions'], returns='str'),
        FieldCall(field='tag', demands=['NotificationOptions', 'str'], returns='None'),
        FieldCall(field='tag', demands=['Notification'], returns='str'),
    ],
    "tagLength": [
        FieldCall(field='tagLength', demands=['AesGcmParams'], returns='float'),
        FieldCall(field='tagLength', demands=['AesGcmParams', 'float'], returns='None'),
    ],
    "tagName": [
        FieldCall(field='tagName', demands=['Element'], returns='str'),
    ],
    "takePhoto": [
        PrototypeCall(constructor='ImageCapture', fn='takePhoto', demands=['ImageCapture'], returns='Blob'),
        PrototypeCall(constructor='ImageCapture', fn='takePhoto', demands=['ImageCapture', 'PhotoSettings'], returns='Blob'),
    ],
    "takeRecords": [
        PrototypeCall(constructor='IntersectionObserver', fn='takeRecords', demands=['IntersectionObserver'], returns='list'),
        PrototypeCall(constructor='MutationObserver', fn='takeRecords', demands=['MutationObserver'], returns='list'),
        PrototypeCall(constructor='PerformanceObserver', fn='takeRecords', demands=['PerformanceObserver'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='ReportingObserver', fn='takeRecords', demands=['ReportingObserver'], returns='ReportList'),
    ],
    "tan": [
        PrototypeCall(constructor='Math', fn='tan', demands=['Math', 'float'], returns='float'),
    ],
    "tangentialPressure": [
        FieldCall(field='tangentialPressure', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='tangentialPressure', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='tangentialPressure', demands=['PointerEvent'], returns='float'),
    ],
    "tanh": [
        PrototypeCall(constructor='Math', fn='tanh', demands=['Math', 'float'], returns='float'),
    ],
    "target": [
        FieldCall(field='target', demands=['TouchInit'], returns='EventTarget'),
        FieldCall(field='target', demands=['TouchInit', 'EventTarget'], returns='None'),
        FieldCall(field='target', demands=['Event'], returns='EventTarget'),
        FieldCall(field='target', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='target', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLAreaElement', 'str'], returns='None'),
        FieldCall(field='target', demands=['HTMLBaseElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLBaseElement', 'str'], returns='None'),
        FieldCall(field='target', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLFormElement', 'str'], returns='None'),
        FieldCall(field='target', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='target', demands=['IntersectionObserverEntry'], returns='Element'),
        FieldCall(field='target', demands=['KeyframeEffect'], returns='Element'),
        FieldCall(field='target', demands=['KeyframeEffect', 'Element'], returns='None'),
        FieldCall(field='target', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='target', demands=['PerformanceEventTiming'], returns='Node'),
        FieldCall(field='target', demands=['ProcessingInstruction'], returns='str'),
        FieldCall(field='target', demands=['ProgressEvent'], returns='T'),
        FieldCall(field='target', demands=['ResizeObserverEntry'], returns='Element'),
        FieldCall(field='target', demands=['SVGAElement'], returns='SVGAnimatedString'),
        FieldCall(field='target', demands=['Touch'], returns='EventTarget'),
    ],
    "targetBitrate": [
        FieldCall(field='targetBitrate', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='targetBitrate', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "targetElement": [
        FieldCall(field='targetElement', demands=['SVGAnimationElement'], returns='SVGElement'),
    ],
    "targetOrigin": [
        FieldCall(field='targetOrigin', demands=['WindowPostMessageOptions'], returns='str'),
        FieldCall(field='targetOrigin', demands=['WindowPostMessageOptions', 'str'], returns='None'),
    ],
    "targetRanges": [
        FieldCall(field='targetRanges', demands=['InputEventInit'], returns='list'),
        FieldCall(field='targetRanges', demands=['InputEventInit', 'list'], returns='None'),
    ],
    "targetTouches": [
        FieldCall(field='targetTouches', demands=['TouchEventInit'], returns='list'),
        FieldCall(field='targetTouches', demands=['TouchEventInit', 'list'], returns='None'),
        FieldCall(field='targetTouches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "targetX": [
        FieldCall(field='targetX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "targetY": [
        FieldCall(field='targetY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "targets": [
        FieldCall(field='targets', demands=['GPUFragmentState'], returns='(GPUColorTargetState'),
        FieldCall(field='targets', demands=['GPUFragmentState', '(GPUColorTargetState'], returns='None'),
    ],
    "tbody": [
        FieldCall(field='tbody', demands=['HTMLElementTagNameMap'], returns='HTMLTableSectionElement'),
        FieldCall(field='tbody', demands=['HTMLElementTagNameMap', 'HTMLTableSectionElement'], returns='None'),
    ],
    "tcpType": [
        FieldCall(field='tcpType', demands=['RTCIceCandidate'], returns='RTCIceTcpCandidateType'),
    ],
    "td": [
        FieldCall(field='td', demands=['HTMLElementTagNameMap'], returns='HTMLTableCellElement'),
        FieldCall(field='td', demands=['HTMLElementTagNameMap', 'HTMLTableCellElement'], returns='None'),
    ],
    "tee": [
        PrototypeCall(constructor='ReadableStream', fn='tee', demands=['ReadableStream'], returns='[ReadableStream'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='tee', demands=['WebTransportReceiveStream'], returns='[ReadableStream'),
    ],
    "template": [
        FieldCall(field='template', demands=['HTMLElementTagNameMap'], returns='HTMLTemplateElement'),
        FieldCall(field='template', demands=['HTMLElementTagNameMap', 'HTMLTemplateElement'], returns='None'),
    ],
    "temporalIndex": [
        FieldCall(field='temporalIndex', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='temporalIndex', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
    ],
    "terminate": [
        PrototypeCall(constructor='TransformStreamDefaultController', fn='terminate', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='Worker', fn='terminate', demands=['Worker'], returns='None'),
    ],
    "test": [
        PrototypeCall(constructor='URLPattern', fn='test', demands=['URLPattern', 'URLPatternInput'], returns='bool'),
        PrototypeCall(constructor='URLPattern', fn='test', demands=['URLPattern', 'URLPatternInput', 'str'], returns='bool'),
        PrototypeCall(constructor='RegExp', fn='test', demands=['regex', 'str'], returns='bool'),
    ],
    "texImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
    ],
    "texImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
    ],
    "texParameterf": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='texParameterf', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texParameterf', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLfloat'], returns='None'),
    ],
    "texParameteri": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='texParameteri', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texParameteri', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLint'], returns='None'),
    ],
    "texStorage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texStorage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "texStorage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texStorage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "texSubImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
    ],
    "texSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'float'], returns='None'),
    ],
    "text": [
        FieldCall(field='text', demands=['ShareData'], returns='str'),
        FieldCall(field='text', demands=['ShareData', 'str'], returns='None'),
        PrototypeCall(constructor='Blob', fn='text', demands=['Blob'], returns='str'),
        PrototypeCall(constructor='File', fn='text', demands=['File'], returns='str'),
        PrototypeCall(constructor='Request', fn='text', demands=['Request'], returns='str'),
        PrototypeCall(constructor='Response', fn='text', demands=['Response'], returns='str'),
        FieldCall(field='text', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='text', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLBodyElement', 'str'], returns='None'),
        FieldCall(field='text', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLOptionElement', 'str'], returns='None'),
        FieldCall(field='text', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='text', demands=['HTMLTitleElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLTitleElement', 'str'], returns='None'),
        FieldCall(field='text', demands=['SpeechSynthesisUtterance'], returns='str'),
        FieldCall(field='text', demands=['SpeechSynthesisUtterance', 'str'], returns='None'),
        FieldCall(field='text', demands=['VTTCue'], returns='str'),
        FieldCall(field='text', demands=['VTTCue', 'str'], returns='None'),
        FieldCall(field='text', demands=['SVGElementTagNameMap'], returns='SVGTextElement'),
        FieldCall(field='text', demands=['SVGElementTagNameMap', 'SVGTextElement'], returns='None'),
    ],
    "textAlign": [
        FieldCall(field='textAlign', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textAlign', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='textAlign', demands=['CanvasTextDrawingStyles'], returns='CanvasTextAlign'),
        FieldCall(field='textAlign', demands=['CanvasTextDrawingStyles', 'AlignSetting'], returns='None'),
    ],
    "textAlignLast": [
        FieldCall(field='textAlignLast', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textAlignLast', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textAnchor": [
        FieldCall(field='textAnchor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textAnchor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textBaseline": [
        FieldCall(field='textBaseline', demands=['CanvasTextDrawingStyles'], returns='CanvasTextBaseline'),
        FieldCall(field='textBaseline', demands=['CanvasTextDrawingStyles', 'CanvasTextBaseline'], returns='None'),
    ],
    "textBox": [
        FieldCall(field='textBox', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textBox', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textBoxEdge": [
        FieldCall(field='textBoxEdge', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textBoxEdge', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textBoxTrim": [
        FieldCall(field='textBoxTrim', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textBoxTrim', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textCombineUpright": [
        FieldCall(field='textCombineUpright', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textCombineUpright', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textContent": [
        PrototypeCall(constructor='Attr', fn='textContent', demands=['Attr'], returns='str'),
        PrototypeCall(constructor='Attr', fn='textContent', demands=['Attr', 'str'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='textContent', demands=['CharacterData'], returns='str'),
        PrototypeCall(constructor='Text', fn='textContent', demands=['Text'], returns='str'),
        PrototypeCall(constructor='ProcessingInstruction', fn='textContent', demands=['ProcessingInstruction'], returns='str'),
        PrototypeCall(constructor='Comment', fn='textContent', demands=['Comment'], returns='str'),
        PrototypeCall(constructor='CharacterData', fn='textContent', demands=['CharacterData', 'str'], returns='None'),
        PrototypeCall(constructor='Text', fn='textContent', demands=['Text', 'str'], returns='None'),
        PrototypeCall(constructor='ProcessingInstruction', fn='textContent', demands=['ProcessingInstruction', 'str'], returns='None'),
        PrototypeCall(constructor='Comment', fn='textContent', demands=['Comment', 'str'], returns='None'),
        PrototypeCall(constructor='Document', fn='textContent', demands=['Document'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='textContent', demands=['HTMLDocument'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='textContent', demands=['XMLDocument'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='textContent', demands=['DocumentFragment'], returns='str'),
        PrototypeCall(constructor='ShadowRoot', fn='textContent', demands=['ShadowRoot'], returns='str'),
        PrototypeCall(constructor='DocumentFragment', fn='textContent', demands=['DocumentFragment', 'str'], returns='None'),
        PrototypeCall(constructor='ShadowRoot', fn='textContent', demands=['ShadowRoot', 'str'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='textContent', demands=['DocumentType'], returns='None'),
        PrototypeCall(constructor='Element', fn='textContent', demands=['Element'], returns='str'),
        PrototypeCall(constructor='MathMLElement', fn='textContent', demands=['MathMLElement'], returns='str'),
        PrototypeCall(constructor='SVGElement', fn='textContent', demands=['SVGElement'], returns='str'),
        PrototypeCall(constructor='HTMLElement', fn='textContent', demands=['HTMLElement'], returns='str'),
        PrototypeCall(constructor='Element', fn='textContent', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='textContent', demands=['MathMLElement', 'str'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='textContent', demands=['SVGElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='textContent', demands=['HTMLElement', 'str'], returns='None'),
        FieldCall(field='textContent', demands=['Node'], returns='str'),
        FieldCall(field='textContent', demands=['Node', 'str'], returns='None'),
    ],
    "textDecoration": [
        FieldCall(field='textDecoration', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecoration', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textDecorationColor": [
        FieldCall(field='textDecorationColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecorationColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textDecorationLine": [
        FieldCall(field='textDecorationLine', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecorationLine', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textDecorationSkipInk": [
        FieldCall(field='textDecorationSkipInk', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecorationSkipInk', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textDecorationStyle": [
        FieldCall(field='textDecorationStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecorationStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textDecorationThickness": [
        FieldCall(field='textDecorationThickness', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textDecorationThickness', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textEmphasis": [
        FieldCall(field='textEmphasis', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textEmphasis', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textEmphasisColor": [
        FieldCall(field='textEmphasisColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textEmphasisColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textEmphasisPosition": [
        FieldCall(field='textEmphasisPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textEmphasisPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textEmphasisStyle": [
        FieldCall(field='textEmphasisStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textEmphasisStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textIndent": [
        FieldCall(field='textIndent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textIndent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textLength": [
        FieldCall(field='textLength', demands=['HTMLTextAreaElement'], returns='float'),
        FieldCall(field='textLength', demands=['SVGTextContentElement'], returns='SVGAnimatedLength'),
    ],
    "textOrientation": [
        FieldCall(field='textOrientation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textOrientation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textOverflow": [
        FieldCall(field='textOverflow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textOverflow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textPath": [
        FieldCall(field='textPath', demands=['SVGElementTagNameMap'], returns='SVGTextPathElement'),
        FieldCall(field='textPath', demands=['SVGElementTagNameMap', 'SVGTextPathElement'], returns='None'),
    ],
    "textRendering": [
        FieldCall(field='textRendering', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textRendering', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='textRendering', demands=['CanvasTextDrawingStyles'], returns='CanvasTextRendering'),
        FieldCall(field='textRendering', demands=['CanvasTextDrawingStyles', 'CanvasTextRendering'], returns='None'),
    ],
    "textShadow": [
        FieldCall(field='textShadow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textShadow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textTracks": [
        FieldCall(field='textTracks', demands=['HTMLMediaElement'], returns='TextTrackList'),
    ],
    "textTransform": [
        FieldCall(field='textTransform', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textTransform', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textUnderlineOffset": [
        FieldCall(field='textUnderlineOffset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textUnderlineOffset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textUnderlinePosition": [
        FieldCall(field='textUnderlinePosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textUnderlinePosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textWrap": [
        FieldCall(field='textWrap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textWrap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textWrapMode": [
        FieldCall(field='textWrapMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textWrapMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textWrapStyle": [
        FieldCall(field='textWrapStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='textWrapStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "textarea": [
        FieldCall(field='textarea', demands=['HTMLElementTagNameMap'], returns='HTMLTextAreaElement'),
        FieldCall(field='textarea', demands=['HTMLElementTagNameMap', 'HTMLTextAreaElement'], returns='None'),
    ],
    "tfoot": [
        FieldCall(field='tfoot', demands=['HTMLElementTagNameMap'], returns='HTMLTableSectionElement'),
        FieldCall(field='tfoot', demands=['HTMLElementTagNameMap', 'HTMLTableSectionElement'], returns='None'),
    ],
    "th": [
        FieldCall(field='th', demands=['HTMLElementTagNameMap'], returns='HTMLTableCellElement'),
        FieldCall(field='th', demands=['HTMLElementTagNameMap', 'HTMLTableCellElement'], returns='None'),
    ],
    "thead": [
        FieldCall(field='thead', demands=['HTMLElementTagNameMap'], returns='HTMLTableSectionElement'),
        FieldCall(field='thead', demands=['HTMLElementTagNameMap', 'HTMLTableSectionElement'], returns='None'),
    ],
    "then": [
        PrototypeCall(constructor='PromiseLike', fn='then', demands=['PromiseLike'], returns='PromiseLike<TResult1'),
        PrototypeCall(constructor='PromiseLike', fn='then', demands=['PromiseLike', '((value:T)=>TResult1'], returns='PromiseLike<TResult1'),
        PrototypeCall(constructor='PromiseLike', fn='then', demands=['PromiseLike', '((value:T)=>TResult1', '((reason:any)=>TResult2'], returns='PromiseLike<TResult1'),
        PrototypeCall(constructor='Promise', fn='then', demands=['Promise'], returns='Promise<TResult1'),
        PrototypeCall(constructor='Promise', fn='then', demands=['Promise', '((value:T)=>TResult1'], returns='Promise<TResult1'),
        PrototypeCall(constructor='Promise', fn='then', demands=['Promise', '((value:T)=>TResult1', '((reason:any)=>TResult2'], returns='Promise<TResult1'),
    ],
    "threshold": [
        FieldCall(field='threshold', demands=['DynamicsCompressorOptions'], returns='float'),
        FieldCall(field='threshold', demands=['DynamicsCompressorOptions', 'float'], returns='None'),
        FieldCall(field='threshold', demands=['IntersectionObserverInit'], returns='float'),
        FieldCall(field='threshold', demands=['IntersectionObserverInit', 'float'], returns='None'),
        FieldCall(field='threshold', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "thresholds": [
        FieldCall(field='thresholds', demands=['IntersectionObserver'], returns='ReadonlyArray'),
    ],
    "throw": [
        PrototypeCall(constructor='Iterator', fn='throw', demands=['Iterator'], returns='IteratorResult'),
        PrototypeCall(constructor='Iterator', fn='throw', demands=['Iterator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='Generator', fn='throw', demands=['Generator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncIterator', fn='throw', demands=['AsyncIterator'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncIterator', fn='throw', demands=['AsyncIterator', '*'], returns='IteratorResult'),
        PrototypeCall(constructor='AsyncGenerator', fn='throw', demands=['AsyncGenerator', '*'], returns='IteratorResult'),
    ],
    "throwIfAborted": [
        PrototypeCall(constructor='AbortSignal', fn='throwIfAborted', demands=['AbortSignal'], returns='None'),
    ],
    "tiltX": [
        FieldCall(field='tiltX', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='tiltX', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='tiltX', demands=['PointerEvent'], returns='float'),
    ],
    "tiltY": [
        FieldCall(field='tiltY', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='tiltY', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='tiltY', demands=['PointerEvent'], returns='float'),
    ],
    "time": [
        FieldCall(field='time', demands=['CSSNumericType'], returns='float'),
        FieldCall(field='time', demands=['CSSNumericType', 'float'], returns='None'),
        FieldCall(field='time', demands=['IntersectionObserverEntry'], returns='DOMHighResTimeStamp'),
        FieldCall(field='time', demands=['HTMLElementTagNameMap'], returns='HTMLTimeElement'),
        FieldCall(field='time', demands=['HTMLElementTagNameMap', 'HTMLTimeElement'], returns='None'),
        PrototypeCall(constructor='Console', fn='time', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='time', demands=['Console', 'str'], returns='None'),
    ],
    "timeEnd": [
        PrototypeCall(constructor='Console', fn='timeEnd', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='timeEnd', demands=['Console', 'str'], returns='None'),
    ],
    "timeLog": [
        PrototypeCall(constructor='Console', fn='timeLog', demands=['Console', 'str'], returns='None'),
        PrototypeCall(constructor='Console', fn='timeLog', demands=['Console', 'str', '*'], returns='None'),
    ],
    "timeOrigin": [
        FieldCall(field='timeOrigin', demands=['Performance'], returns='DOMHighResTimeStamp'),
        FieldCall(field='timeOrigin', demands=['Performance'], returns='float'),
    ],
    "timeRemaining": [
        PrototypeCall(constructor='IdleDeadline', fn='timeRemaining', demands=['IdleDeadline'], returns='DOMHighResTimeStamp'),
    ],
    "timeStamp": [
        FieldCall(field='timeStamp', demands=['Event'], returns='DOMHighResTimeStamp'),
        PrototypeCall(constructor='Console', fn='timeStamp', demands=['Console'], returns='None'),
        PrototypeCall(constructor='Console', fn='timeStamp', demands=['Console', 'str'], returns='None'),
        FieldCall(field='timeStamp', demands=['Event'], returns='float'),
    ],
    "timecode": [
        FieldCall(field='timecode', demands=['BlobEventInit'], returns='DOMHighResTimeStamp'),
        FieldCall(field='timecode', demands=['BlobEventInit', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='timecode', demands=['BlobEvent'], returns='DOMHighResTimeStamp'),
    ],
    "timeline": [
        FieldCall(field='timeline', demands=['KeyframeAnimationOptions'], returns='AnimationTimeline'),
        FieldCall(field='timeline', demands=['KeyframeAnimationOptions', 'AnimationTimeline'], returns='None'),
        FieldCall(field='timeline', demands=['Animation'], returns='AnimationTimeline'),
        FieldCall(field='timeline', demands=['Animation', 'AnimationTimeline'], returns='None'),
        FieldCall(field='timeline', demands=['Document'], returns='DocumentTimeline'),
    ],
    "timelineTime": [
        FieldCall(field='timelineTime', demands=['AnimationPlaybackEventInit'], returns='CSSNumberish'),
        FieldCall(field='timelineTime', demands=['AnimationPlaybackEventInit', 'CSSNumberish'], returns='None'),
        FieldCall(field='timelineTime', demands=['AnimationPlaybackEvent'], returns='CSSNumberish'),
    ],
    "timeout": [
        FieldCall(field='timeout', demands=['IdleRequestOptions'], returns='float'),
        FieldCall(field='timeout', demands=['IdleRequestOptions', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['PositionOptions'], returns='float'),
        FieldCall(field='timeout', demands=['PositionOptions', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialCreationOptions'], returns='float'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialCreationOptions', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='float'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialCreationOptionsJSON', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialRequestOptions'], returns='float'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialRequestOptions', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='float'),
        FieldCall(field='timeout', demands=['PublicKeyCredentialRequestOptionsJSON', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['XMLHttpRequest'], returns='float'),
        FieldCall(field='timeout', demands=['XMLHttpRequest', 'float'], returns='None'),
        FieldCall(field='timeout', demands=['XMLHttpRequestEventTargetEventMap'], returns='ProgressEvent'),
        FieldCall(field='timeout', demands=['XMLHttpRequestEventTargetEventMap', 'ProgressEvent'], returns='None'),
    ],
    "timestamp": [
        FieldCall(field='timestamp', demands=['AudioDataInit'], returns='float'),
        FieldCall(field='timestamp', demands=['AudioDataInit', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['EncodedAudioChunkInit'], returns='float'),
        FieldCall(field='timestamp', demands=['EncodedAudioChunkInit', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['EncodedVideoChunkInit'], returns='float'),
        FieldCall(field='timestamp', demands=['EncodedVideoChunkInit', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='timestamp', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['RTCRtpContributingSource'], returns='DOMHighResTimeStamp'),
        FieldCall(field='timestamp', demands=['RTCRtpContributingSource', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='timestamp', demands=['RTCStats'], returns='DOMHighResTimeStamp'),
        FieldCall(field='timestamp', demands=['RTCStats', 'DOMHighResTimeStamp'], returns='None'),
        FieldCall(field='timestamp', demands=['VideoFrameBufferInit'], returns='float'),
        FieldCall(field='timestamp', demands=['VideoFrameBufferInit', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['VideoFrameInit'], returns='float'),
        FieldCall(field='timestamp', demands=['VideoFrameInit', 'float'], returns='None'),
        FieldCall(field='timestamp', demands=['AudioData'], returns='float'),
        FieldCall(field='timestamp', demands=['EncodedAudioChunk'], returns='float'),
        FieldCall(field='timestamp', demands=['EncodedVideoChunk'], returns='float'),
        FieldCall(field='timestamp', demands=['Gamepad'], returns='DOMHighResTimeStamp'),
        FieldCall(field='timestamp', demands=['GeolocationPosition'], returns='EpochTimeStamp'),
        FieldCall(field='timestamp', demands=['RTCEncodedAudioFrame'], returns='float'),
        FieldCall(field='timestamp', demands=['RTCEncodedVideoFrame'], returns='float'),
        FieldCall(field='timestamp', demands=['VideoFrame'], returns='float'),
    ],
    "timestampOffset": [
        FieldCall(field='timestampOffset', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='timestampOffset', demands=['SourceBuffer', 'float'], returns='None'),
    ],
    "timeupdate": [
        FieldCall(field='timeupdate', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='timeupdate', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "timing": [
        FieldCall(field='timing', demands=['Performance'], returns='PerformanceTiming'),
    ],
    "title": [
        FieldCall(field='title', demands=['MediaMetadataInit'], returns='str'),
        FieldCall(field='title', demands=['MediaMetadataInit', 'str'], returns='None'),
        FieldCall(field='title', demands=['ShareData'], returns='str'),
        FieldCall(field='title', demands=['ShareData', 'str'], returns='None'),
        FieldCall(field='title', demands=['Document'], returns='str'),
        FieldCall(field='title', demands=['Document', 'str'], returns='None'),
        FieldCall(field='title', demands=['HTMLElement'], returns='str'),
        FieldCall(field='title', demands=['HTMLElement', 'str'], returns='None'),
        FieldCall(field='title', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='title', demands=['MediaMetadata', 'str'], returns='None'),
        FieldCall(field='title', demands=['Notification'], returns='str'),
        FieldCall(field='title', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='title', demands=['SVGStyleElement', 'str'], returns='None'),
        FieldCall(field='title', demands=['StyleSheet'], returns='str'),
        FieldCall(field='title', demands=['HTMLElementTagNameMap'], returns='HTMLTitleElement'),
        FieldCall(field='title', demands=['HTMLElementTagNameMap', 'HTMLTitleElement'], returns='None'),
        FieldCall(field='title', demands=['SVGElementTagNameMap'], returns='SVGTitleElement'),
        FieldCall(field='title', demands=['SVGElementTagNameMap', 'SVGTitleElement'], returns='None'),
    ],
    "tlsVersion": [
        FieldCall(field='tlsVersion', demands=['RTCTransportStats'], returns='str'),
        FieldCall(field='tlsVersion', demands=['RTCTransportStats', 'str'], returns='None'),
    ],
    "to": [
        PrototypeCall(constructor='CSSNumericValue', fn='to', demands=['CSSNumericValue', 'str'], returns='CSSUnitValue'),
        PrototypeCall(constructor='CSSUnitValue', fn='to', demands=['CSSUnitValue', 'str'], returns='CSSUnitValue'),
        PrototypeCall(constructor='CSSMathValue', fn='to', demands=['CSSMathValue', 'str'], returns='CSSUnitValue'),
    ],
    "toArray": [
        PrototypeCall(constructor='VBArray', fn='toArray', demands=['VBArray'], returns='list'),
    ],
    "toBlob": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback', 'str', 'float'], returns='None'),
    ],
    "toDataURL": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement'], returns='str'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement', 'str'], returns='str'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement', 'str', 'float'], returns='str'),
    ],
    "toDateString": [
        PrototypeCall(constructor='Date', fn='toDateString', demands=['Date'], returns='str'),
    ],
    "toExponential": [
        PrototypeCall(constructor='Number', fn='toExponential', demands=['float'], returns='str'),
        PrototypeCall(constructor='Number', fn='toExponential', demands=['float', 'float'], returns='str'),
    ],
    "toFixed": [
        PrototypeCall(constructor='Number', fn='toFixed', demands=['float'], returns='str'),
        PrototypeCall(constructor='Number', fn='toFixed', demands=['float', 'float'], returns='str'),
    ],
    "toFloat32Array": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toFloat32Array', demands=['DOMMatrixReadOnly'], returns='Float32Array'),
        PrototypeCall(constructor='DOMMatrix', fn='toFloat32Array', demands=['DOMMatrix'], returns='Float32Array'),
    ],
    "toFloat64Array": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toFloat64Array', demands=['DOMMatrixReadOnly'], returns='Float64Array'),
        PrototypeCall(constructor='DOMMatrix', fn='toFloat64Array', demands=['DOMMatrix'], returns='Float64Array'),
    ],
    "toISOString": [
        PrototypeCall(constructor='Date', fn='toISOString', demands=['Date'], returns='str'),
    ],
    "toJSON": [
        PrototypeCall(constructor='CSPViolationReportBody', fn='toJSON', demands=['CSPViolationReportBody'], returns='*'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toJSON', demands=['DOMMatrixReadOnly'], returns='*'),
        PrototypeCall(constructor='DOMMatrix', fn='toJSON', demands=['DOMMatrix'], returns='*'),
        PrototypeCall(constructor='DOMPointReadOnly', fn='toJSON', demands=['DOMPointReadOnly'], returns='*'),
        PrototypeCall(constructor='DOMPoint', fn='toJSON', demands=['DOMPoint'], returns='*'),
        PrototypeCall(constructor='DOMQuad', fn='toJSON', demands=['DOMQuad'], returns='*'),
        PrototypeCall(constructor='DOMRectReadOnly', fn='toJSON', demands=['DOMRectReadOnly'], returns='*'),
        PrototypeCall(constructor='DOMRect', fn='toJSON', demands=['DOMRect'], returns='*'),
        PrototypeCall(constructor='GeolocationCoordinates', fn='toJSON', demands=['GeolocationCoordinates'], returns='*'),
        PrototypeCall(constructor='GeolocationPosition', fn='toJSON', demands=['GeolocationPosition'], returns='*'),
        PrototypeCall(constructor='LargestContentfulPaint', fn='toJSON', demands=['LargestContentfulPaint'], returns='*'),
        PrototypeCall(constructor='MediaDeviceInfo', fn='toJSON', demands=['MediaDeviceInfo'], returns='*'),
        PrototypeCall(constructor='InputDeviceInfo', fn='toJSON', demands=['InputDeviceInfo'], returns='*'),
        PrototypeCall(constructor='PaymentAddress', fn='toJSON', demands=['PaymentAddress'], returns='*'),
        PrototypeCall(constructor='PaymentResponse', fn='toJSON', demands=['PaymentResponse'], returns='*'),
        PrototypeCall(constructor='Performance', fn='toJSON', demands=['Performance'], returns='*'),
        PrototypeCall(constructor='PerformanceEntry', fn='toJSON', demands=['PerformanceEntry'], returns='*'),
        PrototypeCall(constructor='PerformanceMark', fn='toJSON', demands=['PerformanceMark'], returns='*'),
        PrototypeCall(constructor='PerformanceEventTiming', fn='toJSON', demands=['PerformanceEventTiming'], returns='*'),
        PrototypeCall(constructor='PerformanceResourceTiming', fn='toJSON', demands=['PerformanceResourceTiming'], returns='*'),
        PrototypeCall(constructor='PerformancePaintTiming', fn='toJSON', demands=['PerformancePaintTiming'], returns='*'),
        PrototypeCall(constructor='PerformanceMeasure', fn='toJSON', demands=['PerformanceMeasure'], returns='*'),
        PrototypeCall(constructor='PerformanceNavigation', fn='toJSON', demands=['PerformanceNavigation'], returns='*'),
        PrototypeCall(constructor='PerformanceNavigationTiming', fn='toJSON', demands=['PerformanceNavigationTiming'], returns='*'),
        PrototypeCall(constructor='PerformanceServerTiming', fn='toJSON', demands=['PerformanceServerTiming'], returns='*'),
        PrototypeCall(constructor='PerformanceTiming', fn='toJSON', demands=['PerformanceTiming'], returns='*'),
        PrototypeCall(constructor='PublicKeyCredential', fn='toJSON', demands=['PublicKeyCredential'], returns='PublicKeyCredentialJSON'),
        PrototypeCall(constructor='PushSubscription', fn='toJSON', demands=['PushSubscription'], returns='PushSubscriptionJSON'),
        PrototypeCall(constructor='RTCIceCandidate', fn='toJSON', demands=['RTCIceCandidate'], returns='RTCIceCandidateInit'),
        PrototypeCall(constructor='RTCSessionDescription', fn='toJSON', demands=['RTCSessionDescription'], returns='RTCSessionDescriptionInit'),
        PrototypeCall(constructor='Report', fn='toJSON', demands=['Report'], returns='*'),
        PrototypeCall(constructor='ReportBody', fn='toJSON', demands=['ReportBody'], returns='*'),
        PrototypeCall(constructor='URL', fn='toJSON', demands=['URL'], returns='str'),
        PrototypeCall(constructor='VideoColorSpace', fn='toJSON', demands=['VideoColorSpace'], returns='VideoColorSpaceInit'),
        PrototypeCall(constructor='Date', fn='toJSON', demands=['Date'], returns='str'),
        PrototypeCall(constructor='Date', fn='toJSON', demands=['Date', '*'], returns='str'),
    ],
    "toLocaleDateString": [
        PrototypeCall(constructor='Date', fn='toLocaleDateString', demands=['Date'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleDateString', demands=['Date', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleDateString', demands=['Date', 'Intl.LocalesArgument', 'Intl.DateTimeFormatOptions'], returns='str'),
    ],
    "toLocaleLowerCase": [
        PrototypeCall(constructor='String', fn='toLocaleLowerCase', demands=['str'], returns='str'),
        PrototypeCall(constructor='String', fn='toLocaleLowerCase', demands=['str', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='String', fn='toLocaleLowerCase', demands=['str', 'str'], returns='str'),
    ],
    "toLocaleString": [
        PrototypeCall(constructor='BigInt', fn='toLocaleString', demands=['BigInt'], returns='str'),
        PrototypeCall(constructor='BigInt', fn='toLocaleString', demands=['BigInt', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='BigInt', fn='toLocaleString', demands=['BigInt', 'Intl.LocalesArgument', 'BigIntToLocaleStringOptions'], returns='str'),
        PrototypeCall(constructor='BigInt64Array', fn='toLocaleString', demands=['BigInt64Array'], returns='str'),
        PrototypeCall(constructor='BigInt64Array', fn='toLocaleString', demands=['BigInt64Array', 'str'], returns='str'),
        PrototypeCall(constructor='BigInt64Array', fn='toLocaleString', demands=['BigInt64Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='toLocaleString', demands=['BigUint64Array'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='toLocaleString', demands=['BigUint64Array', 'str'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='toLocaleString', demands=['BigUint64Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleString', demands=['Date'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleString', demands=['Date', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleString', demands=['Date', 'Intl.LocalesArgument', 'Intl.DateTimeFormatOptions'], returns='str'),
        PrototypeCall(constructor='Number', fn='toLocaleString', demands=['float'], returns='str'),
        PrototypeCall(constructor='Number', fn='toLocaleString', demands=['float', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='Number', fn='toLocaleString', demands=['float', 'Intl.LocalesArgument', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Object', fn='toLocaleString', demands=['Object'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='toLocaleString', demands=['ReadonlyArray'], returns='str'),
        PrototypeCall(constructor='Array', fn='toLocaleString', demands=['list'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='toLocaleString', demands=['Int8Array'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='toLocaleString', demands=['Uint8Array'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toLocaleString', demands=['Uint8ClampedArray'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='toLocaleString', demands=['Int16Array'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='toLocaleString', demands=['Uint16Array'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='toLocaleString', demands=['Int32Array'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='toLocaleString', demands=['Uint32Array'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='toLocaleString', demands=['Float32Array'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='toLocaleString', demands=['Float64Array'], returns='str'),
        PrototypeCall(constructor='Array', fn='toLocaleString', demands=['list', 'str'], returns='str'),
        PrototypeCall(constructor='Array', fn='toLocaleString', demands=['list', 'str', 'Intl.NumberFormatOptions&Intl.DateTimeFormatOptions'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='toLocaleString', demands=['ReadonlyArray', 'str'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='toLocaleString', demands=['ReadonlyArray', 'str', 'Intl.NumberFormatOptions&Intl.DateTimeFormatOptions'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='toLocaleString', demands=['Int8Array', 'str'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='toLocaleString', demands=['Int8Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='toLocaleString', demands=['Uint8Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='toLocaleString', demands=['Uint8Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toLocaleString', demands=['Uint8ClampedArray', 'str'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toLocaleString', demands=['Uint8ClampedArray', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='toLocaleString', demands=['Int16Array', 'str'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='toLocaleString', demands=['Int16Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='toLocaleString', demands=['Uint16Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='toLocaleString', demands=['Uint16Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='toLocaleString', demands=['Int32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='toLocaleString', demands=['Int32Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='toLocaleString', demands=['Uint32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='toLocaleString', demands=['Uint32Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='toLocaleString', demands=['Float32Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='toLocaleString', demands=['Float32Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='toLocaleString', demands=['Float64Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='toLocaleString', demands=['Float64Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='toLocaleString', demands=['Float16Array'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='toLocaleString', demands=['Float16Array', 'str'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='toLocaleString', demands=['Float16Array', 'str', 'Intl.NumberFormatOptions'], returns='str'),
    ],
    "toLocaleTimeString": [
        PrototypeCall(constructor='Date', fn='toLocaleTimeString', demands=['Date'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleTimeString', demands=['Date', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='Date', fn='toLocaleTimeString', demands=['Date', 'Intl.LocalesArgument', 'Intl.DateTimeFormatOptions'], returns='str'),
    ],
    "toLocaleUpperCase": [
        PrototypeCall(constructor='String', fn='toLocaleUpperCase', demands=['str'], returns='str'),
        PrototypeCall(constructor='String', fn='toLocaleUpperCase', demands=['str', 'Intl.LocalesArgument'], returns='str'),
        PrototypeCall(constructor='String', fn='toLocaleUpperCase', demands=['str', 'str'], returns='str'),
    ],
    "toLowerCase": [
        PrototypeCall(constructor='String', fn='toLowerCase', demands=['str'], returns='str'),
    ],
    "toMatrix": [
        PrototypeCall(constructor='CSSTransformComponent', fn='toMatrix', demands=['CSSTransformComponent'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSSkewY', fn='toMatrix', demands=['CSSSkewY'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSMatrixComponent', fn='toMatrix', demands=['CSSMatrixComponent'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSRotate', fn='toMatrix', demands=['CSSRotate'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSTranslate', fn='toMatrix', demands=['CSSTranslate'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSPerspective', fn='toMatrix', demands=['CSSPerspective'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSScale', fn='toMatrix', demands=['CSSScale'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSSkewX', fn='toMatrix', demands=['CSSSkewX'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSSkew', fn='toMatrix', demands=['CSSSkew'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSTransformValue', fn='toMatrix', demands=['CSSTransformValue'], returns='DOMMatrix'),
    ],
    "toPrecision": [
        PrototypeCall(constructor='Number', fn='toPrecision', demands=['float'], returns='str'),
        PrototypeCall(constructor='Number', fn='toPrecision', demands=['float', 'float'], returns='str'),
    ],
    "toPrimitive": [
        FieldCall(field='toPrimitive', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "toReversed": [
        PrototypeCall(constructor='Array', fn='toReversed', demands=['list'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toReversed', demands=['ReadonlyArray'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='toReversed', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='toReversed', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toReversed', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='toReversed', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='toReversed', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='toReversed', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='toReversed', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='toReversed', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='toReversed', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='toReversed', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='toReversed', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='Float16Array', fn='toReversed', demands=['Float16Array'], returns='Float16Array'),
    ],
    "toSorted": [
        PrototypeCall(constructor='Array', fn='toSorted', demands=['list'], returns='list'),
        PrototypeCall(constructor='Array', fn='toSorted', demands=['list', '(a:T,b:T)=>number'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toSorted', demands=['ReadonlyArray'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toSorted', demands=['ReadonlyArray', '(a:T,b:T)=>number'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='toSorted', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Int8Array', fn='toSorted', demands=['Int8Array', '(a:number,b:number)=>number'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='toSorted', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8Array', fn='toSorted', demands=['Uint8Array', '(a:number,b:number)=>number'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toSorted', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toSorted', demands=['Uint8ClampedArray', '(a:number,b:number)=>number'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='toSorted', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Int16Array', fn='toSorted', demands=['Int16Array', '(a:number,b:number)=>number'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='toSorted', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Uint16Array', fn='toSorted', demands=['Uint16Array', '(a:number,b:number)=>number'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='toSorted', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Int32Array', fn='toSorted', demands=['Int32Array', '(a:number,b:number)=>number'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='toSorted', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Uint32Array', fn='toSorted', demands=['Uint32Array', '(a:number,b:number)=>number'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='toSorted', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float32Array', fn='toSorted', demands=['Float32Array', '(a:number,b:number)=>number'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='toSorted', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float64Array', fn='toSorted', demands=['Float64Array', '(a:number,b:number)=>number'], returns='Float64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='toSorted', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='toSorted', demands=['BigInt64Array', '(a:bigint,b:bigint)=>number'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='toSorted', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='toSorted', demands=['BigUint64Array', '(a:bigint,b:bigint)=>number'], returns='BigUint64Array'),
        PrototypeCall(constructor='Float16Array', fn='toSorted', demands=['Float16Array'], returns='Float16Array'),
        PrototypeCall(constructor='Float16Array', fn='toSorted', demands=['Float16Array', '(a:number,b:number)=>number'], returns='Float16Array'),
    ],
    "toSpliced": [
        PrototypeCall(constructor='Array', fn='toSpliced', demands=['list', 'float', 'float', '*'], returns='list'),
        PrototypeCall(constructor='Array', fn='toSpliced', demands=['list', 'float'], returns='list'),
        PrototypeCall(constructor='Array', fn='toSpliced', demands=['list', 'float', 'float'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toSpliced', demands=['ReadonlyArray', 'float', 'float', '*'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toSpliced', demands=['ReadonlyArray', 'float'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='toSpliced', demands=['ReadonlyArray', 'float', 'float'], returns='list'),
    ],
    "toString": [
        PrototypeCall(constructor='CSSStyleValue', fn='toString', demands=['CSSStyleValue'], returns='str'),
        PrototypeCall(constructor='CSSKeywordValue', fn='toString', demands=['CSSKeywordValue'], returns='str'),
        PrototypeCall(constructor='CSSNumericValue', fn='toString', demands=['CSSNumericValue'], returns='str'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='toString', demands=['CSSUnparsedValue'], returns='str'),
        PrototypeCall(constructor='CSSImageValue', fn='toString', demands=['CSSImageValue'], returns='str'),
        PrototypeCall(constructor='CSSTransformValue', fn='toString', demands=['CSSTransformValue'], returns='str'),
        PrototypeCall(constructor='CSSTransformComponent', fn='toString', demands=['CSSTransformComponent'], returns='str'),
        PrototypeCall(constructor='CSSSkewY', fn='toString', demands=['CSSSkewY'], returns='str'),
        PrototypeCall(constructor='CSSMatrixComponent', fn='toString', demands=['CSSMatrixComponent'], returns='str'),
        PrototypeCall(constructor='CSSRotate', fn='toString', demands=['CSSRotate'], returns='str'),
        PrototypeCall(constructor='CSSTranslate', fn='toString', demands=['CSSTranslate'], returns='str'),
        PrototypeCall(constructor='CSSPerspective', fn='toString', demands=['CSSPerspective'], returns='str'),
        PrototypeCall(constructor='CSSScale', fn='toString', demands=['CSSScale'], returns='str'),
        PrototypeCall(constructor='CSSSkewX', fn='toString', demands=['CSSSkewX'], returns='str'),
        PrototypeCall(constructor='CSSSkew', fn='toString', demands=['CSSSkew'], returns='str'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toString', demands=['DOMMatrixReadOnly'], returns='str'),
        PrototypeCall(constructor='DOMMatrix', fn='toString', demands=['DOMMatrix'], returns='str'),
        PrototypeCall(constructor='DOMTokenList', fn='toString', demands=['DOMTokenList'], returns='str'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='toString', demands=['HTMLAnchorElement'], returns='str'),
        PrototypeCall(constructor='HTMLAreaElement', fn='toString', demands=['HTMLAreaElement'], returns='str'),
        PrototypeCall(constructor='Location', fn='toString', demands=['Location'], returns='str'),
        PrototypeCall(constructor='MediaList', fn='toString', demands=['MediaList'], returns='str'),
        PrototypeCall(constructor='Range', fn='toString', demands=['Range'], returns='str'),
        PrototypeCall(constructor='Selection', fn='toString', demands=['Selection'], returns='str'),
        PrototypeCall(constructor='URL', fn='toString', demands=['URL'], returns='str'),
        PrototypeCall(constructor='URLSearchParams', fn='toString', demands=['URLSearchParams'], returns='str'),
        PrototypeCall(constructor='BigInt', fn='toString', demands=['BigInt'], returns='str'),
        PrototypeCall(constructor='BigInt', fn='toString', demands=['BigInt', 'float'], returns='str'),
        PrototypeCall(constructor='BigInt64Array', fn='toString', demands=['BigInt64Array'], returns='str'),
        PrototypeCall(constructor='BigUint64Array', fn='toString', demands=['BigUint64Array'], returns='str'),
        PrototypeCall(constructor='Symbol', fn='toString', demands=['Symbol'], returns='str'),
        PrototypeCall(constructor='Object', fn='toString', demands=['Object'], returns='str'),
        PrototypeCall(constructor='Function', fn='toString', demands=['*'], returns='str'),
        PrototypeCall(constructor='String', fn='toString', demands=['str'], returns='str'),
        PrototypeCall(constructor='Number', fn='toString', demands=['float'], returns='str'),
        PrototypeCall(constructor='Number', fn='toString', demands=['float', 'float'], returns='str'),
        PrototypeCall(constructor='Date', fn='toString', demands=['Date'], returns='str'),
        PrototypeCall(constructor='ReadonlyArray', fn='toString', demands=['ReadonlyArray'], returns='str'),
        PrototypeCall(constructor='Array', fn='toString', demands=['list'], returns='str'),
        PrototypeCall(constructor='Int8Array', fn='toString', demands=['Int8Array'], returns='str'),
        PrototypeCall(constructor='Uint8Array', fn='toString', demands=['Uint8Array'], returns='str'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='toString', demands=['Uint8ClampedArray'], returns='str'),
        PrototypeCall(constructor='Int16Array', fn='toString', demands=['Int16Array'], returns='str'),
        PrototypeCall(constructor='Uint16Array', fn='toString', demands=['Uint16Array'], returns='str'),
        PrototypeCall(constructor='Int32Array', fn='toString', demands=['Int32Array'], returns='str'),
        PrototypeCall(constructor='Uint32Array', fn='toString', demands=['Uint32Array'], returns='str'),
        PrototypeCall(constructor='Float32Array', fn='toString', demands=['Float32Array'], returns='str'),
        PrototypeCall(constructor='Float64Array', fn='toString', demands=['Float64Array'], returns='str'),
        PrototypeCall(constructor='Float16Array', fn='toString', demands=['Float16Array'], returns='str'),
    ],
    "toStringTag": [
        FieldCall(field='toStringTag', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "toSum": [
        PrototypeCall(constructor='CSSNumericValue', fn='toSum', demands=['CSSNumericValue', '*'], returns='CSSMathSum'),
        PrototypeCall(constructor='CSSUnitValue', fn='toSum', demands=['CSSUnitValue', '*'], returns='CSSMathSum'),
        PrototypeCall(constructor='CSSMathValue', fn='toSum', demands=['CSSMathValue', '*'], returns='CSSMathSum'),
    ],
    "toTimeString": [
        PrototypeCall(constructor='Date', fn='toTimeString', demands=['Date'], returns='str'),
    ],
    "toUTCString": [
        PrototypeCall(constructor='Date', fn='toUTCString', demands=['Date'], returns='str'),
    ],
    "toUpperCase": [
        PrototypeCall(constructor='String', fn='toUpperCase', demands=['str'], returns='str'),
    ],
    "toWellFormed": [
        PrototypeCall(constructor='String', fn='toWellFormed', demands=['str'], returns='str'),
    ],
    "toggle": [
        PrototypeCall(constructor='DOMTokenList', fn='toggle', demands=['DOMTokenList', 'str'], returns='bool'),
        PrototypeCall(constructor='DOMTokenList', fn='toggle', demands=['DOMTokenList', 'str', 'bool'], returns='bool'),
        FieldCall(field='toggle', demands=['GlobalEventHandlersEventMap'], returns='ToggleEvent'),
        FieldCall(field='toggle', demands=['GlobalEventHandlersEventMap', 'ToggleEvent'], returns='None'),
        FieldCall(field='toggle', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='toggle', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "toggleAttribute": [
        PrototypeCall(constructor='Element', fn='toggleAttribute', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='toggleAttribute', demands=['MathMLElement', 'str'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='toggleAttribute', demands=['SVGElement', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='toggleAttribute', demands=['HTMLElement', 'str'], returns='bool'),
        PrototypeCall(constructor='Element', fn='toggleAttribute', demands=['Element', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='toggleAttribute', demands=['MathMLElement', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='toggleAttribute', demands=['SVGElement', 'str', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='toggleAttribute', demands=['HTMLElement', 'str', 'bool'], returns='bool'),
    ],
    "togglePopover": [
        PrototypeCall(constructor='HTMLElement', fn='togglePopover', demands=['HTMLElement'], returns='bool'),
        PrototypeCall(constructor='HTMLHeadElement', fn='togglePopover', demands=['HTMLHeadElement'], returns='bool'),
        PrototypeCall(constructor='HTMLModElement', fn='togglePopover', demands=['HTMLModElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='togglePopover', demands=['HTMLDetailsElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableElement', fn='togglePopover', demands=['HTMLTableElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDialogElement', fn='togglePopover', demands=['HTMLDialogElement'], returns='bool'),
        PrototypeCall(constructor='HTMLImageElement', fn='togglePopover', demands=['HTMLImageElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='togglePopover', demands=['HTMLOptGroupElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDListElement', fn='togglePopover', demands=['HTMLDListElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='togglePopover', demands=['HTMLTemplateElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTitleElement', fn='togglePopover', demands=['HTMLTitleElement'], returns='bool'),
        PrototypeCall(constructor='HTMLPreElement', fn='togglePopover', demands=['HTMLPreElement'], returns='bool'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='togglePopover', demands=['HTMLAnchorElement'], returns='bool'),
        PrototypeCall(constructor='HTMLPictureElement', fn='togglePopover', demands=['HTMLPictureElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='togglePopover', demands=['HTMLTableRowElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='togglePopover', demands=['HTMLTableSectionElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='togglePopover', demands=['HTMLFrameSetElement'], returns='bool'),
        PrototypeCall(constructor='HTMLBaseElement', fn='togglePopover', demands=['HTMLBaseElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFontElement', fn='togglePopover', demands=['HTMLFontElement'], returns='bool'),
        PrototypeCall(constructor='HTMLAreaElement', fn='togglePopover', demands=['HTMLAreaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOListElement', fn='togglePopover', demands=['HTMLOListElement'], returns='bool'),
        PrototypeCall(constructor='HTMLBodyElement', fn='togglePopover', demands=['HTMLBodyElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='togglePopover', demands=['HTMLFormElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='togglePopover', demands=['HTMLSelectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='togglePopover', demands=['HTMLTableCaptionElement'], returns='bool'),
        PrototypeCall(constructor='HTMLScriptElement', fn='togglePopover', demands=['HTMLScriptElement'], returns='bool'),
        PrototypeCall(constructor='HTMLLIElement', fn='togglePopover', demands=['HTMLLIElement'], returns='bool'),
        PrototypeCall(constructor='HTMLStyleElement', fn='togglePopover', demands=['HTMLStyleElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='togglePopover', demands=['HTMLTextAreaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDivElement', fn='togglePopover', demands=['HTMLDivElement'], returns='bool'),
        PrototypeCall(constructor='HTMLProgressElement', fn='togglePopover', demands=['HTMLProgressElement'], returns='bool'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='togglePopover', demands=['HTMLIFrameElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMeterElement', fn='togglePopover', demands=['HTMLMeterElement'], returns='bool'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='togglePopover', demands=['HTMLHeadingElement'], returns='bool'),
        PrototypeCall(constructor='HTMLObjectElement', fn='togglePopover', demands=['HTMLObjectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='togglePopover', demands=['HTMLTableCellElement'], returns='bool'),
        PrototypeCall(constructor='HTMLLegendElement', fn='togglePopover', demands=['HTMLLegendElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDataListElement', fn='togglePopover', demands=['HTMLDataListElement'], returns='bool'),
        PrototypeCall(constructor='HTMLUListElement', fn='togglePopover', demands=['HTMLUListElement'], returns='bool'),
        PrototypeCall(constructor='HTMLLabelElement', fn='togglePopover', demands=['HTMLLabelElement'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='togglePopover', demands=['HTMLButtonElement'], returns='bool'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='togglePopover', demands=['HTMLParagraphElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='togglePopover', demands=['HTMLDirectoryElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSourceElement', fn='togglePopover', demands=['HTMLSourceElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMenuElement', fn='togglePopover', demands=['HTMLMenuElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTrackElement', fn='togglePopover', demands=['HTMLTrackElement'], returns='bool'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='togglePopover', demands=['HTMLQuoteElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSpanElement', fn='togglePopover', demands=['HTMLSpanElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='togglePopover', demands=['HTMLOutputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='togglePopover', demands=['HTMLMarqueeElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMediaElement', fn='togglePopover', demands=['HTMLMediaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='togglePopover', demands=['HTMLInputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='togglePopover', demands=['HTMLCanvasElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTableColElement', fn='togglePopover', demands=['HTMLTableColElement'], returns='bool'),
        PrototypeCall(constructor='HTMLDataElement', fn='togglePopover', demands=['HTMLDataElement'], returns='bool'),
        PrototypeCall(constructor='HTMLParamElement', fn='togglePopover', demands=['HTMLParamElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMapElement', fn='togglePopover', demands=['HTMLMapElement'], returns='bool'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='togglePopover', demands=['HTMLUnknownElement'], returns='bool'),
        PrototypeCall(constructor='HTMLHRElement', fn='togglePopover', demands=['HTMLHRElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='togglePopover', demands=['HTMLFieldSetElement'], returns='bool'),
        PrototypeCall(constructor='HTMLBRElement', fn='togglePopover', demands=['HTMLBRElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOptionElement', fn='togglePopover', demands=['HTMLOptionElement'], returns='bool'),
        PrototypeCall(constructor='HTMLLinkElement', fn='togglePopover', demands=['HTMLLinkElement'], returns='bool'),
        PrototypeCall(constructor='HTMLMetaElement', fn='togglePopover', demands=['HTMLMetaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='togglePopover', demands=['HTMLHtmlElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTimeElement', fn='togglePopover', demands=['HTMLTimeElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSlotElement', fn='togglePopover', demands=['HTMLSlotElement'], returns='bool'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='togglePopover', demands=['HTMLEmbedElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFrameElement', fn='togglePopover', demands=['HTMLFrameElement'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='togglePopover', demands=['HTMLElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLHeadElement', fn='togglePopover', demands=['HTMLHeadElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLModElement', fn='togglePopover', demands=['HTMLModElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDetailsElement', fn='togglePopover', demands=['HTMLDetailsElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableElement', fn='togglePopover', demands=['HTMLTableElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDialogElement', fn='togglePopover', demands=['HTMLDialogElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLImageElement', fn='togglePopover', demands=['HTMLImageElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLOptGroupElement', fn='togglePopover', demands=['HTMLOptGroupElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDListElement', fn='togglePopover', demands=['HTMLDListElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTemplateElement', fn='togglePopover', demands=['HTMLTemplateElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTitleElement', fn='togglePopover', demands=['HTMLTitleElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLPreElement', fn='togglePopover', demands=['HTMLPreElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLAnchorElement', fn='togglePopover', demands=['HTMLAnchorElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLPictureElement', fn='togglePopover', demands=['HTMLPictureElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='togglePopover', demands=['HTMLTableRowElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='togglePopover', demands=['HTMLTableSectionElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLFrameSetElement', fn='togglePopover', demands=['HTMLFrameSetElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLBaseElement', fn='togglePopover', demands=['HTMLBaseElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLFontElement', fn='togglePopover', demands=['HTMLFontElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLAreaElement', fn='togglePopover', demands=['HTMLAreaElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLOListElement', fn='togglePopover', demands=['HTMLOListElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLBodyElement', fn='togglePopover', demands=['HTMLBodyElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='togglePopover', demands=['HTMLFormElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='togglePopover', demands=['HTMLSelectElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableCaptionElement', fn='togglePopover', demands=['HTMLTableCaptionElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLScriptElement', fn='togglePopover', demands=['HTMLScriptElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLLIElement', fn='togglePopover', demands=['HTMLLIElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLStyleElement', fn='togglePopover', demands=['HTMLStyleElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='togglePopover', demands=['HTMLTextAreaElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDivElement', fn='togglePopover', demands=['HTMLDivElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLProgressElement', fn='togglePopover', demands=['HTMLProgressElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLIFrameElement', fn='togglePopover', demands=['HTMLIFrameElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMeterElement', fn='togglePopover', demands=['HTMLMeterElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLHeadingElement', fn='togglePopover', demands=['HTMLHeadingElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLObjectElement', fn='togglePopover', demands=['HTMLObjectElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableCellElement', fn='togglePopover', demands=['HTMLTableCellElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLLegendElement', fn='togglePopover', demands=['HTMLLegendElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDataListElement', fn='togglePopover', demands=['HTMLDataListElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLUListElement', fn='togglePopover', demands=['HTMLUListElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLLabelElement', fn='togglePopover', demands=['HTMLLabelElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='togglePopover', demands=['HTMLButtonElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLParagraphElement', fn='togglePopover', demands=['HTMLParagraphElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDirectoryElement', fn='togglePopover', demands=['HTMLDirectoryElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLSourceElement', fn='togglePopover', demands=['HTMLSourceElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMenuElement', fn='togglePopover', demands=['HTMLMenuElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTrackElement', fn='togglePopover', demands=['HTMLTrackElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLQuoteElement', fn='togglePopover', demands=['HTMLQuoteElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLSpanElement', fn='togglePopover', demands=['HTMLSpanElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='togglePopover', demands=['HTMLOutputElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='togglePopover', demands=['HTMLMarqueeElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMediaElement', fn='togglePopover', demands=['HTMLMediaElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='togglePopover', demands=['HTMLInputElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='togglePopover', demands=['HTMLCanvasElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTableColElement', fn='togglePopover', demands=['HTMLTableColElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLDataElement', fn='togglePopover', demands=['HTMLDataElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLParamElement', fn='togglePopover', demands=['HTMLParamElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMapElement', fn='togglePopover', demands=['HTMLMapElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLUnknownElement', fn='togglePopover', demands=['HTMLUnknownElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLHRElement', fn='togglePopover', demands=['HTMLHRElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='togglePopover', demands=['HTMLFieldSetElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLBRElement', fn='togglePopover', demands=['HTMLBRElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLOptionElement', fn='togglePopover', demands=['HTMLOptionElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLLinkElement', fn='togglePopover', demands=['HTMLLinkElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLMetaElement', fn='togglePopover', demands=['HTMLMetaElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLHtmlElement', fn='togglePopover', demands=['HTMLHtmlElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLTimeElement', fn='togglePopover', demands=['HTMLTimeElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLSlotElement', fn='togglePopover', demands=['HTMLSlotElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='togglePopover', demands=['HTMLEmbedElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='HTMLFrameElement', fn='togglePopover', demands=['HTMLFrameElement', 'bool'], returns='bool'),
    ],
    "tone": [
        FieldCall(field='tone', demands=['RTCDTMFToneChangeEventInit'], returns='str'),
        FieldCall(field='tone', demands=['RTCDTMFToneChangeEventInit', 'str'], returns='None'),
        FieldCall(field='tone', demands=['RTCDTMFToneChangeEvent'], returns='str'),
    ],
    "toneBuffer": [
        FieldCall(field='toneBuffer', demands=['RTCDTMFSender'], returns='str'),
    ],
    "tonechange": [
        FieldCall(field='tonechange', demands=['RTCDTMFSenderEventMap'], returns='RTCDTMFToneChangeEvent'),
        FieldCall(field='tonechange', demands=['RTCDTMFSenderEventMap', 'RTCDTMFToneChangeEvent'], returns='None'),
    ],
    "tooLong": [
        FieldCall(field='tooLong', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='tooLong', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='tooLong', demands=['ValidityState'], returns='bool'),
    ],
    "tooShort": [
        FieldCall(field='tooShort', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='tooShort', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='tooShort', demands=['ValidityState'], returns='bool'),
    ],
    "toolbar": [
        FieldCall(field='toolbar', demands=['Window'], returns='BarProp'),
    ],
    "top": [
        FieldCall(field='top', demands=['ScrollToOptions'], returns='float'),
        FieldCall(field='top', demands=['ScrollToOptions', 'float'], returns='None'),
        FieldCall(field='top', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='top', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='top', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='top', demands=['Window'], returns='WindowProxy'),
    ],
    "torch": [
        FieldCall(field='torch', demands=['MediaTrackSettings'], returns='bool'),
        FieldCall(field='torch', demands=['MediaTrackSettings', 'bool'], returns='None'),
    ],
    "total": [
        FieldCall(field='total', demands=['PaymentDetailsInit'], returns='PaymentItem'),
        FieldCall(field='total', demands=['PaymentDetailsInit', 'PaymentItem'], returns='None'),
        FieldCall(field='total', demands=['PaymentDetailsModifier'], returns='PaymentItem'),
        FieldCall(field='total', demands=['PaymentDetailsModifier', 'PaymentItem'], returns='None'),
        FieldCall(field='total', demands=['PaymentDetailsUpdate'], returns='PaymentItem'),
        FieldCall(field='total', demands=['PaymentDetailsUpdate', 'PaymentItem'], returns='None'),
        FieldCall(field='total', demands=['ProgressEventInit'], returns='float'),
        FieldCall(field='total', demands=['ProgressEventInit', 'float'], returns='None'),
        FieldCall(field='total', demands=['ProgressEvent'], returns='float'),
    ],
    "totalAssemblyTime": [
        FieldCall(field='totalAssemblyTime', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalAssemblyTime', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalAudioEnergy": [
        FieldCall(field='totalAudioEnergy', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalAudioEnergy', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalDecodeTime": [
        FieldCall(field='totalDecodeTime', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalDecodeTime', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalEncodeTime": [
        FieldCall(field='totalEncodeTime', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalEncodeTime', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalEncodedBytesTarget": [
        FieldCall(field='totalEncodedBytesTarget', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalEncodedBytesTarget', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalFreezesDuration": [
        FieldCall(field='totalFreezesDuration', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalFreezesDuration', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalInterFrameDelay": [
        FieldCall(field='totalInterFrameDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalInterFrameDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalPacketSendDelay": [
        FieldCall(field='totalPacketSendDelay', demands=['RTCOutboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalPacketSendDelay', demands=['RTCOutboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalPausesDuration": [
        FieldCall(field='totalPausesDuration', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalPausesDuration', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalProcessingDelay": [
        FieldCall(field='totalProcessingDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalProcessingDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalRoundTripTime": [
        FieldCall(field='totalRoundTripTime', demands=['RTCIceCandidatePairStats'], returns='float'),
        FieldCall(field='totalRoundTripTime', demands=['RTCIceCandidatePairStats', 'float'], returns='None'),
    ],
    "totalSamplesDuration": [
        FieldCall(field='totalSamplesDuration', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalSamplesDuration', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalSamplesReceived": [
        FieldCall(field='totalSamplesReceived', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalSamplesReceived', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalSquaredInterFrameDelay": [
        FieldCall(field='totalSquaredInterFrameDelay', demands=['RTCInboundRtpStreamStats'], returns='float'),
        FieldCall(field='totalSquaredInterFrameDelay', demands=['RTCInboundRtpStreamStats', 'float'], returns='None'),
    ],
    "totalVideoFrames": [
        FieldCall(field='totalVideoFrames', demands=['VideoPlaybackQuality'], returns='float'),
    ],
    "touchAction": [
        FieldCall(field='touchAction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='touchAction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "touchType": [
        FieldCall(field='touchType', demands=['TouchInit'], returns='TouchType'),
        FieldCall(field='touchType', demands=['TouchInit', 'TouchType'], returns='None'),
    ],
    "touchcancel": [
        FieldCall(field='touchcancel', demands=['GlobalEventHandlersEventMap'], returns='TouchEvent'),
        FieldCall(field='touchcancel', demands=['GlobalEventHandlersEventMap', 'TouchEvent'], returns='None'),
    ],
    "touched": [
        FieldCall(field='touched', demands=['GamepadButton'], returns='bool'),
    ],
    "touchend": [
        FieldCall(field='touchend', demands=['GlobalEventHandlersEventMap'], returns='TouchEvent'),
        FieldCall(field='touchend', demands=['GlobalEventHandlersEventMap', 'TouchEvent'], returns='None'),
    ],
    "touches": [
        FieldCall(field='touches', demands=['TouchEventInit'], returns='list'),
        FieldCall(field='touches', demands=['TouchEventInit', 'list'], returns='None'),
        FieldCall(field='touches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "touchmove": [
        FieldCall(field='touchmove', demands=['GlobalEventHandlersEventMap'], returns='TouchEvent'),
        FieldCall(field='touchmove', demands=['GlobalEventHandlersEventMap', 'TouchEvent'], returns='None'),
    ],
    "touchstart": [
        FieldCall(field='touchstart', demands=['GlobalEventHandlersEventMap'], returns='TouchEvent'),
        FieldCall(field='touchstart', demands=['GlobalEventHandlersEventMap', 'TouchEvent'], returns='None'),
    ],
    "tr": [
        FieldCall(field='tr', demands=['HTMLElementTagNameMap'], returns='HTMLTableRowElement'),
        FieldCall(field='tr', demands=['HTMLElementTagNameMap', 'HTMLTableRowElement'], returns='None'),
    ],
    "trace": [
        PrototypeCall(constructor='Console', fn='trace', demands=['Console', '*'], returns='None'),
    ],
    "track": [
        FieldCall(field='track', demands=['MediaStreamTrackEventInit'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['MediaStreamTrackEventInit', 'MediaStreamTrack'], returns='None'),
        FieldCall(field='track', demands=['RTCTrackEventInit'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCTrackEventInit', 'MediaStreamTrack'], returns='None'),
        FieldCall(field='track', demands=['TrackEventInit'], returns='TextTrack'),
        FieldCall(field='track', demands=['TrackEventInit', 'TextTrack'], returns='None'),
        FieldCall(field='track', demands=['HTMLTrackElement'], returns='TextTrack'),
        FieldCall(field='track', demands=['ImageCapture'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['MediaStreamTrackEvent'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCPeerConnectionEventMap'], returns='RTCTrackEvent'),
        FieldCall(field='track', demands=['RTCPeerConnectionEventMap', 'RTCTrackEvent'], returns='None'),
        FieldCall(field='track', demands=['RTCRtpReceiver'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCRtpSender'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCTrackEvent'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['TextTrackCue'], returns='TextTrack'),
        FieldCall(field='track', demands=['TrackEvent'], returns='TextTrack'),
        FieldCall(field='track', demands=['HTMLElementTagNameMap'], returns='HTMLTrackElement'),
        FieldCall(field='track', demands=['HTMLElementTagNameMap', 'HTMLTrackElement'], returns='None'),
    ],
    "trackIdentifier": [
        FieldCall(field='trackIdentifier', demands=['RTCInboundRtpStreamStats'], returns='str'),
        FieldCall(field='trackIdentifier', demands=['RTCInboundRtpStreamStats', 'str'], returns='None'),
    ],
    "tracks": [
        FieldCall(field='tracks', demands=['ImageDecoder'], returns='ImageTrackList'),
    ],
    "transaction": [
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str'], returns='IDBTransaction'),
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str', 'IDBTransactionMode'], returns='IDBTransaction'),
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str', 'IDBTransactionMode', 'IDBTransactionOptions'], returns='IDBTransaction'),
        FieldCall(field='transaction', demands=['IDBObjectStore'], returns='IDBTransaction'),
        FieldCall(field='transaction', demands=['IDBRequest'], returns='IDBTransaction'),
    ],
    "transactionId": [
        FieldCall(field='transactionId', demands=['RTCRtpSendParameters'], returns='str'),
        FieldCall(field='transactionId', demands=['RTCRtpSendParameters', 'str'], returns='None'),
    ],
    "transceiver": [
        FieldCall(field='transceiver', demands=['RTCTrackEventInit'], returns='RTCRtpTransceiver'),
        FieldCall(field='transceiver', demands=['RTCTrackEventInit', 'RTCRtpTransceiver'], returns='None'),
        FieldCall(field='transceiver', demands=['RTCTrackEvent'], returns='RTCRtpTransceiver'),
    ],
    "transcript": [
        FieldCall(field='transcript', demands=['SpeechRecognitionAlternative'], returns='str'),
    ],
    "transfer": [
        FieldCall(field='transfer', demands=['AudioDataInit'], returns='list'),
        FieldCall(field='transfer', demands=['AudioDataInit', 'list'], returns='None'),
        FieldCall(field='transfer', demands=['EncodedAudioChunkInit'], returns='list'),
        FieldCall(field='transfer', demands=['EncodedAudioChunkInit', 'list'], returns='None'),
        FieldCall(field='transfer', demands=['ImageDecoderInit'], returns='list'),
        FieldCall(field='transfer', demands=['ImageDecoderInit', 'list'], returns='None'),
        FieldCall(field='transfer', demands=['StructuredSerializeOptions'], returns='list'),
        FieldCall(field='transfer', demands=['StructuredSerializeOptions', 'list'], returns='None'),
        FieldCall(field='transfer', demands=['VideoColorSpaceInit'], returns='VideoTransferCharacteristics'),
        FieldCall(field='transfer', demands=['VideoColorSpaceInit', 'VideoTransferCharacteristics'], returns='None'),
        FieldCall(field='transfer', demands=['VideoColorSpace'], returns='VideoTransferCharacteristics'),
        PrototypeCall(constructor='ArrayBuffer', fn='transfer', demands=['ArrayBuffer'], returns='ArrayBuffer'),
        PrototypeCall(constructor='ArrayBuffer', fn='transfer', demands=['ArrayBuffer', 'float'], returns='ArrayBuffer'),
    ],
    "transferControlToOffscreen": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='transferControlToOffscreen', demands=['HTMLCanvasElement'], returns='OffscreenCanvas'),
    ],
    "transferFromImageBitmap": [
        PrototypeCall(constructor='ImageBitmapRenderingContext', fn='transferFromImageBitmap', demands=['ImageBitmapRenderingContext', 'ImageBitmap'], returns='None'),
    ],
    "transferFunction": [
        FieldCall(field='transferFunction', demands=['VideoConfiguration'], returns='TransferFunction'),
        FieldCall(field='transferFunction', demands=['VideoConfiguration', 'TransferFunction'], returns='None'),
    ],
    "transferSize": [
        FieldCall(field='transferSize', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "transferToFixedLength": [
        PrototypeCall(constructor='ArrayBuffer', fn='transferToFixedLength', demands=['ArrayBuffer'], returns='ArrayBuffer'),
        PrototypeCall(constructor='ArrayBuffer', fn='transferToFixedLength', demands=['ArrayBuffer', 'float'], returns='ArrayBuffer'),
    ],
    "transferToImageBitmap": [
        PrototypeCall(constructor='OffscreenCanvas', fn='transferToImageBitmap', demands=['OffscreenCanvas'], returns='ImageBitmap'),
    ],
    "transform": [
        FieldCall(field='transform', demands=['Transformer'], returns='TransformerTransformCallback'),
        FieldCall(field='transform', demands=['Transformer', 'TransformerTransformCallback'], returns='None'),
        FieldCall(field='transform', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transform', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='transform', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='transform', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        FieldCall(field='transform', demands=['RTCRtpReceiver'], returns='RTCRtpTransform'),
        FieldCall(field='transform', demands=['RTCRtpReceiver', 'RTCRtpTransform'], returns='None'),
        FieldCall(field='transform', demands=['RTCRtpSender'], returns='RTCRtpTransform'),
        FieldCall(field='transform', demands=['RTCRtpSender', 'RTCRtpTransform'], returns='None'),
        FieldCall(field='transform', demands=['SVGClipPathElement'], returns='SVGAnimatedTransformList'),
        FieldCall(field='transform', demands=['SVGGraphicsElement'], returns='SVGAnimatedTransformList'),
    ],
    "transformBox": [
        FieldCall(field='transformBox', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transformBox', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transformFeedbackVaryings": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='transformFeedbackVaryings', demands=['WebGL2RenderingContext', 'WebGLProgram', 'list', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='transformFeedbackVaryings', demands=['WebGL2RenderingContext', 'WebGLProgram', 'Iterable', 'GLenum'], returns='None'),
    ],
    "transformOrigin": [
        FieldCall(field='transformOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transformOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transformPoint": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='transformPoint', demands=['DOMMatrixReadOnly'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMMatrix', fn='transformPoint', demands=['DOMMatrix'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='transformPoint', demands=['DOMMatrixReadOnly', 'DOMPointInit'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMMatrix', fn='transformPoint', demands=['DOMMatrix', 'DOMPointInit'], returns='DOMPoint'),
    ],
    "transformStyle": [
        FieldCall(field='transformStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transformStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transformToDocument": [
        PrototypeCall(constructor='XSLTProcessor', fn='transformToDocument', demands=['XSLTProcessor', 'Node'], returns='Document'),
    ],
    "transformToFragment": [
        PrototypeCall(constructor='XSLTProcessor', fn='transformToFragment', demands=['XSLTProcessor', 'Node', 'Document'], returns='DocumentFragment'),
    ],
    "transition": [
        FieldCall(field='transition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transitionBehavior": [
        FieldCall(field='transitionBehavior', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transitionBehavior', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transitionDelay": [
        FieldCall(field='transitionDelay', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transitionDelay', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transitionDuration": [
        FieldCall(field='transitionDuration', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transitionDuration', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transitionProperty": [
        FieldCall(field='transitionProperty', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transitionProperty', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='transitionProperty', demands=['CSSTransition'], returns='str'),
    ],
    "transitionTimingFunction": [
        FieldCall(field='transitionTimingFunction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='transitionTimingFunction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "transitioncancel": [
        FieldCall(field='transitioncancel', demands=['GlobalEventHandlersEventMap'], returns='TransitionEvent'),
        FieldCall(field='transitioncancel', demands=['GlobalEventHandlersEventMap', 'TransitionEvent'], returns='None'),
    ],
    "transitionend": [
        FieldCall(field='transitionend', demands=['GlobalEventHandlersEventMap'], returns='TransitionEvent'),
        FieldCall(field='transitionend', demands=['GlobalEventHandlersEventMap', 'TransitionEvent'], returns='None'),
    ],
    "transitionrun": [
        FieldCall(field='transitionrun', demands=['GlobalEventHandlersEventMap'], returns='TransitionEvent'),
        FieldCall(field='transitionrun', demands=['GlobalEventHandlersEventMap', 'TransitionEvent'], returns='None'),
    ],
    "transitionstart": [
        FieldCall(field='transitionstart', demands=['GlobalEventHandlersEventMap'], returns='TransitionEvent'),
        FieldCall(field='transitionstart', demands=['GlobalEventHandlersEventMap', 'TransitionEvent'], returns='None'),
    ],
    "translate": [
        FieldCall(field='translate', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='translate', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='translate', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='translate', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translate', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translate', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translate', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translate', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        FieldCall(field='translate', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='translate', demands=['HTMLElement', 'bool'], returns='None'),
    ],
    "translateSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "transport": [
        FieldCall(field='transport', demands=['RTCRtpReceiver'], returns='RTCDtlsTransport'),
        FieldCall(field='transport', demands=['RTCRtpSender'], returns='RTCDtlsTransport'),
        FieldCall(field='transport', demands=['RTCSctpTransport'], returns='RTCDtlsTransport'),
    ],
    "transportId": [
        FieldCall(field='transportId', demands=['RTCIceCandidatePairStats'], returns='str'),
        FieldCall(field='transportId', demands=['RTCIceCandidatePairStats', 'str'], returns='None'),
        FieldCall(field='transportId', demands=['RTCRtpStreamStats'], returns='str'),
        FieldCall(field='transportId', demands=['RTCRtpStreamStats', 'str'], returns='None'),
    ],
    "transports": [
        FieldCall(field='transports', demands=['PublicKeyCredentialDescriptor'], returns='list'),
        FieldCall(field='transports', demands=['PublicKeyCredentialDescriptor', 'list'], returns='None'),
        FieldCall(field='transports', demands=['PublicKeyCredentialDescriptorJSON'], returns='list'),
        FieldCall(field='transports', demands=['PublicKeyCredentialDescriptorJSON', 'list'], returns='None'),
    ],
    "trim": [
        PrototypeCall(constructor='String', fn='trim', demands=['str'], returns='str'),
    ],
    "trimEnd": [
        PrototypeCall(constructor='String', fn='trimEnd', demands=['str'], returns='str'),
    ],
    "trimLeft": [
        PrototypeCall(constructor='String', fn='trimLeft', demands=['str'], returns='str'),
    ],
    "trimRight": [
        PrototypeCall(constructor='String', fn='trimRight', demands=['str'], returns='str'),
    ],
    "trimStart": [
        PrototypeCall(constructor='String', fn='trimStart', demands=['str'], returns='str'),
    ],
    "trueSpeed": [
        FieldCall(field='trueSpeed', demands=['HTMLMarqueeElement'], returns='bool'),
        FieldCall(field='trueSpeed', demands=['HTMLMarqueeElement', 'bool'], returns='None'),
    ],
    "trunc": [
        PrototypeCall(constructor='Math', fn='trunc', demands=['Math', 'float'], returns='float'),
    ],
    "truncate": [
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='truncate', demands=['FileSystemWritableFileStream', 'float'], returns='None'),
    ],
    "try": [
        PrototypeCall(constructor='PromiseConstructor', fn='try', demands=['PromiseConstructor', '(...args:U)=>T', '*'], returns='Awaited'),
    ],
    "tspan": [
        FieldCall(field='tspan', demands=['SVGElementTagNameMap'], returns='SVGTSpanElement'),
        FieldCall(field='tspan', demands=['SVGElementTagNameMap', 'SVGTSpanElement'], returns='None'),
    ],
    "tt": [
        FieldCall(field='tt', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLElement'),
        FieldCall(field='tt', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "twist": [
        FieldCall(field='twist', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='twist', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='twist', demands=['PointerEvent'], returns='float'),
    ],
    "type": [
        FieldCall(field='type', demands=['BiquadFilterOptions'], returns='BiquadFilterType'),
        FieldCall(field='type', demands=['BiquadFilterOptions', 'BiquadFilterType'], returns='None'),
        FieldCall(field='type', demands=['BlobPropertyBag'], returns='str'),
        FieldCall(field='type', demands=['BlobPropertyBag', 'str'], returns='None'),
        FieldCall(field='type', demands=['ClientQueryOptions'], returns='ClientTypes'),
        FieldCall(field='type', demands=['ClientQueryOptions', 'ClientTypes'], returns='None'),
        FieldCall(field='type', demands=['EncodedAudioChunkInit'], returns='EncodedAudioChunkType'),
        FieldCall(field='type', demands=['EncodedAudioChunkInit', 'EncodedAudioChunkType'], returns='None'),
        FieldCall(field='type', demands=['EncodedVideoChunkInit'], returns='EncodedVideoChunkType'),
        FieldCall(field='type', demands=['EncodedVideoChunkInit', 'EncodedAudioChunkType'], returns='None'),
        FieldCall(field='type', demands=['ImageDecoderInit'], returns='str'),
        FieldCall(field='type', demands=['ImageDecoderInit', 'str'], returns='None'),
        FieldCall(field='type', demands=['ImageEncodeOptions'], returns='str'),
        FieldCall(field='type', demands=['ImageEncodeOptions', 'str'], returns='None'),
        FieldCall(field='type', demands=['MediaDecodingConfiguration'], returns='MediaDecodingType'),
        FieldCall(field='type', demands=['MediaDecodingConfiguration', 'MediaDecodingType'], returns='None'),
        FieldCall(field='type', demands=['MediaEncodingConfiguration'], returns='MediaEncodingType'),
        FieldCall(field='type', demands=['MediaEncodingConfiguration', 'MediaEncodingType'], returns='None'),
        FieldCall(field='type', demands=['MediaImage'], returns='str'),
        FieldCall(field='type', demands=['MediaImage', 'str'], returns='None'),
        FieldCall(field='type', demands=['OscillatorOptions'], returns='OscillatorType'),
        FieldCall(field='type', demands=['OscillatorOptions', 'OscillatorType'], returns='None'),
        FieldCall(field='type', demands=['PerformanceObserverInit'], returns='str'),
        FieldCall(field='type', demands=['PerformanceObserverInit', 'str'], returns='None'),
        FieldCall(field='type', demands=['PublicKeyCredentialDescriptor'], returns='PublicKeyCredentialType'),
        FieldCall(field='type', demands=['PublicKeyCredentialDescriptor', 'PublicKeyCredentialType'], returns='None'),
        FieldCall(field='type', demands=['PublicKeyCredentialDescriptorJSON'], returns='str'),
        FieldCall(field='type', demands=['PublicKeyCredentialDescriptorJSON', 'str'], returns='None'),
        FieldCall(field='type', demands=['PublicKeyCredentialParameters'], returns='PublicKeyCredentialType'),
        FieldCall(field='type', demands=['PublicKeyCredentialParameters', 'PublicKeyCredentialType'], returns='None'),
        FieldCall(field='type', demands=['RTCLocalSessionDescriptionInit'], returns='RTCSdpType'),
        FieldCall(field='type', demands=['RTCLocalSessionDescriptionInit', 'RTCSdpType'], returns='None'),
        FieldCall(field='type', demands=['RTCSessionDescriptionInit'], returns='RTCSdpType'),
        FieldCall(field='type', demands=['RTCSessionDescriptionInit', 'RTCSdpType'], returns='None'),
        FieldCall(field='type', demands=['RTCStats'], returns='RTCStatsType'),
        FieldCall(field='type', demands=['RTCStats', 'RTCStatsType'], returns='None'),
        FieldCall(field='type', demands=['RegistrationOptions'], returns='WorkerType'),
        FieldCall(field='type', demands=['RegistrationOptions', 'WorkerType'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingByteSource'], returns='"bytes"'),
        FieldCall(field='type', demands=['UnderlyingByteSource', '"bytes"'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingDefaultSource'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingDefaultSource', 'None'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingSink'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingSink', 'None'], returns='None'),
        FieldCall(field='type', demands=['UnderlyingSource'], returns='ReadableStreamType'),
        FieldCall(field='type', demands=['UnderlyingSource', 'ReadableStreamType'], returns='None'),
        FieldCall(field='type', demands=['WorkerOptions'], returns='WorkerType'),
        FieldCall(field='type', demands=['WorkerOptions', 'WorkerType'], returns='None'),
        FieldCall(field='type', demands=['WriteParams'], returns='WriteCommandType'),
        FieldCall(field='type', demands=['WriteParams', 'WriteCommandType'], returns='None'),
        FieldCall(field='type', demands=['BiquadFilterNode'], returns='BiquadFilterType'),
        FieldCall(field='type', demands=['BiquadFilterNode', 'BiquadFilterType'], returns='None'),
        FieldCall(field='type', demands=['Blob'], returns='str'),
        PrototypeCall(constructor='CSSNumericValue', fn='type', demands=['CSSNumericValue'], returns='CSSNumericType'),
        PrototypeCall(constructor='CSSUnitValue', fn='type', demands=['CSSUnitValue'], returns='CSSNumericType'),
        PrototypeCall(constructor='CSSMathValue', fn='type', demands=['CSSMathValue'], returns='CSSNumericType'),
        FieldCall(field='type', demands=['CSSRule'], returns='float'),
        FieldCall(field='type', demands=['Credential'], returns='str'),
        FieldCall(field='type', demands=['CryptoKey'], returns='KeyType'),
        FieldCall(field='type', demands=['DataTransferItem'], returns='str'),
        FieldCall(field='type', demands=['EncodedAudioChunk'], returns='EncodedAudioChunkType'),
        FieldCall(field='type', demands=['EncodedVideoChunk'], returns='EncodedVideoChunkType'),
        FieldCall(field='type', demands=['Event'], returns='str'),
        FieldCall(field='type', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLAnchorElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLButtonElement'], returns='"submit"'),
        FieldCall(field='type', demands=['HTMLButtonElement', '"submit"'], returns='None'),
        FieldCall(field='type', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLLIElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLLIElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLLinkElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLOListElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLOListElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLParamElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLScriptElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLSelectElement'], returns='"select-one"'),
        FieldCall(field='type', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLSourceElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLStyleElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLStyleElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLUListElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLUListElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['Highlight'], returns='HighlightType'),
        FieldCall(field='type', demands=['Highlight', 'HighlightType'], returns='None'),
        FieldCall(field='type', demands=['ImageDecoder'], returns='str'),
        FieldCall(field='type', demands=['MIDIPort'], returns='MIDIPortType'),
        FieldCall(field='type', demands=['MimeType'], returns='str'),
        FieldCall(field='type', demands=['MutationRecord'], returns='MutationRecordType'),
        FieldCall(field='type', demands=['OscillatorNode'], returns='OscillatorType'),
        FieldCall(field='type', demands=['OscillatorNode', 'OscillatorType'], returns='None'),
        FieldCall(field='type', demands=['PerformanceNavigation'], returns='float'),
        FieldCall(field='type', demands=['PerformanceNavigationTiming'], returns='NavigationTimingType'),
        FieldCall(field='type', demands=['RTCEncodedVideoFrame'], returns='RTCEncodedVideoFrameType'),
        FieldCall(field='type', demands=['RTCIceCandidate'], returns='RTCIceCandidateType'),
        FieldCall(field='type', demands=['RTCSessionDescription'], returns='RTCSdpType'),
        FieldCall(field='type', demands=['Report'], returns='str'),
        FieldCall(field='type', demands=['Response'], returns='ResponseType'),
        FieldCall(field='type', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['SVGScriptElement'], returns='str'),
        FieldCall(field='type', demands=['SVGScriptElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='type', demands=['SVGStyleElement', 'str'], returns='None'),
        FieldCall(field='type', demands=['SVGTransform'], returns='float'),
        FieldCall(field='type', demands=['ScreenOrientation'], returns='OrientationType'),
        FieldCall(field='type', demands=['Selection'], returns='str'),
        FieldCall(field='type', demands=['StyleMedia'], returns='str'),
        FieldCall(field='type', demands=['StyleMedia', 'str'], returns='None'),
        FieldCall(field='type', demands=['StyleSheet'], returns='str'),
        FieldCall(field='type', demands=['WakeLockSentinel'], returns='WakeLockType'),
        FieldCall(field='type', demands=['WebGLActiveInfo'], returns='GLenum'),
        FieldCall(field='type', demands=['WorkerOptions'], returns='"classic"'),
        FieldCall(field='type', demands=['WorkerOptions', '"classic"'], returns='None'),
        FieldCall(field='type', demands=['GPUSamplerBindingLayout'], returns='GPUSamplerBindingType'),
        FieldCall(field='type', demands=['GPUSamplerBindingLayout', 'GPUSamplerBindingType'], returns='None'),
        FieldCall(field='type', demands=['GPUCompilationMessage'], returns='GPUCompilationMessageType'),
    ],
    "typeMismatch": [
        FieldCall(field='typeMismatch', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='typeMismatch', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='typeMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "types": [
        FieldCall(field='types', demands=['ReportingObserverOptions'], returns='list'),
        FieldCall(field='types', demands=['ReportingObserverOptions', 'list'], returns='None'),
        FieldCall(field='types', demands=['StartViewTransitionOptions'], returns='string[]'),
        FieldCall(field='types', demands=['StartViewTransitionOptions', 'list'], returns='None'),
        FieldCall(field='types', demands=['CSSViewTransitionRule'], returns='ReadonlyArray'),
        FieldCall(field='types', demands=['ClipboardItem'], returns='ReadonlyArray'),
        FieldCall(field='types', demands=['DataTransfer'], returns='ReadonlyArray'),
        FieldCall(field='types', demands=['ViewTransition'], returns='ViewTransitionTypeSet'),
        FieldCall(field='types', demands=['ViewTransition', 'ViewTransitionTypeSet'], returns='None'),
    ],
    "u": [
        FieldCall(field='u', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='u', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "ubound": [
        PrototypeCall(constructor='VBArray', fn='ubound', demands=['VBArray'], returns='float'),
        PrototypeCall(constructor='VBArray', fn='ubound', demands=['VBArray', 'float'], returns='float'),
    ],
    "ul": [
        FieldCall(field='ul', demands=['HTMLElementTagNameMap'], returns='HTMLUListElement'),
        FieldCall(field='ul', demands=['HTMLElementTagNameMap', 'HTMLUListElement'], returns='None'),
    ],
    "unadjustedMovement": [
        FieldCall(field='unadjustedMovement', demands=['PointerLockOptions'], returns='bool'),
        FieldCall(field='unadjustedMovement', demands=['PointerLockOptions', 'bool'], returns='None'),
    ],
    "unconfigure": [
        PrototypeCall(constructor='GPUCanvasContext', fn='unconfigure', demands=['GPUCanvasContext'], returns='None'),
    ],
    "unhandledrejection": [
        FieldCall(field='unhandledrejection', demands=['WindowEventHandlersEventMap'], returns='PromiseRejectionEvent'),
        FieldCall(field='unhandledrejection', demands=['WindowEventHandlersEventMap', 'PromiseRejectionEvent'], returns='None'),
        FieldCall(field='unhandledrejection', demands=['WindowEventMap'], returns='PromiseRejectionEvent'),
        FieldCall(field='unhandledrejection', demands=['WindowEventMap', 'PromiseRejectionEvent'], returns='None'),
    ],
    "unicode": [
        FieldCall(field='unicode', demands=['regex'], returns='bool'),
    ],
    "unicodeBidi": [
        FieldCall(field='unicodeBidi', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='unicodeBidi', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "unicodeRange": [
        FieldCall(field='unicodeRange', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='unicodeRange', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='unicodeRange', demands=['FontFace'], returns='str'),
        FieldCall(field='unicodeRange', demands=['FontFace', 'str'], returns='None'),
    ],
    "unicodeSets": [
        FieldCall(field='unicodeSets', demands=['regex'], returns='bool'),
    ],
    "uniform1f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat'], returns='None'),
    ],
    "uniform1fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform1i": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint'], returns='None'),
    ],
    "uniform1iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform1ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint'], returns='None'),
    ],
    "uniform1uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniform2f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform2i": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint'], returns='None'),
    ],
    "uniform2iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform2ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform2uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniform3f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform3i": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "uniform3iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform3ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform3uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniform4f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform4i": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "uniform4iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
    ],
    "uniform4ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform4uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformBlockBinding": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformBlockBinding', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniformMatrix2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
    ],
    "uniformMatrix2x3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformMatrix2x4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformMatrix3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
    ],
    "uniformMatrix3x2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformMatrix3x4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformMatrix4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
    ],
    "uniformMatrix4x2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "uniformMatrix4x3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'float', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Iterable', 'float', 'GLuint'], returns='None'),
    ],
    "union": [
        PrototypeCall(constructor='Highlight', fn='union', demands=['Highlight', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='union', demands=['ViewTransitionTypeSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='FontFaceSet', fn='union', demands=['FontFaceSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='CustomStateSet', fn='union', demands=['CustomStateSet', 'ReadonlySetLike'], returns='Set<T'),
        PrototypeCall(constructor='ReadonlySet', fn='union', demands=['ReadonlySet', 'ReadonlySetLike'], returns='Set<T'),
    ],
    "unique": [
        FieldCall(field='unique', demands=['IDBIndexParameters'], returns='bool'),
        FieldCall(field='unique', demands=['IDBIndexParameters', 'bool'], returns='None'),
        FieldCall(field='unique', demands=['IDBIndex'], returns='bool'),
    ],
    "unit": [
        FieldCall(field='unit', demands=['CSSUnitValue'], returns='str'),
        FieldCall(field='unit', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='unit', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "unitDisplay": [
        FieldCall(field='unitDisplay', demands=['BigIntToLocaleStringOptions'], returns='str'),
        FieldCall(field='unitDisplay', demands=['BigIntToLocaleStringOptions', 'str'], returns='None'),
    ],
    "unitType": [
        FieldCall(field='unitType', demands=['SVGAngle'], returns='float'),
        FieldCall(field='unitType', demands=['SVGLength'], returns='float'),
    ],
    "unload": [
        FieldCall(field='unload', demands=['WindowEventHandlersEventMap'], returns='Event'),
        FieldCall(field='unload', demands=['WindowEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "unloadEventEnd": [
        FieldCall(field='unloadEventEnd', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='unloadEventEnd', demands=['PerformanceTiming'], returns='float'),
    ],
    "unloadEventStart": [
        FieldCall(field='unloadEventStart', demands=['PerformanceNavigationTiming'], returns='DOMHighResTimeStamp'),
        FieldCall(field='unloadEventStart', demands=['PerformanceTiming'], returns='float'),
    ],
    "unlock": [
        PrototypeCall(constructor='ScreenOrientation', fn='unlock', demands=['ScreenOrientation'], returns='None'),
    ],
    "unmute": [
        FieldCall(field='unmute', demands=['MediaStreamTrackEventMap'], returns='Event'),
        FieldCall(field='unmute', demands=['MediaStreamTrackEventMap', 'Event'], returns='None'),
    ],
    "unobserve": [
        PrototypeCall(constructor='IntersectionObserver', fn='unobserve', demands=['IntersectionObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='unobserve', demands=['ResizeObserver', 'Element'], returns='None'),
    ],
    "unpackColorSpace": [
        FieldCall(field='unpackColorSpace', demands=['WebGLRenderingContextBase'], returns='PredefinedColorSpace'),
        FieldCall(field='unpackColorSpace', demands=['WebGLRenderingContextBase', 'PredefinedColorSpace'], returns='None'),
    ],
    "unpauseAnimations": [
        PrototypeCall(constructor='SVGSVGElement', fn='unpauseAnimations', demands=['SVGSVGElement'], returns='None'),
    ],
    "unregister": [
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='unregister', demands=['ServiceWorkerRegistration'], returns='bool'),
        PrototypeCall(constructor='FinalizationRegistry', fn='unregister', demands=['FinalizationRegistry', 'WeakKey'], returns='bool'),
    ],
    "unscopables": [
        FieldCall(field='unscopables', demands=['SymbolConstructor'], returns='uniquesymbol'),
    ],
    "unshift": [
        PrototypeCall(constructor='Array', fn='unshift', demands=['list', '*'], returns='float'),
    ],
    "unsubscribe": [
        PrototypeCall(constructor='CookieStoreManager', fn='unsubscribe', demands=['CookieStoreManager', 'list'], returns='None'),
        PrototypeCall(constructor='PushSubscription', fn='unsubscribe', demands=['PushSubscription'], returns='bool'),
        PrototypeCall(constructor='CookieStoreManager', fn='unsubscribe', demands=['CookieStoreManager', 'Iterable'], returns='None'),
    ],
    "unsuspendRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='unsuspendRedraw', demands=['SVGSVGElement', 'float'], returns='None'),
    ],
    "unsuspendRedrawAll": [
        PrototypeCall(constructor='SVGSVGElement', fn='unsuspendRedrawAll', demands=['SVGSVGElement'], returns='None'),
    ],
    "unwrapKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='unwrapKey', demands=['SubtleCrypto', 'KeyFormat', 'AllowSharedBufferSource', 'CryptoKey', 'AlgorithmIdentifier', 'AlgorithmIdentifier', 'bool', 'list'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='unwrapKey', demands=['SubtleCrypto', 'KeyFormat', 'AllowSharedBufferSource', 'CryptoKey', 'AlgorithmIdentifier', 'AlgorithmIdentifier', 'bool', 'Iterable'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='unwrapKey', demands=['SubtleCrypto', 'KeyFormat', 'AllowSharedBufferSource', 'CryptoKey', '', '', 'bool', 'list'], returns='CryptoKey'),
    ],
    "upX": [
        FieldCall(field='upX', demands=['AudioListener'], returns='AudioParam'),
    ],
    "upY": [
        FieldCall(field='upY', demands=['AudioListener'], returns='AudioParam'),
    ],
    "upZ": [
        FieldCall(field='upZ', demands=['AudioListener'], returns='AudioParam'),
    ],
    "update": [
        FieldCall(field='update', demands=['StartViewTransitionOptions'], returns='ViewTransitionUpdateCallback'),
        FieldCall(field='update', demands=['StartViewTransitionOptions', 'ViewTransitionUpdateCallback'], returns='None'),
        PrototypeCall(constructor='IDBCursor', fn='update', demands=['IDBCursor', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBCursorWithValue', fn='update', demands=['IDBCursorWithValue', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='MediaKeySession', fn='update', demands=['MediaKeySession', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='update', demands=['ServiceWorkerRegistration'], returns='ServiceWorkerRegistration'),
        FieldCall(field='update', demands=['SourceBufferEventMap'], returns='Event'),
        FieldCall(field='update', demands=['SourceBufferEventMap', 'Event'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='update', demands=['ServiceWorkerRegistration'], returns='None'),
    ],
    "updateCallbackDone": [
        FieldCall(field='updateCallbackDone', demands=['ViewTransition'], returns='None'),
    ],
    "updatePlaybackRate": [
        PrototypeCall(constructor='Animation', fn='updatePlaybackRate', demands=['Animation', 'float'], returns='None'),
        PrototypeCall(constructor='CSSAnimation', fn='updatePlaybackRate', demands=['CSSAnimation', 'float'], returns='None'),
        PrototypeCall(constructor='CSSTransition', fn='updatePlaybackRate', demands=['CSSTransition', 'float'], returns='None'),
    ],
    "updateTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='updateTiming', demands=['AnimationEffect'], returns='None'),
        PrototypeCall(constructor='KeyframeEffect', fn='updateTiming', demands=['KeyframeEffect'], returns='None'),
        PrototypeCall(constructor='AnimationEffect', fn='updateTiming', demands=['AnimationEffect', 'OptionalEffectTiming'], returns='None'),
        PrototypeCall(constructor='KeyframeEffect', fn='updateTiming', demands=['KeyframeEffect', 'OptionalEffectTiming'], returns='None'),
    ],
    "updateViaCache": [
        FieldCall(field='updateViaCache', demands=['RegistrationOptions'], returns='ServiceWorkerUpdateViaCache'),
        FieldCall(field='updateViaCache', demands=['RegistrationOptions', 'ServiceWorkerUpdateViaCache'], returns='None'),
        FieldCall(field='updateViaCache', demands=['ServiceWorkerRegistration'], returns='ServiceWorkerUpdateViaCache'),
    ],
    "updateWith": [
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='updateWith', demands=['PaymentRequestUpdateEvent', 'PaymentDetailsUpdate'], returns='None'),
        PrototypeCall(constructor='PaymentMethodChangeEvent', fn='updateWith', demands=['PaymentMethodChangeEvent', 'PaymentDetailsUpdate'], returns='None'),
    ],
    "updateend": [
        FieldCall(field='updateend', demands=['SourceBufferEventMap'], returns='Event'),
        FieldCall(field='updateend', demands=['SourceBufferEventMap', 'Event'], returns='None'),
    ],
    "updatefound": [
        FieldCall(field='updatefound', demands=['ServiceWorkerRegistrationEventMap'], returns='Event'),
        FieldCall(field='updatefound', demands=['ServiceWorkerRegistrationEventMap', 'Event'], returns='None'),
    ],
    "updatestart": [
        FieldCall(field='updatestart', demands=['SourceBufferEventMap'], returns='Event'),
        FieldCall(field='updatestart', demands=['SourceBufferEventMap', 'Event'], returns='None'),
    ],
    "updating": [
        FieldCall(field='updating', demands=['SourceBuffer'], returns='bool'),
    ],
    "upgrade": [
        PrototypeCall(constructor='CustomElementRegistry', fn='upgrade', demands=['CustomElementRegistry', 'Node'], returns='None'),
    ],
    "upgradeneeded": [
        FieldCall(field='upgradeneeded', demands=['IDBOpenDBRequestEventMap'], returns='IDBVersionChangeEvent'),
        FieldCall(field='upgradeneeded', demands=['IDBOpenDBRequestEventMap', 'IDBVersionChangeEvent'], returns='None'),
    ],
    "upload": [
        FieldCall(field='upload', demands=['XMLHttpRequest'], returns='XMLHttpRequestUpload'),
    ],
    "upper": [
        FieldCall(field='upper', demands=['CSSMathClamp'], returns='CSSNumericValue'),
        FieldCall(field='upper', demands=['IDBKeyRange'], returns='*'),
    ],
    "upperOpen": [
        FieldCall(field='upperOpen', demands=['IDBKeyRange'], returns='bool'),
    ],
    "uri": [
        FieldCall(field='uri', demands=['RTCRtpHeaderExtensionCapability'], returns='str'),
        FieldCall(field='uri', demands=['RTCRtpHeaderExtensionCapability', 'str'], returns='None'),
        FieldCall(field='uri', demands=['RTCRtpHeaderExtensionParameters'], returns='str'),
        FieldCall(field='uri', demands=['RTCRtpHeaderExtensionParameters', 'str'], returns='None'),
    ],
    "url": [
        FieldCall(field='url', demands=['CookieStoreGetOptions'], returns='str'),
        FieldCall(field='url', demands=['CookieStoreGetOptions', 'str'], returns='None'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceErrorEventInit'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceErrorEventInit', 'str'], returns='None'),
        FieldCall(field='url', demands=['ShareData'], returns='str'),
        FieldCall(field='url', demands=['ShareData', 'str'], returns='None'),
        FieldCall(field='url', demands=['StorageEventInit'], returns='str'),
        FieldCall(field='url', demands=['StorageEventInit', 'str'], returns='None'),
        FieldCall(field='url', demands=['EventSource'], returns='str'),
        FieldCall(field='url', demands=['ImportMeta'], returns='str'),
        FieldCall(field='url', demands=['ImportMeta', 'str'], returns='None'),
        FieldCall(field='url', demands=['LargestContentfulPaint'], returns='str'),
        FieldCall(field='url', demands=['NavigationHistoryEntry'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
        FieldCall(field='url', demands=['Report'], returns='str'),
        FieldCall(field='url', demands=['Request'], returns='str'),
        FieldCall(field='url', demands=['Response'], returns='str'),
        FieldCall(field='url', demands=['StorageEvent'], returns='str'),
        FieldCall(field='url', demands=['WebSocket'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceEventInit'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceEventInit', 'str'], returns='None'),
    ],
    "urls": [
        FieldCall(field='urls', demands=['RTCIceServer'], returns='str'),
        FieldCall(field='urls', demands=['RTCIceServer', 'str'], returns='None'),
    ],
    "usage": [
        FieldCall(field='usage', demands=['StorageEstimate'], returns='float'),
        FieldCall(field='usage', demands=['StorageEstimate', 'float'], returns='None'),
        FieldCall(field='usage', demands=['GPUBufferDescriptor'], returns='GPUBufferUsageFlags'),
        FieldCall(field='usage', demands=['GPUBufferDescriptor', 'GPUBufferUsageFlags'], returns='None'),
        FieldCall(field='usage', demands=['GPUCanvasConfiguration'], returns='GPUTextureUsageFlags'),
        FieldCall(field='usage', demands=['GPUCanvasConfiguration', 'GPUTextureUsageFlags'], returns='None'),
    ],
    "usages": [
        FieldCall(field='usages', demands=['CryptoKey'], returns='list'),
    ],
    "use": [
        FieldCall(field='use', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='use', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='use', demands=['SVGElementTagNameMap'], returns='SVGUseElement'),
        FieldCall(field='use', demands=['SVGElementTagNameMap', 'SVGUseElement'], returns='None'),
        PrototypeCall(constructor='DisposableStack', fn='use', demands=['DisposableStack', 'T'], returns='T'),
        PrototypeCall(constructor='AsyncDisposableStack', fn='use', demands=['AsyncDisposableStack', 'T'], returns='T'),
    ],
    "useGrouping": [
        FieldCall(field='useGrouping', demands=['BigIntToLocaleStringOptions'], returns='bool'),
        FieldCall(field='useGrouping', demands=['BigIntToLocaleStringOptions', 'bool'], returns='None'),
    ],
    "useMap": [
        FieldCall(field='useMap', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='useMap', demands=['HTMLImageElement', 'str'], returns='None'),
        FieldCall(field='useMap', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='useMap', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='useMap', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='useMap', demands=['HTMLObjectElement', 'str'], returns='None'),
    ],
    "useProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='useProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='useProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "usedtx": [
        FieldCall(field='usedtx', demands=['OpusEncoderConfig'], returns='bool'),
        FieldCall(field='usedtx', demands=['OpusEncoderConfig', 'bool'], returns='None'),
    ],
    "useinbandfec": [
        FieldCall(field='useinbandfec', demands=['OpusEncoderConfig'], returns='bool'),
        FieldCall(field='useinbandfec', demands=['OpusEncoderConfig', 'bool'], returns='None'),
    ],
    "user": [
        FieldCall(field='user', demands=['PublicKeyCredentialCreationOptions'], returns='PublicKeyCredentialUserEntity'),
        FieldCall(field='user', demands=['PublicKeyCredentialCreationOptions', 'PublicKeyCredentialUserEntity'], returns='None'),
        FieldCall(field='user', demands=['PublicKeyCredentialCreationOptionsJSON'], returns='PublicKeyCredentialUserEntityJSON'),
        FieldCall(field='user', demands=['PublicKeyCredentialCreationOptionsJSON', 'PublicKeyCredentialUserEntityJSON'], returns='None'),
    ],
    "userActivation": [
        FieldCall(field='userActivation', demands=['Navigator'], returns='UserActivation'),
    ],
    "userAgent": [
        FieldCall(field='userAgent', demands=['NavigatorID'], returns='str'),
        FieldCall(field='userAgent', demands=['Navigator'], returns='str'),
    ],
    "userHandle": [
        FieldCall(field='userHandle', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "userSelect": [
        FieldCall(field='userSelect', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='userSelect', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "userVerification": [
        FieldCall(field='userVerification', demands=['AuthenticatorSelectionCriteria'], returns='UserVerificationRequirement'),
        FieldCall(field='userVerification', demands=['AuthenticatorSelectionCriteria', 'ResidentKeyRequirement'], returns='None'),
        FieldCall(field='userVerification', demands=['PublicKeyCredentialRequestOptions'], returns='UserVerificationRequirement'),
        FieldCall(field='userVerification', demands=['PublicKeyCredentialRequestOptions', 'ResidentKeyRequirement'], returns='None'),
        FieldCall(field='userVerification', demands=['PublicKeyCredentialRequestOptionsJSON'], returns='str'),
        FieldCall(field='userVerification', demands=['PublicKeyCredentialRequestOptionsJSON', 'str'], returns='None'),
    ],
    "userVisibleOnly": [
        FieldCall(field='userVisibleOnly', demands=['PushSubscriptionOptionsInit'], returns='bool'),
        FieldCall(field='userVisibleOnly', demands=['PushSubscriptionOptionsInit', 'bool'], returns='None'),
        FieldCall(field='userVisibleOnly', demands=['PushSubscriptionOptions'], returns='bool'),
    ],
    "username": [
        FieldCall(field='username', demands=['RTCIceServer'], returns='str'),
        FieldCall(field='username', demands=['RTCIceServer', 'str'], returns='None'),
        FieldCall(field='username', demands=['HTMLHyperlinkElementUtils'], returns='str'),
        FieldCall(field='username', demands=['HTMLHyperlinkElementUtils', 'str'], returns='None'),
        FieldCall(field='username', demands=['URL'], returns='str'),
        FieldCall(field='username', demands=['URL', 'str'], returns='None'),
        FieldCall(field='username', demands=['URLPatternInit'], returns='str'),
        FieldCall(field='username', demands=['URLPatternInit', 'str'], returns='None'),
        FieldCall(field='username', demands=['URLPatternResult'], returns='URLPatternComponentResult'),
        FieldCall(field='username', demands=['URLPatternResult', 'URLPatternComponentResult'], returns='None'),
        FieldCall(field='username', demands=['URLPattern'], returns='str'),
    ],
    "usernameFragment": [
        FieldCall(field='usernameFragment', demands=['RTCIceCandidateInit'], returns='str'),
        FieldCall(field='usernameFragment', demands=['RTCIceCandidateInit', 'str'], returns='None'),
        FieldCall(field='usernameFragment', demands=['RTCIceCandidate'], returns='str'),
    ],
    "utterance": [
        FieldCall(field='utterance', demands=['SpeechSynthesisEventInit'], returns='SpeechSynthesisUtterance'),
        FieldCall(field='utterance', demands=['SpeechSynthesisEventInit', 'SpeechSynthesisUtterance'], returns='None'),
        FieldCall(field='utterance', demands=['SpeechSynthesisEvent'], returns='SpeechSynthesisUtterance'),
    ],
    "vAlign": [
        FieldCall(field='vAlign', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='vAlign', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='vAlign', demands=['HTMLTableColElement'], returns='str'),
        FieldCall(field='vAlign', demands=['HTMLTableColElement', 'str'], returns='None'),
        FieldCall(field='vAlign', demands=['HTMLTableRowElement'], returns='str'),
        FieldCall(field='vAlign', demands=['HTMLTableRowElement', 'str'], returns='None'),
        FieldCall(field='vAlign', demands=['HTMLTableSectionElement'], returns='str'),
        FieldCall(field='vAlign', demands=['HTMLTableSectionElement', 'str'], returns='None'),
    ],
    "vLink": [
        FieldCall(field='vLink', demands=['HTMLBodyElement'], returns='str'),
        FieldCall(field='vLink', demands=['HTMLBodyElement', 'str'], returns='None'),
    ],
    "valid": [
        FieldCall(field='valid', demands=['ValidityState'], returns='bool'),
    ],
    "validateProgram": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='validateProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='validateProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "validationMessage": [
        FieldCall(field='validationMessage', demands=['ElementInternals'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLTextAreaElement'], returns='str'),
    ],
    "validity": [
        FieldCall(field='validity', demands=['ElementInternals'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLButtonElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLFieldSetElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLInputElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLObjectElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLOutputElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLSelectElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLTextAreaElement'], returns='ValidityState'),
    ],
    "value": [
        FieldCall(field='value', demands=['CookieInit'], returns='str'),
        FieldCall(field='value', demands=['CookieInit', 'str'], returns='None'),
        FieldCall(field='value', demands=['CookieListItem'], returns='str'),
        FieldCall(field='value', demands=['CookieListItem', 'str'], returns='None'),
        FieldCall(field='value', demands=['PaymentCurrencyAmount'], returns='str'),
        FieldCall(field='value', demands=['PaymentCurrencyAmount', 'str'], returns='None'),
        FieldCall(field='value', demands=['RTCDtlsFingerprint'], returns='str'),
        FieldCall(field='value', demands=['RTCDtlsFingerprint', 'str'], returns='None'),
        FieldCall(field='value', demands=['ReadableStreamReadDoneResult'], returns='T'),
        FieldCall(field='value', demands=['ReadableStreamReadDoneResult', 'T'], returns='None'),
        FieldCall(field='value', demands=['ReadableStreamReadValueResult'], returns='T'),
        FieldCall(field='value', demands=['ReadableStreamReadValueResult', 'T'], returns='None'),
        FieldCall(field='value', demands=['WebTransportHash'], returns='BufferSource'),
        FieldCall(field='value', demands=['WebTransportHash', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='value', demands=['Attr'], returns='str'),
        FieldCall(field='value', demands=['Attr', 'str'], returns='None'),
        FieldCall(field='value', demands=['AudioParam'], returns='float'),
        FieldCall(field='value', demands=['AudioParam', 'float'], returns='None'),
        FieldCall(field='value', demands=['CSSKeywordValue'], returns='str'),
        FieldCall(field='value', demands=['CSSKeywordValue', 'str'], returns='None'),
        FieldCall(field='value', demands=['CSSMathClamp'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['CSSMathInvert'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['CSSMathNegate'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['CSSUnitValue'], returns='float'),
        FieldCall(field='value', demands=['CSSUnitValue', 'float'], returns='None'),
        FieldCall(field='value', demands=['DOMTokenList'], returns='str'),
        FieldCall(field='value', demands=['DOMTokenList', 'str'], returns='None'),
        FieldCall(field='value', demands=['GamepadButton'], returns='float'),
        FieldCall(field='value', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLButtonElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLDataElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLDataElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLInputElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLLIElement'], returns='float'),
        FieldCall(field='value', demands=['HTMLLIElement', 'float'], returns='None'),
        FieldCall(field='value', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='value', demands=['HTMLMeterElement', 'float'], returns='None'),
        FieldCall(field='value', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLOptionElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLOutputElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLParamElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='value', demands=['HTMLProgressElement', 'float'], returns='None'),
        FieldCall(field='value', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLSelectElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLTextAreaElement', 'str'], returns='None'),
        FieldCall(field='value', demands=['IDBCursorWithValue'], returns='*'),
        FieldCall(field='value', demands=['RadioNodeList'], returns='str'),
        FieldCall(field='value', demands=['RadioNodeList', 'str'], returns='None'),
        FieldCall(field='value', demands=['SVGAngle'], returns='float'),
        FieldCall(field='value', demands=['SVGAngle', 'float'], returns='None'),
        FieldCall(field='value', demands=['SVGLength'], returns='float'),
        FieldCall(field='value', demands=['SVGLength', 'float'], returns='None'),
        FieldCall(field='value', demands=['SVGNumber'], returns='float'),
        FieldCall(field='value', demands=['SVGNumber', 'float'], returns='None'),
        FieldCall(field='value', demands=['PromiseFulfilledResult'], returns='T'),
        FieldCall(field='value', demands=['PromiseFulfilledResult', 'T'], returns='None'),
        FieldCall(field='value', demands=['IteratorYieldResult'], returns='TYield'),
        FieldCall(field='value', demands=['IteratorYieldResult', 'TYield'], returns='None'),
        FieldCall(field='value', demands=['IteratorReturnResult'], returns='TReturn'),
        FieldCall(field='value', demands=['IteratorReturnResult', 'TReturn'], returns='None'),
        FieldCall(field='value', demands=['PropertyDescriptor'], returns='*'),
        FieldCall(field='value', demands=['PropertyDescriptor', '*'], returns='None'),
        FieldCall(field='value', demands=['TypedPropertyDescriptor'], returns='T'),
        FieldCall(field='value', demands=['TypedPropertyDescriptor', 'T'], returns='None'),
    ],
    "valueAsDate": [
        FieldCall(field='valueAsDate', demands=['HTMLInputElement'], returns='Date'),
        FieldCall(field='valueAsDate', demands=['HTMLInputElement', 'Date'], returns='None'),
    ],
    "valueAsNumber": [
        FieldCall(field='valueAsNumber', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='valueAsNumber', demands=['HTMLInputElement', 'float'], returns='None'),
    ],
    "valueAsString": [
        FieldCall(field='valueAsString', demands=['SVGAngle'], returns='str'),
        FieldCall(field='valueAsString', demands=['SVGAngle', 'str'], returns='None'),
        FieldCall(field='valueAsString', demands=['SVGLength'], returns='str'),
        FieldCall(field='valueAsString', demands=['SVGLength', 'str'], returns='None'),
    ],
    "valueInSpecifiedUnits": [
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGAngle'], returns='float'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGAngle', 'float'], returns='None'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGLength'], returns='float'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGLength', 'float'], returns='None'),
    ],
    "valueMissing": [
        FieldCall(field='valueMissing', demands=['ValidityStateFlags'], returns='bool'),
        FieldCall(field='valueMissing', demands=['ValidityStateFlags', 'bool'], returns='None'),
        FieldCall(field='valueMissing', demands=['ValidityState'], returns='bool'),
    ],
    "valueOf": [
        PrototypeCall(constructor='BigInt', fn='valueOf', demands=['BigInt'], returns='bigint'),
        PrototypeCall(constructor='BigInt64Array', fn='valueOf', demands=['BigInt64Array'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='valueOf', demands=['BigUint64Array'], returns='BigUint64Array'),
        PrototypeCall(constructor='Symbol', fn='valueOf', demands=['Symbol'], returns='symbol'),
        PrototypeCall(constructor='Object', fn='valueOf', demands=['Object'], returns='Object'),
        PrototypeCall(constructor='String', fn='valueOf', demands=['str'], returns='str'),
        PrototypeCall(constructor='Boolean', fn='valueOf', demands=['bool'], returns='bool'),
        PrototypeCall(constructor='Number', fn='valueOf', demands=['float'], returns='float'),
        PrototypeCall(constructor='Date', fn='valueOf', demands=['Date'], returns='float'),
        PrototypeCall(constructor='Int8Array', fn='valueOf', demands=['Int8Array'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='valueOf', demands=['Uint8Array'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='valueOf', demands=['Uint8ClampedArray'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='valueOf', demands=['Int16Array'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='valueOf', demands=['Uint16Array'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='valueOf', demands=['Int32Array'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='valueOf', demands=['Uint32Array'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='valueOf', demands=['Float32Array'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='valueOf', demands=['Float64Array'], returns='Float64Array'),
        PrototypeCall(constructor='Float16Array', fn='valueOf', demands=['Float16Array'], returns='Float16Array'),
    ],
    "valueType": [
        FieldCall(field='valueType', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='valueType', demands=['HTMLParamElement', 'str'], returns='None'),
    ],
    "values": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='values', demands=['FileSystemDirectoryHandle'], returns='FileSystemDirectoryHandleAsyncIterator'),
        PrototypeCall(constructor='ReadableStream', fn='values', demands=['ReadableStream'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='values', demands=['WebTransportReceiveStream'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='ReadableStream', fn='values', demands=['ReadableStream', 'ReadableStreamIteratorOptions'], returns='ReadableStreamAsyncIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='values', demands=['WebTransportReceiveStream', 'ReadableStreamIteratorOptions'], returns='ReadableStreamAsyncIterator'),
        FieldCall(field='values', demands=['CSSMathMax'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathMin'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathProduct'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathSum'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedNumberList'),
        PrototypeCall(constructor='CSSNumericArray', fn='values', demands=['CSSNumericArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSTransformValue', fn='values', demands=['CSSTransformValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='values', demands=['CSSUnparsedValue'], returns='ArrayIterator'),
        PrototypeCall(constructor='DOMTokenList', fn='values', demands=['DOMTokenList'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='values', demands=['FormData'], returns='FormDataIterator'),
        PrototypeCall(constructor='Headers', fn='values', demands=['Headers'], returns='HeadersIterator'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='values', demands=['MediaKeyStatusMap'], returns='MediaKeyStatusMapIterator'),
        PrototypeCall(constructor='NodeList', fn='values', demands=['NodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='RadioNodeList', fn='values', demands=['RadioNodeList'], returns='ArrayIterator'),
        PrototypeCall(constructor='NodeListOf', fn='values', demands=['NodeListOf'], returns='ArrayIterator'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='values', demands=['StylePropertyMapReadOnly'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='StylePropertyMap', fn='values', demands=['StylePropertyMap'], returns='StylePropertyMapReadOnlyIterator'),
        PrototypeCall(constructor='URLSearchParams', fn='values', demands=['URLSearchParams'], returns='URLSearchParamsIterator'),
        PrototypeCall(constructor='BigInt64Array', fn='values', demands=['BigInt64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='BigUint64Array', fn='values', demands=['BigUint64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='FormData', fn='values', demands=['FormData'], returns='IterableIterator'),
        PrototypeCall(constructor='Headers', fn='values', demands=['Headers'], returns='IterableIterator'),
        PrototypeCall(constructor='ReadableStream', fn='values', demands=['ReadableStream'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='values', demands=['WebTransportReceiveStream'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='ReadableStream', fn='values', demands=['ReadableStream', 'ReadableStreamIteratorOptions'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='values', demands=['WebTransportReceiveStream', 'ReadableStreamIteratorOptions'], returns='AsyncIterableIterator'),
        PrototypeCall(constructor='Array', fn='values', demands=['list'], returns='ArrayIterator'),
        PrototypeCall(constructor='ReadonlyArray', fn='values', demands=['ReadonlyArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='HighlightRegistry', fn='values', demands=['HighlightRegistry'], returns='MapIterator'),
        PrototypeCall(constructor='AudioParamMap', fn='values', demands=['AudioParamMap'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIInputMap', fn='values', demands=['MIDIInputMap'], returns='MapIterator'),
        PrototypeCall(constructor='EventCounts', fn='values', demands=['EventCounts'], returns='MapIterator'),
        PrototypeCall(constructor='MIDIOutputMap', fn='values', demands=['MIDIOutputMap'], returns='MapIterator'),
        PrototypeCall(constructor='RTCStatsReport', fn='values', demands=['RTCStatsReport'], returns='MapIterator'),
        PrototypeCall(constructor='Highlight', fn='values', demands=['Highlight'], returns='SetIterator'),
        PrototypeCall(constructor='ViewTransitionTypeSet', fn='values', demands=['ViewTransitionTypeSet'], returns='SetIterator'),
        PrototypeCall(constructor='FontFaceSet', fn='values', demands=['FontFaceSet'], returns='SetIterator'),
        PrototypeCall(constructor='CustomStateSet', fn='values', demands=['CustomStateSet'], returns='SetIterator'),
        PrototypeCall(constructor='ReadonlySet', fn='values', demands=['ReadonlySet'], returns='SetIterator'),
        PrototypeCall(constructor='Int8Array', fn='values', demands=['Int8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8Array', fn='values', demands=['Uint8Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='values', demands=['Uint8ClampedArray'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int16Array', fn='values', demands=['Int16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint16Array', fn='values', demands=['Uint16Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Int32Array', fn='values', demands=['Int32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Uint32Array', fn='values', demands=['Uint32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float32Array', fn='values', demands=['Float32Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='Float64Array', fn='values', demands=['Float64Array'], returns='ArrayIterator'),
        PrototypeCall(constructor='ObjectConstructor', fn='values', demands=['ObjectConstructor', '{[s:string]:T;}'], returns='list'),
        PrototypeCall(constructor='ObjectConstructor', fn='values', demands=['ObjectConstructor', '{}'], returns='list'),
        PrototypeCall(constructor='Float16Array', fn='values', demands=['Float16Array'], returns='ArrayIterator'),
    ],
    "var": [
        FieldCall(field='var', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='var', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "variable": [
        FieldCall(field='variable', demands=['CSSVariableReferenceValue'], returns='str'),
        FieldCall(field='variable', demands=['CSSVariableReferenceValue', 'str'], returns='None'),
    ],
    "vectorEffect": [
        FieldCall(field='vectorEffect', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='vectorEffect', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "vendor": [
        FieldCall(field='vendor', demands=['NavigatorID'], returns='str'),
    ],
    "vendorSub": [
        FieldCall(field='vendorSub', demands=['NavigatorID'], returns='str'),
    ],
    "verify": [
        PrototypeCall(constructor='SubtleCrypto', fn='verify', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AllowSharedBufferSource', 'AllowSharedBufferSource'], returns='bool'),
    ],
    "version": [
        FieldCall(field='version', demands=['IDBDatabaseInfo'], returns='float'),
        FieldCall(field='version', demands=['IDBDatabaseInfo', 'float'], returns='None'),
        FieldCall(field='version', demands=['HTMLHtmlElement'], returns='str'),
        FieldCall(field='version', demands=['HTMLHtmlElement', 'str'], returns='None'),
        FieldCall(field='version', demands=['IDBDatabase'], returns='float'),
        FieldCall(field='version', demands=['MIDIPort'], returns='str'),
    ],
    "versionchange": [
        FieldCall(field='versionchange', demands=['IDBDatabaseEventMap'], returns='IDBVersionChangeEvent'),
        FieldCall(field='versionchange', demands=['IDBDatabaseEventMap', 'IDBVersionChangeEvent'], returns='None'),
    ],
    "vertexAttrib1f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib1f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib1f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib1fv": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib1fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib1fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib1fv', demands=['WebGLRenderingContext', 'GLuint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib1fv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttrib2f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib2f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib2f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib2fv": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib2fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib2fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib2fv', demands=['WebGLRenderingContext', 'GLuint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib2fv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttrib3f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib3f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib3f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib3fv": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib3fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib3fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib3fv', demands=['WebGLRenderingContext', 'GLuint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib3fv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttrib4f": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib4f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib4f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib4fv": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib4fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib4fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib4fv', demands=['WebGLRenderingContext', 'GLuint', 'Iterable'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib4fv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttribDivisor": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribDivisor', demands=['WebGL2RenderingContext', 'GLuint', 'GLuint'], returns='None'),
    ],
    "vertexAttribDivisorANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='vertexAttribDivisorANGLE', demands=['ANGLE_instanced_arrays', 'GLuint', 'GLuint'], returns='None'),
    ],
    "vertexAttribI4i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4i', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "vertexAttribI4iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4iv', demands=['WebGL2RenderingContext', 'GLuint', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4iv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttribI4ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4ui', demands=['WebGL2RenderingContext', 'GLuint', 'GLuint', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "vertexAttribI4uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4uiv', demands=['WebGL2RenderingContext', 'GLuint', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4uiv', demands=['WebGL2RenderingContext', 'GLuint', 'Iterable'], returns='None'),
    ],
    "vertexAttribIPointer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribIPointer', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
    ],
    "vertexAttribPointer": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttribPointer', demands=['WebGLRenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLboolean', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribPointer', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLboolean', 'GLsizei', 'GLintptr'], returns='None'),
    ],
    "vertical": [
        FieldCall(field='vertical', demands=['VTTCue'], returns='DirectionSetting'),
        FieldCall(field='vertical', demands=['VTTCue', 'DirectionSetting'], returns='None'),
    ],
    "verticalAlign": [
        FieldCall(field='verticalAlign', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='verticalAlign', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "vibrate": [
        PrototypeCall(constructor='Navigator', fn='vibrate', demands=['Navigator', 'VibratePattern'], returns='bool'),
        PrototypeCall(constructor='Navigator', fn='vibrate', demands=['Navigator', 'Iterable'], returns='bool'),
    ],
    "vibrationActuator": [
        FieldCall(field='vibrationActuator', demands=['Gamepad'], returns='GamepadHapticActuator'),
    ],
    "video": [
        FieldCall(field='video', demands=['DisplayMediaStreamOptions'], returns='bool'),
        FieldCall(field='video', demands=['DisplayMediaStreamOptions', 'bool'], returns='None'),
        FieldCall(field='video', demands=['MediaCapabilitiesKeySystemConfiguration'], returns='KeySystemTrackConfiguration'),
        FieldCall(field='video', demands=['MediaCapabilitiesKeySystemConfiguration', 'KeySystemTrackConfiguration'], returns='None'),
        FieldCall(field='video', demands=['MediaConfiguration'], returns='VideoConfiguration'),
        FieldCall(field='video', demands=['MediaConfiguration', 'VideoConfiguration'], returns='None'),
        FieldCall(field='video', demands=['MediaStreamConstraints'], returns='bool'),
        FieldCall(field='video', demands=['MediaStreamConstraints', 'bool'], returns='None'),
        FieldCall(field='video', demands=['HTMLElementTagNameMap'], returns='HTMLVideoElement'),
        FieldCall(field='video', demands=['HTMLElementTagNameMap', 'HTMLVideoElement'], returns='None'),
    ],
    "videoBitsPerSecond": [
        FieldCall(field='videoBitsPerSecond', demands=['MediaRecorderOptions'], returns='float'),
        FieldCall(field='videoBitsPerSecond', demands=['MediaRecorderOptions', 'float'], returns='None'),
        FieldCall(field='videoBitsPerSecond', demands=['MediaRecorder'], returns='float'),
    ],
    "videoCapabilities": [
        FieldCall(field='videoCapabilities', demands=['MediaKeySystemConfiguration'], returns='list'),
        FieldCall(field='videoCapabilities', demands=['MediaKeySystemConfiguration', 'list'], returns='None'),
    ],
    "videoHeight": [
        FieldCall(field='videoHeight', demands=['HTMLVideoElement'], returns='float'),
    ],
    "videoWidth": [
        FieldCall(field='videoWidth', demands=['HTMLVideoElement'], returns='float'),
    ],
    "view": [
        FieldCall(field='view', demands=['UIEventInit'], returns='Window'),
        FieldCall(field='view', demands=['UIEventInit', 'Window'], returns='None'),
        FieldCall(field='view', demands=['ReadableStreamBYOBRequest'], returns='ArrayBufferView<ArrayBuffer>'),
        FieldCall(field='view', demands=['UIEvent'], returns='Window'),
        FieldCall(field='view', demands=['SVGElementTagNameMap'], returns='SVGViewElement'),
        FieldCall(field='view', demands=['SVGElementTagNameMap', 'SVGViewElement'], returns='None'),
        FieldCall(field='view', demands=['ReadableStreamBYOBRequest'], returns='ArrayBufferView'),
    ],
    "viewBox": [
        FieldCall(field='viewBox', demands=['SVGFitToViewBox'], returns='SVGAnimatedRect'),
    ],
    "viewDimension": [
        FieldCall(field='viewDimension', demands=['GPUTextureBindingLayout'], returns='GPUTextureViewDimension'),
        FieldCall(field='viewDimension', demands=['GPUTextureBindingLayout', 'GPUTextureViewDimension'], returns='None'),
        FieldCall(field='viewDimension', demands=['GPUStorageTextureBindingLayout'], returns='GPUTextureViewDimension'),
        FieldCall(field='viewDimension', demands=['GPUStorageTextureBindingLayout', 'GPUTextureViewDimension'], returns='None'),
    ],
    "viewFormats": [
        FieldCall(field='viewFormats', demands=['GPUCanvasConfiguration'], returns='list'),
        FieldCall(field='viewFormats', demands=['GPUCanvasConfiguration', 'list'], returns='None'),
    ],
    "viewTransition": [
        FieldCall(field='viewTransition', demands=['PageRevealEventInit'], returns='ViewTransition'),
        FieldCall(field='viewTransition', demands=['PageRevealEventInit', 'ViewTransition'], returns='None'),
        FieldCall(field='viewTransition', demands=['PageSwapEventInit'], returns='ViewTransition'),
        FieldCall(field='viewTransition', demands=['PageSwapEventInit', 'ViewTransition'], returns='None'),
        FieldCall(field='viewTransition', demands=['PageRevealEvent'], returns='ViewTransition'),
        FieldCall(field='viewTransition', demands=['PageSwapEvent'], returns='ViewTransition'),
    ],
    "viewTransitionClass": [
        FieldCall(field='viewTransitionClass', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='viewTransitionClass', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "viewTransitionName": [
        FieldCall(field='viewTransitionName', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='viewTransitionName', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "viewport": [
        PrototypeCall(constructor='WebGLRenderingContext', fn='viewport', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='viewport', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "viewportAnchorX": [
        FieldCall(field='viewportAnchorX', demands=['VTTRegion'], returns='float'),
        FieldCall(field='viewportAnchorX', demands=['VTTRegion', 'float'], returns='None'),
    ],
    "viewportAnchorY": [
        FieldCall(field='viewportAnchorY', demands=['VTTRegion'], returns='float'),
        FieldCall(field='viewportAnchorY', demands=['VTTRegion', 'float'], returns='None'),
    ],
    "viewportElement": [
        FieldCall(field='viewportElement', demands=['SVGElement'], returns='SVGElement'),
    ],
    "violatedDirective": [
        FieldCall(field='violatedDirective', demands=['SecurityPolicyViolationEventInit'], returns='str'),
        FieldCall(field='violatedDirective', demands=['SecurityPolicyViolationEventInit', 'str'], returns='None'),
        FieldCall(field='violatedDirective', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "visibility": [
        FieldCall(field='visibility', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='visibility', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "visibilityProperty": [
        FieldCall(field='visibilityProperty', demands=['CheckVisibilityOptions'], returns='bool'),
        FieldCall(field='visibilityProperty', demands=['CheckVisibilityOptions', 'bool'], returns='None'),
    ],
    "visibilityState": [
        FieldCall(field='visibilityState', demands=['Document'], returns='DocumentVisibilityState'),
    ],
    "visibilitychange": [
        FieldCall(field='visibilitychange', demands=['DocumentEventMap'], returns='Event'),
        FieldCall(field='visibilitychange', demands=['DocumentEventMap', 'Event'], returns='None'),
    ],
    "visible": [
        FieldCall(field='visible', demands=['BarProp'], returns='bool'),
    ],
    "visibleRect": [
        FieldCall(field='visibleRect', demands=['VideoFrameBufferInit'], returns='DOMRectInit'),
        FieldCall(field='visibleRect', demands=['VideoFrameBufferInit', 'DOMRectInit'], returns='None'),
        FieldCall(field='visibleRect', demands=['VideoFrameInit'], returns='DOMRectInit'),
        FieldCall(field='visibleRect', demands=['VideoFrameInit', 'DOMRectInit'], returns='None'),
        FieldCall(field='visibleRect', demands=['VideoFrame'], returns='DOMRectReadOnly'),
    ],
    "visualViewport": [
        FieldCall(field='visualViewport', demands=['Window'], returns='VisualViewport'),
    ],
    "vlinkColor": [
        FieldCall(field='vlinkColor', demands=['Document'], returns='str'),
        FieldCall(field='vlinkColor', demands=['Document', 'str'], returns='None'),
    ],
    "voice": [
        FieldCall(field='voice', demands=['SpeechSynthesisUtterance'], returns='SpeechSynthesisVoice'),
        FieldCall(field='voice', demands=['SpeechSynthesisUtterance', 'SpeechSynthesisVoice'], returns='None'),
    ],
    "voiceURI": [
        FieldCall(field='voiceURI', demands=['SpeechSynthesisVoice'], returns='str'),
    ],
    "voiceschanged": [
        FieldCall(field='voiceschanged', demands=['SpeechSynthesisEventMap'], returns='Event'),
        FieldCall(field='voiceschanged', demands=['SpeechSynthesisEventMap', 'Event'], returns='None'),
    ],
    "volume": [
        FieldCall(field='volume', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='volume', demands=['HTMLMediaElement', 'float'], returns='None'),
        FieldCall(field='volume', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='volume', demands=['SpeechSynthesisUtterance', 'float'], returns='None'),
    ],
    "volumechange": [
        FieldCall(field='volumechange', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='volumechange', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "vspace": [
        FieldCall(field='vspace', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='vspace', demands=['HTMLImageElement', 'float'], returns='None'),
        FieldCall(field='vspace', demands=['HTMLMarqueeElement'], returns='float'),
        FieldCall(field='vspace', demands=['HTMLMarqueeElement', 'float'], returns='None'),
        FieldCall(field='vspace', demands=['HTMLObjectElement'], returns='float'),
        FieldCall(field='vspace', demands=['HTMLObjectElement', 'float'], returns='None'),
    ],
    "w": [
        FieldCall(field='w', demands=['DOMPointInit'], returns='float'),
        FieldCall(field='w', demands=['DOMPointInit', 'float'], returns='None'),
        FieldCall(field='w', demands=['DOMPoint'], returns='float'),
        FieldCall(field='w', demands=['DOMPoint', 'float'], returns='None'),
        FieldCall(field='w', demands=['DOMPointReadOnly'], returns='float'),
    ],
    "wait": [
        PrototypeCall(constructor='Atomics', fn='wait', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='"ok"'),
        PrototypeCall(constructor='Atomics', fn='wait', demands=['Atomics', 'BigInt64Array', 'float', 'bigint', 'float'], returns='"ok"'),
        PrototypeCall(constructor='Atomics', fn='wait', demands=['Atomics', 'Int32Array', 'float', 'float'], returns='"ok"'),
        PrototypeCall(constructor='Atomics', fn='wait', demands=['Atomics', 'Int32Array', 'float', 'float', 'float'], returns='"ok"'),
    ],
    "waitAsync": [
        PrototypeCall(constructor='Atomics', fn='waitAsync', demands=['Atomics', 'Int32Array', 'float', 'float'], returns='{async:false;value:"not-equal"'),
        PrototypeCall(constructor='Atomics', fn='waitAsync', demands=['Atomics', 'Int32Array', 'float', 'float', 'float'], returns='{async:false;value:"not-equal"'),
        PrototypeCall(constructor='Atomics', fn='waitAsync', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='{async:false;value:"not-equal"'),
        PrototypeCall(constructor='Atomics', fn='waitAsync', demands=['Atomics', 'BigInt64Array', 'float', 'bigint', 'float'], returns='{async:false;value:"not-equal"'),
    ],
    "waitSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='waitSync', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLbitfield', 'GLint64'], returns='None'),
    ],
    "waitUntilAvailable": [
        FieldCall(field='waitUntilAvailable', demands=['WebTransportSendStreamOptions'], returns='bool'),
        FieldCall(field='waitUntilAvailable', demands=['WebTransportSendStreamOptions', 'bool'], returns='None'),
    ],
    "waiting": [
        FieldCall(field='waiting', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='waiting', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
        FieldCall(field='waiting', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
    ],
    "waitingforkey": [
        FieldCall(field='waitingforkey', demands=['HTMLMediaElementEventMap'], returns='Event'),
        FieldCall(field='waitingforkey', demands=['HTMLMediaElementEventMap', 'Event'], returns='None'),
    ],
    "wakeLock": [
        FieldCall(field='wakeLock', demands=['Navigator'], returns='WakeLock'),
    ],
    "warn": [
        PrototypeCall(constructor='Console', fn='warn', demands=['Console', '*'], returns='None'),
    ],
    "wasClean": [
        FieldCall(field='wasClean', demands=['CloseEventInit'], returns='bool'),
        FieldCall(field='wasClean', demands=['CloseEventInit', 'bool'], returns='None'),
        FieldCall(field='wasClean', demands=['CloseEvent'], returns='bool'),
    ],
    "watchAvailability": [
        PrototypeCall(constructor='RemotePlayback', fn='watchAvailability', demands=['RemotePlayback', 'RemotePlaybackAvailabilityCallback'], returns='float'),
    ],
    "watchPosition": [
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback'], returns='float'),
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback'], returns='float'),
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback', 'PositionOptions'], returns='float'),
    ],
    "wbr": [
        FieldCall(field='wbr', demands=['HTMLElementTagNameMap'], returns='HTMLElement'),
        FieldCall(field='wbr', demands=['HTMLElementTagNameMap', 'HTMLElement'], returns='None'),
    ],
    "weakMagnitude": [
        FieldCall(field='weakMagnitude', demands=['GamepadEffectParameters'], returns='float'),
        FieldCall(field='weakMagnitude', demands=['GamepadEffectParameters', 'float'], returns='None'),
    ],
    "webdriver": [
        FieldCall(field='webdriver', demands=['NavigatorAutomationInformation'], returns='bool'),
    ],
    "webkitAlignContent": [
        FieldCall(field='webkitAlignContent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAlignContent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAlignItems": [
        FieldCall(field='webkitAlignItems', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAlignItems', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAlignSelf": [
        FieldCall(field='webkitAlignSelf', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAlignSelf', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimation": [
        FieldCall(field='webkitAnimation', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimation', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationDelay": [
        FieldCall(field='webkitAnimationDelay', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationDelay', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationDirection": [
        FieldCall(field='webkitAnimationDirection', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationDirection', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationDuration": [
        FieldCall(field='webkitAnimationDuration', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationDuration', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationFillMode": [
        FieldCall(field='webkitAnimationFillMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationFillMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationIterationCount": [
        FieldCall(field='webkitAnimationIterationCount', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationIterationCount', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationName": [
        FieldCall(field='webkitAnimationName', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationName', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationPlayState": [
        FieldCall(field='webkitAnimationPlayState', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationPlayState', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAnimationTimingFunction": [
        FieldCall(field='webkitAnimationTimingFunction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAnimationTimingFunction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitAppearance": [
        FieldCall(field='webkitAppearance', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitAppearance', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBackfaceVisibility": [
        FieldCall(field='webkitBackfaceVisibility', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBackfaceVisibility', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBackgroundClip": [
        FieldCall(field='webkitBackgroundClip', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBackgroundClip', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBackgroundOrigin": [
        FieldCall(field='webkitBackgroundOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBackgroundOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBackgroundSize": [
        FieldCall(field='webkitBackgroundSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBackgroundSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBorderBottomLeftRadius": [
        FieldCall(field='webkitBorderBottomLeftRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBorderBottomLeftRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBorderBottomRightRadius": [
        FieldCall(field='webkitBorderBottomRightRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBorderBottomRightRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBorderRadius": [
        FieldCall(field='webkitBorderRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBorderRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBorderTopLeftRadius": [
        FieldCall(field='webkitBorderTopLeftRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBorderTopLeftRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBorderTopRightRadius": [
        FieldCall(field='webkitBorderTopRightRadius', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBorderTopRightRadius', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxAlign": [
        FieldCall(field='webkitBoxAlign', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxAlign', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxFlex": [
        FieldCall(field='webkitBoxFlex', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxFlex', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxOrdinalGroup": [
        FieldCall(field='webkitBoxOrdinalGroup', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxOrdinalGroup', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxOrient": [
        FieldCall(field='webkitBoxOrient', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxOrient', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxPack": [
        FieldCall(field='webkitBoxPack', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxPack', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxShadow": [
        FieldCall(field='webkitBoxShadow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxShadow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitBoxSizing": [
        FieldCall(field='webkitBoxSizing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitBoxSizing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitEntries": [
        FieldCall(field='webkitEntries', demands=['HTMLInputElement'], returns='ReadonlyArray'),
    ],
    "webkitFilter": [
        FieldCall(field='webkitFilter', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFilter', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlex": [
        FieldCall(field='webkitFlex', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlex', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexBasis": [
        FieldCall(field='webkitFlexBasis', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexBasis', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexDirection": [
        FieldCall(field='webkitFlexDirection', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexDirection', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexFlow": [
        FieldCall(field='webkitFlexFlow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexFlow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexGrow": [
        FieldCall(field='webkitFlexGrow', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexGrow', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexShrink": [
        FieldCall(field='webkitFlexShrink', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexShrink', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitFlexWrap": [
        FieldCall(field='webkitFlexWrap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitFlexWrap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitGetAsEntry": [
        PrototypeCall(constructor='DataTransferItem', fn='webkitGetAsEntry', demands=['DataTransferItem'], returns='FileSystemEntry'),
    ],
    "webkitJustifyContent": [
        FieldCall(field='webkitJustifyContent', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitJustifyContent', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitLineClamp": [
        FieldCall(field='webkitLineClamp', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitLineClamp', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMask": [
        FieldCall(field='webkitMask', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMask', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImage": [
        FieldCall(field='webkitMaskBoxImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImageOutset": [
        FieldCall(field='webkitMaskBoxImageOutset', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImageOutset', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImageRepeat": [
        FieldCall(field='webkitMaskBoxImageRepeat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImageRepeat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImageSlice": [
        FieldCall(field='webkitMaskBoxImageSlice', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImageSlice', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImageSource": [
        FieldCall(field='webkitMaskBoxImageSource', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImageSource', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskBoxImageWidth": [
        FieldCall(field='webkitMaskBoxImageWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskBoxImageWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskClip": [
        FieldCall(field='webkitMaskClip', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskClip', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskComposite": [
        FieldCall(field='webkitMaskComposite', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskComposite', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskImage": [
        FieldCall(field='webkitMaskImage', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskImage', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskOrigin": [
        FieldCall(field='webkitMaskOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskPosition": [
        FieldCall(field='webkitMaskPosition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskPosition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskRepeat": [
        FieldCall(field='webkitMaskRepeat', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskRepeat', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMaskSize": [
        FieldCall(field='webkitMaskSize', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitMaskSize', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitMatchesSelector": [
        PrototypeCall(constructor='Element', fn='webkitMatchesSelector', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='MathMLElement', fn='webkitMatchesSelector', demands=['MathMLElement', 'str'], returns='bool'),
        PrototypeCall(constructor='SVGElement', fn='webkitMatchesSelector', demands=['SVGElement', 'str'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='webkitMatchesSelector', demands=['HTMLElement', 'str'], returns='bool'),
    ],
    "webkitOrder": [
        FieldCall(field='webkitOrder', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitOrder', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitPerspective": [
        FieldCall(field='webkitPerspective', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitPerspective', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitPerspectiveOrigin": [
        FieldCall(field='webkitPerspectiveOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitPerspectiveOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitRelativePath": [
        FieldCall(field='webkitRelativePath', demands=['File'], returns='str'),
    ],
    "webkitTextFillColor": [
        FieldCall(field='webkitTextFillColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTextFillColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTextSizeAdjust": [
        FieldCall(field='webkitTextSizeAdjust', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTextSizeAdjust', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTextStroke": [
        FieldCall(field='webkitTextStroke', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTextStroke', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTextStrokeColor": [
        FieldCall(field='webkitTextStrokeColor', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTextStrokeColor', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTextStrokeWidth": [
        FieldCall(field='webkitTextStrokeWidth', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTextStrokeWidth', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransform": [
        FieldCall(field='webkitTransform', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransform', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransformOrigin": [
        FieldCall(field='webkitTransformOrigin', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransformOrigin', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransformStyle": [
        FieldCall(field='webkitTransformStyle', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransformStyle', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransition": [
        FieldCall(field='webkitTransition', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransition', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransitionDelay": [
        FieldCall(field='webkitTransitionDelay', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransitionDelay', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransitionDuration": [
        FieldCall(field='webkitTransitionDuration', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransitionDuration', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransitionProperty": [
        FieldCall(field='webkitTransitionProperty', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransitionProperty', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitTransitionTimingFunction": [
        FieldCall(field='webkitTransitionTimingFunction', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitTransitionTimingFunction', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitUserSelect": [
        FieldCall(field='webkitUserSelect', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='webkitUserSelect', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "webkitanimationend": [
        FieldCall(field='webkitanimationend', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='webkitanimationend', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "webkitanimationiteration": [
        FieldCall(field='webkitanimationiteration', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='webkitanimationiteration', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "webkitanimationstart": [
        FieldCall(field='webkitanimationstart', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='webkitanimationstart', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "webkitdirectory": [
        FieldCall(field='webkitdirectory', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='webkitdirectory', demands=['HTMLInputElement', 'bool'], returns='None'),
    ],
    "webkittransitionend": [
        FieldCall(field='webkittransitionend', demands=['GlobalEventHandlersEventMap'], returns='Event'),
        FieldCall(field='webkittransitionend', demands=['GlobalEventHandlersEventMap', 'Event'], returns='None'),
    ],
    "weight": [
        FieldCall(field='weight', demands=['FontFaceDescriptors'], returns='str'),
        FieldCall(field='weight', demands=['FontFaceDescriptors', 'str'], returns='None'),
        FieldCall(field='weight', demands=['FontFace'], returns='str'),
        FieldCall(field='weight', demands=['FontFace', 'str'], returns='None'),
    ],
    "whatToShow": [
        FieldCall(field='whatToShow', demands=['NodeIterator'], returns='float'),
        FieldCall(field='whatToShow', demands=['TreeWalker'], returns='float'),
    ],
    "wheel": [
        FieldCall(field='wheel', demands=['GlobalEventHandlersEventMap'], returns='WheelEvent'),
        FieldCall(field='wheel', demands=['GlobalEventHandlersEventMap', 'WheelEvent'], returns='None'),
    ],
    "whenDefined": [
        PrototypeCall(constructor='CustomElementRegistry', fn='whenDefined', demands=['CustomElementRegistry', 'str'], returns='CustomElementConstructor'),
    ],
    "which": [
        FieldCall(field='which', demands=['UIEventInit'], returns='float'),
        FieldCall(field='which', demands=['UIEventInit', 'float'], returns='None'),
        FieldCall(field='which', demands=['UIEvent'], returns='float'),
    ],
    "whiteBalanceMode": [
        FieldCall(field='whiteBalanceMode', demands=['MediaTrackSettings'], returns='str'),
        FieldCall(field='whiteBalanceMode', demands=['MediaTrackSettings', 'str'], returns='None'),
    ],
    "whiteSpace": [
        FieldCall(field='whiteSpace', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='whiteSpace', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "whiteSpaceCollapse": [
        FieldCall(field='whiteSpaceCollapse', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='whiteSpaceCollapse', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "wholeText": [
        FieldCall(field='wholeText', demands=['Text'], returns='str'),
    ],
    "widows": [
        FieldCall(field='widows', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='widows', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "width": [
        FieldCall(field='width', demands=['DOMRectInit'], returns='float'),
        FieldCall(field='width', demands=['DOMRectInit', 'float'], returns='None'),
        FieldCall(field='width', demands=['MediaTrackCapabilities'], returns='ULongRange'),
        FieldCall(field='width', demands=['MediaTrackCapabilities', 'ULongRange'], returns='None'),
        FieldCall(field='width', demands=['MediaTrackConstraintSet'], returns='ConstrainULong'),
        FieldCall(field='width', demands=['MediaTrackConstraintSet', 'ConstrainULong'], returns='None'),
        FieldCall(field='width', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='width', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='width', demands=['MediaTrackSupportedConstraints'], returns='bool'),
        FieldCall(field='width', demands=['MediaTrackSupportedConstraints', 'bool'], returns='None'),
        FieldCall(field='width', demands=['PointerEventInit'], returns='float'),
        FieldCall(field='width', demands=['PointerEventInit', 'float'], returns='None'),
        FieldCall(field='width', demands=['RTCEncodedVideoFrameMetadata'], returns='float'),
        FieldCall(field='width', demands=['RTCEncodedVideoFrameMetadata', 'float'], returns='None'),
        FieldCall(field='width', demands=['VideoConfiguration'], returns='float'),
        FieldCall(field='width', demands=['VideoConfiguration', 'float'], returns='None'),
        FieldCall(field='width', demands=['VideoEncoderConfig'], returns='float'),
        FieldCall(field='width', demands=['VideoEncoderConfig', 'float'], returns='None'),
        FieldCall(field='width', demands=['VideoFrameCallbackMetadata'], returns='float'),
        FieldCall(field='width', demands=['VideoFrameCallbackMetadata', 'float'], returns='None'),
        FieldCall(field='width', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='width', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='width', demands=['DOMRect'], returns='float'),
        FieldCall(field='width', demands=['DOMRect', 'float'], returns='None'),
        FieldCall(field='width', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='width', demands=['HTMLCanvasElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLCanvasElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLEmbedElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLHRElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLHRElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLIFrameElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLImageElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLInputElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLMarqueeElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLObjectElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLPreElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLPreElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['HTMLSourceElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLSourceElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLTableCellElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLTableColElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLTableColElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLTableElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLTableElement', 'str'], returns='None'),
        FieldCall(field='width', demands=['HTMLVideoElement'], returns='float'),
        FieldCall(field='width', demands=['HTMLVideoElement', 'float'], returns='None'),
        FieldCall(field='width', demands=['ImageBitmap'], returns='float'),
        FieldCall(field='width', demands=['ImageData'], returns='float'),
        FieldCall(field='width', demands=['OffscreenCanvas'], returns='float'),
        FieldCall(field='width', demands=['OffscreenCanvas', 'float'], returns='None'),
        FieldCall(field='width', demands=['PictureInPictureWindow'], returns='float'),
        FieldCall(field='width', demands=['PointerEvent'], returns='float'),
        FieldCall(field='width', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGFilterPrimitiveStandardAttributes'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['Screen'], returns='float'),
        FieldCall(field='width', demands=['TextMetrics'], returns='float'),
        FieldCall(field='width', demands=['VTTRegion'], returns='float'),
        FieldCall(field='width', demands=['VTTRegion', 'float'], returns='None'),
        FieldCall(field='width', demands=['VisualViewport'], returns='float'),
        FieldCall(field='width', demands=['GPUExtent3DDict'], returns='float'),
        FieldCall(field='width', demands=['GPUExtent3DDict', 'float'], returns='None'),
    ],
    "willChange": [
        FieldCall(field='willChange', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='willChange', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "willReadFrequently": [
        FieldCall(field='willReadFrequently', demands=['CanvasRenderingContext2DSettings'], returns='bool'),
        FieldCall(field='willReadFrequently', demands=['CanvasRenderingContext2DSettings', 'bool'], returns='None'),
    ],
    "willValidate": [
        FieldCall(field='willValidate', demands=['ElementInternals'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLFieldSetElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLObjectElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLOutputElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLTextAreaElement'], returns='bool'),
    ],
    "window": [
        FieldCall(field='window', demands=['RequestInit'], returns='None'),
        FieldCall(field='window', demands=['RequestInit', 'None'], returns='None'),
        FieldCall(field='window', demands=['Window'], returns='Window&typeofglobalThis'),
        FieldCall(field='window', demands=['RequestInit'], returns='*'),
        FieldCall(field='window', demands=['RequestInit', '*'], returns='None'),
    ],
    "with": [
        PrototypeCall(constructor='Array', fn='with', demands=['list', 'float', 'T'], returns='list'),
        PrototypeCall(constructor='ReadonlyArray', fn='with', demands=['ReadonlyArray', 'float', 'T'], returns='list'),
        PrototypeCall(constructor='Int8Array', fn='with', demands=['Int8Array', 'float', 'float'], returns='Int8Array'),
        PrototypeCall(constructor='Uint8Array', fn='with', demands=['Uint8Array', 'float', 'float'], returns='Uint8Array'),
        PrototypeCall(constructor='Uint8ClampedArray', fn='with', demands=['Uint8ClampedArray', 'float', 'float'], returns='Uint8ClampedArray'),
        PrototypeCall(constructor='Int16Array', fn='with', demands=['Int16Array', 'float', 'float'], returns='Int16Array'),
        PrototypeCall(constructor='Uint16Array', fn='with', demands=['Uint16Array', 'float', 'float'], returns='Uint16Array'),
        PrototypeCall(constructor='Int32Array', fn='with', demands=['Int32Array', 'float', 'float'], returns='Int32Array'),
        PrototypeCall(constructor='Uint32Array', fn='with', demands=['Uint32Array', 'float', 'float'], returns='Uint32Array'),
        PrototypeCall(constructor='Float32Array', fn='with', demands=['Float32Array', 'float', 'float'], returns='Float32Array'),
        PrototypeCall(constructor='Float64Array', fn='with', demands=['Float64Array', 'float', 'float'], returns='Float64Array'),
        PrototypeCall(constructor='BigInt64Array', fn='with', demands=['BigInt64Array', 'float', 'bigint'], returns='BigInt64Array'),
        PrototypeCall(constructor='BigUint64Array', fn='with', demands=['BigUint64Array', 'float', 'bigint'], returns='BigUint64Array'),
        FieldCall(field='with', demands=['ImportCallOptions'], returns='ImportAttributes'),
        FieldCall(field='with', demands=['ImportCallOptions', 'ImportAttributes'], returns='None'),
        PrototypeCall(constructor='Float16Array', fn='with', demands=['Float16Array', 'float', 'float'], returns='Float16Array'),
    ],
    "withCredentials": [
        FieldCall(field='withCredentials', demands=['EventSourceInit'], returns='bool'),
        FieldCall(field='withCredentials', demands=['EventSourceInit', 'bool'], returns='None'),
        FieldCall(field='withCredentials', demands=['EventSource'], returns='bool'),
        FieldCall(field='withCredentials', demands=['XMLHttpRequest'], returns='bool'),
        FieldCall(field='withCredentials', demands=['XMLHttpRequest', 'bool'], returns='None'),
    ],
    "withResolvers": [
        PrototypeCall(constructor='PromiseConstructor', fn='withResolvers', demands=['PromiseConstructor'], returns='PromiseWithResolvers'),
    ],
    "wordBreak": [
        FieldCall(field='wordBreak', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='wordBreak', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "wordSpacing": [
        FieldCall(field='wordSpacing', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='wordSpacing', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='wordSpacing', demands=['CanvasTextDrawingStyles'], returns='str'),
        FieldCall(field='wordSpacing', demands=['CanvasTextDrawingStyles', 'str'], returns='None'),
    ],
    "wordWrap": [
        FieldCall(field='wordWrap', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='wordWrap', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "workerStart": [
        FieldCall(field='workerStart', demands=['PerformanceResourceTiming'], returns='DOMHighResTimeStamp'),
    ],
    "wrap": [
        FieldCall(field='wrap', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='wrap', demands=['HTMLTextAreaElement', 'str'], returns='None'),
    ],
    "wrapKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='wrapKey', demands=['SubtleCrypto', 'KeyFormat', 'CryptoKey', 'CryptoKey', 'AlgorithmIdentifier'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='wrapKey', demands=['SubtleCrypto', 'KeyFormat', 'CryptoKey', 'CryptoKey', ''], returns='ArrayBuffer'),
    ],
    "writable": [
        FieldCall(field='writable', demands=['ReadableWritablePair'], returns='WritableStream'),
        FieldCall(field='writable', demands=['ReadableWritablePair', 'WritableStream'], returns='None'),
        FieldCall(field='writable', demands=['CompressionStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['DecompressionStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['GenericTransformStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['TextDecoderStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['TextEncoderStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['TransformStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['WebTransportBidirectionalStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['WebTransportDatagramDuplexStream'], returns='WritableStream'),
        FieldCall(field='writable', demands=['WebTransportBidirectionalStream'], returns='WebTransportSendStream'),
        FieldCall(field='writable', demands=['WebTransportDatagramDuplexStream'], returns='WebTransportSendStream'),
        FieldCall(field='writable', demands=['PropertyDescriptor'], returns='bool'),
        FieldCall(field='writable', demands=['PropertyDescriptor', 'bool'], returns='None'),
        FieldCall(field='writable', demands=['TypedPropertyDescriptor'], returns='bool'),
        FieldCall(field='writable', demands=['TypedPropertyDescriptor', 'bool'], returns='None'),
    ],
    "writableType": [
        FieldCall(field='writableType', demands=['Transformer'], returns='None'),
        FieldCall(field='writableType', demands=['Transformer', 'None'], returns='None'),
    ],
    "write": [
        FieldCall(field='write', demands=['AuthenticationExtensionsLargeBlobInputs'], returns='BufferSource'),
        FieldCall(field='write', demands=['AuthenticationExtensionsLargeBlobInputs', 'AllowSharedBufferSource'], returns='None'),
        FieldCall(field='write', demands=['AuthenticationExtensionsLargeBlobInputsJSON'], returns='Base64URLString'),
        FieldCall(field='write', demands=['AuthenticationExtensionsLargeBlobInputsJSON', 'Base64URLString'], returns='None'),
        FieldCall(field='write', demands=['UnderlyingSink'], returns='UnderlyingSinkWriteCallback'),
        FieldCall(field='write', demands=['UnderlyingSink', 'UnderlyingSinkWriteCallback'], returns='None'),
        PrototypeCall(constructor='Clipboard', fn='write', demands=['Clipboard', 'ClipboardItems'], returns='None'),
        PrototypeCall(constructor='Document', fn='write', demands=['Document', '*'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='write', demands=['HTMLDocument', '*'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='write', demands=['XMLDocument', '*'], returns='None'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='write', demands=['FileSystemWritableFileStream', 'FileSystemWriteChunkType'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='write', demands=['WebTransportWriter'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='write', demands=['WebTransportWriter', 'W'], returns='None'),
    ],
    "writeMask": [
        FieldCall(field='writeMask', demands=['GPUColorTargetState'], returns='GPUColorWriteFlags'),
        FieldCall(field='writeMask', demands=['GPUColorTargetState', 'GPUColorWriteFlags'], returns='None'),
    ],
    "writeText": [
        PrototypeCall(constructor='Clipboard', fn='writeText', demands=['Clipboard', 'str'], returns='None'),
    ],
    "writeln": [
        PrototypeCall(constructor='Document', fn='writeln', demands=['Document', '*'], returns='None'),
        PrototypeCall(constructor='HTMLDocument', fn='writeln', demands=['HTMLDocument', '*'], returns='None'),
        PrototypeCall(constructor='XMLDocument', fn='writeln', demands=['XMLDocument', '*'], returns='None'),
    ],
    "writingMode": [
        FieldCall(field='writingMode', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='writingMode', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "writingSuggestions": [
        FieldCall(field='writingSuggestions', demands=['HTMLElement'], returns='str'),
        FieldCall(field='writingSuggestions', demands=['HTMLElement', 'str'], returns='None'),
    ],
    "written": [
        FieldCall(field='written', demands=['AuthenticationExtensionsLargeBlobOutputs'], returns='bool'),
        FieldCall(field='written', demands=['AuthenticationExtensionsLargeBlobOutputs', 'bool'], returns='None'),
        FieldCall(field='written', demands=['TextEncoderEncodeIntoResult'], returns='float'),
        FieldCall(field='written', demands=['TextEncoderEncodeIntoResult', 'float'], returns='None'),
    ],
    "x": [
        FieldCall(field='x', demands=['DOMPointInit'], returns='float'),
        FieldCall(field='x', demands=['DOMPointInit', 'float'], returns='None'),
        FieldCall(field='x', demands=['DOMRectInit'], returns='float'),
        FieldCall(field='x', demands=['DOMRectInit', 'float'], returns='None'),
        FieldCall(field='x', demands=['DeviceMotionEventAccelerationInit'], returns='float'),
        FieldCall(field='x', demands=['DeviceMotionEventAccelerationInit', 'float'], returns='None'),
        FieldCall(field='x', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='x', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='x', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['CSSRotate', 'CSSNumberish'], returns='None'),
        FieldCall(field='x', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['CSSScale', 'CSSNumberish'], returns='None'),
        FieldCall(field='x', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='x', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='x', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='x', demands=['CSSTranslate', 'CSSNumericValue'], returns='None'),
        FieldCall(field='x', demands=['DOMPoint'], returns='float'),
        FieldCall(field='x', demands=['DOMPoint', 'float'], returns='None'),
        FieldCall(field='x', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='x', demands=['DOMRect'], returns='float'),
        FieldCall(field='x', demands=['DOMRect', 'float'], returns='None'),
        FieldCall(field='x', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='x', demands=['DeviceMotionEventAcceleration'], returns='float'),
        FieldCall(field='x', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='x', demands=['MouseEvent'], returns='float'),
        FieldCall(field='x', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='x', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='x', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGFilterPrimitiveStandardAttributes'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='x', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['GPUOrigin3DDict'], returns='float'),
        FieldCall(field='x', demands=['GPUOrigin3DDict', 'float'], returns='None'),
    ],
    "x1": [
        FieldCall(field='x1', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x1', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "x2": [
        FieldCall(field='x2', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x2', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "xChannelSelector": [
        FieldCall(field='xChannelSelector', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedEnumeration'),
    ],
    "xmp": [
        FieldCall(field='xmp', demands=['HTMLElementDeprecatedTagNameMap'], returns='HTMLPreElement'),
        FieldCall(field='xmp', demands=['HTMLElementDeprecatedTagNameMap', 'HTMLPreElement'], returns='None'),
    ],
    "xor": [
        PrototypeCall(constructor='Atomics', fn='xor', demands=['Atomics', 'BigInt64Array', 'float', 'bigint'], returns='bigint'),
        PrototypeCall(constructor='Atomics', fn='xor', demands=['Atomics', 'Int8Array', 'float', 'float'], returns='float'),
    ],
    "y": [
        FieldCall(field='y', demands=['DOMPointInit'], returns='float'),
        FieldCall(field='y', demands=['DOMPointInit', 'float'], returns='None'),
        FieldCall(field='y', demands=['DOMRectInit'], returns='float'),
        FieldCall(field='y', demands=['DOMRectInit', 'float'], returns='None'),
        FieldCall(field='y', demands=['DeviceMotionEventAccelerationInit'], returns='float'),
        FieldCall(field='y', demands=['DeviceMotionEventAccelerationInit', 'float'], returns='None'),
        FieldCall(field='y', demands=['JsonWebKey'], returns='str'),
        FieldCall(field='y', demands=['JsonWebKey', 'str'], returns='None'),
        FieldCall(field='y', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['CSSRotate', 'CSSNumberish'], returns='None'),
        FieldCall(field='y', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['CSSScale', 'CSSNumberish'], returns='None'),
        FieldCall(field='y', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='y', demands=['CSSStyleDeclaration', 'str'], returns='None'),
        FieldCall(field='y', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='y', demands=['CSSTranslate', 'CSSNumericValue'], returns='None'),
        FieldCall(field='y', demands=['DOMPoint'], returns='float'),
        FieldCall(field='y', demands=['DOMPoint', 'float'], returns='None'),
        FieldCall(field='y', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='y', demands=['DOMRect'], returns='float'),
        FieldCall(field='y', demands=['DOMRect', 'float'], returns='None'),
        FieldCall(field='y', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='y', demands=['DeviceMotionEventAcceleration'], returns='float'),
        FieldCall(field='y', demands=['HTMLImageElement'], returns='float'),
        FieldCall(field='y', demands=['MouseEvent'], returns='float'),
        FieldCall(field='y', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='y', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='y', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGFilterPrimitiveStandardAttributes'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='y', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['GPUOrigin3DDict'], returns='float'),
        FieldCall(field='y', demands=['GPUOrigin3DDict', 'float'], returns='None'),
    ],
    "y1": [
        FieldCall(field='y1', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y1', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "y2": [
        FieldCall(field='y2', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y2', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "yChannelSelector": [
        FieldCall(field='yChannelSelector', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedEnumeration'),
    ],
    "z": [
        FieldCall(field='z', demands=['DOMPointInit'], returns='float'),
        FieldCall(field='z', demands=['DOMPointInit', 'float'], returns='None'),
        FieldCall(field='z', demands=['DeviceMotionEventAccelerationInit'], returns='float'),
        FieldCall(field='z', demands=['DeviceMotionEventAccelerationInit', 'float'], returns='None'),
        FieldCall(field='z', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['CSSRotate', 'CSSNumberish'], returns='None'),
        FieldCall(field='z', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['CSSScale', 'CSSNumberish'], returns='None'),
        FieldCall(field='z', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='z', demands=['CSSTranslate', 'CSSNumericValue'], returns='None'),
        FieldCall(field='z', demands=['DOMPoint'], returns='float'),
        FieldCall(field='z', demands=['DOMPoint', 'float'], returns='None'),
        FieldCall(field='z', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='z', demands=['DeviceMotionEventAcceleration'], returns='float'),
        FieldCall(field='z', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='z', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='z', demands=['GPUOrigin3DDict'], returns='float'),
        FieldCall(field='z', demands=['GPUOrigin3DDict', 'float'], returns='None'),
    ],
    "zIndex": [
        FieldCall(field='zIndex', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='zIndex', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
    "zoom": [
        FieldCall(field='zoom', demands=['MediaTrackSettings'], returns='float'),
        FieldCall(field='zoom', demands=['MediaTrackSettings', 'float'], returns='None'),
        FieldCall(field='zoom', demands=['CSSStyleDeclaration'], returns='str'),
        FieldCall(field='zoom', demands=['CSSStyleDeclaration', 'str'], returns='None'),
    ],
}
