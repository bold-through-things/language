# This file is automatically generated. Do not edit directly.
from pipeline.builtin_calls import PrototypeCall, DirectCall, NewCall, FieldCall

webidl_calls = {
    "getTranslatedShaderSource": [
        PrototypeCall(constructor='WEBGL_debug_shaders', fn='getTranslatedShaderSource', demands=['WEBGL_debug_shaders', 'WebGLShader'], returns='str'),
    ],
    "InputDeviceCapabilities": [
        NewCall(constructor='InputDeviceCapabilities', demands=[], returns='InputDeviceCapabilities'),
        NewCall(constructor='InputDeviceCapabilities', demands=['dict'], returns='InputDeviceCapabilities'),
    ],
    "firesTouchEvents": [
        FieldCall(field='firesTouchEvents', demands=['InputDeviceCapabilities'], returns='bool'),
    ],
    "pointerMovementScrolls": [
        FieldCall(field='pointerMovementScrolls', demands=['InputDeviceCapabilities'], returns='bool'),
    ],
    "brands": [
        FieldCall(field='brands', demands=['NavigatorUAData'], returns='dict'),
    ],
    "mobile": [
        FieldCall(field='mobile', demands=['NavigatorUAData'], returns='bool'),
    ],
    "platform": [
        FieldCall(field='platform', demands=['NavigatorUAData'], returns='str'),
    ],
    "getHighEntropyValues": [
        PrototypeCall(constructor='NavigatorUAData', fn='getHighEntropyValues', demands=['NavigatorUAData', 'str'], returns='dict'),
    ],
    "toJSON": [
        PrototypeCall(constructor='NavigatorUAData', fn='toJSON', demands=['NavigatorUAData'], returns='dict'),
        PrototypeCall(constructor='PushSubscription', fn='toJSON', demands=['PushSubscription'], returns='dict'),
        PrototypeCall(constructor='DigitalCredential', fn='toJSON', demands=['DigitalCredential'], returns='object'),
        PrototypeCall(constructor='PublicKeyCredential', fn='toJSON', demands=['PublicKeyCredential'], returns='PublicKeyCredentialJSON'),
        PrototypeCall(constructor='ContactAddress', fn='toJSON', demands=['ContactAddress'], returns='object'),
        PrototypeCall(constructor='PerformanceEventTiming', fn='toJSON', demands=['PerformanceEventTiming'], returns='object'),
        PrototypeCall(constructor='Performance', fn='toJSON', demands=['Performance'], returns='object'),
        PrototypeCall(constructor='DOMPointReadOnly', fn='toJSON', demands=['DOMPointReadOnly'], returns='object'),
        PrototypeCall(constructor='DOMRectReadOnly', fn='toJSON', demands=['DOMRectReadOnly'], returns='object'),
        PrototypeCall(constructor='DOMQuad', fn='toJSON', demands=['DOMQuad'], returns='object'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toJSON', demands=['DOMMatrixReadOnly'], returns='object'),
        PrototypeCall(constructor='PerformanceEntry', fn='toJSON', demands=['PerformanceEntry'], returns='object'),
        PrototypeCall(constructor='PerformanceLongTaskTiming', fn='toJSON', demands=['PerformanceLongTaskTiming'], returns='object'),
        PrototypeCall(constructor='TaskAttributionTiming', fn='toJSON', demands=['TaskAttributionTiming'], returns='object'),
        PrototypeCall(constructor='LargestContentfulPaint', fn='toJSON', demands=['LargestContentfulPaint'], returns='object'),
        PrototypeCall(constructor='GeolocationPosition', fn='toJSON', demands=['GeolocationPosition'], returns='object'),
        PrototypeCall(constructor='GeolocationCoordinates', fn='toJSON', demands=['GeolocationCoordinates'], returns='object'),
        PrototypeCall(constructor='VideoColorSpace', fn='toJSON', demands=['VideoColorSpace'], returns='dict'),
        PrototypeCall(constructor='URL', fn='toJSON', demands=['URL'], returns='str'),
        PrototypeCall(constructor='PerformanceResourceTiming', fn='toJSON', demands=['PerformanceResourceTiming'], returns='object'),
        PrototypeCall(constructor='RTCSessionDescription', fn='toJSON', demands=['RTCSessionDescription'], returns='dict'),
        PrototypeCall(constructor='RTCIceCandidate', fn='toJSON', demands=['RTCIceCandidate'], returns='dict'),
        PrototypeCall(constructor='NotRestoredReasonDetails', fn='toJSON', demands=['NotRestoredReasonDetails'], returns='object'),
        PrototypeCall(constructor='NotRestoredReasons', fn='toJSON', demands=['NotRestoredReasons'], returns='object'),
        PrototypeCall(constructor='PerformanceServerTiming', fn='toJSON', demands=['PerformanceServerTiming'], returns='object'),
        PrototypeCall(constructor='PerformancePaintTiming', fn='toJSON', demands=['PerformancePaintTiming'], returns='object'),
        PrototypeCall(constructor='PerformanceNavigationTiming', fn='toJSON', demands=['PerformanceNavigationTiming'], returns='object'),
        PrototypeCall(constructor='PerformanceTiming', fn='toJSON', demands=['PerformanceTiming'], returns='object'),
        PrototypeCall(constructor='PerformanceNavigation', fn='toJSON', demands=['PerformanceNavigation'], returns='object'),
        PrototypeCall(constructor='MediaDeviceInfo', fn='toJSON', demands=['MediaDeviceInfo'], returns='object'),
        PrototypeCall(constructor='PaymentResponse', fn='toJSON', demands=['PaymentResponse'], returns='object'),
        PrototypeCall(constructor='PerformanceLongAnimationFrameTiming', fn='toJSON', demands=['PerformanceLongAnimationFrameTiming'], returns='object'),
        PrototypeCall(constructor='PerformanceScriptTiming', fn='toJSON', demands=['PerformanceScriptTiming'], returns='object'),
        PrototypeCall(constructor='LayoutShift', fn='toJSON', demands=['LayoutShift'], returns='object'),
        PrototypeCall(constructor='TrustedHTML', fn='toJSON', demands=['TrustedHTML'], returns='str'),
        PrototypeCall(constructor='TrustedScript', fn='toJSON', demands=['TrustedScript'], returns='str'),
        PrototypeCall(constructor='TrustedScriptURL', fn='toJSON', demands=['TrustedScriptURL'], returns='str'),
        PrototypeCall(constructor='PressureRecord', fn='toJSON', demands=['PressureRecord'], returns='object'),
        PrototypeCall(constructor='PerformanceElementTiming', fn='toJSON', demands=['PerformanceElementTiming'], returns='object'),
    ],
    "supportedContentEncodings": [
        FieldCall(field='supportedContentEncodings', demands=['PushManager'], returns='str'),
    ],
    "subscribe": [
        PrototypeCall(constructor='PushManager', fn='subscribe', demands=['PushManager'], returns='PushSubscription'),
        PrototypeCall(constructor='PushManager', fn='subscribe', demands=['PushManager', 'dict'], returns='PushSubscription'),
        PrototypeCall(constructor='Observable', fn='subscribe', demands=['Observable'], returns='None'),
        PrototypeCall(constructor='Observable', fn='subscribe', demands=['Observable', 'ObserverUnion'], returns='None'),
        PrototypeCall(constructor='Observable', fn='subscribe', demands=['Observable', 'ObserverUnion', 'dict'], returns='None'),
        PrototypeCall(constructor='CookieStoreManager', fn='subscribe', demands=['CookieStoreManager', 'dict'], returns='None'),
    ],
    "getSubscription": [
        PrototypeCall(constructor='PushManager', fn='getSubscription', demands=['PushManager'], returns='PushSubscription'),
    ],
    "permissionState": [
        PrototypeCall(constructor='PushManager', fn='permissionState', demands=['PushManager'], returns='PermissionState'),
        PrototypeCall(constructor='PushManager', fn='permissionState', demands=['PushManager', 'dict'], returns='PermissionState'),
    ],
    "userVisibleOnly": [
        FieldCall(field='userVisibleOnly', demands=['PushSubscriptionOptions'], returns='bool'),
    ],
    "applicationServerKey": [
        FieldCall(field='applicationServerKey', demands=['PushSubscriptionOptions'], returns='ArrayBuffer'),
    ],
    "endpoint": [
        FieldCall(field='endpoint', demands=['PushSubscription'], returns='str'),
    ],
    "expirationTime": [
        FieldCall(field='expirationTime', demands=['PushSubscription'], returns='EpochTimeStamp'),
    ],
    "options": [
        FieldCall(field='options', demands=['PushSubscription'], returns='PushSubscriptionOptions'),
        FieldCall(field='options', demands=['RTCRtpScriptTransformer'], returns='*'),
        FieldCall(field='options', demands=['HTMLSelectElement'], returns='HTMLOptionsCollection'),
        FieldCall(field='options', demands=['HTMLDataListElement'], returns='HTMLCollection'),
    ],
    "getKey": [
        PrototypeCall(constructor='PushSubscription', fn='getKey', demands=['PushSubscription', 'PushEncryptionKeyName'], returns='ArrayBuffer'),
        PrototypeCall(constructor='IDBObjectStore', fn='getKey', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getKey', demands=['IDBIndex', '*'], returns='IDBRequest'),
    ],
    "unsubscribe": [
        PrototypeCall(constructor='PushSubscription', fn='unsubscribe', demands=['PushSubscription'], returns='bool'),
        PrototypeCall(constructor='CookieStoreManager', fn='unsubscribe', demands=['CookieStoreManager', 'dict'], returns='None'),
    ],
    "arrayBuffer": [
        PrototypeCall(constructor='PushMessageData', fn='arrayBuffer', demands=['PushMessageData'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Request', fn='arrayBuffer', demands=['Request'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Response', fn='arrayBuffer', demands=['Response'], returns='ArrayBuffer'),
        PrototypeCall(constructor='Blob', fn='arrayBuffer', demands=['Blob'], returns='ArrayBuffer'),
    ],
    "blob": [
        PrototypeCall(constructor='PushMessageData', fn='blob', demands=['PushMessageData'], returns='Blob'),
        PrototypeCall(constructor='Request', fn='blob', demands=['Request'], returns='Blob'),
        PrototypeCall(constructor='Response', fn='blob', demands=['Response'], returns='Blob'),
        PrototypeCall(constructor='FontData', fn='blob', demands=['FontData'], returns='Blob'),
    ],
    "bytes": [
        PrototypeCall(constructor='PushMessageData', fn='bytes', demands=['PushMessageData'], returns='Uint8Array'),
        PrototypeCall(constructor='Request', fn='bytes', demands=['Request'], returns='Uint8Array'),
        PrototypeCall(constructor='Response', fn='bytes', demands=['Response'], returns='Uint8Array'),
        PrototypeCall(constructor='Blob', fn='bytes', demands=['Blob'], returns='Uint8Array'),
    ],
    "json": [
        PrototypeCall(constructor='PushMessageData', fn='json', demands=['PushMessageData'], returns='*'),
        PrototypeCall(constructor='Request', fn='json', demands=['Request'], returns='*'),
        DirectCall(fn='json', receiver='Response', demands=['*'], returns='Response'),
        DirectCall(fn='json', receiver='Response', demands=['*', 'dict'], returns='Response'),
        PrototypeCall(constructor='Response', fn='json', demands=['Response'], returns='*'),
    ],
    "text": [
        PrototypeCall(constructor='PushMessageData', fn='text', demands=['PushMessageData'], returns='str'),
        PrototypeCall(constructor='Request', fn='text', demands=['Request'], returns='str'),
        PrototypeCall(constructor='Response', fn='text', demands=['Response'], returns='str'),
        FieldCall(field='text', demands=['HTMLTitleElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLTitleElement', 'str'], returns='str'),
        FieldCall(field='text', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='text', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLOptionElement', 'str'], returns='str'),
        FieldCall(field='text', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='text', demands=['HTMLScriptElement', 'str'], returns='str'),
        FieldCall(field='text', demands=['EditContext'], returns='str'),
        FieldCall(field='text', demands=['TextUpdateEvent'], returns='str'),
        FieldCall(field='text', demands=['SpeechSynthesisUtterance'], returns='str'),
        FieldCall(field='text', demands=['SpeechSynthesisUtterance', 'str'], returns='str'),
        FieldCall(field='text', demands=['SVGAElement'], returns='str'),
        FieldCall(field='text', demands=['SVGAElement', 'str'], returns='str'),
        FieldCall(field='text', demands=['VTTCue'], returns='str'),
        FieldCall(field='text', demands=['VTTCue', 'str'], returns='str'),
        PrototypeCall(constructor='Blob', fn='text', demands=['Blob'], returns='str'),
    ],
    "PushEvent": [
        NewCall(constructor='PushEvent', demands=['str'], returns='PushEvent'),
        NewCall(constructor='PushEvent', demands=['str', 'dict'], returns='PushEvent'),
    ],
    "data": [
        FieldCall(field='data', demands=['PushEvent'], returns='PushMessageData'),
        FieldCall(field='data', demands=['DigitalCredential'], returns='object'),
        FieldCall(field='data', demands=['InputEvent'], returns='str'),
        FieldCall(field='data', demands=['CompositionEvent'], returns='str'),
        FieldCall(field='data', demands=['TextEvent'], returns='str'),
        FieldCall(field='data', demands=['HIDInputReportEvent'], returns='DataView'),
        FieldCall(field='data', demands=['RTCEncodedVideoFrame'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['RTCEncodedVideoFrame', 'ArrayBuffer'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['RTCEncodedAudioFrame'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['RTCEncodedAudioFrame', 'ArrayBuffer'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['LayoutFragment'], returns='*'),
        FieldCall(field='data', demands=['LayoutConstraints'], returns='*'),
        FieldCall(field='data', demands=['BreakToken'], returns='*'),
        FieldCall(field='data', demands=['XRCPUDepthInformation'], returns='ArrayBuffer'),
        FieldCall(field='data', demands=['ExtendableMessageEvent'], returns='*'),
        FieldCall(field='data', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='data', demands=['HTMLObjectElement', 'str'], returns='str'),
        FieldCall(field='data', demands=['ImageData'], returns='ImageDataArray'),
        FieldCall(field='data', demands=['MessageEvent'], returns='*'),
        FieldCall(field='data', demands=['PortalActivateEvent'], returns='*'),
        FieldCall(field='data', demands=['Notification'], returns='*'),
        FieldCall(field='data', demands=['MIDIMessageEvent'], returns='Uint8Array'),
        FieldCall(field='data', demands=['USBInTransferResult'], returns='DataView'),
        FieldCall(field='data', demands=['USBIsochronousInTransferPacket'], returns='DataView'),
        FieldCall(field='data', demands=['USBIsochronousInTransferResult'], returns='DataView'),
        FieldCall(field='data', demands=['NDEFRecord'], returns='DataView'),
        FieldCall(field='data', demands=['BlobEvent'], returns='Blob'),
        FieldCall(field='data', demands=['CharacterData'], returns='str'),
        FieldCall(field='data', demands=['CharacterData', 'str'], returns='str'),
    ],
    "notification": [
        FieldCall(field='notification', demands=['PushEvent'], returns='Notification'),
        FieldCall(field='notification', demands=['NotificationEvent'], returns='Notification'),
    ],
    "PushSubscriptionChangeEvent": [
        NewCall(constructor='PushSubscriptionChangeEvent', demands=['str'], returns='PushSubscriptionChangeEvent'),
        NewCall(constructor='PushSubscriptionChangeEvent', demands=['str', 'dict'], returns='PushSubscriptionChangeEvent'),
    ],
    "newSubscription": [
        FieldCall(field='newSubscription', demands=['PushSubscriptionChangeEvent'], returns='PushSubscription'),
    ],
    "oldSubscription": [
        FieldCall(field='oldSubscription', demands=['PushSubscriptionChangeEvent'], returns='PushSubscription'),
    ],
    "protocol": [
        FieldCall(field='protocol', demands=['DigitalCredential'], returns='str'),
        FieldCall(field='protocol', demands=['URLPattern'], returns='str'),
        FieldCall(field='protocol', demands=['URL'], returns='str'),
        FieldCall(field='protocol', demands=['URL', 'str'], returns='str'),
        FieldCall(field='protocol', demands=['RTCIceCandidate'], returns='RTCIceProtocol'),
        FieldCall(field='protocol', demands=['RTCDataChannel'], returns='str'),
        FieldCall(field='protocol', demands=['Location'], returns='str'),
        FieldCall(field='protocol', demands=['Location', 'str'], returns='str'),
        FieldCall(field='protocol', demands=['WorkerLocation'], returns='str'),
        FieldCall(field='protocol', demands=['WebTransport'], returns='str'),
        FieldCall(field='protocol', demands=['WebSocket'], returns='str'),
        FieldCall(field='protocol', demands=['FederatedCredential'], returns='str'),
    ],
    "userAgentAllowsProtocol": [
        DirectCall(fn='userAgentAllowsProtocol', receiver='DigitalCredential', demands=['str'], returns='bool'),
    ],
    "aggregationServices": [
        FieldCall(field='aggregationServices', demands=['Attribution'], returns='AttributionAggregationServices'),
    ],
    "focus": [
        PrototypeCall(constructor='MathMLElement', fn='focus', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='MathMLElement', fn='focus', demands=['MathMLElement', 'dict'], returns='None'),
        PrototypeCall(constructor='WindowClient', fn='focus', demands=['WindowClient'], returns='WindowClient'),
        PrototypeCall(constructor='HTMLElement', fn='focus', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='focus', demands=['HTMLElement', 'dict'], returns='None'),
        DirectCall(fn='focus', receiver=None, demands=[], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='focus', demands=['SVGElement'], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='focus', demands=['SVGElement', 'dict'], returns='None'),
    ],
    "blur": [
        PrototypeCall(constructor='MathMLElement', fn='blur', demands=['MathMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='blur', demands=['HTMLElement'], returns='None'),
        DirectCall(fn='blur', receiver=None, demands=[], returns='None'),
        PrototypeCall(constructor='SVGElement', fn='blur', demands=['SVGElement'], returns='None'),
    ],
    "rawId": [
        FieldCall(field='rawId', demands=['PublicKeyCredential'], returns='ArrayBuffer'),
    ],
    "response": [
        FieldCall(field='response', demands=['PublicKeyCredential'], returns='AuthenticatorResponse'),
        FieldCall(field='response', demands=['XMLHttpRequest'], returns='*'),
    ],
    "authenticatorAttachment": [
        FieldCall(field='authenticatorAttachment', demands=['PublicKeyCredential'], returns='str'),
    ],
    "getClientExtensionResults": [
        PrototypeCall(constructor='PublicKeyCredential', fn='getClientExtensionResults', demands=['PublicKeyCredential'], returns='dict'),
    ],
    "isConditionalMediationAvailable": [
        DirectCall(fn='isConditionalMediationAvailable', receiver='PublicKeyCredential', demands=[], returns='bool'),
        DirectCall(fn='isConditionalMediationAvailable', receiver='Credential', demands=[], returns='bool'),
    ],
    "clientDataJSON": [
        FieldCall(field='clientDataJSON', demands=['AuthenticatorResponse'], returns='ArrayBuffer'),
    ],
    "attestationObject": [
        FieldCall(field='attestationObject', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "getTransports": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getTransports', demands=['AuthenticatorAttestationResponse'], returns='str'),
    ],
    "getAuthenticatorData": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getAuthenticatorData', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "getPublicKey": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getPublicKey', demands=['AuthenticatorAttestationResponse'], returns='ArrayBuffer'),
    ],
    "getPublicKeyAlgorithm": [
        PrototypeCall(constructor='AuthenticatorAttestationResponse', fn='getPublicKeyAlgorithm', demands=['AuthenticatorAttestationResponse'], returns='COSEAlgorithmIdentifier'),
    ],
    "authenticatorData": [
        FieldCall(field='authenticatorData', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "signature": [
        FieldCall(field='signature', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "userHandle": [
        FieldCall(field='userHandle', demands=['AuthenticatorAssertionResponse'], returns='ArrayBuffer'),
    ],
    "IdleDetector": [
        NewCall(constructor='IdleDetector', demands=[], returns='IdleDetector'),
    ],
    "userState": [
        FieldCall(field='userState', demands=['IdleDetector'], returns='UserIdleState'),
    ],
    "screenState": [
        FieldCall(field='screenState', demands=['IdleDetector'], returns='ScreenIdleState'),
    ],
    "onchange": [
        FieldCall(field='onchange', demands=['IdleDetector'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['IdleDetector', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['AudioTrackList'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['AudioTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['VideoTrackList'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['VideoTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['TextTrackList'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['TextTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PermissionStatus'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PermissionStatus', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['MediaQueryList'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['MediaQueryList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['ScreenOrientation'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['ScreenOrientation', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['CookieStore'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['CookieStore', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PresentationAvailability'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PresentationAvailability', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['DevicePosture'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['DevicePosture', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['NetworkInformation'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['NetworkInformation', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PreferenceObject'], returns='EventHandler'),
        FieldCall(field='onchange', demands=['PreferenceObject', 'EventHandler'], returns='EventHandler'),
    ],
    "requestPermission": [
        DirectCall(fn='requestPermission', receiver='IdleDetector', demands=[], returns='PermissionState'),
        DirectCall(fn='requestPermission', receiver='Notification', demands=[], returns='NotificationPermission'),
        DirectCall(fn='requestPermission', receiver='Notification', demands=['NotificationPermissionCallback'], returns='NotificationPermission'),
        DirectCall(fn='requestPermission', receiver='DeviceOrientationEvent', demands=[], returns='PermissionState'),
        DirectCall(fn='requestPermission', receiver='DeviceOrientationEvent', demands=['bool'], returns='PermissionState'),
        DirectCall(fn='requestPermission', receiver='DeviceMotionEvent', demands=[], returns='PermissionState'),
    ],
    "start": [
        PrototypeCall(constructor='IdleDetector', fn='start', demands=['IdleDetector'], returns='None'),
        PrototypeCall(constructor='IdleDetector', fn='start', demands=['IdleDetector', 'dict'], returns='None'),
        FieldCall(field='start', demands=['HTMLOListElement'], returns='int'),
        FieldCall(field='start', demands=['HTMLOListElement', 'int'], returns='int'),
        PrototypeCall(constructor='TimeRanges', fn='start', demands=['TimeRanges', 'int'], returns='float'),
        PrototypeCall(constructor='MessagePort', fn='start', demands=['MessagePort'], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='start', demands=['HTMLMarqueeElement'], returns='None'),
        FieldCall(field='start', demands=['CSSScopeRule'], returns='CSSOMString'),
        PrototypeCall(constructor='Sensor', fn='start', demands=['Sensor'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='start', demands=['AudioScheduledSourceNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='start', demands=['AudioScheduledSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='AudioBufferSourceNode', fn='start', demands=['AudioBufferSourceNode', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SpeechRecognition', fn='start', demands=['SpeechRecognition'], returns='None'),
        PrototypeCall(constructor='SpeechRecognition', fn='start', demands=['SpeechRecognition', 'MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='PresentationRequest', fn='start', demands=['PresentationRequest'], returns='PresentationConnection'),
        PrototypeCall(constructor='MediaRecorder', fn='start', demands=['MediaRecorder'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='start', demands=['MediaRecorder', 'int'], returns='None'),
    ],
    "setStatus": [
        PrototypeCall(constructor='NavigatorLogin', fn='setStatus', demands=['NavigatorLogin', 'LoginStatus'], returns='None'),
    ],
    "type": [
        FieldCall(field='type', demands=['AudioSession'], returns='AudioSessionType'),
        FieldCall(field='type', demands=['AudioSession', 'AudioSessionType'], returns='AudioSessionType'),
        FieldCall(field='type', demands=['Summarizer'], returns='SummarizerType'),
        FieldCall(field='type', demands=['CryptoKey'], returns='KeyType'),
        FieldCall(field='type', demands=['GPUCompilationMessage'], returns='GPUCompilationMessageType'),
        FieldCall(field='type', demands=['GPUQuerySet'], returns='GPUQueryType'),
        FieldCall(field='type', demands=['Response'], returns='ResponseType'),
        FieldCall(field='type', demands=['EncodedAudioChunk'], returns='EncodedAudioChunkType'),
        FieldCall(field='type', demands=['EncodedVideoChunk'], returns='EncodedVideoChunkType'),
        FieldCall(field='type', demands=['ImageDecoder'], returns='str'),
        FieldCall(field='type', demands=['RTCEncodedVideoFrame'], returns='RTCEncodedVideoFrameType'),
        FieldCall(field='type', demands=['WakeLockSentinel'], returns='WakeLockType'),
        FieldCall(field='type', demands=['Client'], returns='ClientType'),
        FieldCall(field='type', demands=['RTCSessionDescription'], returns='RTCSdpType'),
        FieldCall(field='type', demands=['RTCIceCandidate'], returns='RTCIceCandidateType'),
        FieldCall(field='type', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLOListElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLOListElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLSourceElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLEmbedElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLObjectElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLButtonElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLScriptElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['DataTransferItem'], returns='str'),
        FieldCall(field='type', demands=['MimeType'], returns='str'),
        FieldCall(field='type', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='type', demands=['HTMLParamElement', 'str'], returns='str'),
        PrototypeCall(constructor='CSSNumericValue', fn='type', demands=['CSSNumericValue'], returns='dict'),
        FieldCall(field='type', demands=['PerformanceNavigationTiming'], returns='NavigationTimingType'),
        FieldCall(field='type', demands=['PerformanceNavigation'], returns='unsigned short'),
        FieldCall(field='type', demands=['WebGLActiveInfo'], returns='GLenum'),
        FieldCall(field='type', demands=['AudioSinkInfo'], returns='AudioSinkType'),
        FieldCall(field='type', demands=['BiquadFilterNode'], returns='BiquadFilterType'),
        FieldCall(field='type', demands=['BiquadFilterNode', 'BiquadFilterType'], returns='BiquadFilterType'),
        FieldCall(field='type', demands=['OscillatorNode'], returns='OscillatorType'),
        FieldCall(field='type', demands=['OscillatorNode', 'OscillatorType'], returns='OscillatorType'),
        FieldCall(field='type', demands=['MIDIPort'], returns='MIDIPortType'),
        FieldCall(field='type', demands=['DataCue'], returns='str'),
        FieldCall(field='type', demands=['ScreenOrientation'], returns='OrientationType'),
        FieldCall(field='type', demands=['USBEndpoint'], returns='USBEndpointType'),
        FieldCall(field='type', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='type', demands=['SVGStyleElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['SVGTransform'], returns='unsigned short'),
        FieldCall(field='type', demands=['SVGScriptElement'], returns='str'),
        FieldCall(field='type', demands=['SVGScriptElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['SVGAElement'], returns='str'),
        FieldCall(field='type', demands=['SVGAElement', 'str'], returns='str'),
        FieldCall(field='type', demands=['StyleSheet'], returns='CSSOMString'),
        FieldCall(field='type', demands=['CSSRule'], returns='unsigned short'),
        FieldCall(field='type', demands=['CSSPseudoElement'], returns='CSSOMString'),
        FieldCall(field='type', demands=['Blob'], returns='str'),
        FieldCall(field='type', demands=['Credential'], returns='str'),
        FieldCall(field='type', demands=['DevicePosture'], returns='DevicePostureType'),
        FieldCall(field='type', demands=['NetworkInformation'], returns='ConnectionType'),
        FieldCall(field='type', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='type', demands=['Selection'], returns='str'),
        FieldCall(field='type', demands=['Highlight'], returns='HighlightType'),
        FieldCall(field='type', demands=['Highlight', 'HighlightType'], returns='HighlightType'),
        FieldCall(field='type', demands=['Event'], returns='str'),
        FieldCall(field='type', demands=['MutationRecord'], returns='str'),
        FieldCall(field='type', demands=['SVGPathSegment'], returns='str'),
        FieldCall(field='type', demands=['SVGPathSegment', 'str'], returns='str'),
    ],
    "state": [
        FieldCall(field='state', demands=['AudioSession'], returns='AudioSessionState'),
        FieldCall(field='state', demands=['AudioDecoder'], returns='CodecState'),
        FieldCall(field='state', demands=['VideoDecoder'], returns='CodecState'),
        FieldCall(field='state', demands=['AudioEncoder'], returns='CodecState'),
        FieldCall(field='state', demands=['VideoEncoder'], returns='CodecState'),
        FieldCall(field='state', demands=['ServiceWorker'], returns='ServiceWorkerState'),
        FieldCall(field='state', demands=['RTCDtlsTransport'], returns='RTCDtlsTransportState'),
        FieldCall(field='state', demands=['RTCIceTransport'], returns='RTCIceTransportState'),
        FieldCall(field='state', demands=['RTCSctpTransport'], returns='RTCSctpTransportState'),
        FieldCall(field='state', demands=['History'], returns='*'),
        FieldCall(field='state', demands=['PopStateEvent'], returns='*'),
        FieldCall(field='state', demands=['PermissionStatus'], returns='PermissionState'),
        FieldCall(field='state', demands=['RemotePlayback'], returns='RemotePlaybackState'),
        FieldCall(field='state', demands=['BaseAudioContext'], returns='AudioContextState'),
        FieldCall(field='state', demands=['MIDIPort'], returns='MIDIPortDeviceState'),
        FieldCall(field='state', demands=['PressureRecord'], returns='PressureState'),
        FieldCall(field='state', demands=['PresentationConnection'], returns='PresentationConnectionState'),
        FieldCall(field='state', demands=['MediaRecorder'], returns='RecordingState'),
    ],
    "onstatechange": [
        FieldCall(field='onstatechange', demands=['AudioSession'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['AudioSession', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['ServiceWorker'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['ServiceWorker', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCDtlsTransport'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCDtlsTransport', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCIceTransport'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCIceTransport', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCSctpTransport'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['RTCSctpTransport', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['BaseAudioContext'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['BaseAudioContext', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['MIDIAccess'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['MIDIAccess', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['MIDIPort'], returns='EventHandler'),
        FieldCall(field='onstatechange', demands=['MIDIPort', 'EventHandler'], returns='EventHandler'),
    ],
    "create": [
        DirectCall(fn='create', receiver='Summarizer', demands=[], returns='Summarizer'),
        DirectCall(fn='create', receiver='Summarizer', demands=['dict'], returns='Summarizer'),
        DirectCall(fn='create', receiver='Writer', demands=[], returns='Writer'),
        DirectCall(fn='create', receiver='Writer', demands=['dict'], returns='Writer'),
        DirectCall(fn='create', receiver='Rewriter', demands=[], returns='Rewriter'),
        DirectCall(fn='create', receiver='Rewriter', demands=['dict'], returns='Rewriter'),
        DirectCall(fn='create', receiver='Translator', demands=['dict'], returns='Translator'),
        DirectCall(fn='create', receiver='LanguageDetector', demands=[], returns='LanguageDetector'),
        DirectCall(fn='create', receiver='LanguageDetector', demands=['dict'], returns='LanguageDetector'),
        PrototypeCall(constructor='CredentialsContainer', fn='create', demands=['CredentialsContainer'], returns='Credential'),
        PrototypeCall(constructor='CredentialsContainer', fn='create', demands=['CredentialsContainer', 'dict'], returns='Credential'),
    ],
    "availability": [
        DirectCall(fn='availability', receiver='Summarizer', demands=[], returns='Availability'),
        DirectCall(fn='availability', receiver='Summarizer', demands=['dict'], returns='Availability'),
        DirectCall(fn='availability', receiver='Writer', demands=[], returns='Availability'),
        DirectCall(fn='availability', receiver='Writer', demands=['dict'], returns='Availability'),
        DirectCall(fn='availability', receiver='Rewriter', demands=[], returns='Availability'),
        DirectCall(fn='availability', receiver='Rewriter', demands=['dict'], returns='Availability'),
        DirectCall(fn='availability', receiver='Translator', demands=['dict'], returns='Availability'),
        DirectCall(fn='availability', receiver='LanguageDetector', demands=[], returns='Availability'),
        DirectCall(fn='availability', receiver='LanguageDetector', demands=['dict'], returns='Availability'),
    ],
    "summarize": [
        PrototypeCall(constructor='Summarizer', fn='summarize', demands=['Summarizer', 'str'], returns='str'),
        PrototypeCall(constructor='Summarizer', fn='summarize', demands=['Summarizer', 'str', 'dict'], returns='str'),
    ],
    "summarizeStreaming": [
        PrototypeCall(constructor='Summarizer', fn='summarizeStreaming', demands=['Summarizer', 'str'], returns='ReadableStream'),
        PrototypeCall(constructor='Summarizer', fn='summarizeStreaming', demands=['Summarizer', 'str', 'dict'], returns='ReadableStream'),
    ],
    "sharedContext": [
        FieldCall(field='sharedContext', demands=['Summarizer'], returns='str'),
        FieldCall(field='sharedContext', demands=['Writer'], returns='str'),
        FieldCall(field='sharedContext', demands=['Rewriter'], returns='str'),
    ],
    "format": [
        FieldCall(field='format', demands=['Summarizer'], returns='SummarizerFormat'),
        FieldCall(field='format', demands=['Writer'], returns='WriterFormat'),
        FieldCall(field='format', demands=['Rewriter'], returns='RewriterFormat'),
        FieldCall(field='format', demands=['GPUTexture'], returns='GPUTextureFormat'),
        FieldCall(field='format', demands=['AudioData'], returns='AudioSampleFormat'),
        FieldCall(field='format', demands=['VideoFrame'], returns='VideoPixelFormat'),
    ],
    "length": [
        FieldCall(field='length', demands=['Summarizer'], returns='SummarizerLength'),
        FieldCall(field='length', demands=['Writer'], returns='WriterLength'),
        FieldCall(field='length', demands=['Rewriter'], returns='RewriterLength'),
        FieldCall(field='length', demands=['Table'], returns='int'),
        FieldCall(field='length', demands=['DOMRectList'], returns='int'),
        FieldCall(field='length', demands=['GPUCompilationMessage'], returns='int'),
        FieldCall(field='length', demands=['CSSKeyframesRule'], returns='int'),
        FieldCall(field='length', demands=['ImageTrackList'], returns='int'),
        FieldCall(field='length', demands=['HTMLAllCollection'], returns='int'),
        FieldCall(field='length', demands=['HTMLOptionsCollection'], returns='int'),
        FieldCall(field='length', demands=['HTMLOptionsCollection', 'int'], returns='int'),
        FieldCall(field='length', demands=['DOMStringList'], returns='int'),
        FieldCall(field='length', demands=['AudioTrackList'], returns='int'),
        FieldCall(field='length', demands=['VideoTrackList'], returns='int'),
        FieldCall(field='length', demands=['TextTrackList'], returns='int'),
        FieldCall(field='length', demands=['TextTrackCueList'], returns='int'),
        FieldCall(field='length', demands=['TimeRanges'], returns='int'),
        FieldCall(field='length', demands=['HTMLFormElement'], returns='int'),
        FieldCall(field='length', demands=['HTMLSelectElement'], returns='int'),
        FieldCall(field='length', demands=['HTMLSelectElement', 'int'], returns='int'),
        FieldCall(field='length', demands=['DataTransferItemList'], returns='int'),
        FieldCall(field='length', demands=['Window'], returns='int'),
        FieldCall(field='length', demands=['History'], returns='int'),
        FieldCall(field='length', demands=['PluginArray'], returns='int'),
        FieldCall(field='length', demands=['MimeTypeArray'], returns='int'),
        FieldCall(field='length', demands=['Plugin'], returns='int'),
        FieldCall(field='length', demands=['Storage'], returns='int'),
        FieldCall(field='length', demands=['CSSUnparsedValue'], returns='int'),
        FieldCall(field='length', demands=['CSSNumericArray'], returns='int'),
        FieldCall(field='length', demands=['CSSTransformValue'], returns='int'),
        FieldCall(field='length', demands=['CSSPerspective'], returns='CSSPerspectiveValue'),
        FieldCall(field='length', demands=['CSSPerspective', 'CSSPerspectiveValue'], returns='CSSPerspectiveValue'),
        FieldCall(field='length', demands=['OfflineAudioContext'], returns='int'),
        FieldCall(field='length', demands=['AudioBuffer'], returns='int'),
        FieldCall(field='length', demands=['AnimationNodeList'], returns='int'),
        FieldCall(field='length', demands=['FontFacePalette'], returns='int'),
        FieldCall(field='length', demands=['FontFacePalettes'], returns='int'),
        FieldCall(field='length', demands=['TouchList'], returns='int'),
        FieldCall(field='length', demands=['SpeechRecognitionResult'], returns='int'),
        FieldCall(field='length', demands=['SpeechRecognitionResultList'], returns='int'),
        FieldCall(field='length', demands=['SpeechGrammarList'], returns='int'),
        FieldCall(field='length', demands=['SVGNumberList'], returns='int'),
        FieldCall(field='length', demands=['SVGLengthList'], returns='int'),
        FieldCall(field='length', demands=['SVGStringList'], returns='int'),
        FieldCall(field='length', demands=['SVGTransformList'], returns='int'),
        FieldCall(field='length', demands=['SVGPointList'], returns='int'),
        PrototypeCall(constructor='SharedStorage', fn='length', demands=['SharedStorage'], returns='int'),
        FieldCall(field='length', demands=['MediaList'], returns='int'),
        FieldCall(field='length', demands=['StyleSheetList'], returns='int'),
        FieldCall(field='length', demands=['CSSRuleList'], returns='int'),
        FieldCall(field='length', demands=['CSSStyleDeclaration'], returns='int'),
        FieldCall(field='length', demands=['XRInputSourceArray'], returns='int'),
        FieldCall(field='length', demands=['FileList'], returns='int'),
        FieldCall(field='length', demands=['NodeList'], returns='int'),
        FieldCall(field='length', demands=['HTMLCollection'], returns='int'),
        FieldCall(field='length', demands=['NamedNodeMap'], returns='int'),
        FieldCall(field='length', demands=['CharacterData'], returns='int'),
        FieldCall(field='length', demands=['DOMTokenList'], returns='int'),
        FieldCall(field='length', demands=['SourceBufferList'], returns='int'),
    ],
    "expectedInputLanguages": [
        FieldCall(field='expectedInputLanguages', demands=['Summarizer'], returns='str'),
        FieldCall(field='expectedInputLanguages', demands=['Writer'], returns='str'),
        FieldCall(field='expectedInputLanguages', demands=['Rewriter'], returns='str'),
        FieldCall(field='expectedInputLanguages', demands=['LanguageDetector'], returns='str'),
    ],
    "expectedContextLanguages": [
        FieldCall(field='expectedContextLanguages', demands=['Summarizer'], returns='str'),
        FieldCall(field='expectedContextLanguages', demands=['Writer'], returns='str'),
        FieldCall(field='expectedContextLanguages', demands=['Rewriter'], returns='str'),
    ],
    "outputLanguage": [
        FieldCall(field='outputLanguage', demands=['Summarizer'], returns='str'),
        FieldCall(field='outputLanguage', demands=['Writer'], returns='str'),
        FieldCall(field='outputLanguage', demands=['Rewriter'], returns='str'),
    ],
    "measureInputUsage": [
        PrototypeCall(constructor='Summarizer', fn='measureInputUsage', demands=['Summarizer', 'str'], returns='float'),
        PrototypeCall(constructor='Summarizer', fn='measureInputUsage', demands=['Summarizer', 'str', 'dict'], returns='float'),
        PrototypeCall(constructor='Writer', fn='measureInputUsage', demands=['Writer', 'str'], returns='float'),
        PrototypeCall(constructor='Writer', fn='measureInputUsage', demands=['Writer', 'str', 'dict'], returns='float'),
        PrototypeCall(constructor='Rewriter', fn='measureInputUsage', demands=['Rewriter', 'str'], returns='float'),
        PrototypeCall(constructor='Rewriter', fn='measureInputUsage', demands=['Rewriter', 'str', 'dict'], returns='float'),
        PrototypeCall(constructor='Translator', fn='measureInputUsage', demands=['Translator', 'str'], returns='float'),
        PrototypeCall(constructor='Translator', fn='measureInputUsage', demands=['Translator', 'str', 'dict'], returns='float'),
        PrototypeCall(constructor='LanguageDetector', fn='measureInputUsage', demands=['LanguageDetector', 'str'], returns='float'),
        PrototypeCall(constructor='LanguageDetector', fn='measureInputUsage', demands=['LanguageDetector', 'str', 'dict'], returns='float'),
    ],
    "inputQuota": [
        FieldCall(field='inputQuota', demands=['Summarizer'], returns='float'),
        FieldCall(field='inputQuota', demands=['Writer'], returns='float'),
        FieldCall(field='inputQuota', demands=['Rewriter'], returns='float'),
        FieldCall(field='inputQuota', demands=['Translator'], returns='float'),
        FieldCall(field='inputQuota', demands=['LanguageDetector'], returns='float'),
    ],
    "destroy": [
        PrototypeCall(constructor='Summarizer', fn='destroy', demands=['Summarizer'], returns='None'),
        PrototypeCall(constructor='Writer', fn='destroy', demands=['Writer'], returns='None'),
        PrototypeCall(constructor='Rewriter', fn='destroy', demands=['Rewriter'], returns='None'),
        PrototypeCall(constructor='XRCompositionLayer', fn='destroy', demands=['XRCompositionLayer'], returns='None'),
        PrototypeCall(constructor='MLContext', fn='destroy', demands=['MLContext'], returns='None'),
        PrototypeCall(constructor='MLGraph', fn='destroy', demands=['MLGraph'], returns='None'),
        PrototypeCall(constructor='MLTensor', fn='destroy', demands=['MLTensor'], returns='None'),
        PrototypeCall(constructor='GPUDevice', fn='destroy', demands=['GPUDevice'], returns='None'),
        PrototypeCall(constructor='GPUBuffer', fn='destroy', demands=['GPUBuffer'], returns='None'),
        PrototypeCall(constructor='GPUTexture', fn='destroy', demands=['GPUTexture'], returns='None'),
        PrototypeCall(constructor='GPUQuerySet', fn='destroy', demands=['GPUQuerySet'], returns='None'),
        PrototypeCall(constructor='CloseWatcher', fn='destroy', demands=['CloseWatcher'], returns='None'),
        PrototypeCall(constructor='Translator', fn='destroy', demands=['Translator'], returns='None'),
        PrototypeCall(constructor='LanguageDetector', fn='destroy', demands=['LanguageDetector'], returns='None'),
    ],
    "write": [
        PrototypeCall(constructor='Writer', fn='write', demands=['Writer', 'str'], returns='str'),
        PrototypeCall(constructor='Writer', fn='write', demands=['Writer', 'str', 'dict'], returns='str'),
        FieldCall(field='write', demands=['BluetoothCharacteristicProperties'], returns='bool'),
        PrototypeCall(constructor='Clipboard', fn='write', demands=['Clipboard', 'ClipboardItems'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='write', demands=['WritableStreamDefaultWriter'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='write', demands=['WritableStreamDefaultWriter', '*'], returns='None'),
        PrototypeCall(constructor='NDEFReader', fn='write', demands=['NDEFReader', 'NDEFMessageSource'], returns='None'),
        PrototypeCall(constructor='NDEFReader', fn='write', demands=['NDEFReader', 'NDEFMessageSource', 'dict'], returns='None'),
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='write', demands=['FileSystemWritableFileStream', 'FileSystemWriteChunkType'], returns='None'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='write', demands=['FileSystemSyncAccessHandle', 'AllowSharedBufferSource'], returns='int'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='write', demands=['FileSystemSyncAccessHandle', 'AllowSharedBufferSource', 'dict'], returns='int'),
    ],
    "writeStreaming": [
        PrototypeCall(constructor='Writer', fn='writeStreaming', demands=['Writer', 'str'], returns='ReadableStream'),
        PrototypeCall(constructor='Writer', fn='writeStreaming', demands=['Writer', 'str', 'dict'], returns='ReadableStream'),
    ],
    "tone": [
        FieldCall(field='tone', demands=['Writer'], returns='WriterTone'),
        FieldCall(field='tone', demands=['Rewriter'], returns='RewriterTone'),
        FieldCall(field='tone', demands=['RTCDTMFToneChangeEvent'], returns='str'),
    ],
    "rewrite": [
        PrototypeCall(constructor='Rewriter', fn='rewrite', demands=['Rewriter', 'str'], returns='str'),
        PrototypeCall(constructor='Rewriter', fn='rewrite', demands=['Rewriter', 'str', 'dict'], returns='str'),
    ],
    "rewriteStreaming": [
        PrototypeCall(constructor='Rewriter', fn='rewriteStreaming', demands=['Rewriter', 'str'], returns='ReadableStream'),
        PrototypeCall(constructor='Rewriter', fn='rewriteStreaming', demands=['Rewriter', 'str', 'dict'], returns='ReadableStream'),
    ],
    "ondownloadprogress": [
        FieldCall(field='ondownloadprogress', demands=['CreateMonitor'], returns='EventHandler'),
        FieldCall(field='ondownloadprogress', demands=['CreateMonitor', 'EventHandler'], returns='EventHandler'),
    ],
    "subtle": [
        FieldCall(field='subtle', demands=['Crypto'], returns='SubtleCrypto'),
    ],
    "getRandomValues": [
        PrototypeCall(constructor='Crypto', fn='getRandomValues', demands=['Crypto', 'ArrayBufferView'], returns='ArrayBufferView'),
    ],
    "randomUUID": [
        PrototypeCall(constructor='Crypto', fn='randomUUID', demands=['Crypto'], returns='str'),
    ],
    "extractable": [
        FieldCall(field='extractable', demands=['CryptoKey'], returns='bool'),
    ],
    "algorithm": [
        FieldCall(field='algorithm', demands=['CryptoKey'], returns='object'),
    ],
    "usages": [
        FieldCall(field='usages', demands=['CryptoKey'], returns='object'),
    ],
    "encrypt": [
        PrototypeCall(constructor='SubtleCrypto', fn='encrypt', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'BufferSource'], returns='ArrayBuffer'),
    ],
    "decrypt": [
        PrototypeCall(constructor='SubtleCrypto', fn='decrypt', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'BufferSource'], returns='ArrayBuffer'),
    ],
    "sign": [
        PrototypeCall(constructor='SubtleCrypto', fn='sign', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'BufferSource'], returns='ArrayBuffer'),
    ],
    "verify": [
        PrototypeCall(constructor='SubtleCrypto', fn='verify', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'BufferSource', 'BufferSource'], returns='bool'),
    ],
    "digest": [
        PrototypeCall(constructor='SubtleCrypto', fn='digest', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'BufferSource'], returns='ArrayBuffer'),
    ],
    "generateKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='generateKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'bool', 'KeyUsage'], returns='CryptoKey'),
    ],
    "deriveKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='deriveKey', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'AlgorithmIdentifier', 'bool', 'KeyUsage'], returns='CryptoKey'),
    ],
    "deriveBits": [
        PrototypeCall(constructor='SubtleCrypto', fn='deriveBits', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey'], returns='ArrayBuffer'),
        PrototypeCall(constructor='SubtleCrypto', fn='deriveBits', demands=['SubtleCrypto', 'AlgorithmIdentifier', 'CryptoKey', 'int'], returns='ArrayBuffer'),
    ],
    "importKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', 'KeyFormat', 'BufferSource', 'AlgorithmIdentifier', 'bool', 'KeyUsage'], returns='CryptoKey'),
        PrototypeCall(constructor='SubtleCrypto', fn='importKey', demands=['SubtleCrypto', 'KeyFormat', 'dict', 'AlgorithmIdentifier', 'bool', 'KeyUsage'], returns='CryptoKey'),
    ],
    "exportKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='exportKey', demands=['SubtleCrypto', 'KeyFormat', 'CryptoKey'], returns='ArrayBuffer'),
    ],
    "wrapKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='wrapKey', demands=['SubtleCrypto', 'KeyFormat', 'CryptoKey', 'CryptoKey', 'AlgorithmIdentifier'], returns='ArrayBuffer'),
    ],
    "unwrapKey": [
        PrototypeCall(constructor='SubtleCrypto', fn='unwrapKey', demands=['SubtleCrypto', 'KeyFormat', 'BufferSource', 'CryptoKey', 'AlgorithmIdentifier', 'AlgorithmIdentifier', 'bool', 'KeyUsage'], returns='CryptoKey'),
    ],
    "Module": [
        NewCall(constructor='Module', demands=['BufferSource'], returns='Module'),
    ],
    "exports": [
        DirectCall(fn='exports', receiver='Module', demands=['Module'], returns='dict'),
        FieldCall(field='exports', demands=['Instance'], returns='object'),
    ],
    "imports": [
        DirectCall(fn='imports', receiver='Module', demands=['Module'], returns='dict'),
    ],
    "customSections": [
        DirectCall(fn='customSections', receiver='Module', demands=['Module', 'str'], returns='ArrayBuffer'),
    ],
    "Instance": [
        NewCall(constructor='Instance', demands=['Module'], returns='Instance'),
        NewCall(constructor='Instance', demands=['Module', 'object'], returns='Instance'),
    ],
    "Memory": [
        NewCall(constructor='Memory', demands=['dict'], returns='Memory'),
    ],
    "grow": [
        PrototypeCall(constructor='Memory', fn='grow', demands=['Memory', 'int'], returns='int'),
        PrototypeCall(constructor='Table', fn='grow', demands=['Table', 'int'], returns='int'),
        PrototypeCall(constructor='Table', fn='grow', demands=['Table', 'int', '*'], returns='int'),
    ],
    "toFixedLengthBuffer": [
        PrototypeCall(constructor='Memory', fn='toFixedLengthBuffer', demands=['Memory'], returns='ArrayBuffer'),
    ],
    "toResizableBuffer": [
        PrototypeCall(constructor='Memory', fn='toResizableBuffer', demands=['Memory'], returns='ArrayBuffer'),
    ],
    "buffer": [
        FieldCall(field='buffer', demands=['Memory'], returns='ArrayBuffer'),
        FieldCall(field='buffer', demands=['AudioBufferSourceNode'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['AudioBufferSourceNode', 'AudioBuffer'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['ConvolverNode'], returns='AudioBuffer'),
        FieldCall(field='buffer', demands=['ConvolverNode', 'AudioBuffer'], returns='AudioBuffer'),
    ],
    "Table": [
        NewCall(constructor='Table', demands=['dict'], returns='Table'),
        NewCall(constructor='Table', demands=['dict', '*'], returns='Table'),
    ],
    "get": [
        PrototypeCall(constructor='Table', fn='get', demands=['Table', 'int'], returns='*'),
        PrototypeCall(constructor='XRHand', fn='get', demands=['XRHand', 'XRHandJoint'], returns='XRJointSpace'),
        PrototypeCall(constructor='Headers', fn='get', demands=['Headers', 'str'], returns='str'),
        PrototypeCall(constructor='Sanitizer', fn='get', demands=['Sanitizer'], returns='dict'),
        PrototypeCall(constructor='IDBObjectStore', fn='get', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='get', demands=['IDBIndex', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='URLSearchParams', fn='get', demands=['URLSearchParams', 'str'], returns='str'),
        PrototypeCall(constructor='Clients', fn='get', demands=['Clients', 'str'], returns='Client'),
        PrototypeCall(constructor='CustomElementRegistry', fn='get', demands=['CustomElementRegistry', 'str'], returns='CustomElementConstructor'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='get', demands=['StylePropertyMapReadOnly', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='get', demands=['FormData', 'str'], returns='FormDataEntryValue'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='get', demands=['MediaKeyStatusMap', 'BufferSource'], returns='MediaKeyStatus'),
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore', 'str'], returns='dict'),
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore'], returns='dict'),
        PrototypeCall(constructor='CookieStore', fn='get', demands=['CookieStore', 'dict'], returns='dict'),
        PrototypeCall(constructor='SharedStorage', fn='get', demands=['SharedStorage', 'str'], returns='str'),
        PrototypeCall(constructor='CredentialsContainer', fn='get', demands=['CredentialsContainer'], returns='Credential'),
        PrototypeCall(constructor='CredentialsContainer', fn='get', demands=['CredentialsContainer', 'dict'], returns='Credential'),
        PrototypeCall(constructor='BackgroundFetchManager', fn='get', demands=['BackgroundFetchManager', 'str'], returns='BackgroundFetchRegistration'),
    ],
    "set": [
        PrototypeCall(constructor='Table', fn='set', demands=['Table', 'int'], returns='None'),
        PrototypeCall(constructor='Table', fn='set', demands=['Table', 'int', '*'], returns='None'),
        PrototypeCall(constructor='Headers', fn='set', demands=['Headers', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='set', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='set', demands=['StylePropertyMap', 'str', 'CSSStyleValue'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='set', demands=['StylePropertyMap', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='CSSFontFeatureValuesMap', fn='set', demands=['CSSFontFeatureValuesMap', 'CSSOMString', 'int'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'Blob'], returns='None'),
        PrototypeCall(constructor='FormData', fn='set', demands=['FormData', 'str', 'Blob', 'str'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='set', demands=['CookieStore', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='set', demands=['CookieStore', 'dict'], returns='None'),
        PrototypeCall(constructor='SharedStorage', fn='set', demands=['SharedStorage', 'str', 'str'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='set', demands=['SharedStorage', 'str', 'str', 'dict'], returns='*'),
    ],
    "Global": [
        NewCall(constructor='Global', demands=['dict'], returns='Global'),
        NewCall(constructor='Global', demands=['dict', '*'], returns='Global'),
    ],
    "valueOf": [
        PrototypeCall(constructor='Global', fn='valueOf', demands=['Global'], returns='*'),
    ],
    "value": [
        FieldCall(field='value', demands=['Global'], returns='*'),
        FieldCall(field='value', demands=['Global', '*'], returns='*'),
        FieldCall(field='value', demands=['GamepadButton'], returns='float'),
        FieldCall(field='value', demands=['IDBRecord'], returns='*'),
        FieldCall(field='value', demands=['IDBCursorWithValue'], returns='*'),
        FieldCall(field='value', demands=['ValueEvent'], returns='*'),
        FieldCall(field='value', demands=['BluetoothRemoteGATTCharacteristic'], returns='DataView'),
        FieldCall(field='value', demands=['BluetoothRemoteGATTDescriptor'], returns='DataView'),
        FieldCall(field='value', demands=['Baseline'], returns='float'),
        FieldCall(field='value', demands=['RdfLiteral'], returns='str'),
        FieldCall(field='value', demands=['RadioNodeList'], returns='str'),
        FieldCall(field='value', demands=['RadioNodeList', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLLIElement'], returns='int'),
        FieldCall(field='value', demands=['HTMLLIElement', 'int'], returns='int'),
        FieldCall(field='value', demands=['HTMLDataElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLDataElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLButtonElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLSelectElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLOptionElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLTextAreaElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLOutputElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='value', demands=['HTMLProgressElement', 'float'], returns='float'),
        FieldCall(field='value', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='value', demands=['HTMLMeterElement', 'float'], returns='float'),
        FieldCall(field='value', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='value', demands=['HTMLParamElement', 'str'], returns='str'),
        FieldCall(field='value', demands=['CSSKeywordValue'], returns='str'),
        FieldCall(field='value', demands=['CSSKeywordValue', 'str'], returns='str'),
        FieldCall(field='value', demands=['CSSUnitValue'], returns='float'),
        FieldCall(field='value', demands=['CSSUnitValue', 'float'], returns='float'),
        FieldCall(field='value', demands=['CSSMathNegate'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['CSSMathInvert'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['CSSMathClamp'], returns='CSSNumericValue'),
        FieldCall(field='value', demands=['AudioParam'], returns='float'),
        FieldCall(field='value', demands=['AudioParam', 'float'], returns='float'),
        FieldCall(field='value', demands=['DataCue'], returns='*'),
        FieldCall(field='value', demands=['DataCue', '*'], returns='*'),
        FieldCall(field='value', demands=['LayoutShift'], returns='float'),
        FieldCall(field='value', demands=['SVGNumber'], returns='float'),
        FieldCall(field='value', demands=['SVGNumber', 'float'], returns='float'),
        FieldCall(field='value', demands=['SVGLength'], returns='float'),
        FieldCall(field='value', demands=['SVGLength', 'float'], returns='float'),
        FieldCall(field='value', demands=['SVGAngle'], returns='float'),
        FieldCall(field='value', demands=['SVGAngle', 'float'], returns='float'),
        FieldCall(field='value', demands=['PresentationAvailability'], returns='bool'),
        FieldCall(field='value', demands=['PreferenceObject'], returns='str'),
        FieldCall(field='value', demands=['Attr'], returns='str'),
        FieldCall(field='value', demands=['Attr', 'str'], returns='str'),
        FieldCall(field='value', demands=['DOMTokenList'], returns='str'),
        FieldCall(field='value', demands=['DOMTokenList', 'str'], returns='str'),
    ],
    "UIEvent": [
        NewCall(constructor='UIEvent', demands=['str'], returns='UIEvent'),
        NewCall(constructor='UIEvent', demands=['str', 'dict'], returns='UIEvent'),
    ],
    "view": [
        FieldCall(field='view', demands=['UIEvent'], returns='Window'),
        FieldCall(field='view', demands=['TimeEvent'], returns='WindowProxy'),
        FieldCall(field='view', demands=['ReadableStreamBYOBRequest'], returns='ArrayBufferView'),
    ],
    "detail": [
        FieldCall(field='detail', demands=['UIEvent'], returns='int'),
        FieldCall(field='detail', demands=['TimeEvent'], returns='int'),
        FieldCall(field='detail', demands=['PerformanceMark'], returns='*'),
        FieldCall(field='detail', demands=['PerformanceMeasure'], returns='*'),
        FieldCall(field='detail', demands=['CustomEvent'], returns='*'),
    ],
    "FocusEvent": [
        NewCall(constructor='FocusEvent', demands=['str'], returns='FocusEvent'),
        NewCall(constructor='FocusEvent', demands=['str', 'dict'], returns='FocusEvent'),
    ],
    "relatedTarget": [
        FieldCall(field='relatedTarget', demands=['FocusEvent'], returns='EventTarget'),
        FieldCall(field='relatedTarget', demands=['MouseEvent'], returns='EventTarget'),
        FieldCall(field='relatedTarget', demands=['NavigationEvent'], returns='EventTarget'),
    ],
    "MouseEvent": [
        NewCall(constructor='MouseEvent', demands=['str'], returns='MouseEvent'),
        NewCall(constructor='MouseEvent', demands=['str', 'dict'], returns='MouseEvent'),
    ],
    "screenX": [
        FieldCall(field='screenX', demands=['MouseEvent'], returns='int'),
        FieldCall(field='screenX', demands=['Touch'], returns='float'),
    ],
    "screenY": [
        FieldCall(field='screenY', demands=['MouseEvent'], returns='int'),
        FieldCall(field='screenY', demands=['Touch'], returns='float'),
    ],
    "clientX": [
        FieldCall(field='clientX', demands=['MouseEvent'], returns='int'),
        FieldCall(field='clientX', demands=['Touch'], returns='float'),
    ],
    "clientY": [
        FieldCall(field='clientY', demands=['MouseEvent'], returns='int'),
        FieldCall(field='clientY', demands=['Touch'], returns='float'),
    ],
    "layerX": [
        FieldCall(field='layerX', demands=['MouseEvent'], returns='int'),
    ],
    "layerY": [
        FieldCall(field='layerY', demands=['MouseEvent'], returns='int'),
    ],
    "ctrlKey": [
        FieldCall(field='ctrlKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='ctrlKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='ctrlKey', demands=['TouchEvent'], returns='bool'),
    ],
    "shiftKey": [
        FieldCall(field='shiftKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='shiftKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='shiftKey', demands=['TouchEvent'], returns='bool'),
    ],
    "altKey": [
        FieldCall(field='altKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='altKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='altKey', demands=['TouchEvent'], returns='bool'),
    ],
    "metaKey": [
        FieldCall(field='metaKey', demands=['MouseEvent'], returns='bool'),
        FieldCall(field='metaKey', demands=['KeyboardEvent'], returns='bool'),
        FieldCall(field='metaKey', demands=['TouchEvent'], returns='bool'),
    ],
    "button": [
        FieldCall(field='button', demands=['MouseEvent'], returns='short'),
    ],
    "buttons": [
        FieldCall(field='buttons', demands=['MouseEvent'], returns='unsigned short'),
        FieldCall(field='buttons', demands=['Gamepad'], returns='GamepadButton'),
    ],
    "getModifierState": [
        PrototypeCall(constructor='MouseEvent', fn='getModifierState', demands=['MouseEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='KeyboardEvent', fn='getModifierState', demands=['KeyboardEvent', 'str'], returns='bool'),
        PrototypeCall(constructor='TouchEvent', fn='getModifierState', demands=['TouchEvent', 'str'], returns='bool'),
    ],
    "WheelEvent": [
        NewCall(constructor='WheelEvent', demands=['str'], returns='WheelEvent'),
        NewCall(constructor='WheelEvent', demands=['str', 'dict'], returns='WheelEvent'),
    ],
    "deltaX": [
        FieldCall(field='deltaX', demands=['WheelEvent'], returns='float'),
    ],
    "deltaY": [
        FieldCall(field='deltaY', demands=['WheelEvent'], returns='float'),
    ],
    "deltaZ": [
        FieldCall(field='deltaZ', demands=['WheelEvent'], returns='float'),
    ],
    "deltaMode": [
        FieldCall(field='deltaMode', demands=['WheelEvent'], returns='int'),
    ],
    "InputEvent": [
        NewCall(constructor='InputEvent', demands=['str'], returns='InputEvent'),
        NewCall(constructor='InputEvent', demands=['str', 'dict'], returns='InputEvent'),
    ],
    "isComposing": [
        FieldCall(field='isComposing', demands=['InputEvent'], returns='bool'),
        FieldCall(field='isComposing', demands=['KeyboardEvent'], returns='bool'),
    ],
    "inputType": [
        FieldCall(field='inputType', demands=['InputEvent'], returns='str'),
    ],
    "KeyboardEvent": [
        NewCall(constructor='KeyboardEvent', demands=['str'], returns='KeyboardEvent'),
        NewCall(constructor='KeyboardEvent', demands=['str', 'dict'], returns='KeyboardEvent'),
    ],
    "key": [
        FieldCall(field='key', demands=['KeyboardEvent'], returns='str'),
        FieldCall(field='key', demands=['IDBRecord'], returns='*'),
        FieldCall(field='key', demands=['IDBCursor'], returns='*'),
        FieldCall(field='key', demands=['NavigationHistoryEntry'], returns='str'),
        FieldCall(field='key', demands=['NavigationDestination'], returns='str'),
        PrototypeCall(constructor='Storage', fn='key', demands=['Storage', 'int'], returns='str'),
        FieldCall(field='key', demands=['StorageEvent'], returns='str'),
    ],
    "code": [
        FieldCall(field='code', demands=['KeyboardEvent'], returns='str'),
        FieldCall(field='code', demands=['GeolocationPositionError'], returns='unsigned short'),
        FieldCall(field='code', demands=['MediaError'], returns='unsigned short'),
        FieldCall(field='code', demands=['OTPCredential'], returns='str'),
        FieldCall(field='code', demands=['CloseEvent'], returns='unsigned short'),
        FieldCall(field='code', demands=['DOMException'], returns='unsigned short'),
    ],
    "location": [
        FieldCall(field='location', demands=['KeyboardEvent'], returns='int'),
        FieldCall(field='location', demands=['Window'], returns='Location'),
        FieldCall(field='location', demands=['WorkerGlobalScope'], returns='WorkerLocation'),
    ],
    "repeat": [
        FieldCall(field='repeat', demands=['KeyboardEvent'], returns='bool'),
    ],
    "CompositionEvent": [
        NewCall(constructor='CompositionEvent', demands=['str'], returns='CompositionEvent'),
        NewCall(constructor='CompositionEvent', demands=['str', 'dict'], returns='CompositionEvent'),
    ],
    "initTextEvent": [
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window'], returns='None'),
        PrototypeCall(constructor='TextEvent', fn='initTextEvent', demands=['TextEvent', 'str', 'bool', 'bool', 'Window', 'str'], returns='None'),
    ],
    "isFile": [
        FieldCall(field='isFile', demands=['FileSystemEntry'], returns='bool'),
    ],
    "isDirectory": [
        FieldCall(field='isDirectory', demands=['FileSystemEntry'], returns='bool'),
    ],
    "name": [
        FieldCall(field='name', demands=['FileSystemEntry'], returns='str'),
        FieldCall(field='name', demands=['FileSystem'], returns='str'),
        FieldCall(field='name', demands=['CSSColorProfileRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['CSSFunctionRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['PerformanceEntry'], returns='str'),
        FieldCall(field='name', demands=['CSSKeyframesRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['CSSKeyframesRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='name', demands=['PerformanceLongTaskTiming'], returns='str'),
        FieldCall(field='name', demands=['TaskAttributionTiming'], returns='str'),
        FieldCall(field='name', demands=['BluetoothLEScanFilter'], returns='str'),
        FieldCall(field='name', demands=['Lock'], returns='str'),
        FieldCall(field='name', demands=['IDBDatabase'], returns='str'),
        FieldCall(field='name', demands=['IDBObjectStore'], returns='str'),
        FieldCall(field='name', demands=['IDBObjectStore', 'str'], returns='str'),
        FieldCall(field='name', demands=['IDBIndex'], returns='str'),
        FieldCall(field='name', demands=['IDBIndex', 'str'], returns='str'),
        FieldCall(field='name', demands=['BluetoothDevice'], returns='str'),
        FieldCall(field='name', demands=['BluetoothAdvertisingEvent'], returns='str'),
        FieldCall(field='name', demands=['Baseline'], returns='str'),
        FieldCall(field='name', demands=['Font'], returns='str'),
        FieldCall(field='name', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLMetaElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLObjectElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLMapElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLMapElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLButtonElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLSelectElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLTextAreaElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLOutputElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFieldSetElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLDetailsElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLDetailsElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLSlotElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLSlotElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['VisibilityStateEntry'], returns='str'),
        FieldCall(field='name', demands=['Window'], returns='str'),
        FieldCall(field='name', demands=['Window', 'str'], returns='str'),
        FieldCall(field='name', demands=['NotRestoredReasons'], returns='str'),
        FieldCall(field='name', demands=['Plugin'], returns='str'),
        FieldCall(field='name', demands=['BroadcastChannel'], returns='str'),
        FieldCall(field='name', demands=['DedicatedWorkerGlobalScope'], returns='str'),
        FieldCall(field='name', demands=['SharedWorkerGlobalScope'], returns='str'),
        FieldCall(field='name', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLFrameElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='name', demands=['HTMLParamElement', 'str'], returns='str'),
        FieldCall(field='name', demands=['RTCIdentityAssertion'], returns='str'),
        FieldCall(field='name', demands=['RTCIdentityAssertion', 'str'], returns='str'),
        FieldCall(field='name', demands=['PerformanceServerTiming'], returns='str'),
        FieldCall(field='name', demands=['PermissionStatus'], returns='str'),
        FieldCall(field='name', demands=['NamedFlow'], returns='CSSOMString'),
        FieldCall(field='name', demands=['CSSFontPaletteValuesRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['WebGLActiveInfo'], returns='str'),
        FieldCall(field='name', demands=['StorageBucket'], returns='str'),
        FieldCall(field='name', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='name', demands=['PerformanceLongAnimationFrameTiming'], returns='str'),
        FieldCall(field='name', demands=['PerformanceScriptTiming'], returns='str'),
        FieldCall(field='name', demands=['CSSPositionTryRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['MIDIPort'], returns='str'),
        FieldCall(field='name', demands=['CSSParserAtRule'], returns='str'),
        FieldCall(field='name', demands=['CSSParserDeclaration'], returns='str'),
        FieldCall(field='name', demands=['CSSParserBlock'], returns='str'),
        FieldCall(field='name', demands=['CSSParserFunction'], returns='str'),
        FieldCall(field='name', demands=['FontFaceVariationAxis'], returns='str'),
        FieldCall(field='name', demands=['TrustedTypePolicy'], returns='str'),
        FieldCall(field='name', demands=['SpeechSynthesisEvent'], returns='str'),
        FieldCall(field='name', demands=['SpeechSynthesisVoice'], returns='str'),
        FieldCall(field='name', demands=['CSSMarginRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['File'], returns='str'),
        FieldCall(field='name', demands=['CSSLayerBlockRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['CSSCustomMediaRule'], returns='CSSOMString'),
        FieldCall(field='name', demands=['FileSystemHandle'], returns='str'),
        FieldCall(field='name', demands=['DocumentType'], returns='str'),
        FieldCall(field='name', demands=['Attr'], returns='str'),
        FieldCall(field='name', demands=['DOMException'], returns='str'),
        FieldCall(field='name', demands=['CSSPropertyRule'], returns='CSSOMString'),
    ],
    "fullPath": [
        FieldCall(field='fullPath', demands=['FileSystemEntry'], returns='str'),
    ],
    "filesystem": [
        FieldCall(field='filesystem', demands=['FileSystemEntry'], returns='FileSystem'),
    ],
    "getParent": [
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemEntry', fn='getParent', demands=['FileSystemEntry', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
    ],
    "createReader": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='createReader', demands=['FileSystemDirectoryEntry'], returns='FileSystemDirectoryReader'),
    ],
    "getFile": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'dict'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'dict', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getFile', demands=['FileSystemDirectoryEntry', 'str', 'dict', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='getFile', demands=['FileSystemFileHandle'], returns='File'),
    ],
    "getDirectory": [
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'dict'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'dict', 'FileSystemEntryCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryEntry', fn='getDirectory', demands=['FileSystemDirectoryEntry', 'str', 'dict', 'FileSystemEntryCallback', 'ErrorCallback'], returns='None'),
        PrototypeCall(constructor='StorageAccessHandle', fn='getDirectory', demands=['StorageAccessHandle'], returns='FileSystemDirectoryHandle'),
        PrototypeCall(constructor='StorageBucket', fn='getDirectory', demands=['StorageBucket'], returns='FileSystemDirectoryHandle'),
    ],
    "readEntries": [
        PrototypeCall(constructor='FileSystemDirectoryReader', fn='readEntries', demands=['FileSystemDirectoryReader', 'FileSystemEntriesCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryReader', fn='readEntries', demands=['FileSystemDirectoryReader', 'FileSystemEntriesCallback', 'ErrorCallback'], returns='None'),
    ],
    "file": [
        PrototypeCall(constructor='FileSystemFileEntry', fn='file', demands=['FileSystemFileEntry', 'FileCallback'], returns='None'),
        PrototypeCall(constructor='FileSystemFileEntry', fn='file', demands=['FileSystemFileEntry', 'FileCallback', 'ErrorCallback'], returns='None'),
    ],
    "root": [
        FieldCall(field='root', demands=['FileSystem'], returns='FileSystemDirectoryEntry'),
        FieldCall(field='root', demands=['IntersectionObserver'], returns='Element'),
        FieldCall(field='root', demands=['NodeIterator'], returns='Node'),
        FieldCall(field='root', demands=['TreeWalker'], returns='Node'),
    ],
    "city": [
        FieldCall(field='city', demands=['ContactAddress'], returns='str'),
    ],
    "country": [
        FieldCall(field='country', demands=['ContactAddress'], returns='str'),
    ],
    "dependentLocality": [
        FieldCall(field='dependentLocality', demands=['ContactAddress'], returns='str'),
    ],
    "organization": [
        FieldCall(field='organization', demands=['ContactAddress'], returns='str'),
    ],
    "phone": [
        FieldCall(field='phone', demands=['ContactAddress'], returns='str'),
    ],
    "postalCode": [
        FieldCall(field='postalCode', demands=['ContactAddress'], returns='str'),
    ],
    "recipient": [
        FieldCall(field='recipient', demands=['ContactAddress'], returns='str'),
    ],
    "region": [
        FieldCall(field='region', demands=['ContactAddress'], returns='str'),
        FieldCall(field='region', demands=['VTTCue'], returns='VTTRegion'),
        FieldCall(field='region', demands=['VTTCue', 'VTTRegion'], returns='VTTRegion'),
    ],
    "sortingCode": [
        FieldCall(field='sortingCode', demands=['ContactAddress'], returns='str'),
    ],
    "addressLine": [
        FieldCall(field='addressLine', demands=['ContactAddress'], returns='str'),
    ],
    "getProperties": [
        PrototypeCall(constructor='ContactsManager', fn='getProperties', demands=['ContactsManager'], returns='ContactProperty'),
    ],
    "select": [
        PrototypeCall(constructor='ContactsManager', fn='select', demands=['ContactsManager', 'ContactProperty'], returns='dict'),
        PrototypeCall(constructor='ContactsManager', fn='select', demands=['ContactsManager', 'ContactProperty', 'dict'], returns='dict'),
        PrototypeCall(constructor='HTMLInputElement', fn='select', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='select', demands=['HTMLTextAreaElement'], returns='None'),
    ],
    "size": [
        FieldCall(field='size', demands=['XRHand'], returns='int'),
        FieldCall(field='size', demands=['GPUBuffer'], returns='GPUSize64Out'),
        FieldCall(field='size', demands=['LargestContentfulPaint'], returns='int'),
        FieldCall(field='size', demands=['URLSearchParams'], returns='int'),
        FieldCall(field='size', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='size', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='size', demands=['HTMLSelectElement'], returns='int'),
        FieldCall(field='size', demands=['HTMLSelectElement', 'int'], returns='int'),
        FieldCall(field='size', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='size', demands=['HTMLFontElement', 'str'], returns='str'),
        FieldCall(field='size', demands=['StylePropertyMapReadOnly'], returns='int'),
        FieldCall(field='size', demands=['WebGLActiveInfo'], returns='GLint'),
        FieldCall(field='size', demands=['MediaKeyStatusMap'], returns='int'),
        FieldCall(field='size', demands=['ByteLengthQueuingStrategy'], returns='Function'),
        FieldCall(field='size', demands=['CountQueuingStrategy'], returns='Function'),
        FieldCall(field='size', demands=['VTTCue'], returns='float'),
        FieldCall(field='size', demands=['VTTCue', 'float'], returns='float'),
        FieldCall(field='size', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='size', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='size', demands=['Blob'], returns='int'),
    ],
    "jointName": [
        FieldCall(field='jointName', demands=['XRJointSpace'], returns='XRHandJoint'),
    ],
    "radius": [
        FieldCall(field='radius', demands=['XRJointPose'], returns='float'),
        FieldCall(field='radius', demands=['XRCylinderLayer'], returns='float'),
        FieldCall(field='radius', demands=['XRCylinderLayer', 'float'], returns='float'),
        FieldCall(field='radius', demands=['XREquirectLayer'], returns='float'),
        FieldCall(field='radius', demands=['XREquirectLayer', 'float'], returns='float'),
    ],
    "src": [
        FieldCall(field='src', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='src', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='src', demands=['CSSColorProfileRule'], returns='CSSOMString'),
        FieldCall(field='src', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLSourceElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLEmbedElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLTrackElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLMediaElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLMediaElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLScriptElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['NotRestoredReasons'], returns='str'),
        FieldCall(field='src', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLFrameElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['HTMLPortalElement'], returns='str'),
        FieldCall(field='src', demands=['HTMLPortalElement', 'str'], returns='str'),
        FieldCall(field='src', demands=['SpeechGrammar'], returns='str'),
        FieldCall(field='src', demands=['SpeechGrammar', 'str'], returns='str'),
    ],
    "fontFamily": [
        FieldCall(field='fontFamily', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontFamily', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='fontFamily', demands=['CSSFontFeatureValuesRule'], returns='CSSOMString'),
        FieldCall(field='fontFamily', demands=['CSSFontFeatureValuesRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='fontFamily', demands=['CSSFontPaletteValuesRule'], returns='CSSOMString'),
    ],
    "font-family": [
        FieldCall(field='font-family', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-family', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontStyle": [
        FieldCall(field='fontStyle', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontStyle', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-style": [
        FieldCall(field='font-style', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-style', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontWeight": [
        FieldCall(field='fontWeight', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontWeight', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-weight": [
        FieldCall(field='font-weight', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-weight', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontStretch": [
        FieldCall(field='fontStretch', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontStretch', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-stretch": [
        FieldCall(field='font-stretch', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-stretch', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontWidth": [
        FieldCall(field='fontWidth', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontWidth', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-width": [
        FieldCall(field='font-width', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-width', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontSize": [
        FieldCall(field='fontSize', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontSize', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-size": [
        FieldCall(field='font-size', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-size', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "sizeAdjust": [
        FieldCall(field='sizeAdjust', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='sizeAdjust', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "size-adjust": [
        FieldCall(field='size-adjust', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='size-adjust', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "unicodeRange": [
        FieldCall(field='unicodeRange', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='unicodeRange', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='unicodeRange', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='unicodeRange', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "unicode-range": [
        FieldCall(field='unicode-range', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='unicode-range', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontFeatureSettings": [
        FieldCall(field='fontFeatureSettings', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontFeatureSettings', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-feature-settings": [
        FieldCall(field='font-feature-settings', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-feature-settings', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontVariationSettings": [
        FieldCall(field='fontVariationSettings', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontVariationSettings', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-variation-settings": [
        FieldCall(field='font-variation-settings', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-variation-settings', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontNamedInstance": [
        FieldCall(field='fontNamedInstance', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontNamedInstance', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-named-instance": [
        FieldCall(field='font-named-instance', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-named-instance', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontDisplay": [
        FieldCall(field='fontDisplay', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontDisplay', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-display": [
        FieldCall(field='font-display', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-display', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "fontLanguageOverride": [
        FieldCall(field='fontLanguageOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='fontLanguageOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "font-language-override": [
        FieldCall(field='font-language-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='font-language-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "ascentOverride": [
        FieldCall(field='ascentOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='ascentOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='ascentOverride', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='ascentOverride', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "ascent-override": [
        FieldCall(field='ascent-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='ascent-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "descentOverride": [
        FieldCall(field='descentOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='descentOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='descentOverride', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='descentOverride', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "descent-override": [
        FieldCall(field='descent-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='descent-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "lineGapOverride": [
        FieldCall(field='lineGapOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='lineGapOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='lineGapOverride', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='lineGapOverride', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "line-gap-override": [
        FieldCall(field='line-gap-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='line-gap-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "superscriptPositionOverride": [
        FieldCall(field='superscriptPositionOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='superscriptPositionOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "superscript-position-override": [
        FieldCall(field='superscript-position-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='superscript-position-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "subscriptPositionOverride": [
        FieldCall(field='subscriptPositionOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='subscriptPositionOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "subscript-position-override": [
        FieldCall(field='subscript-position-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='subscript-position-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "superscriptSizeOverride": [
        FieldCall(field='superscriptSizeOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='superscriptSizeOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "superscript-size-override": [
        FieldCall(field='superscript-size-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='superscript-size-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "subscriptSizeOverride": [
        FieldCall(field='subscriptSizeOverride', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='subscriptSizeOverride', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "subscript-size-override": [
        FieldCall(field='subscript-size-override', demands=['CSSFontFaceDescriptors'], returns='CSSOMString'),
        FieldCall(field='subscript-size-override', demands=['CSSFontFaceDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "style": [
        FieldCall(field='style', demands=['CSSFontFaceRule'], returns='CSSFontFaceDescriptors'),
        FieldCall(field='style', demands=['CSSFunctionDeclarations'], returns='CSSFunctionDescriptors'),
        FieldCall(field='style', demands=['CSSKeyframeRule'], returns='CSSStyleProperties'),
        FieldCall(field='style', demands=['FontData'], returns='str'),
        FieldCall(field='style', demands=['CSSPositionTryRule'], returns='CSSPositionTryDescriptors'),
        FieldCall(field='style', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='style', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='style', demands=['CSSNestedDeclarations'], returns='CSSStyleProperties'),
        FieldCall(field='style', demands=['CSSStyleRule'], returns='CSSStyleProperties'),
        FieldCall(field='style', demands=['CSSPageRule'], returns='CSSPageDescriptors'),
        FieldCall(field='style', demands=['CSSMarginRule'], returns='CSSStyleDeclaration'),
    ],
    "renderingIntent": [
        FieldCall(field='renderingIntent', demands=['CSSColorProfileRule'], returns='CSSOMString'),
    ],
    "components": [
        FieldCall(field='components', demands=['CSSColorProfileRule'], returns='CSSOMString'),
    ],
    "width": [
        FieldCall(field='width', demands=['XRCamera'], returns='int'),
        FieldCall(field='width', demands=['XRQuadLayer'], returns='float'),
        FieldCall(field='width', demands=['XRQuadLayer', 'float'], returns='float'),
        FieldCall(field='width', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='width', demands=['DOMRect'], returns='float'),
        FieldCall(field='width', demands=['DOMRect', 'float'], returns='float'),
        FieldCall(field='width', demands=['GPUTexture'], returns='GPUIntegerCoordinateOut'),
        FieldCall(field='width', demands=['PointerEvent'], returns='float'),
        FieldCall(field='width', demands=['XRDepthInformation'], returns='int'),
        FieldCall(field='width', demands=['FontMetrics'], returns='float'),
        FieldCall(field='width', demands=['HTMLSourceElement'], returns='int'),
        FieldCall(field='width', demands=['HTMLSourceElement', 'int'], returns='int'),
        FieldCall(field='width', demands=['HTMLImageElement'], returns='int'),
        FieldCall(field='width', demands=['HTMLImageElement', 'int'], returns='int'),
        FieldCall(field='width', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='width', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLEmbedElement', 'str'], returns='str'),
        FieldCall(field='width', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLObjectElement', 'str'], returns='str'),
        FieldCall(field='width', demands=['HTMLVideoElement'], returns='int'),
        FieldCall(field='width', demands=['HTMLVideoElement', 'int'], returns='int'),
        FieldCall(field='width', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='width', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='width', demands=['HTMLCanvasElement'], returns='int'),
        FieldCall(field='width', demands=['HTMLCanvasElement', 'int'], returns='int'),
        FieldCall(field='width', demands=['TextMetrics'], returns='float'),
        FieldCall(field='width', demands=['OffscreenCanvas'], returns='int'),
        FieldCall(field='width', demands=['OffscreenCanvas', 'int'], returns='int'),
        FieldCall(field='width', demands=['ImageData'], returns='int'),
        FieldCall(field='width', demands=['ImageBitmap'], returns='int'),
        FieldCall(field='width', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLMarqueeElement', 'str'], returns='str'),
        FieldCall(field='width', demands=['PictureInPictureWindow'], returns='int'),
        FieldCall(field='width', demands=['Screen'], returns='int'),
        FieldCall(field='width', demands=['VisualViewport'], returns='float'),
        FieldCall(field='width', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='width', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='width', demands=['PaintSize'], returns='float'),
        FieldCall(field='width', demands=['HTMLFencedFrameElement'], returns='str'),
        FieldCall(field='width', demands=['HTMLFencedFrameElement', 'str'], returns='str'),
        FieldCall(field='width', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['VTTRegion'], returns='float'),
        FieldCall(field='width', demands=['VTTRegion', 'float'], returns='float'),
        FieldCall(field='width', demands=['XRViewport'], returns='int'),
        FieldCall(field='width', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='width', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
    ],
    "height": [
        FieldCall(field='height', demands=['XRCamera'], returns='int'),
        FieldCall(field='height', demands=['XRQuadLayer'], returns='float'),
        FieldCall(field='height', demands=['XRQuadLayer', 'float'], returns='float'),
        FieldCall(field='height', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='height', demands=['DOMRect'], returns='float'),
        FieldCall(field='height', demands=['DOMRect', 'float'], returns='float'),
        FieldCall(field='height', demands=['GPUTexture'], returns='GPUIntegerCoordinateOut'),
        FieldCall(field='height', demands=['PointerEvent'], returns='float'),
        FieldCall(field='height', demands=['XRDepthInformation'], returns='int'),
        FieldCall(field='height', demands=['FontMetrics'], returns='float'),
        FieldCall(field='height', demands=['HTMLSourceElement'], returns='int'),
        FieldCall(field='height', demands=['HTMLSourceElement', 'int'], returns='int'),
        FieldCall(field='height', demands=['HTMLImageElement'], returns='int'),
        FieldCall(field='height', demands=['HTMLImageElement', 'int'], returns='int'),
        FieldCall(field='height', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='height', demands=['HTMLEmbedElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLEmbedElement', 'str'], returns='str'),
        FieldCall(field='height', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLObjectElement', 'str'], returns='str'),
        FieldCall(field='height', demands=['HTMLVideoElement'], returns='int'),
        FieldCall(field='height', demands=['HTMLVideoElement', 'int'], returns='int'),
        FieldCall(field='height', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='height', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='height', demands=['HTMLCanvasElement'], returns='int'),
        FieldCall(field='height', demands=['HTMLCanvasElement', 'int'], returns='int'),
        FieldCall(field='height', demands=['OffscreenCanvas'], returns='int'),
        FieldCall(field='height', demands=['OffscreenCanvas', 'int'], returns='int'),
        FieldCall(field='height', demands=['ImageData'], returns='int'),
        FieldCall(field='height', demands=['ImageBitmap'], returns='int'),
        FieldCall(field='height', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLMarqueeElement', 'str'], returns='str'),
        FieldCall(field='height', demands=['PictureInPictureWindow'], returns='int'),
        FieldCall(field='height', demands=['Screen'], returns='int'),
        FieldCall(field='height', demands=['VisualViewport'], returns='float'),
        FieldCall(field='height', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='height', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='height', demands=['PaintSize'], returns='float'),
        FieldCall(field='height', demands=['HTMLFencedFrameElement'], returns='str'),
        FieldCall(field='height', demands=['HTMLFencedFrameElement', 'str'], returns='str'),
        FieldCall(field='height', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['XRViewport'], returns='int'),
        FieldCall(field='height', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='height', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
    ],
    "layout": [
        FieldCall(field='layout', demands=['XRCompositionLayer'], returns='XRLayerLayout'),
    ],
    "blendTextureSourceAlpha": [
        FieldCall(field='blendTextureSourceAlpha', demands=['XRCompositionLayer'], returns='bool'),
        FieldCall(field='blendTextureSourceAlpha', demands=['XRCompositionLayer', 'bool'], returns='bool'),
    ],
    "forceMonoPresentation": [
        FieldCall(field='forceMonoPresentation', demands=['XRCompositionLayer'], returns='bool'),
        FieldCall(field='forceMonoPresentation', demands=['XRCompositionLayer', 'bool'], returns='bool'),
    ],
    "opacity": [
        FieldCall(field='opacity', demands=['XRCompositionLayer'], returns='float'),
        FieldCall(field='opacity', demands=['XRCompositionLayer', 'float'], returns='float'),
    ],
    "mipLevels": [
        FieldCall(field='mipLevels', demands=['XRCompositionLayer'], returns='int'),
    ],
    "quality": [
        FieldCall(field='quality', demands=['XRCompositionLayer'], returns='XRLayerQuality'),
        FieldCall(field='quality', demands=['XRCompositionLayer', 'XRLayerQuality'], returns='XRLayerQuality'),
    ],
    "needsRedraw": [
        FieldCall(field='needsRedraw', demands=['XRCompositionLayer'], returns='bool'),
    ],
    "textureWidth": [
        FieldCall(field='textureWidth', demands=['XRProjectionLayer'], returns='int'),
    ],
    "textureHeight": [
        FieldCall(field='textureHeight', demands=['XRProjectionLayer'], returns='int'),
    ],
    "textureArrayLength": [
        FieldCall(field='textureArrayLength', demands=['XRProjectionLayer'], returns='int'),
    ],
    "ignoreDepthValues": [
        FieldCall(field='ignoreDepthValues', demands=['XRProjectionLayer'], returns='bool'),
        FieldCall(field='ignoreDepthValues', demands=['XRWebGLLayer'], returns='bool'),
    ],
    "fixedFoveation": [
        FieldCall(field='fixedFoveation', demands=['XRProjectionLayer'], returns='float'),
        FieldCall(field='fixedFoveation', demands=['XRProjectionLayer', 'float'], returns='float'),
        FieldCall(field='fixedFoveation', demands=['XRWebGLLayer'], returns='float'),
        FieldCall(field='fixedFoveation', demands=['XRWebGLLayer', 'float'], returns='float'),
    ],
    "deltaPose": [
        FieldCall(field='deltaPose', demands=['XRProjectionLayer'], returns='XRRigidTransform'),
        FieldCall(field='deltaPose', demands=['XRProjectionLayer', 'XRRigidTransform'], returns='XRRigidTransform'),
    ],
    "space": [
        FieldCall(field='space', demands=['XRQuadLayer'], returns='XRSpace'),
        FieldCall(field='space', demands=['XRQuadLayer', 'XRSpace'], returns='XRSpace'),
        FieldCall(field='space', demands=['XRCylinderLayer'], returns='XRSpace'),
        FieldCall(field='space', demands=['XRCylinderLayer', 'XRSpace'], returns='XRSpace'),
        FieldCall(field='space', demands=['XREquirectLayer'], returns='XRSpace'),
        FieldCall(field='space', demands=['XREquirectLayer', 'XRSpace'], returns='XRSpace'),
        FieldCall(field='space', demands=['XRCubeLayer'], returns='XRSpace'),
        FieldCall(field='space', demands=['XRCubeLayer', 'XRSpace'], returns='XRSpace'),
    ],
    "transform": [
        FieldCall(field='transform', demands=['XRQuadLayer'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XRQuadLayer', 'XRRigidTransform'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XRCylinderLayer'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XRCylinderLayer', 'XRRigidTransform'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XREquirectLayer'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XREquirectLayer', 'XRRigidTransform'], returns='XRRigidTransform'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='transform', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='transform', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='transform', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        FieldCall(field='transform', demands=['SVGGraphicsElement'], returns='SVGAnimatedTransformList'),
        FieldCall(field='transform', demands=['XRPose'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['XRReferenceSpaceEvent'], returns='XRRigidTransform'),
        FieldCall(field='transform', demands=['SVGClipPathElement'], returns='SVGAnimatedTransformList'),
    ],
    "onredraw": [
        FieldCall(field='onredraw', demands=['XRQuadLayer'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XRQuadLayer', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XRCylinderLayer'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XRCylinderLayer', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XREquirectLayer'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XREquirectLayer', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XRCubeLayer'], returns='EventHandler'),
        FieldCall(field='onredraw', demands=['XRCubeLayer', 'EventHandler'], returns='EventHandler'),
    ],
    "centralAngle": [
        FieldCall(field='centralAngle', demands=['XRCylinderLayer'], returns='float'),
        FieldCall(field='centralAngle', demands=['XRCylinderLayer', 'float'], returns='float'),
    ],
    "aspectRatio": [
        FieldCall(field='aspectRatio', demands=['XRCylinderLayer'], returns='float'),
        FieldCall(field='aspectRatio', demands=['XRCylinderLayer', 'float'], returns='float'),
    ],
    "centralHorizontalAngle": [
        FieldCall(field='centralHorizontalAngle', demands=['XREquirectLayer'], returns='float'),
        FieldCall(field='centralHorizontalAngle', demands=['XREquirectLayer', 'float'], returns='float'),
    ],
    "upperVerticalAngle": [
        FieldCall(field='upperVerticalAngle', demands=['XREquirectLayer'], returns='float'),
        FieldCall(field='upperVerticalAngle', demands=['XREquirectLayer', 'float'], returns='float'),
    ],
    "lowerVerticalAngle": [
        FieldCall(field='lowerVerticalAngle', demands=['XREquirectLayer'], returns='float'),
        FieldCall(field='lowerVerticalAngle', demands=['XREquirectLayer', 'float'], returns='float'),
    ],
    "orientation": [
        FieldCall(field='orientation', demands=['XRCubeLayer'], returns='DOMPointReadOnly'),
        FieldCall(field='orientation', demands=['XRCubeLayer', 'DOMPointReadOnly'], returns='DOMPointReadOnly'),
        FieldCall(field='orientation', demands=['GamepadPose'], returns='Float32Array'),
        FieldCall(field='orientation', demands=['XRPlane'], returns='XRPlaneOrientation'),
        FieldCall(field='orientation', demands=['XRRigidTransform'], returns='DOMPointReadOnly'),
    ],
    "viewport": [
        FieldCall(field='viewport', demands=['XRSubImage'], returns='XRViewport'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='viewport', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='viewport', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "colorTexture": [
        FieldCall(field='colorTexture', demands=['XRWebGLSubImage'], returns='WebGLTexture'),
    ],
    "depthStencilTexture": [
        FieldCall(field='depthStencilTexture', demands=['XRWebGLSubImage'], returns='WebGLTexture'),
    ],
    "motionVectorTexture": [
        FieldCall(field='motionVectorTexture', demands=['XRWebGLSubImage'], returns='WebGLTexture'),
    ],
    "imageIndex": [
        FieldCall(field='imageIndex', demands=['XRWebGLSubImage'], returns='int'),
        FieldCall(field='imageIndex', demands=['XRWebGLDepthInformation'], returns='int'),
    ],
    "colorTextureWidth": [
        FieldCall(field='colorTextureWidth', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "colorTextureHeight": [
        FieldCall(field='colorTextureHeight', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "depthStencilTextureWidth": [
        FieldCall(field='depthStencilTextureWidth', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "depthStencilTextureHeight": [
        FieldCall(field='depthStencilTextureHeight', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "motionVectorTextureWidth": [
        FieldCall(field='motionVectorTextureWidth', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "motionVectorTextureHeight": [
        FieldCall(field='motionVectorTextureHeight', demands=['XRWebGLSubImage'], returns='int'),
    ],
    "XRWebGLBinding": [
        NewCall(constructor='XRWebGLBinding', demands=['XRSession', 'XRWebGLRenderingContext'], returns='XRWebGLBinding'),
    ],
    "nativeProjectionScaleFactor": [
        FieldCall(field='nativeProjectionScaleFactor', demands=['XRWebGLBinding'], returns='float'),
    ],
    "usesDepthValues": [
        FieldCall(field='usesDepthValues', demands=['XRWebGLBinding'], returns='bool'),
    ],
    "createProjectionLayer": [
        PrototypeCall(constructor='XRWebGLBinding', fn='createProjectionLayer', demands=['XRWebGLBinding'], returns='XRProjectionLayer'),
        PrototypeCall(constructor='XRWebGLBinding', fn='createProjectionLayer', demands=['XRWebGLBinding', 'dict'], returns='XRProjectionLayer'),
    ],
    "createQuadLayer": [
        PrototypeCall(constructor='XRWebGLBinding', fn='createQuadLayer', demands=['XRWebGLBinding'], returns='XRQuadLayer'),
        PrototypeCall(constructor='XRWebGLBinding', fn='createQuadLayer', demands=['XRWebGLBinding', 'dict'], returns='XRQuadLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createQuadLayer', demands=['XRMediaBinding', 'HTMLVideoElement'], returns='XRQuadLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createQuadLayer', demands=['XRMediaBinding', 'HTMLVideoElement', 'dict'], returns='XRQuadLayer'),
    ],
    "createCylinderLayer": [
        PrototypeCall(constructor='XRWebGLBinding', fn='createCylinderLayer', demands=['XRWebGLBinding'], returns='XRCylinderLayer'),
        PrototypeCall(constructor='XRWebGLBinding', fn='createCylinderLayer', demands=['XRWebGLBinding', 'dict'], returns='XRCylinderLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createCylinderLayer', demands=['XRMediaBinding', 'HTMLVideoElement'], returns='XRCylinderLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createCylinderLayer', demands=['XRMediaBinding', 'HTMLVideoElement', 'dict'], returns='XRCylinderLayer'),
    ],
    "createEquirectLayer": [
        PrototypeCall(constructor='XRWebGLBinding', fn='createEquirectLayer', demands=['XRWebGLBinding'], returns='XREquirectLayer'),
        PrototypeCall(constructor='XRWebGLBinding', fn='createEquirectLayer', demands=['XRWebGLBinding', 'dict'], returns='XREquirectLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createEquirectLayer', demands=['XRMediaBinding', 'HTMLVideoElement'], returns='XREquirectLayer'),
        PrototypeCall(constructor='XRMediaBinding', fn='createEquirectLayer', demands=['XRMediaBinding', 'HTMLVideoElement', 'dict'], returns='XREquirectLayer'),
    ],
    "createCubeLayer": [
        PrototypeCall(constructor='XRWebGLBinding', fn='createCubeLayer', demands=['XRWebGLBinding'], returns='XRCubeLayer'),
        PrototypeCall(constructor='XRWebGLBinding', fn='createCubeLayer', demands=['XRWebGLBinding', 'dict'], returns='XRCubeLayer'),
    ],
    "getSubImage": [
        PrototypeCall(constructor='XRWebGLBinding', fn='getSubImage', demands=['XRWebGLBinding', 'XRCompositionLayer', 'XRFrame'], returns='XRWebGLSubImage'),
        PrototypeCall(constructor='XRWebGLBinding', fn='getSubImage', demands=['XRWebGLBinding', 'XRCompositionLayer', 'XRFrame', 'XREye'], returns='XRWebGLSubImage'),
    ],
    "getViewSubImage": [
        PrototypeCall(constructor='XRWebGLBinding', fn='getViewSubImage', demands=['XRWebGLBinding', 'XRProjectionLayer', 'XRView'], returns='XRWebGLSubImage'),
    ],
    "foveateBoundTexture": [
        PrototypeCall(constructor='XRWebGLBinding', fn='foveateBoundTexture', demands=['XRWebGLBinding', 'GLenum', 'float'], returns='None'),
    ],
    "XRMediaBinding": [
        NewCall(constructor='XRMediaBinding', demands=['XRSession'], returns='XRMediaBinding'),
    ],
    "XRLayerEvent": [
        NewCall(constructor='XRLayerEvent', demands=['str', 'dict'], returns='XRLayerEvent'),
    ],
    "layer": [
        FieldCall(field='layer', demands=['XRLayerEvent'], returns='XRLayer'),
    ],
    "processingStart": [
        FieldCall(field='processingStart', demands=['PerformanceEventTiming'], returns='float'),
    ],
    "processingEnd": [
        FieldCall(field='processingEnd', demands=['PerformanceEventTiming'], returns='float'),
    ],
    "cancelable": [
        FieldCall(field='cancelable', demands=['PerformanceEventTiming'], returns='bool'),
        FieldCall(field='cancelable', demands=['Event'], returns='bool'),
    ],
    "target": [
        FieldCall(field='target', demands=['PerformanceEventTiming'], returns='Node'),
        FieldCall(field='target', demands=['KeyframeEffect'], returns='Element'),
        FieldCall(field='target', demands=['KeyframeEffect', 'Element'], returns='Element'),
        FieldCall(field='target', demands=['HTMLBaseElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLBaseElement', 'str'], returns='str'),
        FieldCall(field='target', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='target', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='target', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='target', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='target', demands=['IntersectionObserverEntry'], returns='Element'),
        FieldCall(field='target', demands=['Touch'], returns='EventTarget'),
        FieldCall(field='target', demands=['SVGAElement'], returns='SVGAnimatedString'),
        FieldCall(field='target', demands=['ResizeObserverEntry'], returns='Element'),
        FieldCall(field='target', demands=['Event'], returns='EventTarget'),
        FieldCall(field='target', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='target', demands=['ProcessingInstruction'], returns='str'),
    ],
    "interactionId": [
        FieldCall(field='interactionId', demands=['PerformanceEventTiming'], returns='int'),
    ],
    "queryCounterEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query_webgl2', fn='queryCounterEXT', demands=['EXT_disjoint_timer_query_webgl2', 'WebGLQuery', 'GLenum'], returns='None'),
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='queryCounterEXT', demands=['EXT_disjoint_timer_query', 'WebGLTimerQueryEXT', 'GLenum'], returns='None'),
    ],
    "privateAggregation": [
        FieldCall(field='privateAggregation', demands=['InterestGroupScriptRunnerGlobalScope'], returns='PrivateAggregation'),
        FieldCall(field='privateAggregation', demands=['SharedStorageWorkletGlobalScope'], returns='PrivateAggregation'),
    ],
    "protectedAudience": [
        FieldCall(field='protectedAudience', demands=['InterestGroupScriptRunnerGlobalScope'], returns='ProtectedAudienceUtilities'),
    ],
    "encodeUtf8": [
        PrototypeCall(constructor='ProtectedAudienceUtilities', fn='encodeUtf8', demands=['ProtectedAudienceUtilities', 'str'], returns='Uint8Array'),
    ],
    "decodeUtf8": [
        PrototypeCall(constructor='ProtectedAudienceUtilities', fn='decodeUtf8', demands=['ProtectedAudienceUtilities', 'Uint8Array'], returns='str'),
    ],
    "reportAdAuctionWin": [
        PrototypeCall(constructor='ForDebuggingOnly', fn='reportAdAuctionWin', demands=['ForDebuggingOnly', 'str'], returns='None'),
    ],
    "reportAdAuctionLoss": [
        PrototypeCall(constructor='ForDebuggingOnly', fn='reportAdAuctionLoss', demands=['ForDebuggingOnly', 'str'], returns='None'),
    ],
    "contributeToHistogram": [
        PrototypeCall(constructor='RealTimeReporting', fn='contributeToHistogram', demands=['RealTimeReporting', 'dict'], returns='None'),
        PrototypeCall(constructor='PrivateAggregation', fn='contributeToHistogram', demands=['PrivateAggregation', 'dict'], returns='None'),
    ],
    "forDebuggingOnly": [
        FieldCall(field='forDebuggingOnly', demands=['InterestGroupBiddingAndScoringScriptRunnerGlobalScope'], returns='ForDebuggingOnly'),
    ],
    "realTimeReporting": [
        FieldCall(field='realTimeReporting', demands=['InterestGroupBiddingAndScoringScriptRunnerGlobalScope'], returns='RealTimeReporting'),
    ],
    "setBid": [
        PrototypeCall(constructor='InterestGroupBiddingScriptRunnerGlobalScope', fn='setBid', demands=['InterestGroupBiddingScriptRunnerGlobalScope'], returns='bool'),
        PrototypeCall(constructor='InterestGroupBiddingScriptRunnerGlobalScope', fn='setBid', demands=['InterestGroupBiddingScriptRunnerGlobalScope', 'dict'], returns='bool'),
    ],
    "setPriority": [
        PrototypeCall(constructor='InterestGroupBiddingScriptRunnerGlobalScope', fn='setPriority', demands=['InterestGroupBiddingScriptRunnerGlobalScope', 'float'], returns='None'),
        PrototypeCall(constructor='TaskController', fn='setPriority', demands=['TaskController', 'TaskPriority'], returns='None'),
    ],
    "setPrioritySignalsOverride": [
        PrototypeCall(constructor='InterestGroupBiddingScriptRunnerGlobalScope', fn='setPrioritySignalsOverride', demands=['InterestGroupBiddingScriptRunnerGlobalScope', 'str'], returns='None'),
        PrototypeCall(constructor='InterestGroupBiddingScriptRunnerGlobalScope', fn='setPrioritySignalsOverride', demands=['InterestGroupBiddingScriptRunnerGlobalScope', 'str', 'float'], returns='None'),
    ],
    "sendReportTo": [
        PrototypeCall(constructor='InterestGroupReportingScriptRunnerGlobalScope', fn='sendReportTo', demands=['InterestGroupReportingScriptRunnerGlobalScope', 'str'], returns='None'),
    ],
    "registerAdBeacon": [
        PrototypeCall(constructor='InterestGroupReportingScriptRunnerGlobalScope', fn='registerAdBeacon', demands=['InterestGroupReportingScriptRunnerGlobalScope', 'str'], returns='None'),
    ],
    "registerAdMacro": [
        PrototypeCall(constructor='InterestGroupReportingScriptRunnerGlobalScope', fn='registerAdMacro', demands=['InterestGroupReportingScriptRunnerGlobalScope', 'str', 'str'], returns='None'),
    ],
    "queryFeatureSupport": [
        PrototypeCall(constructor='ProtectedAudience', fn='queryFeatureSupport', demands=['ProtectedAudience', 'str'], returns='*'),
    ],
    "now": [
        PrototypeCall(constructor='Performance', fn='now', demands=['Performance'], returns='float'),
    ],
    "timeOrigin": [
        FieldCall(field='timeOrigin', demands=['Performance'], returns='float'),
    ],
    "next": [
        PrototypeCall(constructor='Subscriber', fn='next', demands=['Subscriber', '*'], returns='None'),
    ],
    "error": [
        PrototypeCall(constructor='Subscriber', fn='error', demands=['Subscriber', '*'], returns='None'),
        FieldCall(field='error', demands=['GPUUncapturedErrorEvent'], returns='GPUError'),
        DirectCall(fn='error', receiver='Response', demands=[], returns='Response'),
        FieldCall(field='error', demands=['IDBRequest'], returns='DOMException'),
        FieldCall(field='error', demands=['IDBTransaction'], returns='DOMException'),
        FieldCall(field='error', demands=['RTCErrorEvent'], returns='RTCError'),
        FieldCall(field='error', demands=['HTMLMediaElement'], returns='MediaError'),
        FieldCall(field='error', demands=['ErrorEvent'], returns='*'),
        FieldCall(field='error', demands=['SensorErrorEvent'], returns='DOMException'),
        FieldCall(field='error', demands=['SpeechRecognitionErrorEvent'], returns='SpeechRecognitionErrorCode'),
        FieldCall(field='error', demands=['SpeechSynthesisErrorEvent'], returns='SpeechSynthesisErrorCode'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='error', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='error', demands=['ReadableStreamDefaultController', '*'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='error', demands=['ReadableByteStreamController'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='error', demands=['ReadableByteStreamController', '*'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultController', fn='error', demands=['WritableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultController', fn='error', demands=['WritableStreamDefaultController', '*'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='error', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='error', demands=['TransformStreamDefaultController', '*'], returns='None'),
        FieldCall(field='error', demands=['IdentityCredentialError'], returns='str'),
        FieldCall(field='error', demands=['FileReader'], returns='DOMException'),
    ],
    "complete": [
        PrototypeCall(constructor='Subscriber', fn='complete', demands=['Subscriber'], returns='None'),
        FieldCall(field='complete', demands=['ImageDecoder'], returns='bool'),
        FieldCall(field='complete', demands=['HTMLImageElement'], returns='bool'),
        PrototypeCall(constructor='PaymentResponse', fn='complete', demands=['PaymentResponse'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='complete', demands=['PaymentResponse', 'PaymentComplete'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='complete', demands=['PaymentResponse', 'PaymentComplete', 'dict'], returns='None'),
    ],
    "addTeardown": [
        PrototypeCall(constructor='Subscriber', fn='addTeardown', demands=['Subscriber', 'VoidFunction'], returns='None'),
    ],
    "active": [
        FieldCall(field='active', demands=['Subscriber'], returns='bool'),
        FieldCall(field='active', demands=['BluetoothLEScan'], returns='bool'),
        FieldCall(field='active', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
        FieldCall(field='active', demands=['MediaStream'], returns='bool'),
    ],
    "signal": [
        FieldCall(field='signal', demands=['Subscriber'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['Request'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['NavigateEvent'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['WritableStreamDefaultController'], returns='AbortSignal'),
        FieldCall(field='signal', demands=['AbortController'], returns='AbortSignal'),
    ],
    "Observable": [
        NewCall(constructor='Observable', demands=['SubscribeCallback'], returns='Observable'),
    ],
    "from": [
        DirectCall(fn='from', receiver='Observable', demands=['*'], returns='Observable'),
        FieldCall(field='from', demands=['NavigationTransition'], returns='NavigationHistoryEntry'),
        FieldCall(field='from', demands=['NavigationActivation'], returns='NavigationHistoryEntry'),
        FieldCall(field='from', demands=['NavigationCurrentEntryChangeEvent'], returns='NavigationHistoryEntry'),
        DirectCall(fn='from', receiver='ReadableStream', demands=['*'], returns='ReadableStream'),
    ],
    "takeUntil": [
        PrototypeCall(constructor='Observable', fn='takeUntil', demands=['Observable', '*'], returns='Observable'),
    ],
    "map": [
        PrototypeCall(constructor='Observable', fn='map', demands=['Observable', 'Mapper'], returns='Observable'),
    ],
    "filter": [
        PrototypeCall(constructor='Observable', fn='filter', demands=['Observable', 'Predicate'], returns='Observable'),
        FieldCall(field='filter', demands=['NodeIterator'], returns='NodeFilter'),
        FieldCall(field='filter', demands=['TreeWalker'], returns='NodeFilter'),
    ],
    "take": [
        PrototypeCall(constructor='Observable', fn='take', demands=['Observable', 'int'], returns='Observable'),
    ],
    "drop": [
        PrototypeCall(constructor='Observable', fn='drop', demands=['Observable', 'int'], returns='Observable'),
    ],
    "flatMap": [
        PrototypeCall(constructor='Observable', fn='flatMap', demands=['Observable', 'Mapper'], returns='Observable'),
    ],
    "switchMap": [
        PrototypeCall(constructor='Observable', fn='switchMap', demands=['Observable', 'Mapper'], returns='Observable'),
    ],
    "inspect": [
        PrototypeCall(constructor='Observable', fn='inspect', demands=['Observable'], returns='Observable'),
        PrototypeCall(constructor='Observable', fn='inspect', demands=['Observable', 'ObservableInspectorUnion'], returns='Observable'),
    ],
    "catch": [
        PrototypeCall(constructor='Observable', fn='catch', demands=['Observable', 'CatchCallback'], returns='Observable'),
    ],
    "finally": [
        PrototypeCall(constructor='Observable', fn='finally', demands=['Observable', 'VoidFunction'], returns='Observable'),
    ],
    "toArray": [
        PrototypeCall(constructor='Observable', fn='toArray', demands=['Observable'], returns='*'),
        PrototypeCall(constructor='Observable', fn='toArray', demands=['Observable', 'dict'], returns='*'),
    ],
    "forEach": [
        PrototypeCall(constructor='Observable', fn='forEach', demands=['Observable', 'Visitor'], returns='None'),
        PrototypeCall(constructor='Observable', fn='forEach', demands=['Observable', 'Visitor', 'dict'], returns='None'),
    ],
    "every": [
        PrototypeCall(constructor='Observable', fn='every', demands=['Observable', 'Predicate'], returns='bool'),
        PrototypeCall(constructor='Observable', fn='every', demands=['Observable', 'Predicate', 'dict'], returns='bool'),
    ],
    "first": [
        PrototypeCall(constructor='Observable', fn='first', demands=['Observable'], returns='*'),
        PrototypeCall(constructor='Observable', fn='first', demands=['Observable', 'dict'], returns='*'),
    ],
    "last": [
        PrototypeCall(constructor='Observable', fn='last', demands=['Observable'], returns='*'),
        PrototypeCall(constructor='Observable', fn='last', demands=['Observable', 'dict'], returns='*'),
    ],
    "find": [
        PrototypeCall(constructor='Observable', fn='find', demands=['Observable', 'Predicate'], returns='*'),
        PrototypeCall(constructor='Observable', fn='find', demands=['Observable', 'Predicate', 'dict'], returns='*'),
    ],
    "some": [
        PrototypeCall(constructor='Observable', fn='some', demands=['Observable', 'Predicate'], returns='bool'),
        PrototypeCall(constructor='Observable', fn='some', demands=['Observable', 'Predicate', 'dict'], returns='bool'),
    ],
    "reduce": [
        PrototypeCall(constructor='Observable', fn='reduce', demands=['Observable', 'Reducer'], returns='*'),
        PrototypeCall(constructor='Observable', fn='reduce', demands=['Observable', 'Reducer', '*'], returns='*'),
        PrototypeCall(constructor='Observable', fn='reduce', demands=['Observable', 'Reducer', '*', 'dict'], returns='*'),
    ],
    "multiDrawArraysWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
    ],
    "multiDrawElementsWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei'], returns='None'),
    ],
    "multiDrawArraysInstancedWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawArraysInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
    ],
    "multiDrawElementsInstancedWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw', fn='multiDrawElementsInstancedWEBGL', demands=['WEBGL_multi_draw', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLsizei'], returns='None'),
    ],
    "hasFeature": [
        PrototypeCall(constructor='EpubReadingSystem', fn='hasFeature', demands=['EpubReadingSystem', 'str'], returns='bool'),
        PrototypeCall(constructor='EpubReadingSystem', fn='hasFeature', demands=['EpubReadingSystem', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='DOMImplementation', fn='hasFeature', demands=['DOMImplementation'], returns='bool'),
    ],
    "getContextAttributes": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getContextAttributes', demands=['WebGL2RenderingContext'], returns='dict'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getContextAttributes', demands=['CanvasRenderingContext2D'], returns='dict'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getContextAttributes', demands=['OffscreenCanvasRenderingContext2D'], returns='dict'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getContextAttributes', demands=['WebGLRenderingContext'], returns='dict'),
    ],
    "isContextLost": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isContextLost', demands=['WebGL2RenderingContext'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isContextLost', demands=['CanvasRenderingContext2D'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isContextLost', demands=['OffscreenCanvasRenderingContext2D'], returns='bool'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isContextLost', demands=['WebGLRenderingContext'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isContextLost', demands=['PaintRenderingContext2D'], returns='bool'),
    ],
    "getSupportedExtensions": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSupportedExtensions', demands=['WebGL2RenderingContext'], returns='str'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getSupportedExtensions', demands=['WebGLRenderingContext'], returns='str'),
    ],
    "getExtension": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getExtension', demands=['WebGL2RenderingContext', 'str'], returns='object'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getExtension', demands=['WebGLRenderingContext', 'str'], returns='object'),
    ],
    "drawingBufferStorage": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawingBufferStorage', demands=['WebGL2RenderingContext', 'GLenum', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='drawingBufferStorage', demands=['WebGLRenderingContext', 'GLenum', 'int', 'int'], returns='None'),
    ],
    "activeTexture": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='activeTexture', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='activeTexture', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "attachShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='attachShader', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='attachShader', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
    ],
    "bindAttribLocation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindAttribLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'str'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindAttribLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint', 'str'], returns='None'),
    ],
    "bindBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLBuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindBuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLBuffer'], returns='None'),
    ],
    "bindFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLFramebuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindFramebuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLFramebuffer'], returns='None'),
    ],
    "bindRenderbuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindRenderbuffer', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindRenderbuffer', demands=['WebGLRenderingContext', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
    ],
    "bindTexture": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindTexture', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLTexture'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bindTexture', demands=['WebGLRenderingContext', 'GLenum', 'WebGLTexture'], returns='None'),
    ],
    "blendColor": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendColor', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendColor', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "blendEquation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendEquation', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendEquation', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "blendEquationSeparate": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendEquationSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendEquationSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFunc": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendFunc', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendFunc', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFuncSeparate": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blendFuncSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='blendFuncSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "checkFramebufferStatus": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='checkFramebufferStatus', demands=['WebGL2RenderingContext', 'GLenum'], returns='GLenum'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='checkFramebufferStatus', demands=['WebGLRenderingContext', 'GLenum'], returns='GLenum'),
    ],
    "clear": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clear', demands=['WebGL2RenderingContext', 'GLbitfield'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='clear', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='DataTransferItemList', fn='clear', demands=['DataTransferItemList'], returns='None'),
        PrototypeCall(constructor='Storage', fn='clear', demands=['Storage'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='clear', demands=['StylePropertyMap'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='clear', demands=['WebGLRenderingContext', 'GLbitfield'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='clear', demands=['MIDIOutput'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='clear', demands=['FontFaceSet'], returns='None'),
        PrototypeCall(constructor='SVGNumberList', fn='clear', demands=['SVGNumberList'], returns='None'),
        PrototypeCall(constructor='SVGLengthList', fn='clear', demands=['SVGLengthList'], returns='None'),
        PrototypeCall(constructor='SVGStringList', fn='clear', demands=['SVGStringList'], returns='None'),
        PrototypeCall(constructor='SVGTransformList', fn='clear', demands=['SVGTransformList'], returns='None'),
        PrototypeCall(constructor='SVGPointList', fn='clear', demands=['SVGPointList'], returns='None'),
        PrototypeCall(constructor='SharedStorage', fn='clear', demands=['SharedStorage'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='clear', demands=['SharedStorage', 'dict'], returns='*'),
        PrototypeCall(constructor='HandwritingDrawing', fn='clear', demands=['HandwritingDrawing'], returns='None'),
        PrototypeCall(constructor='HandwritingStroke', fn='clear', demands=['HandwritingStroke'], returns='None'),
    ],
    "clearColor": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearColor', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearColor', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "clearDepth": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearDepth', demands=['WebGL2RenderingContext', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearDepth', demands=['WebGLRenderingContext', 'GLclampf'], returns='None'),
    ],
    "clearStencil": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearStencil', demands=['WebGL2RenderingContext', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='clearStencil', demands=['WebGLRenderingContext', 'GLint'], returns='None'),
    ],
    "colorMask": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='colorMask', demands=['WebGL2RenderingContext', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='colorMask', demands=['WebGLRenderingContext', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
    ],
    "compileShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compileShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='compileShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='None'),
    ],
    "copyTexImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='copyTexImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint'], returns='None'),
    ],
    "copyTexSubImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='copyTexSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "createBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createBuffer', demands=['WebGL2RenderingContext'], returns='WebGLBuffer'),
        PrototypeCall(constructor='GPUDevice', fn='createBuffer', demands=['GPUDevice', 'dict'], returns='GPUBuffer'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createBuffer', demands=['WebGLRenderingContext'], returns='WebGLBuffer'),
        PrototypeCall(constructor='BaseAudioContext', fn='createBuffer', demands=['BaseAudioContext', 'int', 'int', 'float'], returns='AudioBuffer'),
    ],
    "createFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createFramebuffer', demands=['WebGL2RenderingContext'], returns='WebGLFramebuffer'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createFramebuffer', demands=['WebGLRenderingContext'], returns='WebGLFramebuffer'),
    ],
    "createProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createProgram', demands=['WebGL2RenderingContext'], returns='WebGLProgram'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createProgram', demands=['WebGLRenderingContext'], returns='WebGLProgram'),
    ],
    "createRenderbuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createRenderbuffer', demands=['WebGL2RenderingContext'], returns='WebGLRenderbuffer'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createRenderbuffer', demands=['WebGLRenderingContext'], returns='WebGLRenderbuffer'),
    ],
    "createShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createShader', demands=['WebGL2RenderingContext', 'GLenum'], returns='WebGLShader'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createShader', demands=['WebGLRenderingContext', 'GLenum'], returns='WebGLShader'),
    ],
    "createTexture": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createTexture', demands=['WebGL2RenderingContext'], returns='WebGLTexture'),
        PrototypeCall(constructor='GPUDevice', fn='createTexture', demands=['GPUDevice', 'dict'], returns='GPUTexture'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='createTexture', demands=['WebGLRenderingContext'], returns='WebGLTexture'),
    ],
    "cullFace": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='cullFace', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='cullFace', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "deleteBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteBuffer', demands=['WebGL2RenderingContext', 'WebGLBuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteBuffer', demands=['WebGLRenderingContext', 'WebGLBuffer'], returns='None'),
    ],
    "deleteFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteFramebuffer', demands=['WebGL2RenderingContext', 'WebGLFramebuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteFramebuffer', demands=['WebGLRenderingContext', 'WebGLFramebuffer'], returns='None'),
    ],
    "deleteProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "deleteRenderbuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteRenderbuffer', demands=['WebGL2RenderingContext', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteRenderbuffer', demands=['WebGLRenderingContext', 'WebGLRenderbuffer'], returns='None'),
    ],
    "deleteShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='None'),
    ],
    "deleteTexture": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteTexture', demands=['WebGL2RenderingContext', 'WebGLTexture'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='deleteTexture', demands=['WebGLRenderingContext', 'WebGLTexture'], returns='None'),
    ],
    "depthFunc": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthFunc', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthFunc', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "depthMask": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthMask', demands=['WebGL2RenderingContext', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthMask', demands=['WebGLRenderingContext', 'GLboolean'], returns='None'),
    ],
    "depthRange": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='depthRange', demands=['WebGL2RenderingContext', 'GLclampf', 'GLclampf'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='depthRange', demands=['WebGLRenderingContext', 'GLclampf', 'GLclampf'], returns='None'),
    ],
    "detachShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='detachShader', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='detachShader', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLShader'], returns='None'),
    ],
    "disable": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='disable', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='NavigationPreloadManager', fn='disable', demands=['NavigationPreloadManager'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='disable', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "disableVertexAttribArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='disableVertexAttribArray', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='disableVertexAttribArray', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
    ],
    "drawArrays": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawArrays', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='drawArrays', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLsizei'], returns='None'),
    ],
    "drawElements": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawElements', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='drawElements', demands=['WebGLRenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
    ],
    "enable": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='enable', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='NavigationPreloadManager', fn='enable', demands=['NavigationPreloadManager'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='enable', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "enableVertexAttribArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='enableVertexAttribArray', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='enableVertexAttribArray', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
    ],
    "finish": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='finish', demands=['WebGL2RenderingContext'], returns='None'),
        PrototypeCall(constructor='Animation', fn='finish', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='finish', demands=['GPUCommandEncoder'], returns='GPUCommandBuffer'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='finish', demands=['GPUCommandEncoder', 'dict'], returns='GPUCommandBuffer'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='finish', demands=['GPURenderBundleEncoder'], returns='GPURenderBundle'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='finish', demands=['GPURenderBundleEncoder', 'dict'], returns='GPURenderBundle'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='finish', demands=['WebGLRenderingContext'], returns='None'),
        PrototypeCall(constructor='HandwritingRecognizer', fn='finish', demands=['HandwritingRecognizer'], returns='None'),
    ],
    "flush": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='flush', demands=['WebGL2RenderingContext'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='flush', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='flush', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='flush', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='flush', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='flush', demands=['WebGLRenderingContext'], returns='None'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='flush', demands=['FileSystemSyncAccessHandle'], returns='None'),
    ],
    "framebufferRenderbuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferRenderbuffer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='framebufferRenderbuffer', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLRenderbuffer'], returns='None'),
    ],
    "framebufferTexture2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferTexture2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='framebufferTexture2D', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint'], returns='None'),
    ],
    "frontFace": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='frontFace', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='frontFace', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "generateMipmap": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='generateMipmap', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='generateMipmap', demands=['WebGLRenderingContext', 'GLenum'], returns='None'),
    ],
    "getActiveAttrib": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveAttrib', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getActiveAttrib', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "getActiveUniform": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniform', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getActiveUniform', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "getAttachedShaders": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getAttachedShaders', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='WebGLShader'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getAttachedShaders', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='WebGLShader'),
    ],
    "getAttribLocation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getAttribLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getAttribLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
    ],
    "getBufferParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getBufferParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getParameter', demands=['WebGL2RenderingContext', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getParameter', demands=['WebGLRenderingContext', 'GLenum'], returns='*'),
        PrototypeCall(constructor='XSLTProcessor', fn='getParameter', demands=['XSLTProcessor', 'str', 'str'], returns='*'),
    ],
    "getError": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getError', demands=['WebGL2RenderingContext'], returns='GLenum'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getError', demands=['WebGLRenderingContext'], returns='GLenum'),
    ],
    "getFramebufferAttachmentParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getFramebufferAttachmentParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getFramebufferAttachmentParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getProgramParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getProgramParameter', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getProgramParameter', demands=['WebGLRenderingContext', 'WebGLProgram', 'GLenum'], returns='*'),
    ],
    "getProgramInfoLog": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getProgramInfoLog', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='str'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getProgramInfoLog', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='str'),
    ],
    "getRenderbufferParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getRenderbufferParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getRenderbufferParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getShaderParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderParameter', demands=['WebGL2RenderingContext', 'WebGLShader', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderParameter', demands=['WebGLRenderingContext', 'WebGLShader', 'GLenum'], returns='*'),
    ],
    "getShaderPrecisionFormat": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderPrecisionFormat', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='WebGLShaderPrecisionFormat'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderPrecisionFormat', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='WebGLShaderPrecisionFormat'),
    ],
    "getShaderInfoLog": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderInfoLog', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='str'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderInfoLog', demands=['WebGLRenderingContext', 'WebGLShader'], returns='str'),
    ],
    "getShaderSource": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getShaderSource', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='str'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getShaderSource', demands=['WebGLRenderingContext', 'WebGLShader'], returns='str'),
    ],
    "getTexParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getTexParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getTexParameter', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getUniform": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniform', demands=['WebGL2RenderingContext', 'WebGLProgram', 'WebGLUniformLocation'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getUniform', demands=['WebGLRenderingContext', 'WebGLProgram', 'WebGLUniformLocation'], returns='*'),
    ],
    "getUniformLocation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='WebGLUniformLocation'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getUniformLocation', demands=['WebGLRenderingContext', 'WebGLProgram', 'str'], returns='WebGLUniformLocation'),
    ],
    "getVertexAttrib": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getVertexAttrib', demands=['WebGL2RenderingContext', 'GLuint', 'GLenum'], returns='*'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getVertexAttrib', demands=['WebGLRenderingContext', 'GLuint', 'GLenum'], returns='*'),
    ],
    "getVertexAttribOffset": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getVertexAttribOffset', demands=['WebGL2RenderingContext', 'GLuint', 'GLenum'], returns='GLintptr'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='getVertexAttribOffset', demands=['WebGLRenderingContext', 'GLuint', 'GLenum'], returns='GLintptr'),
    ],
    "hint": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='hint', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='hint', demands=['WebGLRenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "isBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isBuffer', demands=['WebGL2RenderingContext', 'WebGLBuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isBuffer', demands=['WebGLRenderingContext', 'WebGLBuffer'], returns='GLboolean'),
    ],
    "isEnabled": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isEnabled', demands=['WebGL2RenderingContext', 'GLenum'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isEnabled', demands=['WebGLRenderingContext', 'GLenum'], returns='GLboolean'),
    ],
    "isFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isFramebuffer', demands=['WebGL2RenderingContext', 'WebGLFramebuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isFramebuffer', demands=['WebGLRenderingContext', 'WebGLFramebuffer'], returns='GLboolean'),
    ],
    "isProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='GLboolean'),
    ],
    "isRenderbuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isRenderbuffer', demands=['WebGL2RenderingContext', 'WebGLRenderbuffer'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isRenderbuffer', demands=['WebGLRenderingContext', 'WebGLRenderbuffer'], returns='GLboolean'),
    ],
    "isShader": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isShader', demands=['WebGL2RenderingContext', 'WebGLShader'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isShader', demands=['WebGLRenderingContext', 'WebGLShader'], returns='GLboolean'),
    ],
    "isTexture": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isTexture', demands=['WebGL2RenderingContext', 'WebGLTexture'], returns='GLboolean'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='isTexture', demands=['WebGLRenderingContext', 'WebGLTexture'], returns='GLboolean'),
    ],
    "lineWidth": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='lineWidth', demands=['WebGL2RenderingContext', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='lineWidth', demands=['WebGLRenderingContext', 'GLfloat'], returns='None'),
    ],
    "linkProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='linkProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='linkProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "pixelStorei": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='pixelStorei', demands=['WebGL2RenderingContext', 'GLenum', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='pixelStorei', demands=['WebGLRenderingContext', 'GLenum', 'GLint'], returns='None'),
    ],
    "polygonOffset": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='polygonOffset', demands=['WebGL2RenderingContext', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='polygonOffset', demands=['WebGLRenderingContext', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "renderbufferStorage": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='renderbufferStorage', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='renderbufferStorage', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "sampleCoverage": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='sampleCoverage', demands=['WebGL2RenderingContext', 'GLclampf', 'GLboolean'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='sampleCoverage', demands=['WebGLRenderingContext', 'GLclampf', 'GLboolean'], returns='None'),
    ],
    "scissor": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='scissor', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='scissor', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "shaderSource": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='shaderSource', demands=['WebGL2RenderingContext', 'WebGLShader', 'str'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='shaderSource', demands=['WebGLRenderingContext', 'WebGLShader', 'str'], returns='None'),
    ],
    "stencilFunc": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilFunc', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilFunc', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLuint'], returns='None'),
    ],
    "stencilFuncSeparate": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilFuncSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLint', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilFuncSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLint', 'GLuint'], returns='None'),
    ],
    "stencilMask": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilMask', demands=['WebGL2RenderingContext', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilMask', demands=['WebGLRenderingContext', 'GLuint'], returns='None'),
    ],
    "stencilMaskSeparate": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilMaskSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilMaskSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLuint'], returns='None'),
    ],
    "stencilOp": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilOp', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilOp', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "stencilOpSeparate": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='stencilOpSeparate', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='stencilOpSeparate', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "texParameterf": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texParameterf', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texParameterf', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLfloat'], returns='None'),
    ],
    "texParameteri": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texParameteri', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texParameteri', demands=['WebGLRenderingContext', 'GLenum', 'GLenum', 'GLint'], returns='None'),
    ],
    "uniform1f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat'], returns='None'),
    ],
    "uniform2f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform3f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform4f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4f', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4f', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "uniform1i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint'], returns='None'),
    ],
    "uniform2i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint'], returns='None'),
    ],
    "uniform3i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "uniform4i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4i', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4i', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "useProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='useProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='useProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "validateProgram": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='validateProgram', demands=['WebGL2RenderingContext', 'WebGLProgram'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='validateProgram', demands=['WebGLRenderingContext', 'WebGLProgram'], returns='None'),
    ],
    "vertexAttrib1f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib1f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib1f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib2f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib2f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib2f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib3f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib3f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib3f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib4f": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib4f', demands=['WebGL2RenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib4f', demands=['WebGLRenderingContext', 'GLuint', 'GLfloat', 'GLfloat', 'GLfloat', 'GLfloat'], returns='None'),
    ],
    "vertexAttrib1fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib1fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib1fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
    ],
    "vertexAttrib2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib2fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib2fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
    ],
    "vertexAttrib3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib3fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib3fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
    ],
    "vertexAttrib4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttrib4fv', demands=['WebGL2RenderingContext', 'GLuint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttrib4fv', demands=['WebGLRenderingContext', 'GLuint', 'Float32List'], returns='None'),
    ],
    "vertexAttribPointer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribPointer', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLboolean', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='vertexAttribPointer', demands=['WebGLRenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLboolean', 'GLsizei', 'GLintptr'], returns='None'),
    ],
    "makeXRCompatible": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='makeXRCompatible', demands=['WebGL2RenderingContext'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='makeXRCompatible', demands=['WebGLRenderingContext'], returns='None'),
    ],
    "copyBufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLintptr', 'GLintptr', 'GLsizeiptr'], returns='None'),
    ],
    "getBufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getBufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
    ],
    "blitFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='blitFramebuffer', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLbitfield', 'GLenum'], returns='None'),
    ],
    "framebufferTextureLayer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='framebufferTextureLayer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint', 'GLint'], returns='None'),
    ],
    "invalidateFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='None'),
    ],
    "invalidateSubFramebuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='invalidateSubFramebuffer', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "readBuffer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readBuffer', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "getInternalformatParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getInternalformatParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum', 'GLenum'], returns='*'),
    ],
    "renderbufferStorageMultisample": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='renderbufferStorageMultisample', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "texStorage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texStorage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "texStorage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texStorage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "texImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
    ],
    "texSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
    ],
    "copyTexSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='copyTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "compressedTexImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
    ],
    "compressedTexSubImage3D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage3D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
    ],
    "getFragDataLocation": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getFragDataLocation', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLint'),
    ],
    "uniform1ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint'], returns='None'),
    ],
    "uniform2ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform3ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform4ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4ui', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLuint', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "uniform1uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniform2uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniform3uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniform4uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4uiv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Uint32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix3x2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix4x2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix2x3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix4x3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4x3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix2x4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "uniformMatrix3x4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3x4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
    ],
    "vertexAttribI4i": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4i', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLint', 'GLint', 'GLint'], returns='None'),
    ],
    "vertexAttribI4iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4iv', demands=['WebGL2RenderingContext', 'GLuint', 'Int32List'], returns='None'),
    ],
    "vertexAttribI4ui": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4ui', demands=['WebGL2RenderingContext', 'GLuint', 'GLuint', 'GLuint', 'GLuint', 'GLuint'], returns='None'),
    ],
    "vertexAttribI4uiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribI4uiv', demands=['WebGL2RenderingContext', 'GLuint', 'Uint32List'], returns='None'),
    ],
    "vertexAttribIPointer": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribIPointer', demands=['WebGL2RenderingContext', 'GLuint', 'GLint', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
    ],
    "vertexAttribDivisor": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='vertexAttribDivisor', demands=['WebGL2RenderingContext', 'GLuint', 'GLuint'], returns='None'),
    ],
    "drawArraysInstanced": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawArraysInstanced', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "drawElementsInstanced": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawElementsInstanced', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr', 'GLsizei'], returns='None'),
    ],
    "drawRangeElements": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawRangeElements', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'GLuint', 'GLsizei', 'GLenum', 'GLintptr'], returns='None'),
    ],
    "drawBuffers": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='drawBuffers', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "clearBufferfv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Float32List', 'int'], returns='None'),
    ],
    "clearBufferiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Int32List', 'int'], returns='None'),
    ],
    "clearBufferuiv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Uint32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferuiv', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'Uint32List', 'int'], returns='None'),
    ],
    "clearBufferfi": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clearBufferfi', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLfloat', 'GLint'], returns='None'),
    ],
    "createQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createQuery', demands=['WebGL2RenderingContext'], returns='WebGLQuery'),
    ],
    "deleteQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteQuery', demands=['WebGL2RenderingContext', 'WebGLQuery'], returns='None'),
    ],
    "isQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isQuery', demands=['WebGL2RenderingContext', 'WebGLQuery'], returns='GLboolean'),
    ],
    "beginQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='beginQuery', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLQuery'], returns='None'),
    ],
    "endQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='endQuery', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "getQuery": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getQuery', demands=['WebGL2RenderingContext', 'GLenum', 'GLenum'], returns='WebGLQuery'),
    ],
    "getQueryParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getQueryParameter', demands=['WebGL2RenderingContext', 'WebGLQuery', 'GLenum'], returns='*'),
    ],
    "createSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createSampler', demands=['WebGL2RenderingContext'], returns='WebGLSampler'),
        PrototypeCall(constructor='GPUDevice', fn='createSampler', demands=['GPUDevice'], returns='GPUSampler'),
        PrototypeCall(constructor='GPUDevice', fn='createSampler', demands=['GPUDevice', 'dict'], returns='GPUSampler'),
    ],
    "deleteSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteSampler', demands=['WebGL2RenderingContext', 'WebGLSampler'], returns='None'),
    ],
    "isSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isSampler', demands=['WebGL2RenderingContext', 'WebGLSampler'], returns='GLboolean'),
    ],
    "bindSampler": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindSampler', demands=['WebGL2RenderingContext', 'GLuint', 'WebGLSampler'], returns='None'),
    ],
    "samplerParameteri": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='samplerParameteri', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum', 'GLint'], returns='None'),
    ],
    "samplerParameterf": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='samplerParameterf', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum', 'GLfloat'], returns='None'),
    ],
    "getSamplerParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSamplerParameter', demands=['WebGL2RenderingContext', 'WebGLSampler', 'GLenum'], returns='*'),
    ],
    "fenceSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='fenceSync', demands=['WebGL2RenderingContext', 'GLenum', 'GLbitfield'], returns='WebGLSync'),
    ],
    "isSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isSync', demands=['WebGL2RenderingContext', 'WebGLSync'], returns='GLboolean'),
    ],
    "deleteSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteSync', demands=['WebGL2RenderingContext', 'WebGLSync'], returns='None'),
    ],
    "clientWaitSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='clientWaitSync', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLbitfield', 'GLuint64'], returns='GLenum'),
    ],
    "waitSync": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='waitSync', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLbitfield', 'GLint64'], returns='None'),
    ],
    "getSyncParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getSyncParameter', demands=['WebGL2RenderingContext', 'WebGLSync', 'GLenum'], returns='*'),
    ],
    "createTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createTransformFeedback', demands=['WebGL2RenderingContext'], returns='WebGLTransformFeedback'),
    ],
    "deleteTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteTransformFeedback', demands=['WebGL2RenderingContext', 'WebGLTransformFeedback'], returns='None'),
    ],
    "isTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isTransformFeedback', demands=['WebGL2RenderingContext', 'WebGLTransformFeedback'], returns='GLboolean'),
    ],
    "bindTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindTransformFeedback', demands=['WebGL2RenderingContext', 'GLenum', 'WebGLTransformFeedback'], returns='None'),
    ],
    "beginTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='beginTransformFeedback', demands=['WebGL2RenderingContext', 'GLenum'], returns='None'),
    ],
    "endTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='endTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "transformFeedbackVaryings": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='transformFeedbackVaryings', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str', 'GLenum'], returns='None'),
    ],
    "getTransformFeedbackVarying": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getTransformFeedbackVarying', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='WebGLActiveInfo'),
    ],
    "pauseTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='pauseTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "resumeTransformFeedback": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='resumeTransformFeedback', demands=['WebGL2RenderingContext'], returns='None'),
    ],
    "bindBufferBase": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBufferBase', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'WebGLBuffer'], returns='None'),
    ],
    "bindBufferRange": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindBufferRange', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint', 'WebGLBuffer', 'GLintptr', 'GLsizeiptr'], returns='None'),
    ],
    "getIndexedParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getIndexedParameter', demands=['WebGL2RenderingContext', 'GLenum', 'GLuint'], returns='*'),
    ],
    "getUniformIndices": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformIndices', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLuint'),
    ],
    "getActiveUniforms": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniforms', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'GLenum'], returns='*'),
    ],
    "getUniformBlockIndex": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getUniformBlockIndex', demands=['WebGL2RenderingContext', 'WebGLProgram', 'str'], returns='GLuint'),
    ],
    "getActiveUniformBlockParameter": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniformBlockParameter', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'GLenum'], returns='*'),
    ],
    "getActiveUniformBlockName": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='getActiveUniformBlockName', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint'], returns='str'),
    ],
    "uniformBlockBinding": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformBlockBinding', demands=['WebGL2RenderingContext', 'WebGLProgram', 'GLuint', 'GLuint'], returns='None'),
    ],
    "createVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='createVertexArray', demands=['WebGL2RenderingContext'], returns='WebGLVertexArrayObject'),
    ],
    "deleteVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='deleteVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='None'),
    ],
    "isVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='isVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='GLboolean'),
    ],
    "bindVertexArray": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bindVertexArray', demands=['WebGL2RenderingContext', 'WebGLVertexArrayObject'], returns='None'),
    ],
    "bufferData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'GLsizeiptr', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'AllowSharedBufferSource', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'ArrayBufferView', 'GLenum', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferData', demands=['WebGL2RenderingContext', 'GLenum', 'ArrayBufferView', 'GLenum', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferData', demands=['WebGLRenderingContext', 'GLenum', 'GLsizeiptr', 'GLenum'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferData', demands=['WebGLRenderingContext', 'GLenum', 'AllowSharedBufferSource', 'GLenum'], returns='None'),
    ],
    "bufferSubData": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='bufferSubData', demands=['WebGL2RenderingContext', 'GLenum', 'GLintptr', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='bufferSubData', demands=['WebGLRenderingContext', 'GLenum', 'GLintptr', 'AllowSharedBufferSource'], returns='None'),
    ],
    "texImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLint', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
    ],
    "texSubImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='texSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='texSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLenum', 'GLenum', 'TexImageSource'], returns='None'),
    ],
    "compressedTexImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='compressedTexImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLenum', 'GLsizei', 'GLsizei', 'GLint', 'ArrayBufferView'], returns='None'),
    ],
    "compressedTexSubImage2D": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLsizei', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='compressedTexSubImage2D', demands=['WebGL2RenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='compressedTexSubImage2D', demands=['WebGLRenderingContext', 'GLenum', 'GLint', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'ArrayBufferView'], returns='None'),
    ],
    "uniform1fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
    ],
    "uniform2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
    ],
    "uniform3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
    ],
    "uniform4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Float32List'], returns='None'),
    ],
    "uniform1iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform1iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform1iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
    ],
    "uniform2iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform2iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform2iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
    ],
    "uniform3iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform3iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform3iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
    ],
    "uniform4iv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniform4iv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'Int32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniform4iv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'Int32List'], returns='None'),
    ],
    "uniformMatrix2fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix2fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix2fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
    ],
    "uniformMatrix3fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix3fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix3fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
    ],
    "uniformMatrix4fv": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='uniformMatrix4fv', demands=['WebGL2RenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List', 'int', 'GLuint'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='uniformMatrix4fv', demands=['WebGLRenderingContext', 'WebGLUniformLocation', 'GLboolean', 'Float32List'], returns='None'),
    ],
    "readPixels": [
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'GLintptr'], returns='None'),
        PrototypeCall(constructor='WebGL2RenderingContext', fn='readPixels', demands=['WebGL2RenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView', 'int'], returns='None'),
        PrototypeCall(constructor='WebGLRenderingContext', fn='readPixels', demands=['WebGLRenderingContext', 'GLint', 'GLint', 'GLsizei', 'GLsizei', 'GLenum', 'GLenum', 'ArrayBufferView'], returns='None'),
    ],
    "DOMPointReadOnly": [
        NewCall(constructor='DOMPointReadOnly', demands=[], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float', 'float'], returns='DOMPointReadOnly'),
        NewCall(constructor='DOMPointReadOnly', demands=['float', 'float', 'float', 'float'], returns='DOMPointReadOnly'),
    ],
    "fromPoint": [
        DirectCall(fn='fromPoint', receiver='DOMPointReadOnly', demands=[], returns='DOMPointReadOnly'),
        DirectCall(fn='fromPoint', receiver='DOMPointReadOnly', demands=['dict'], returns='DOMPointReadOnly'),
        DirectCall(fn='fromPoint', receiver='DOMPoint', demands=[], returns='DOMPoint'),
        DirectCall(fn='fromPoint', receiver='DOMPoint', demands=['dict'], returns='DOMPoint'),
    ],
    "x": [
        FieldCall(field='x', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='x', demands=['DOMPoint'], returns='float'),
        FieldCall(field='x', demands=['DOMPoint', 'float'], returns='float'),
        FieldCall(field='x', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='x', demands=['DOMRect'], returns='float'),
        FieldCall(field='x', demands=['DOMRect', 'float'], returns='float'),
        FieldCall(field='x', demands=['Gyroscope'], returns='float'),
        FieldCall(field='x', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='x', demands=['CSSTranslate', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='x', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['CSSRotate', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['CSSScale', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='x', demands=['Magnetometer'], returns='float'),
        FieldCall(field='x', demands=['UncalibratedMagnetometer'], returns='float'),
        FieldCall(field='x', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='x', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['XRViewport'], returns='int'),
        FieldCall(field='x', demands=['Accelerometer'], returns='float'),
        FieldCall(field='x', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='x', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='x', demands=['DeviceMotionEventAcceleration'], returns='float'),
    ],
    "y": [
        FieldCall(field='y', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='y', demands=['DOMPoint'], returns='float'),
        FieldCall(field='y', demands=['DOMPoint', 'float'], returns='float'),
        FieldCall(field='y', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='y', demands=['DOMRect'], returns='float'),
        FieldCall(field='y', demands=['DOMRect', 'float'], returns='float'),
        FieldCall(field='y', demands=['Gyroscope'], returns='float'),
        FieldCall(field='y', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='y', demands=['CSSTranslate', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='y', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['CSSRotate', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['CSSScale', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='y', demands=['Magnetometer'], returns='float'),
        FieldCall(field='y', demands=['UncalibratedMagnetometer'], returns='float'),
        FieldCall(field='y', demands=['SVGSVGElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGUseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='y', demands=['SVGImageElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGForeignObjectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGPatternElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['XRViewport'], returns='int'),
        FieldCall(field='y', demands=['Accelerometer'], returns='float'),
        FieldCall(field='y', demands=['SVGMaskElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGFilterElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='y', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='y', demands=['DeviceMotionEventAcceleration'], returns='float'),
    ],
    "z": [
        FieldCall(field='z', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='z', demands=['DOMPoint'], returns='float'),
        FieldCall(field='z', demands=['DOMPoint', 'float'], returns='float'),
        FieldCall(field='z', demands=['Gyroscope'], returns='float'),
        FieldCall(field='z', demands=['CSSTranslate'], returns='CSSNumericValue'),
        FieldCall(field='z', demands=['CSSTranslate', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='z', demands=['CSSRotate'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['CSSRotate', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['CSSScale'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['CSSScale', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='z', demands=['Magnetometer'], returns='float'),
        FieldCall(field='z', demands=['UncalibratedMagnetometer'], returns='float'),
        FieldCall(field='z', demands=['Accelerometer'], returns='float'),
        FieldCall(field='z', demands=['SVGFEPointLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='z', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='z', demands=['DeviceMotionEventAcceleration'], returns='float'),
    ],
    "w": [
        FieldCall(field='w', demands=['DOMPointReadOnly'], returns='float'),
        FieldCall(field='w', demands=['DOMPoint'], returns='float'),
        FieldCall(field='w', demands=['DOMPoint', 'float'], returns='float'),
        FieldCall(field='w', demands=['CSSHWB'], returns='CSSNumberish'),
        FieldCall(field='w', demands=['CSSHWB', 'CSSNumberish'], returns='CSSNumberish'),
    ],
    "matrixTransform": [
        PrototypeCall(constructor='DOMPointReadOnly', fn='matrixTransform', demands=['DOMPointReadOnly'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMPointReadOnly', fn='matrixTransform', demands=['DOMPointReadOnly', 'dict'], returns='DOMPoint'),
    ],
    "DOMPoint": [
        NewCall(constructor='DOMPoint', demands=[], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float', 'float'], returns='DOMPoint'),
        NewCall(constructor='DOMPoint', demands=['float', 'float', 'float', 'float'], returns='DOMPoint'),
    ],
    "DOMRectReadOnly": [
        NewCall(constructor='DOMRectReadOnly', demands=[], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float', 'float'], returns='DOMRectReadOnly'),
        NewCall(constructor='DOMRectReadOnly', demands=['float', 'float', 'float', 'float'], returns='DOMRectReadOnly'),
    ],
    "fromRect": [
        DirectCall(fn='fromRect', receiver='DOMRectReadOnly', demands=[], returns='DOMRectReadOnly'),
        DirectCall(fn='fromRect', receiver='DOMRectReadOnly', demands=['dict'], returns='DOMRectReadOnly'),
        DirectCall(fn='fromRect', receiver='DOMRect', demands=[], returns='DOMRect'),
        DirectCall(fn='fromRect', receiver='DOMRect', demands=['dict'], returns='DOMRect'),
        DirectCall(fn='fromRect', receiver='DOMQuad', demands=[], returns='DOMQuad'),
        DirectCall(fn='fromRect', receiver='DOMQuad', demands=['dict'], returns='DOMQuad'),
    ],
    "top": [
        FieldCall(field='top', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='top', demands=['Window'], returns='WindowProxy'),
        FieldCall(field='top', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='top', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='top', demands=['ScreenDetailed'], returns='int'),
    ],
    "right": [
        FieldCall(field='right', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='right', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='right', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "bottom": [
        FieldCall(field='bottom', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='bottom', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='bottom', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "left": [
        FieldCall(field='left', demands=['DOMRectReadOnly'], returns='float'),
        FieldCall(field='left', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='left', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='left', demands=['ScreenDetailed'], returns='int'),
    ],
    "DOMRect": [
        NewCall(constructor='DOMRect', demands=[], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float', 'float'], returns='DOMRect'),
        NewCall(constructor='DOMRect', demands=['float', 'float', 'float', 'float'], returns='DOMRect'),
    ],
    "item": [
        PrototypeCall(constructor='DOMRectList', fn='item', demands=['DOMRectList', 'int'], returns='DOMRect'),
        PrototypeCall(constructor='HTMLAllCollection', fn='item', demands=['HTMLAllCollection'], returns='HTMLCollection'),
        PrototypeCall(constructor='HTMLAllCollection', fn='item', demands=['HTMLAllCollection', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='DOMStringList', fn='item', demands=['DOMStringList', 'int'], returns='str'),
        PrototypeCall(constructor='HTMLSelectElement', fn='item', demands=['HTMLSelectElement', 'int'], returns='HTMLOptionElement'),
        PrototypeCall(constructor='PluginArray', fn='item', demands=['PluginArray', 'int'], returns='Plugin'),
        PrototypeCall(constructor='MimeTypeArray', fn='item', demands=['MimeTypeArray', 'int'], returns='MimeType'),
        PrototypeCall(constructor='Plugin', fn='item', demands=['Plugin', 'int'], returns='MimeType'),
        PrototypeCall(constructor='AnimationNodeList', fn='item', demands=['AnimationNodeList', 'int'], returns='AnimationEffect'),
        PrototypeCall(constructor='TouchList', fn='item', demands=['TouchList', 'int'], returns='Touch'),
        PrototypeCall(constructor='SpeechRecognitionResult', fn='item', demands=['SpeechRecognitionResult', 'int'], returns='SpeechRecognitionAlternative'),
        PrototypeCall(constructor='SpeechRecognitionResultList', fn='item', demands=['SpeechRecognitionResultList', 'int'], returns='SpeechRecognitionResult'),
        PrototypeCall(constructor='SpeechGrammarList', fn='item', demands=['SpeechGrammarList', 'int'], returns='SpeechGrammar'),
        PrototypeCall(constructor='MediaList', fn='item', demands=['MediaList', 'int'], returns='CSSOMString'),
        PrototypeCall(constructor='StyleSheetList', fn='item', demands=['StyleSheetList', 'int'], returns='CSSStyleSheet'),
        PrototypeCall(constructor='CSSRuleList', fn='item', demands=['CSSRuleList', 'int'], returns='CSSRule'),
        PrototypeCall(constructor='CSSStyleDeclaration', fn='item', demands=['CSSStyleDeclaration', 'int'], returns='CSSOMString'),
        PrototypeCall(constructor='FileList', fn='item', demands=['FileList', 'int'], returns='File'),
        PrototypeCall(constructor='NodeList', fn='item', demands=['NodeList', 'int'], returns='Node'),
        PrototypeCall(constructor='HTMLCollection', fn='item', demands=['HTMLCollection', 'int'], returns='Element'),
        PrototypeCall(constructor='NamedNodeMap', fn='item', demands=['NamedNodeMap', 'int'], returns='Attr'),
        PrototypeCall(constructor='DOMTokenList', fn='item', demands=['DOMTokenList', 'int'], returns='str'),
    ],
    "DOMQuad": [
        NewCall(constructor='DOMQuad', demands=[], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['dict'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['dict', 'dict'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['dict', 'dict', 'dict'], returns='DOMQuad'),
        NewCall(constructor='DOMQuad', demands=['dict', 'dict', 'dict', 'dict'], returns='DOMQuad'),
    ],
    "fromQuad": [
        DirectCall(fn='fromQuad', receiver='DOMQuad', demands=[], returns='DOMQuad'),
        DirectCall(fn='fromQuad', receiver='DOMQuad', demands=['dict'], returns='DOMQuad'),
    ],
    "p1": [
        FieldCall(field='p1', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p2": [
        FieldCall(field='p2', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p3": [
        FieldCall(field='p3', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "p4": [
        FieldCall(field='p4', demands=['DOMQuad'], returns='DOMPoint'),
    ],
    "getBounds": [
        PrototypeCall(constructor='DOMQuad', fn='getBounds', demands=['DOMQuad'], returns='DOMRect'),
    ],
    "DOMMatrixReadOnly": [
        NewCall(constructor='DOMMatrixReadOnly', demands=[], returns='DOMMatrixReadOnly'),
        NewCall(constructor='DOMMatrixReadOnly', demands=['str'], returns='DOMMatrixReadOnly'),
    ],
    "fromMatrix": [
        DirectCall(fn='fromMatrix', receiver='DOMMatrixReadOnly', demands=[], returns='DOMMatrixReadOnly'),
        DirectCall(fn='fromMatrix', receiver='DOMMatrixReadOnly', demands=['dict'], returns='DOMMatrixReadOnly'),
        DirectCall(fn='fromMatrix', receiver='DOMMatrix', demands=[], returns='DOMMatrix'),
        DirectCall(fn='fromMatrix', receiver='DOMMatrix', demands=['dict'], returns='DOMMatrix'),
    ],
    "fromFloat32Array": [
        DirectCall(fn='fromFloat32Array', receiver='DOMMatrixReadOnly', demands=['Float32Array'], returns='DOMMatrixReadOnly'),
        DirectCall(fn='fromFloat32Array', receiver='DOMMatrix', demands=['Float32Array'], returns='DOMMatrix'),
    ],
    "fromFloat64Array": [
        DirectCall(fn='fromFloat64Array', receiver='DOMMatrixReadOnly', demands=['Float64Array'], returns='DOMMatrixReadOnly'),
        DirectCall(fn='fromFloat64Array', receiver='DOMMatrix', demands=['Float64Array'], returns='DOMMatrix'),
    ],
    "a": [
        FieldCall(field='a', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='a', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='a', demands=['DOMMatrix', 'float'], returns='float'),
        FieldCall(field='a', demands=['CSSLab'], returns='CSSColorNumber'),
        FieldCall(field='a', demands=['CSSLab', 'CSSColorNumber'], returns='CSSColorNumber'),
        FieldCall(field='a', demands=['CSSOKLab'], returns='CSSColorNumber'),
        FieldCall(field='a', demands=['CSSOKLab', 'CSSColorNumber'], returns='CSSColorNumber'),
    ],
    "b": [
        FieldCall(field='b', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='b', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='b', demands=['DOMMatrix', 'float'], returns='float'),
        FieldCall(field='b', demands=['CSSRGB'], returns='CSSColorRGBComp'),
        FieldCall(field='b', demands=['CSSRGB', 'CSSColorRGBComp'], returns='CSSColorRGBComp'),
        FieldCall(field='b', demands=['CSSHWB'], returns='CSSNumberish'),
        FieldCall(field='b', demands=['CSSHWB', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='b', demands=['CSSLab'], returns='CSSColorNumber'),
        FieldCall(field='b', demands=['CSSLab', 'CSSColorNumber'], returns='CSSColorNumber'),
        FieldCall(field='b', demands=['CSSOKLab'], returns='CSSColorNumber'),
        FieldCall(field='b', demands=['CSSOKLab', 'CSSColorNumber'], returns='CSSColorNumber'),
    ],
    "c": [
        FieldCall(field='c', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='c', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='c', demands=['DOMMatrix', 'float'], returns='float'),
        FieldCall(field='c', demands=['CSSLCH'], returns='CSSColorPercent'),
        FieldCall(field='c', demands=['CSSLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='c', demands=['CSSOKLCH'], returns='CSSColorPercent'),
        FieldCall(field='c', demands=['CSSOKLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
    ],
    "d": [
        FieldCall(field='d', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='d', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='d', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "e": [
        FieldCall(field='e', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='e', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='e', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "f": [
        FieldCall(field='f', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='f', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='f', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m11": [
        FieldCall(field='m11', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m11', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m11', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m12": [
        FieldCall(field='m12', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m12', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m12', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m13": [
        FieldCall(field='m13', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m13', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m13', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m14": [
        FieldCall(field='m14', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m14', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m14', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m21": [
        FieldCall(field='m21', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m21', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m21', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m22": [
        FieldCall(field='m22', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m22', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m22', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m23": [
        FieldCall(field='m23', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m23', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m23', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m24": [
        FieldCall(field='m24', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m24', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m24', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m31": [
        FieldCall(field='m31', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m31', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m31', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m32": [
        FieldCall(field='m32', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m32', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m32', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m33": [
        FieldCall(field='m33', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m33', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m33', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m34": [
        FieldCall(field='m34', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m34', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m34', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m41": [
        FieldCall(field='m41', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m41', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m41', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m42": [
        FieldCall(field='m42', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m42', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m42', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m43": [
        FieldCall(field='m43', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m43', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m43', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "m44": [
        FieldCall(field='m44', demands=['DOMMatrixReadOnly'], returns='float'),
        FieldCall(field='m44', demands=['DOMMatrix'], returns='float'),
        FieldCall(field='m44', demands=['DOMMatrix', 'float'], returns='float'),
    ],
    "is2D": [
        FieldCall(field='is2D', demands=['DOMMatrixReadOnly'], returns='bool'),
        FieldCall(field='is2D', demands=['CSSTransformValue'], returns='bool'),
        FieldCall(field='is2D', demands=['CSSTransformComponent'], returns='bool'),
        FieldCall(field='is2D', demands=['CSSTransformComponent', 'bool'], returns='bool'),
    ],
    "isIdentity": [
        FieldCall(field='isIdentity', demands=['DOMMatrixReadOnly'], returns='bool'),
    ],
    "translate": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='translate', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        FieldCall(field='translate', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='translate', demands=['HTMLElement', 'bool'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='translate', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='translate', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Translator', fn='translate', demands=['Translator', 'str'], returns='str'),
        PrototypeCall(constructor='Translator', fn='translate', demands=['Translator', 'str', 'dict'], returns='str'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='translate', demands=['PaintRenderingContext2D', 'float', 'float'], returns='None'),
    ],
    "scale": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='scale', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='scale', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        FieldCall(field='scale', demands=['VisualViewport'], returns='float'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='scale', demands=['PaintRenderingContext2D', 'float', 'float'], returns='None'),
        FieldCall(field='scale', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedNumber'),
    ],
    "scaleNonUniform": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scaleNonUniform', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scale3d": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='scale3d', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotate": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotate', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='rotate', demands=['CanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='rotate', demands=['OffscreenCanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='rotate', demands=['PaintRenderingContext2D', 'float'], returns='None'),
        FieldCall(field='rotate', demands=['SVGTextPositioningElement'], returns='SVGAnimatedNumberList'),
    ],
    "rotateFromVector": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateFromVector', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateAxisAngle": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='rotateAxisAngle', demands=['DOMMatrixReadOnly', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "skewX": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewX', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewX', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
    ],
    "skewY": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewY', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='skewY', demands=['DOMMatrixReadOnly', 'float'], returns='DOMMatrix'),
    ],
    "multiply": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='multiply', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='multiply', demands=['DOMMatrixReadOnly', 'dict'], returns='DOMMatrix'),
    ],
    "flipX": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='flipX', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
    ],
    "flipY": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='flipY', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
    ],
    "inverse": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='inverse', demands=['DOMMatrixReadOnly'], returns='DOMMatrix'),
        FieldCall(field='inverse', demands=['XRRigidTransform'], returns='XRRigidTransform'),
    ],
    "transformPoint": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='transformPoint', demands=['DOMMatrixReadOnly'], returns='DOMPoint'),
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='transformPoint', demands=['DOMMatrixReadOnly', 'dict'], returns='DOMPoint'),
    ],
    "toFloat32Array": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toFloat32Array', demands=['DOMMatrixReadOnly'], returns='Float32Array'),
    ],
    "toFloat64Array": [
        PrototypeCall(constructor='DOMMatrixReadOnly', fn='toFloat64Array', demands=['DOMMatrixReadOnly'], returns='Float64Array'),
    ],
    "DOMMatrix": [
        NewCall(constructor='DOMMatrix', demands=[], returns='DOMMatrix'),
        NewCall(constructor='DOMMatrix', demands=['str'], returns='DOMMatrix'),
    ],
    "multiplySelf": [
        PrototypeCall(constructor='DOMMatrix', fn='multiplySelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='multiplySelf', demands=['DOMMatrix', 'dict'], returns='DOMMatrix'),
    ],
    "preMultiplySelf": [
        PrototypeCall(constructor='DOMMatrix', fn='preMultiplySelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='preMultiplySelf', demands=['DOMMatrix', 'dict'], returns='DOMMatrix'),
    ],
    "translateSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='translateSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scaleSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scaleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "scale3dSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='scale3dSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateFromVectorSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateFromVectorSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
    ],
    "rotateAxisAngleSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float', 'float'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='rotateAxisAngleSelf', demands=['DOMMatrix', 'float', 'float', 'float', 'float'], returns='DOMMatrix'),
    ],
    "skewXSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='skewXSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewXSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "skewYSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='skewYSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
        PrototypeCall(constructor='DOMMatrix', fn='skewYSelf', demands=['DOMMatrix', 'float'], returns='DOMMatrix'),
    ],
    "invertSelf": [
        PrototypeCall(constructor='DOMMatrix', fn='invertSelf', demands=['DOMMatrix'], returns='DOMMatrix'),
    ],
    "setMatrixValue": [
        PrototypeCall(constructor='DOMMatrix', fn='setMatrixValue', demands=['DOMMatrix', 'str'], returns='DOMMatrix'),
    ],
    "segments": [
        FieldCall(field='segments', demands=['Viewport'], returns='DOMRect'),
    ],
    "createContext": [
        PrototypeCall(constructor='ML', fn='createContext', demands=['ML'], returns='MLContext'),
        PrototypeCall(constructor='ML', fn='createContext', demands=['ML', 'dict'], returns='MLContext'),
        PrototypeCall(constructor='ML', fn='createContext', demands=['ML', 'GPUDevice'], returns='MLContext'),
    ],
    "dispatch": [
        PrototypeCall(constructor='MLContext', fn='dispatch', demands=['MLContext', 'MLGraph', 'MLNamedTensors', 'MLNamedTensors'], returns='None'),
    ],
    "createTensor": [
        PrototypeCall(constructor='MLContext', fn='createTensor', demands=['MLContext', 'dict'], returns='MLTensor'),
    ],
    "createConstantTensor": [
        PrototypeCall(constructor='MLContext', fn='createConstantTensor', demands=['MLContext', 'dict', 'AllowSharedBufferSource'], returns='MLTensor'),
    ],
    "readTensor": [
        PrototypeCall(constructor='MLContext', fn='readTensor', demands=['MLContext', 'MLTensor'], returns='ArrayBuffer'),
        PrototypeCall(constructor='MLContext', fn='readTensor', demands=['MLContext', 'MLTensor', 'AllowSharedBufferSource'], returns='None'),
    ],
    "writeTensor": [
        PrototypeCall(constructor='MLContext', fn='writeTensor', demands=['MLContext', 'MLTensor', 'AllowSharedBufferSource'], returns='None'),
    ],
    "opSupportLimits": [
        PrototypeCall(constructor='MLContext', fn='opSupportLimits', demands=['MLContext'], returns='dict'),
    ],
    "lost": [
        FieldCall(field='lost', demands=['MLContext'], returns='dict'),
    ],
    "dataType": [
        FieldCall(field='dataType', demands=['MLOperand'], returns='MLOperandDataType'),
        FieldCall(field='dataType', demands=['MLTensor'], returns='MLOperandDataType'),
    ],
    "shape": [
        FieldCall(field='shape', demands=['MLOperand'], returns='int'),
        FieldCall(field='shape', demands=['MLTensor'], returns='int'),
        FieldCall(field='shape', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='shape', demands=['HTMLAreaElement', 'str'], returns='str'),
    ],
    "readable": [
        FieldCall(field='readable', demands=['MLTensor'], returns='bool'),
        FieldCall(field='readable', demands=['RTCRtpScriptTransformer'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['MediaStreamTrackProcessor'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['WebTransportDatagramDuplexStream'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['WebTransportBidirectionalStream'], returns='WebTransportReceiveStream'),
        FieldCall(field='readable', demands=['SerialPort'], returns='ReadableStream'),
        FieldCall(field='readable', demands=['TransformStream'], returns='ReadableStream'),
    ],
    "writable": [
        FieldCall(field='writable', demands=['MLTensor'], returns='bool'),
        FieldCall(field='writable', demands=['RTCRtpScriptTransformer'], returns='WritableStream'),
        FieldCall(field='writable', demands=['VideoTrackGenerator'], returns='WritableStream'),
        FieldCall(field='writable', demands=['WebTransportBidirectionalStream'], returns='WebTransportSendStream'),
        FieldCall(field='writable', demands=['SerialPort'], returns='WritableStream'),
        FieldCall(field='writable', demands=['TransformStream'], returns='WritableStream'),
    ],
    "constant": [
        FieldCall(field='constant', demands=['MLTensor'], returns='bool'),
        PrototypeCall(constructor='MLGraphBuilder', fn='constant', demands=['MLGraphBuilder', 'dict', 'AllowSharedBufferSource'], returns='MLOperand'),
        PrototypeCall(constructor='MLGraphBuilder', fn='constant', demands=['MLGraphBuilder', 'MLOperandDataType', 'MLNumber'], returns='MLOperand'),
        PrototypeCall(constructor='MLGraphBuilder', fn='constant', demands=['MLGraphBuilder', 'MLTensor'], returns='MLOperand'),
    ],
    "MLGraphBuilder": [
        NewCall(constructor='MLGraphBuilder', demands=['MLContext'], returns='MLGraphBuilder'),
    ],
    "input": [
        PrototypeCall(constructor='MLGraphBuilder', fn='input', demands=['MLGraphBuilder', 'str', 'dict'], returns='MLOperand'),
    ],
    "build": [
        PrototypeCall(constructor='MLGraphBuilder', fn='build', demands=['MLGraphBuilder', 'MLNamedOperands'], returns='MLGraph'),
    ],
    "add": [
        PrototypeCall(constructor='ContentIndex', fn='add', demands=['ContentIndex', 'dict'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='add', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='add', demands=['IDBObjectStore', '*', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='Cache', fn='add', demands=['Cache', '*'], returns='None'),
        PrototypeCall(constructor='RdfDataset', fn='add', demands=['RdfDataset', 'str', 'RdfGraph'], returns='None'),
        PrototypeCall(constructor='RdfGraph', fn='add', demands=['RdfGraph', 'RdfTriple'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptGroupElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptionElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptionElement', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptGroupElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='add', demands=['HTMLOptionsCollection', 'HTMLOptGroupElement', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptGroupElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptionElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptionElement', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptGroupElement', 'HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='add', demands=['HTMLSelectElement', 'HTMLOptGroupElement', 'int'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='add', demands=['DataTransferItemList', 'str', 'str'], returns='DataTransferItem'),
        PrototypeCall(constructor='DataTransferItemList', fn='add', demands=['DataTransferItemList', 'File'], returns='DataTransferItem'),
        PrototypeCall(constructor='CSSNumericValue', fn='add', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
        PrototypeCall(constructor='FontFaceSet', fn='add', demands=['FontFaceSet', 'FontFace'], returns='FontFaceSet'),
        PrototypeCall(constructor='DOMTokenList', fn='add', demands=['DOMTokenList', 'str'], returns='None'),
    ],
    "delete": [
        PrototypeCall(constructor='ContentIndex', fn='delete', demands=['ContentIndex', 'str'], returns='None'),
        PrototypeCall(constructor='Headers', fn='delete', demands=['Headers', 'str'], returns='None'),
        PrototypeCall(constructor='IDBObjectStore', fn='delete', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBCursor', fn='delete', demands=['IDBCursor'], returns='IDBRequest'),
        PrototypeCall(constructor='URLSearchParams', fn='delete', demands=['URLSearchParams', 'str'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='delete', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='Cache', fn='delete', demands=['Cache', '*'], returns='bool'),
        PrototypeCall(constructor='Cache', fn='delete', demands=['Cache', '*', 'dict'], returns='bool'),
        PrototypeCall(constructor='CacheStorage', fn='delete', demands=['CacheStorage', 'str'], returns='bool'),
        PrototypeCall(constructor='XRAnchor', fn='delete', demands=['XRAnchor'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='delete', demands=['StylePropertyMap', 'str'], returns='None'),
        PrototypeCall(constructor='StorageBucketManager', fn='delete', demands=['StorageBucketManager', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='delete', demands=['FormData', 'str'], returns='None'),
        PrototypeCall(constructor='FontFaceSet', fn='delete', demands=['FontFaceSet', 'FontFace'], returns='bool'),
        PrototypeCall(constructor='CookieStore', fn='delete', demands=['CookieStore', 'str'], returns='None'),
        PrototypeCall(constructor='CookieStore', fn='delete', demands=['CookieStore', 'dict'], returns='None'),
        PrototypeCall(constructor='SharedStorage', fn='delete', demands=['SharedStorage', 'str'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='delete', demands=['SharedStorage', 'str', 'dict'], returns='*'),
    ],
    "getAll": [
        PrototypeCall(constructor='ContentIndex', fn='getAll', demands=['ContentIndex'], returns='dict'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAll', demands=['IDBObjectStore', '*', 'int'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAll', demands=['IDBIndex', '*', 'int'], returns='IDBRequest'),
        PrototypeCall(constructor='URLSearchParams', fn='getAll', demands=['URLSearchParams', 'str'], returns='str'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='getAll', demands=['StylePropertyMapReadOnly', 'str'], returns='CSSStyleValue'),
        PrototypeCall(constructor='FormData', fn='getAll', demands=['FormData', 'str'], returns='FormDataEntryValue'),
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore', 'str'], returns='CookieList'),
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore'], returns='CookieList'),
        PrototypeCall(constructor='CookieStore', fn='getAll', demands=['CookieStore', 'dict'], returns='CookieList'),
    ],
    "ContentIndexEvent": [
        NewCall(constructor='ContentIndexEvent', demands=['str', 'dict'], returns='ContentIndexEvent'),
    ],
    "id": [
        FieldCall(field='id', demands=['ContentIndexEvent'], returns='str'),
        FieldCall(field='id', demands=['Animation'], returns='str'),
        FieldCall(field='id', demands=['Animation', 'str'], returns='str'),
        FieldCall(field='id', demands=['PerformanceEntry'], returns='int'),
        FieldCall(field='id', demands=['Gamepad'], returns='str'),
        FieldCall(field='id', demands=['LargestContentfulPaint'], returns='str'),
        FieldCall(field='id', demands=['BluetoothDevice'], returns='str'),
        FieldCall(field='id', demands=['Client'], returns='str'),
        FieldCall(field='id', demands=['RTCDataChannel'], returns='unsigned short'),
        FieldCall(field='id', demands=['AudioTrack'], returns='str'),
        FieldCall(field='id', demands=['VideoTrack'], returns='str'),
        FieldCall(field='id', demands=['TextTrack'], returns='str'),
        FieldCall(field='id', demands=['TextTrackCue'], returns='str'),
        FieldCall(field='id', demands=['TextTrackCue', 'str'], returns='str'),
        FieldCall(field='id', demands=['NavigationHistoryEntry'], returns='str'),
        FieldCall(field='id', demands=['NavigationDestination'], returns='str'),
        FieldCall(field='id', demands=['NotRestoredReasons'], returns='str'),
        FieldCall(field='id', demands=['MediaStream'], returns='str'),
        FieldCall(field='id', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='id', demands=['PaymentRequest'], returns='str'),
        FieldCall(field='id', demands=['MIDIPort'], returns='str'),
        FieldCall(field='id', demands=['VTTRegion'], returns='str'),
        FieldCall(field='id', demands=['VTTRegion', 'str'], returns='str'),
        FieldCall(field='id', demands=['NDEFRecord'], returns='str'),
        FieldCall(field='id', demands=['PresentationConnection'], returns='str'),
        FieldCall(field='id', demands=['Credential'], returns='str'),
        FieldCall(field='id', demands=['PerformanceElementTiming'], returns='str'),
        FieldCall(field='id', demands=['Element'], returns='str'),
        FieldCall(field='id', demands=['Element', 'str'], returns='str'),
        FieldCall(field='id', demands=['BackgroundFetchRegistration'], returns='str'),
    ],
    "DocumentTimeline": [
        NewCall(constructor='DocumentTimeline', demands=[], returns='DocumentTimeline'),
        NewCall(constructor='DocumentTimeline', demands=['dict'], returns='DocumentTimeline'),
    ],
    "Animation": [
        NewCall(constructor='Animation', demands=[], returns='Animation'),
        NewCall(constructor='Animation', demands=['AnimationEffect'], returns='Animation'),
        NewCall(constructor='Animation', demands=['AnimationEffect', 'AnimationTimeline'], returns='Animation'),
    ],
    "effect": [
        FieldCall(field='effect', demands=['Animation'], returns='AnimationEffect'),
        FieldCall(field='effect', demands=['Animation', 'AnimationEffect'], returns='AnimationEffect'),
    ],
    "timeline": [
        FieldCall(field='timeline', demands=['Animation'], returns='AnimationTimeline'),
        FieldCall(field='timeline', demands=['Animation', 'AnimationTimeline'], returns='AnimationTimeline'),
        FieldCall(field='timeline', demands=['AnimationTrigger'], returns='AnimationTimeline'),
        FieldCall(field='timeline', demands=['AnimationTrigger', 'AnimationTimeline'], returns='AnimationTimeline'),
    ],
    "playbackRate": [
        FieldCall(field='playbackRate', demands=['Animation'], returns='float'),
        FieldCall(field='playbackRate', demands=['Animation', 'float'], returns='float'),
        FieldCall(field='playbackRate', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='playbackRate', demands=['HTMLMediaElement', 'float'], returns='float'),
        FieldCall(field='playbackRate', demands=['AudioBufferSourceNode'], returns='AudioParam'),
    ],
    "playState": [
        FieldCall(field='playState', demands=['Animation'], returns='AnimationPlayState'),
    ],
    "replaceState": [
        FieldCall(field='replaceState', demands=['Animation'], returns='AnimationReplaceState'),
        PrototypeCall(constructor='History', fn='replaceState', demands=['History', '*', 'str'], returns='None'),
        PrototypeCall(constructor='History', fn='replaceState', demands=['History', '*', 'str', 'str'], returns='None'),
    ],
    "pending": [
        FieldCall(field='pending', demands=['Animation'], returns='bool'),
        FieldCall(field='pending', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "ready": [
        FieldCall(field='ready', demands=['Animation'], returns='Animation'),
        FieldCall(field='ready', demands=['ImageTrackList'], returns='None'),
        FieldCall(field='ready', demands=['ServiceWorkerContainer'], returns='ServiceWorkerRegistration'),
        FieldCall(field='ready', demands=['WebTransport'], returns='None'),
        FieldCall(field='ready', demands=['FontFaceSet'], returns='FontFaceSet'),
        FieldCall(field='ready', demands=['WritableStreamDefaultWriter'], returns='None'),
        FieldCall(field='ready', demands=['ViewTransition'], returns='None'),
    ],
    "finished": [
        FieldCall(field='finished', demands=['Animation'], returns='Animation'),
        FieldCall(field='finished', demands=['NavigationTransition'], returns='None'),
        FieldCall(field='finished', demands=['ViewTransition'], returns='None'),
    ],
    "onfinish": [
        FieldCall(field='onfinish', demands=['Animation'], returns='EventHandler'),
        FieldCall(field='onfinish', demands=['Animation', 'EventHandler'], returns='EventHandler'),
    ],
    "oncancel": [
        FieldCall(field='oncancel', demands=['Animation'], returns='EventHandler'),
        FieldCall(field='oncancel', demands=['Animation', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='oncancel', demands=['CloseWatcher'], returns='EventHandler'),
        FieldCall(field='oncancel', demands=['CloseWatcher', 'EventHandler'], returns='EventHandler'),
    ],
    "onremove": [
        FieldCall(field='onremove', demands=['Animation'], returns='EventHandler'),
        FieldCall(field='onremove', demands=['Animation', 'EventHandler'], returns='EventHandler'),
    ],
    "cancel": [
        PrototypeCall(constructor='Animation', fn='cancel', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='cancel', demands=['SpeechSynthesis'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='cancel', demands=['ReadableStream'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='cancel', demands=['ReadableStream', '*'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='cancel', demands=['ReadableStreamDefaultReader'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='cancel', demands=['ReadableStreamDefaultReader', '*'], returns='None'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='cancel', demands=['ReadableStreamBYOBReader'], returns='None'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='cancel', demands=['ReadableStreamBYOBReader', '*'], returns='None'),
        PrototypeCall(constructor='XRHitTestSource', fn='cancel', demands=['XRHitTestSource'], returns='None'),
        PrototypeCall(constructor='XRTransientInputHitTestSource', fn='cancel', demands=['XRTransientInputHitTestSource'], returns='None'),
    ],
    "play": [
        PrototypeCall(constructor='Animation', fn='play', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='play', demands=['HTMLMediaElement'], returns='None'),
    ],
    "pause": [
        PrototypeCall(constructor='Animation', fn='pause', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='HTMLMediaElement', fn='pause', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='pause', demands=['SpeechSynthesis'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='pause', demands=['MediaRecorder'], returns='None'),
    ],
    "updatePlaybackRate": [
        PrototypeCall(constructor='Animation', fn='updatePlaybackRate', demands=['Animation', 'float'], returns='None'),
    ],
    "reverse": [
        PrototypeCall(constructor='Animation', fn='reverse', demands=['Animation'], returns='None'),
    ],
    "persist": [
        PrototypeCall(constructor='Animation', fn='persist', demands=['Animation'], returns='None'),
        PrototypeCall(constructor='StorageManager', fn='persist', demands=['StorageManager'], returns='bool'),
        PrototypeCall(constructor='StorageBucket', fn='persist', demands=['StorageBucket'], returns='bool'),
    ],
    "commitStyles": [
        PrototypeCall(constructor='Animation', fn='commitStyles', demands=['Animation'], returns='None'),
    ],
    "getTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='getTiming', demands=['AnimationEffect'], returns='dict'),
        PrototypeCall(constructor='WorkletAnimationEffect', fn='getTiming', demands=['WorkletAnimationEffect'], returns='dict'),
    ],
    "getComputedTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='getComputedTiming', demands=['AnimationEffect'], returns='dict'),
        PrototypeCall(constructor='WorkletAnimationEffect', fn='getComputedTiming', demands=['WorkletAnimationEffect'], returns='dict'),
    ],
    "updateTiming": [
        PrototypeCall(constructor='AnimationEffect', fn='updateTiming', demands=['AnimationEffect'], returns='None'),
        PrototypeCall(constructor='AnimationEffect', fn='updateTiming', demands=['AnimationEffect', 'dict'], returns='None'),
    ],
    "KeyframeEffect": [
        NewCall(constructor='KeyframeEffect', demands=['Element', 'object'], returns='KeyframeEffect'),
        NewCall(constructor='KeyframeEffect', demands=['Element', 'object', 'float'], returns='KeyframeEffect'),
        NewCall(constructor='KeyframeEffect', demands=['KeyframeEffect'], returns='KeyframeEffect'),
    ],
    "pseudoElement": [
        FieldCall(field='pseudoElement', demands=['KeyframeEffect'], returns='CSSOMString'),
        FieldCall(field='pseudoElement', demands=['KeyframeEffect', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='pseudoElement', demands=['AnimationEvent'], returns='CSSOMString'),
        FieldCall(field='pseudoElement', demands=['TransitionEvent'], returns='CSSOMString'),
    ],
    "composite": [
        FieldCall(field='composite', demands=['KeyframeEffect'], returns='CompositeOperation'),
        FieldCall(field='composite', demands=['KeyframeEffect', 'CompositeOperation'], returns='CompositeOperation'),
    ],
    "getKeyframes": [
        PrototypeCall(constructor='KeyframeEffect', fn='getKeyframes', demands=['KeyframeEffect'], returns='object'),
    ],
    "setKeyframes": [
        PrototypeCall(constructor='KeyframeEffect', fn='setKeyframes', demands=['KeyframeEffect', 'object'], returns='None'),
    ],
    "maxTextureDimension1D": [
        FieldCall(field='maxTextureDimension1D', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxTextureDimension2D": [
        FieldCall(field='maxTextureDimension2D', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxTextureDimension3D": [
        FieldCall(field='maxTextureDimension3D', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxTextureArrayLayers": [
        FieldCall(field='maxTextureArrayLayers', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxBindGroups": [
        FieldCall(field='maxBindGroups', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxBindGroupsPlusVertexBuffers": [
        FieldCall(field='maxBindGroupsPlusVertexBuffers', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxBindingsPerBindGroup": [
        FieldCall(field='maxBindingsPerBindGroup', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxDynamicUniformBuffersPerPipelineLayout": [
        FieldCall(field='maxDynamicUniformBuffersPerPipelineLayout', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxDynamicStorageBuffersPerPipelineLayout": [
        FieldCall(field='maxDynamicStorageBuffersPerPipelineLayout', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxSampledTexturesPerShaderStage": [
        FieldCall(field='maxSampledTexturesPerShaderStage', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxSamplersPerShaderStage": [
        FieldCall(field='maxSamplersPerShaderStage', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxStorageBuffersPerShaderStage": [
        FieldCall(field='maxStorageBuffersPerShaderStage', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxStorageTexturesPerShaderStage": [
        FieldCall(field='maxStorageTexturesPerShaderStage', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxUniformBuffersPerShaderStage": [
        FieldCall(field='maxUniformBuffersPerShaderStage', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxUniformBufferBindingSize": [
        FieldCall(field='maxUniformBufferBindingSize', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxStorageBufferBindingSize": [
        FieldCall(field='maxStorageBufferBindingSize', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "minUniformBufferOffsetAlignment": [
        FieldCall(field='minUniformBufferOffsetAlignment', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "minStorageBufferOffsetAlignment": [
        FieldCall(field='minStorageBufferOffsetAlignment', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxVertexBuffers": [
        FieldCall(field='maxVertexBuffers', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxBufferSize": [
        FieldCall(field='maxBufferSize', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxVertexAttributes": [
        FieldCall(field='maxVertexAttributes', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxVertexBufferArrayStride": [
        FieldCall(field='maxVertexBufferArrayStride', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxInterStageShaderVariables": [
        FieldCall(field='maxInterStageShaderVariables', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxColorAttachments": [
        FieldCall(field='maxColorAttachments', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxColorAttachmentBytesPerSample": [
        FieldCall(field='maxColorAttachmentBytesPerSample', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeWorkgroupStorageSize": [
        FieldCall(field='maxComputeWorkgroupStorageSize', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeInvocationsPerWorkgroup": [
        FieldCall(field='maxComputeInvocationsPerWorkgroup', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeWorkgroupSizeX": [
        FieldCall(field='maxComputeWorkgroupSizeX', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeWorkgroupSizeY": [
        FieldCall(field='maxComputeWorkgroupSizeY', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeWorkgroupSizeZ": [
        FieldCall(field='maxComputeWorkgroupSizeZ', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "maxComputeWorkgroupsPerDimension": [
        FieldCall(field='maxComputeWorkgroupsPerDimension', demands=['GPUSupportedLimits'], returns='int'),
    ],
    "vendor": [
        FieldCall(field='vendor', demands=['GPUAdapterInfo'], returns='str'),
    ],
    "architecture": [
        FieldCall(field='architecture', demands=['GPUAdapterInfo'], returns='str'),
    ],
    "device": [
        FieldCall(field='device', demands=['GPUAdapterInfo'], returns='str'),
        FieldCall(field='device', demands=['HIDConnectionEvent'], returns='HIDDevice'),
        FieldCall(field='device', demands=['HIDInputReportEvent'], returns='HIDDevice'),
        FieldCall(field='device', demands=['BluetoothAdvertisingEvent'], returns='BluetoothDevice'),
        FieldCall(field='device', demands=['BluetoothRemoteGATTServer'], returns='BluetoothDevice'),
        FieldCall(field='device', demands=['BluetoothRemoteGATTService'], returns='BluetoothDevice'),
        FieldCall(field='device', demands=['USBConnectionEvent'], returns='USBDevice'),
    ],
    "description": [
        FieldCall(field='description', demands=['GPUAdapterInfo'], returns='str'),
        FieldCall(field='description', demands=['Plugin'], returns='str'),
        FieldCall(field='description', demands=['MimeType'], returns='str'),
        FieldCall(field='description', demands=['PerformanceServerTiming'], returns='str'),
    ],
    "subgroupMinSize": [
        FieldCall(field='subgroupMinSize', demands=['GPUAdapterInfo'], returns='int'),
    ],
    "subgroupMaxSize": [
        FieldCall(field='subgroupMaxSize', demands=['GPUAdapterInfo'], returns='int'),
    ],
    "isFallbackAdapter": [
        FieldCall(field='isFallbackAdapter', demands=['GPUAdapterInfo'], returns='bool'),
    ],
    "requestAdapter": [
        PrototypeCall(constructor='GPU', fn='requestAdapter', demands=['GPU'], returns='GPUAdapter'),
        PrototypeCall(constructor='GPU', fn='requestAdapter', demands=['GPU', 'dict'], returns='GPUAdapter'),
    ],
    "getPreferredCanvasFormat": [
        PrototypeCall(constructor='GPU', fn='getPreferredCanvasFormat', demands=['GPU'], returns='GPUTextureFormat'),
    ],
    "wgslLanguageFeatures": [
        FieldCall(field='wgslLanguageFeatures', demands=['GPU'], returns='WGSLLanguageFeatures'),
    ],
    "features": [
        FieldCall(field='features', demands=['GPUAdapter'], returns='GPUSupportedFeatures'),
        FieldCall(field='features', demands=['GPUDevice'], returns='GPUSupportedFeatures'),
        PrototypeCall(constructor='PermissionsPolicy', fn='features', demands=['PermissionsPolicy'], returns='str'),
    ],
    "limits": [
        FieldCall(field='limits', demands=['GPUAdapter'], returns='GPUSupportedLimits'),
        FieldCall(field='limits', demands=['GPUDevice'], returns='GPUSupportedLimits'),
    ],
    "info": [
        FieldCall(field='info', demands=['GPUAdapter'], returns='GPUAdapterInfo'),
        FieldCall(field='info', demands=['NavigateEvent'], returns='*'),
    ],
    "requestDevice": [
        PrototypeCall(constructor='GPUAdapter', fn='requestDevice', demands=['GPUAdapter'], returns='GPUDevice'),
        PrototypeCall(constructor='GPUAdapter', fn='requestDevice', demands=['GPUAdapter', 'dict'], returns='GPUDevice'),
        PrototypeCall(constructor='HID', fn='requestDevice', demands=['HID', 'dict'], returns='HIDDevice'),
        PrototypeCall(constructor='Bluetooth', fn='requestDevice', demands=['Bluetooth'], returns='BluetoothDevice'),
        PrototypeCall(constructor='Bluetooth', fn='requestDevice', demands=['Bluetooth', 'dict'], returns='BluetoothDevice'),
        PrototypeCall(constructor='USB', fn='requestDevice', demands=['USB', 'dict'], returns='USBDevice'),
    ],
    "adapterInfo": [
        FieldCall(field='adapterInfo', demands=['GPUDevice'], returns='GPUAdapterInfo'),
    ],
    "queue": [
        FieldCall(field='queue', demands=['GPUDevice'], returns='GPUQueue'),
    ],
    "importExternalTexture": [
        PrototypeCall(constructor='GPUDevice', fn='importExternalTexture', demands=['GPUDevice', 'dict'], returns='GPUExternalTexture'),
    ],
    "createBindGroupLayout": [
        PrototypeCall(constructor='GPUDevice', fn='createBindGroupLayout', demands=['GPUDevice', 'dict'], returns='GPUBindGroupLayout'),
    ],
    "createPipelineLayout": [
        PrototypeCall(constructor='GPUDevice', fn='createPipelineLayout', demands=['GPUDevice', 'dict'], returns='GPUPipelineLayout'),
    ],
    "createBindGroup": [
        PrototypeCall(constructor='GPUDevice', fn='createBindGroup', demands=['GPUDevice', 'dict'], returns='GPUBindGroup'),
    ],
    "createShaderModule": [
        PrototypeCall(constructor='GPUDevice', fn='createShaderModule', demands=['GPUDevice', 'dict'], returns='GPUShaderModule'),
    ],
    "createComputePipeline": [
        PrototypeCall(constructor='GPUDevice', fn='createComputePipeline', demands=['GPUDevice', 'dict'], returns='GPUComputePipeline'),
    ],
    "createRenderPipeline": [
        PrototypeCall(constructor='GPUDevice', fn='createRenderPipeline', demands=['GPUDevice', 'dict'], returns='GPURenderPipeline'),
    ],
    "createComputePipelineAsync": [
        PrototypeCall(constructor='GPUDevice', fn='createComputePipelineAsync', demands=['GPUDevice', 'dict'], returns='GPUComputePipeline'),
    ],
    "createRenderPipelineAsync": [
        PrototypeCall(constructor='GPUDevice', fn='createRenderPipelineAsync', demands=['GPUDevice', 'dict'], returns='GPURenderPipeline'),
    ],
    "createCommandEncoder": [
        PrototypeCall(constructor='GPUDevice', fn='createCommandEncoder', demands=['GPUDevice'], returns='GPUCommandEncoder'),
        PrototypeCall(constructor='GPUDevice', fn='createCommandEncoder', demands=['GPUDevice', 'dict'], returns='GPUCommandEncoder'),
    ],
    "createRenderBundleEncoder": [
        PrototypeCall(constructor='GPUDevice', fn='createRenderBundleEncoder', demands=['GPUDevice', 'dict'], returns='GPURenderBundleEncoder'),
    ],
    "createQuerySet": [
        PrototypeCall(constructor='GPUDevice', fn='createQuerySet', demands=['GPUDevice', 'dict'], returns='GPUQuerySet'),
    ],
    "usage": [
        FieldCall(field='usage', demands=['GPUBuffer'], returns='GPUFlagsConstant'),
        FieldCall(field='usage', demands=['GPUTexture'], returns='GPUFlagsConstant'),
    ],
    "mapState": [
        FieldCall(field='mapState', demands=['GPUBuffer'], returns='GPUBufferMapState'),
    ],
    "mapAsync": [
        PrototypeCall(constructor='GPUBuffer', fn='mapAsync', demands=['GPUBuffer', 'GPUMapModeFlags'], returns='None'),
        PrototypeCall(constructor='GPUBuffer', fn='mapAsync', demands=['GPUBuffer', 'GPUMapModeFlags', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPUBuffer', fn='mapAsync', demands=['GPUBuffer', 'GPUMapModeFlags', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "getMappedRange": [
        PrototypeCall(constructor='GPUBuffer', fn='getMappedRange', demands=['GPUBuffer'], returns='ArrayBuffer'),
        PrototypeCall(constructor='GPUBuffer', fn='getMappedRange', demands=['GPUBuffer', 'GPUSize64'], returns='ArrayBuffer'),
        PrototypeCall(constructor='GPUBuffer', fn='getMappedRange', demands=['GPUBuffer', 'GPUSize64', 'GPUSize64'], returns='ArrayBuffer'),
    ],
    "unmap": [
        PrototypeCall(constructor='GPUBuffer', fn='unmap', demands=['GPUBuffer'], returns='None'),
    ],
    "createView": [
        PrototypeCall(constructor='GPUTexture', fn='createView', demands=['GPUTexture'], returns='GPUTextureView'),
        PrototypeCall(constructor='GPUTexture', fn='createView', demands=['GPUTexture', 'dict'], returns='GPUTextureView'),
    ],
    "depthOrArrayLayers": [
        FieldCall(field='depthOrArrayLayers', demands=['GPUTexture'], returns='GPUIntegerCoordinateOut'),
    ],
    "mipLevelCount": [
        FieldCall(field='mipLevelCount', demands=['GPUTexture'], returns='GPUIntegerCoordinateOut'),
    ],
    "sampleCount": [
        FieldCall(field='sampleCount', demands=['GPUTexture'], returns='GPUSize32Out'),
    ],
    "dimension": [
        FieldCall(field='dimension', demands=['GPUTexture'], returns='GPUTextureDimension'),
    ],
    "getCompilationInfo": [
        PrototypeCall(constructor='GPUShaderModule', fn='getCompilationInfo', demands=['GPUShaderModule'], returns='GPUCompilationInfo'),
    ],
    "message": [
        FieldCall(field='message', demands=['GPUCompilationMessage'], returns='str'),
        FieldCall(field='message', demands=['GPUDeviceLostInfo'], returns='str'),
        FieldCall(field='message', demands=['GPUError'], returns='str'),
        FieldCall(field='message', demands=['GeolocationPositionError'], returns='str'),
        FieldCall(field='message', demands=['MediaError'], returns='str'),
        FieldCall(field='message', demands=['ErrorEvent'], returns='str'),
        FieldCall(field='message', demands=['MediaKeyMessageEvent'], returns='ArrayBuffer'),
        FieldCall(field='message', demands=['SpeechRecognitionErrorEvent'], returns='str'),
        FieldCall(field='message', demands=['NDEFReadingEvent'], returns='NDEFMessage'),
        FieldCall(field='message', demands=['PresentationConnectionCloseEvent'], returns='str'),
        FieldCall(field='message', demands=['DOMException'], returns='str'),
    ],
    "lineNum": [
        FieldCall(field='lineNum', demands=['GPUCompilationMessage'], returns='int'),
    ],
    "linePos": [
        FieldCall(field='linePos', demands=['GPUCompilationMessage'], returns='int'),
    ],
    "offset": [
        FieldCall(field='offset', demands=['GPUCompilationMessage'], returns='int'),
        FieldCall(field='offset', demands=['CaretPosition'], returns='int'),
        FieldCall(field='offset', demands=['ConstantSourceNode'], returns='AudioParam'),
        FieldCall(field='offset', demands=['SVGStopElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='offset', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "messages": [
        FieldCall(field='messages', demands=['GPUCompilationInfo'], returns='GPUCompilationMessage'),
    ],
    "GPUPipelineError": [
        NewCall(constructor='GPUPipelineError', demands=['str'], returns='GPUPipelineError'),
        NewCall(constructor='GPUPipelineError', demands=['str', 'dict'], returns='GPUPipelineError'),
    ],
    "reason": [
        FieldCall(field='reason', demands=['GPUPipelineError'], returns='GPUPipelineErrorReason'),
        FieldCall(field='reason', demands=['GPUDeviceLostInfo'], returns='GPUDeviceLostReason'),
        FieldCall(field='reason', demands=['NotRestoredReasonDetails'], returns='str'),
        FieldCall(field='reason', demands=['PromiseRejectionEvent'], returns='*'),
        FieldCall(field='reason', demands=['CloseEvent'], returns='str'),
        FieldCall(field='reason', demands=['PresentationConnectionCloseEvent'], returns='PresentationConnectionCloseReason'),
        FieldCall(field='reason', demands=['AbortSignal'], returns='*'),
    ],
    "getBindGroupLayout": [
        PrototypeCall(constructor='GPUComputePipeline', fn='getBindGroupLayout', demands=['GPUComputePipeline', 'int'], returns='GPUBindGroupLayout'),
        PrototypeCall(constructor='GPURenderPipeline', fn='getBindGroupLayout', demands=['GPURenderPipeline', 'int'], returns='GPUBindGroupLayout'),
    ],
    "beginRenderPass": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='beginRenderPass', demands=['GPUCommandEncoder', 'dict'], returns='GPURenderPassEncoder'),
    ],
    "beginComputePass": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='beginComputePass', demands=['GPUCommandEncoder'], returns='GPUComputePassEncoder'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='beginComputePass', demands=['GPUCommandEncoder', 'dict'], returns='GPUComputePassEncoder'),
    ],
    "copyBufferToBuffer": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyBufferToBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUBuffer'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyBufferToBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyBufferToBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUSize64', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyBufferToBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUSize64', 'GPUBuffer', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "copyBufferToTexture": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyBufferToTexture', demands=['GPUCommandEncoder', 'dict', 'dict', 'GPUExtent3D'], returns='None'),
    ],
    "copyTextureToBuffer": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyTextureToBuffer', demands=['GPUCommandEncoder', 'dict', 'dict', 'GPUExtent3D'], returns='None'),
    ],
    "copyTextureToTexture": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='copyTextureToTexture', demands=['GPUCommandEncoder', 'dict', 'dict', 'GPUExtent3D'], returns='None'),
    ],
    "clearBuffer": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='clearBuffer', demands=['GPUCommandEncoder', 'GPUBuffer'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='clearBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPUCommandEncoder', fn='clearBuffer', demands=['GPUCommandEncoder', 'GPUBuffer', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "resolveQuerySet": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='resolveQuerySet', demands=['GPUCommandEncoder', 'GPUQuerySet', 'GPUSize32', 'GPUSize32', 'GPUBuffer', 'GPUSize64'], returns='None'),
    ],
    "pushDebugGroup": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='pushDebugGroup', demands=['GPUCommandEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='pushDebugGroup', demands=['GPUComputePassEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='pushDebugGroup', demands=['GPURenderPassEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='pushDebugGroup', demands=['GPURenderBundleEncoder', 'str'], returns='None'),
    ],
    "popDebugGroup": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='popDebugGroup', demands=['GPUCommandEncoder'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='popDebugGroup', demands=['GPUComputePassEncoder'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='popDebugGroup', demands=['GPURenderPassEncoder'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='popDebugGroup', demands=['GPURenderBundleEncoder'], returns='None'),
    ],
    "insertDebugMarker": [
        PrototypeCall(constructor='GPUCommandEncoder', fn='insertDebugMarker', demands=['GPUCommandEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='insertDebugMarker', demands=['GPUComputePassEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='insertDebugMarker', demands=['GPURenderPassEncoder', 'str'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='insertDebugMarker', demands=['GPURenderBundleEncoder', 'str'], returns='None'),
    ],
    "setPipeline": [
        PrototypeCall(constructor='GPUComputePassEncoder', fn='setPipeline', demands=['GPUComputePassEncoder', 'GPUComputePipeline'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setPipeline', demands=['GPURenderPassEncoder', 'GPURenderPipeline'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setPipeline', demands=['GPURenderBundleEncoder', 'GPURenderPipeline'], returns='None'),
    ],
    "dispatchWorkgroups": [
        PrototypeCall(constructor='GPUComputePassEncoder', fn='dispatchWorkgroups', demands=['GPUComputePassEncoder', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='dispatchWorkgroups', demands=['GPUComputePassEncoder', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='dispatchWorkgroups', demands=['GPUComputePassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
    ],
    "dispatchWorkgroupsIndirect": [
        PrototypeCall(constructor='GPUComputePassEncoder', fn='dispatchWorkgroupsIndirect', demands=['GPUComputePassEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
    ],
    "end": [
        PrototypeCall(constructor='GPUComputePassEncoder', fn='end', demands=['GPUComputePassEncoder'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='end', demands=['GPURenderPassEncoder'], returns='None'),
        PrototypeCall(constructor='TimeRanges', fn='end', demands=['TimeRanges', 'int'], returns='float'),
        FieldCall(field='end', demands=['CSSScopeRule'], returns='CSSOMString'),
        PrototypeCall(constructor='XRSession', fn='end', demands=['XRSession'], returns='None'),
    ],
    "setBindGroup": [
        PrototypeCall(constructor='GPUComputePassEncoder', fn='setBindGroup', demands=['GPUComputePassEncoder', 'GPUIndex32', 'GPUBindGroup'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='setBindGroup', demands=['GPUComputePassEncoder', 'GPUIndex32', 'GPUBindGroup', 'GPUBufferDynamicOffset'], returns='None'),
        PrototypeCall(constructor='GPUComputePassEncoder', fn='setBindGroup', demands=['GPUComputePassEncoder', 'GPUIndex32', 'GPUBindGroup', 'Uint32Array', 'GPUSize64', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setBindGroup', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBindGroup'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setBindGroup', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBindGroup', 'GPUBufferDynamicOffset'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setBindGroup', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBindGroup', 'Uint32Array', 'GPUSize64', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setBindGroup', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBindGroup'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setBindGroup', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBindGroup', 'GPUBufferDynamicOffset'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setBindGroup', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBindGroup', 'Uint32Array', 'GPUSize64', 'GPUSize32'], returns='None'),
    ],
    "setViewport": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setViewport', demands=['GPURenderPassEncoder', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "setScissorRect": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setScissorRect', demands=['GPURenderPassEncoder', 'GPUIntegerCoordinate', 'GPUIntegerCoordinate', 'GPUIntegerCoordinate', 'GPUIntegerCoordinate'], returns='None'),
    ],
    "setBlendConstant": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setBlendConstant', demands=['GPURenderPassEncoder', 'GPUColor'], returns='None'),
    ],
    "setStencilReference": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setStencilReference', demands=['GPURenderPassEncoder', 'GPUStencilValue'], returns='None'),
    ],
    "beginOcclusionQuery": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='beginOcclusionQuery', demands=['GPURenderPassEncoder', 'GPUSize32'], returns='None'),
    ],
    "endOcclusionQuery": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='endOcclusionQuery', demands=['GPURenderPassEncoder'], returns='None'),
    ],
    "executeBundles": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='executeBundles', demands=['GPURenderPassEncoder', 'GPURenderBundle'], returns='None'),
    ],
    "setIndexBuffer": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setIndexBuffer', demands=['GPURenderPassEncoder', 'GPUBuffer', 'GPUIndexFormat'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setIndexBuffer', demands=['GPURenderPassEncoder', 'GPUBuffer', 'GPUIndexFormat', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setIndexBuffer', demands=['GPURenderPassEncoder', 'GPUBuffer', 'GPUIndexFormat', 'GPUSize64', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setIndexBuffer', demands=['GPURenderBundleEncoder', 'GPUBuffer', 'GPUIndexFormat'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setIndexBuffer', demands=['GPURenderBundleEncoder', 'GPUBuffer', 'GPUIndexFormat', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setIndexBuffer', demands=['GPURenderBundleEncoder', 'GPUBuffer', 'GPUIndexFormat', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "setVertexBuffer": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setVertexBuffer', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBuffer'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setVertexBuffer', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='setVertexBuffer', demands=['GPURenderPassEncoder', 'GPUIndex32', 'GPUBuffer', 'GPUSize64', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setVertexBuffer', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBuffer'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setVertexBuffer', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='setVertexBuffer', demands=['GPURenderBundleEncoder', 'GPUIndex32', 'GPUBuffer', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "draw": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='draw', demands=['GPURenderPassEncoder', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='draw', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='draw', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='draw', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='draw', demands=['GPURenderBundleEncoder', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='draw', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='draw', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='draw', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
    ],
    "drawIndexed": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexed', demands=['GPURenderPassEncoder', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexed', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexed', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexed', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSignedOffset32'], returns='None'),
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexed', demands=['GPURenderPassEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSignedOffset32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexed', demands=['GPURenderBundleEncoder', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexed', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexed', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexed', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSignedOffset32'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexed', demands=['GPURenderBundleEncoder', 'GPUSize32', 'GPUSize32', 'GPUSize32', 'GPUSignedOffset32', 'GPUSize32'], returns='None'),
    ],
    "drawIndirect": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndirect', demands=['GPURenderPassEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndirect', demands=['GPURenderBundleEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
    ],
    "drawIndexedIndirect": [
        PrototypeCall(constructor='GPURenderPassEncoder', fn='drawIndexedIndirect', demands=['GPURenderPassEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPURenderBundleEncoder', fn='drawIndexedIndirect', demands=['GPURenderBundleEncoder', 'GPUBuffer', 'GPUSize64'], returns='None'),
    ],
    "submit": [
        PrototypeCall(constructor='GPUQueue', fn='submit', demands=['GPUQueue', 'GPUCommandBuffer'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='submit', demands=['HTMLFormElement'], returns='None'),
    ],
    "onSubmittedWorkDone": [
        PrototypeCall(constructor='GPUQueue', fn='onSubmittedWorkDone', demands=['GPUQueue'], returns='None'),
    ],
    "writeBuffer": [
        PrototypeCall(constructor='GPUQueue', fn='writeBuffer', demands=['GPUQueue', 'GPUBuffer', 'GPUSize64', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='GPUQueue', fn='writeBuffer', demands=['GPUQueue', 'GPUBuffer', 'GPUSize64', 'AllowSharedBufferSource', 'GPUSize64'], returns='None'),
        PrototypeCall(constructor='GPUQueue', fn='writeBuffer', demands=['GPUQueue', 'GPUBuffer', 'GPUSize64', 'AllowSharedBufferSource', 'GPUSize64', 'GPUSize64'], returns='None'),
    ],
    "writeTexture": [
        PrototypeCall(constructor='GPUQueue', fn='writeTexture', demands=['GPUQueue', 'dict', 'AllowSharedBufferSource', 'dict', 'GPUExtent3D'], returns='None'),
    ],
    "copyExternalImageToTexture": [
        PrototypeCall(constructor='GPUQueue', fn='copyExternalImageToTexture', demands=['GPUQueue', 'dict', 'dict', 'GPUExtent3D'], returns='None'),
    ],
    "count": [
        FieldCall(field='count', demands=['GPUQuerySet'], returns='GPUSize32Out'),
        PrototypeCall(constructor='IDBObjectStore', fn='count', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='count', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='count', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='count', demands=['IDBIndex', '*'], returns='IDBRequest'),
    ],
    "canvas": [
        FieldCall(field='canvas', demands=['GPUCanvasContext'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['CanvasRenderingContext2D'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['ImageBitmapRenderingContext'], returns='HTMLCanvasElement'),
        FieldCall(field='canvas', demands=['OffscreenCanvasRenderingContext2D'], returns='OffscreenCanvas'),
        FieldCall(field='canvas', demands=['CanvasCaptureMediaStreamTrack'], returns='HTMLCanvasElement'),
    ],
    "configure": [
        PrototypeCall(constructor='GPUCanvasContext', fn='configure', demands=['GPUCanvasContext', 'dict'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='configure', demands=['AudioDecoder', 'dict'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='configure', demands=['VideoDecoder', 'dict'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='configure', demands=['AudioEncoder', 'dict'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='configure', demands=['VideoEncoder', 'dict'], returns='None'),
    ],
    "unconfigure": [
        PrototypeCall(constructor='GPUCanvasContext', fn='unconfigure', demands=['GPUCanvasContext'], returns='None'),
    ],
    "getConfiguration": [
        PrototypeCall(constructor='GPUCanvasContext', fn='getConfiguration', demands=['GPUCanvasContext'], returns='dict'),
        PrototypeCall(constructor='RTCPeerConnection', fn='getConfiguration', demands=['RTCPeerConnection'], returns='dict'),
        PrototypeCall(constructor='MediaKeySystemAccess', fn='getConfiguration', demands=['MediaKeySystemAccess'], returns='dict'),
    ],
    "getCurrentTexture": [
        PrototypeCall(constructor='GPUCanvasContext', fn='getCurrentTexture', demands=['GPUCanvasContext'], returns='GPUTexture'),
    ],
    "GPUValidationError": [
        NewCall(constructor='GPUValidationError', demands=['str'], returns='GPUValidationError'),
    ],
    "GPUOutOfMemoryError": [
        NewCall(constructor='GPUOutOfMemoryError', demands=['str'], returns='GPUOutOfMemoryError'),
    ],
    "GPUInternalError": [
        NewCall(constructor='GPUInternalError', demands=['str'], returns='GPUInternalError'),
    ],
    "GPUUncapturedErrorEvent": [
        NewCall(constructor='GPUUncapturedErrorEvent', demands=['str', 'dict'], returns='GPUUncapturedErrorEvent'),
    ],
    "creationTime": [
        FieldCall(field='creationTime', demands=['VideoPlaybackQuality'], returns='float'),
    ],
    "droppedVideoFrames": [
        FieldCall(field='droppedVideoFrames', demands=['VideoPlaybackQuality'], returns='int'),
    ],
    "totalVideoFrames": [
        FieldCall(field='totalVideoFrames', demands=['VideoPlaybackQuality'], returns='int'),
    ],
    "corruptedVideoFrames": [
        FieldCall(field='corruptedVideoFrames', demands=['VideoPlaybackQuality'], returns='int'),
    ],
    "Headers": [
        NewCall(constructor='Headers', demands=[], returns='Headers'),
        NewCall(constructor='Headers', demands=['HeadersInit'], returns='Headers'),
    ],
    "append": [
        PrototypeCall(constructor='Headers', fn='append', demands=['Headers', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='URLSearchParams', fn='append', demands=['URLSearchParams', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='append', demands=['StylePropertyMap', 'str', 'CSSStyleValue'], returns='None'),
        PrototypeCall(constructor='StylePropertyMap', fn='append', demands=['StylePropertyMap', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'Blob'], returns='None'),
        PrototypeCall(constructor='FormData', fn='append', demands=['FormData', 'str', 'Blob', 'str'], returns='None'),
        PrototypeCall(constructor='GroupEffect', fn='append', demands=['GroupEffect', 'AnimationEffect'], returns='None'),
        PrototypeCall(constructor='SharedStorage', fn='append', demands=['SharedStorage', 'str', 'str'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='append', demands=['SharedStorage', 'str', 'str', 'dict'], returns='*'),
        PrototypeCall(constructor='Document', fn='append', demands=['Document', 'Node'], returns='None'),
        PrototypeCall(constructor='Document', fn='append', demands=['Document', 'str'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='append', demands=['DocumentFragment', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='append', demands=['DocumentFragment', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='append', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='append', demands=['Element', 'str'], returns='None'),
    ],
    "getSetCookie": [
        PrototypeCall(constructor='Headers', fn='getSetCookie', demands=['Headers'], returns='str'),
    ],
    "has": [
        PrototypeCall(constructor='Headers', fn='has', demands=['Headers', 'str'], returns='bool'),
        PrototypeCall(constructor='URLSearchParams', fn='has', demands=['URLSearchParams', 'str'], returns='bool'),
        PrototypeCall(constructor='URLSearchParams', fn='has', demands=['URLSearchParams', 'str', 'str'], returns='bool'),
        PrototypeCall(constructor='CacheStorage', fn='has', demands=['CacheStorage', 'str'], returns='bool'),
        PrototypeCall(constructor='StylePropertyMapReadOnly', fn='has', demands=['StylePropertyMapReadOnly', 'str'], returns='bool'),
        PrototypeCall(constructor='FormData', fn='has', demands=['FormData', 'str'], returns='bool'),
        PrototypeCall(constructor='MediaKeyStatusMap', fn='has', demands=['MediaKeyStatusMap', 'BufferSource'], returns='bool'),
    ],
    "Request": [
        NewCall(constructor='Request', demands=['*'], returns='Request'),
        NewCall(constructor='Request', demands=['*', 'dict'], returns='Request'),
    ],
    "method": [
        FieldCall(field='method', demands=['Request'], returns='str'),
        FieldCall(field='method', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='method', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='method', demands=['SVGTextPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "url": [
        FieldCall(field='url', demands=['Request'], returns='str'),
        FieldCall(field='url', demands=['Response'], returns='str'),
        FieldCall(field='url', demands=['LargestContentfulPaint'], returns='str'),
        FieldCall(field='url', demands=['Client'], returns='str'),
        FieldCall(field='url', demands=['RTCIceCandidate'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceEvent'], returns='str'),
        FieldCall(field='url', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
        FieldCall(field='url', demands=['NavigationHistoryEntry'], returns='str'),
        FieldCall(field='url', demands=['NavigationDestination'], returns='str'),
        FieldCall(field='url', demands=['NotRestoredReasons'], returns='str'),
        FieldCall(field='url', demands=['EventSource'], returns='str'),
        FieldCall(field='url', demands=['StorageEvent'], returns='str'),
        FieldCall(field='url', demands=['WebSocket'], returns='str'),
        FieldCall(field='url', demands=['IdentityCredentialError'], returns='str'),
        FieldCall(field='url', demands=['PresentationConnection'], returns='str'),
        FieldCall(field='url', demands=['PerformanceElementTiming'], returns='str'),
    ],
    "headers": [
        FieldCall(field='headers', demands=['Request'], returns='Headers'),
        FieldCall(field='headers', demands=['Response'], returns='Headers'),
        FieldCall(field='headers', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='headers', demands=['HTMLTableCellElement', 'str'], returns='str'),
    ],
    "destination": [
        FieldCall(field='destination', demands=['Request'], returns='RequestDestination'),
        FieldCall(field='destination', demands=['NavigateEvent'], returns='NavigationDestination'),
        FieldCall(field='destination', demands=['BaseAudioContext'], returns='AudioDestinationNode'),
    ],
    "referrer": [
        FieldCall(field='referrer', demands=['Request'], returns='str'),
        FieldCall(field='referrer', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "referrerPolicy": [
        FieldCall(field='referrerPolicy', demands=['Request'], returns='ReferrerPolicy'),
        FieldCall(field='referrerPolicy', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLScriptElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLPortalElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['HTMLPortalElement', 'str'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['SVGAElement'], returns='str'),
        FieldCall(field='referrerPolicy', demands=['SVGAElement', 'str'], returns='str'),
    ],
    "mode": [
        FieldCall(field='mode', demands=['Request'], returns='RequestMode'),
        FieldCall(field='mode', demands=['Lock'], returns='LockMode'),
        FieldCall(field='mode', demands=['IDBTransaction'], returns='IDBTransactionMode'),
        FieldCall(field='mode', demands=['TextTrack'], returns='TextTrackMode'),
        FieldCall(field='mode', demands=['TextTrack', 'TextTrackMode'], returns='TextTrackMode'),
        FieldCall(field='mode', demands=['SVGFEBlendElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='mode', demands=['ShadowRoot'], returns='ShadowRootMode'),
        FieldCall(field='mode', demands=['SourceBuffer'], returns='AppendMode'),
        FieldCall(field='mode', demands=['SourceBuffer', 'AppendMode'], returns='AppendMode'),
    ],
    "credentials": [
        FieldCall(field='credentials', demands=['Request'], returns='RequestCredentials'),
    ],
    "cache": [
        FieldCall(field='cache', demands=['Request'], returns='RequestCache'),
    ],
    "redirect": [
        FieldCall(field='redirect', demands=['Request'], returns='RequestRedirect'),
        DirectCall(fn='redirect', receiver='Response', demands=['str'], returns='Response'),
        DirectCall(fn='redirect', receiver='Response', demands=['str', 'unsigned short'], returns='Response'),
    ],
    "integrity": [
        FieldCall(field='integrity', demands=['Request'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='integrity', demands=['HTMLScriptElement', 'str'], returns='str'),
    ],
    "keepalive": [
        FieldCall(field='keepalive', demands=['Request'], returns='bool'),
    ],
    "isReloadNavigation": [
        FieldCall(field='isReloadNavigation', demands=['Request'], returns='bool'),
    ],
    "isHistoryNavigation": [
        FieldCall(field='isHistoryNavigation', demands=['Request'], returns='bool'),
    ],
    "duplex": [
        FieldCall(field='duplex', demands=['Request'], returns='RequestDuplex'),
    ],
    "clone": [
        PrototypeCall(constructor='Request', fn='clone', demands=['Request'], returns='Request'),
        PrototypeCall(constructor='Response', fn='clone', demands=['Response'], returns='Response'),
        PrototypeCall(constructor='AudioData', fn='clone', demands=['AudioData'], returns='AudioData'),
        PrototypeCall(constructor='VideoFrame', fn='clone', demands=['VideoFrame'], returns='VideoFrame'),
        PrototypeCall(constructor='BrowserCaptureMediaStreamTrack', fn='clone', demands=['BrowserCaptureMediaStreamTrack'], returns='BrowserCaptureMediaStreamTrack'),
        PrototypeCall(constructor='MediaStream', fn='clone', demands=['MediaStream'], returns='MediaStream'),
        PrototypeCall(constructor='MediaStreamTrack', fn='clone', demands=['MediaStreamTrack'], returns='MediaStreamTrack'),
        PrototypeCall(constructor='GroupEffect', fn='clone', demands=['GroupEffect'], returns='GroupEffect'),
        PrototypeCall(constructor='SequenceEffect', fn='clone', demands=['SequenceEffect'], returns='SequenceEffect'),
    ],
    "formData": [
        PrototypeCall(constructor='Request', fn='formData', demands=['Request'], returns='FormData'),
        PrototypeCall(constructor='Response', fn='formData', demands=['Response'], returns='FormData'),
        FieldCall(field='formData', demands=['FormDataEvent'], returns='FormData'),
        FieldCall(field='formData', demands=['NavigateEvent'], returns='FormData'),
    ],
    "Response": [
        NewCall(constructor='Response', demands=[], returns='Response'),
        NewCall(constructor='Response', demands=['BodyInit'], returns='Response'),
        NewCall(constructor='Response', demands=['BodyInit', 'dict'], returns='Response'),
    ],
    "redirected": [
        FieldCall(field='redirected', demands=['Response'], returns='bool'),
    ],
    "status": [
        FieldCall(field='status', demands=['Response'], returns='unsigned short'),
        FieldCall(field='status', demands=['Window'], returns='str'),
        FieldCall(field='status', demands=['Window', 'str'], returns='str'),
        FieldCall(field='status', demands=['XMLHttpRequest'], returns='unsigned short'),
        FieldCall(field='status', demands=['FontFace'], returns='FontFaceLoadStatus'),
        FieldCall(field='status', demands=['FontFaceSet'], returns='FontFaceSetLoadStatus'),
        FieldCall(field='status', demands=['USBInTransferResult'], returns='USBTransferStatus'),
        FieldCall(field='status', demands=['USBOutTransferResult'], returns='USBTransferStatus'),
        FieldCall(field='status', demands=['USBIsochronousInTransferPacket'], returns='USBTransferStatus'),
        FieldCall(field='status', demands=['USBIsochronousOutTransferPacket'], returns='USBTransferStatus'),
    ],
    "ok": [
        FieldCall(field='ok', demands=['Response'], returns='bool'),
    ],
    "statusText": [
        FieldCall(field='statusText', demands=['Response'], returns='str'),
        FieldCall(field='statusText', demands=['XMLHttpRequest'], returns='str'),
    ],
    "activated": [
        FieldCall(field='activated', demands=['FetchLaterResult'], returns='bool'),
        FieldCall(field='activated', demands=['Sensor'], returns='bool'),
    ],
    "getParameters": [
        PrototypeCall(constructor='CSSFunctionRule', fn='getParameters', demands=['CSSFunctionRule'], returns='dict'),
        PrototypeCall(constructor='RTCRtpSender', fn='getParameters', demands=['RTCRtpSender'], returns='dict'),
        PrototypeCall(constructor='RTCRtpReceiver', fn='getParameters', demands=['RTCRtpReceiver'], returns='dict'),
    ],
    "returnType": [
        FieldCall(field='returnType', demands=['CSSFunctionRule'], returns='CSSOMString'),
    ],
    "result": [
        FieldCall(field='result', demands=['CSSFunctionDescriptors'], returns='CSSOMString'),
        FieldCall(field='result', demands=['CSSFunctionDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='result', demands=['IDBRequest'], returns='*'),
        FieldCall(field='result', demands=['FileReader'], returns='str'),
        FieldCall(field='result', demands=['BackgroundFetchRegistration'], returns='BackgroundFetchResult'),
    ],
    "Sanitizer": [
        NewCall(constructor='Sanitizer', demands=[], returns='Sanitizer'),
        NewCall(constructor='Sanitizer', demands=['dict'], returns='Sanitizer'),
    ],
    "allowElement": [
        PrototypeCall(constructor='Sanitizer', fn='allowElement', demands=['Sanitizer', 'SanitizerElementWithAttributes'], returns='None'),
    ],
    "removeElement": [
        PrototypeCall(constructor='Sanitizer', fn='removeElement', demands=['Sanitizer', 'SanitizerElement'], returns='None'),
    ],
    "replaceElementWithChildren": [
        PrototypeCall(constructor='Sanitizer', fn='replaceElementWithChildren', demands=['Sanitizer', 'SanitizerElement'], returns='None'),
    ],
    "allowAttribute": [
        PrototypeCall(constructor='Sanitizer', fn='allowAttribute', demands=['Sanitizer', 'SanitizerAttribute'], returns='None'),
    ],
    "removeAttribute": [
        PrototypeCall(constructor='Sanitizer', fn='removeAttribute', demands=['Sanitizer', 'SanitizerAttribute'], returns='None'),
        PrototypeCall(constructor='Element', fn='removeAttribute', demands=['Element', 'str'], returns='None'),
    ],
    "setComments": [
        PrototypeCall(constructor='Sanitizer', fn='setComments', demands=['Sanitizer', 'bool'], returns='None'),
    ],
    "setDataAttributes": [
        PrototypeCall(constructor='Sanitizer', fn='setDataAttributes', demands=['Sanitizer', 'bool'], returns='None'),
    ],
    "removeUnsafe": [
        PrototypeCall(constructor='Sanitizer', fn='removeUnsafe', demands=['Sanitizer'], returns='None'),
    ],
    "onconnect": [
        FieldCall(field='onconnect', demands=['HID'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['HID', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['SharedWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['SharedWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['RemotePlayback'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['RemotePlayback', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['Serial'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['Serial', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['SerialPort'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['SerialPort', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['USB'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['USB', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['PresentationConnection'], returns='EventHandler'),
        FieldCall(field='onconnect', demands=['PresentationConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "ondisconnect": [
        FieldCall(field='ondisconnect', demands=['HID'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['HID', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['RemotePlayback'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['RemotePlayback', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['Serial'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['Serial', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['SerialPort'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['SerialPort', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['USB'], returns='EventHandler'),
        FieldCall(field='ondisconnect', demands=['USB', 'EventHandler'], returns='EventHandler'),
    ],
    "getDevices": [
        PrototypeCall(constructor='HID', fn='getDevices', demands=['HID'], returns='HIDDevice'),
        PrototypeCall(constructor='Bluetooth', fn='getDevices', demands=['Bluetooth'], returns='BluetoothDevice'),
        PrototypeCall(constructor='USB', fn='getDevices', demands=['USB'], returns='USBDevice'),
    ],
    "oninputreport": [
        FieldCall(field='oninputreport', demands=['HIDDevice'], returns='EventHandler'),
        FieldCall(field='oninputreport', demands=['HIDDevice', 'EventHandler'], returns='EventHandler'),
    ],
    "opened": [
        FieldCall(field='opened', demands=['HIDDevice'], returns='bool'),
        FieldCall(field='opened', demands=['USBDevice'], returns='bool'),
    ],
    "vendorId": [
        FieldCall(field='vendorId', demands=['HIDDevice'], returns='unsigned short'),
        FieldCall(field='vendorId', demands=['USBDevice'], returns='unsigned short'),
    ],
    "productId": [
        FieldCall(field='productId', demands=['HIDDevice'], returns='unsigned short'),
        FieldCall(field='productId', demands=['USBDevice'], returns='unsigned short'),
    ],
    "productName": [
        FieldCall(field='productName', demands=['HIDDevice'], returns='str'),
        FieldCall(field='productName', demands=['USBDevice'], returns='str'),
    ],
    "collections": [
        FieldCall(field='collections', demands=['HIDDevice'], returns='dict'),
    ],
    "open": [
        PrototypeCall(constructor='HIDDevice', fn='open', demands=['HIDDevice'], returns='None'),
        PrototypeCall(constructor='IDBFactory', fn='open', demands=['IDBFactory', 'str'], returns='IDBOpenDBRequest'),
        PrototypeCall(constructor='IDBFactory', fn='open', demands=['IDBFactory', 'str', 'int'], returns='IDBOpenDBRequest'),
        PrototypeCall(constructor='CacheStorage', fn='open', demands=['CacheStorage', 'str'], returns='Cache'),
        FieldCall(field='open', demands=['HTMLDetailsElement'], returns='bool'),
        FieldCall(field='open', demands=['HTMLDetailsElement', 'bool'], returns='bool'),
        FieldCall(field='open', demands=['HTMLDialogElement'], returns='bool'),
        FieldCall(field='open', demands=['HTMLDialogElement', 'bool'], returns='bool'),
        DirectCall(fn='open', receiver=None, demands=[], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str'], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str', 'str'], returns='WindowProxy'),
        DirectCall(fn='open', receiver=None, demands=['str', 'str', 'str'], returns='WindowProxy'),
        PrototypeCall(constructor='StorageBucketManager', fn='open', demands=['StorageBucketManager', 'str'], returns='StorageBucket'),
        PrototypeCall(constructor='StorageBucketManager', fn='open', demands=['StorageBucketManager', 'str', 'dict'], returns='StorageBucket'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool', 'str'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='open', demands=['XMLHttpRequest', 'str', 'str', 'bool', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='SerialPort', fn='open', demands=['SerialPort', 'dict'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='open', demands=['MIDIPort'], returns='MIDIPort'),
        PrototypeCall(constructor='USBDevice', fn='open', demands=['USBDevice'], returns='None'),
        PrototypeCall(constructor='EyeDropper', fn='open', demands=['EyeDropper'], returns='dict'),
        PrototypeCall(constructor='EyeDropper', fn='open', demands=['EyeDropper', 'dict'], returns='dict'),
    ],
    "close": [
        PrototypeCall(constructor='HIDDevice', fn='close', demands=['HIDDevice'], returns='None'),
        PrototypeCall(constructor='AudioDecoder', fn='close', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='close', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='close', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='close', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='AudioData', fn='close', demands=['AudioData'], returns='None'),
        PrototypeCall(constructor='VideoFrame', fn='close', demands=['VideoFrame'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='close', demands=['ImageDecoder'], returns='None'),
        PrototypeCall(constructor='IDBDatabase', fn='close', demands=['IDBDatabase'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='close', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='close', demands=['RTCDataChannel'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='close', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='close', demands=['HTMLDialogElement', 'str'], returns='None'),
        PrototypeCall(constructor='CloseWatcher', fn='close', demands=['CloseWatcher'], returns='None'),
        DirectCall(fn='close', receiver=None, demands=[], returns='None'),
        PrototypeCall(constructor='ImageBitmap', fn='close', demands=['ImageBitmap'], returns='None'),
        PrototypeCall(constructor='EventSource', fn='close', demands=['EventSource'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='close', demands=['MessagePort'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='close', demands=['BroadcastChannel'], returns='None'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='close', demands=['DedicatedWorkerGlobalScope'], returns='None'),
        PrototypeCall(constructor='SharedWorkerGlobalScope', fn='close', demands=['SharedWorkerGlobalScope'], returns='None'),
        PrototypeCall(constructor='WebTransport', fn='close', demands=['WebTransport'], returns='None'),
        PrototypeCall(constructor='WebTransport', fn='close', demands=['WebTransport', 'dict'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='close', demands=['MediaKeySession'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='close', demands=['AudioContext'], returns='None'),
        PrototypeCall(constructor='SerialPort', fn='close', demands=['SerialPort'], returns='None'),
        PrototypeCall(constructor='Notification', fn='close', demands=['Notification'], returns='None'),
        PrototypeCall(constructor='MIDIPort', fn='close', demands=['MIDIPort'], returns='MIDIPort'),
        PrototypeCall(constructor='USBDevice', fn='close', demands=['USBDevice'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket', 'unsigned short'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='close', demands=['WebSocket', 'unsigned short', 'str'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='close', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='close', demands=['ReadableByteStreamController'], returns='None'),
        PrototypeCall(constructor='WritableStream', fn='close', demands=['WritableStream'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='close', demands=['WritableStreamDefaultWriter'], returns='None'),
        DirectCall(fn='close', receiver='IdentityProvider', demands=[], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='close', demands=['PresentationConnection'], returns='None'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='close', demands=['FileSystemSyncAccessHandle'], returns='None'),
    ],
    "forget": [
        PrototypeCall(constructor='HIDDevice', fn='forget', demands=['HIDDevice'], returns='None'),
        PrototypeCall(constructor='BluetoothDevice', fn='forget', demands=['BluetoothDevice'], returns='None'),
        PrototypeCall(constructor='SerialPort', fn='forget', demands=['SerialPort'], returns='None'),
        PrototypeCall(constructor='USBDevice', fn='forget', demands=['USBDevice'], returns='None'),
    ],
    "sendReport": [
        PrototypeCall(constructor='HIDDevice', fn='sendReport', demands=['HIDDevice', 'int', 'BufferSource'], returns='None'),
    ],
    "sendFeatureReport": [
        PrototypeCall(constructor='HIDDevice', fn='sendFeatureReport', demands=['HIDDevice', 'int', 'BufferSource'], returns='None'),
    ],
    "receiveFeatureReport": [
        PrototypeCall(constructor='HIDDevice', fn='receiveFeatureReport', demands=['HIDDevice', 'int'], returns='DataView'),
    ],
    "HIDConnectionEvent": [
        NewCall(constructor='HIDConnectionEvent', demands=['str', 'dict'], returns='HIDConnectionEvent'),
    ],
    "HIDInputReportEvent": [
        NewCall(constructor='HIDInputReportEvent', demands=['str', 'dict'], returns='HIDInputReportEvent'),
    ],
    "reportId": [
        FieldCall(field='reportId', demands=['HIDInputReportEvent'], returns='int'),
    ],
    "entryType": [
        FieldCall(field='entryType', demands=['PerformanceEntry'], returns='str'),
        FieldCall(field='entryType', demands=['PerformanceLongTaskTiming'], returns='str'),
        FieldCall(field='entryType', demands=['TaskAttributionTiming'], returns='str'),
        FieldCall(field='entryType', demands=['VisibilityStateEntry'], returns='str'),
        FieldCall(field='entryType', demands=['PerformanceLongAnimationFrameTiming'], returns='str'),
        FieldCall(field='entryType', demands=['PerformanceScriptTiming'], returns='str'),
    ],
    "startTime": [
        FieldCall(field='startTime', demands=['PerformanceEntry'], returns='float'),
        FieldCall(field='startTime', demands=['PerformanceLongTaskTiming'], returns='float'),
        FieldCall(field='startTime', demands=['TaskAttributionTiming'], returns='float'),
        FieldCall(field='startTime', demands=['TextTrackCue'], returns='float'),
        FieldCall(field='startTime', demands=['TextTrackCue', 'float'], returns='float'),
        FieldCall(field='startTime', demands=['VisibilityStateEntry'], returns='float'),
        FieldCall(field='startTime', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
        FieldCall(field='startTime', demands=['PerformanceScriptTiming'], returns='float'),
        FieldCall(field='startTime', demands=['ChapterInformation'], returns='float'),
    ],
    "duration": [
        FieldCall(field='duration', demands=['PerformanceEntry'], returns='float'),
        FieldCall(field='duration', demands=['PerformanceLongTaskTiming'], returns='float'),
        FieldCall(field='duration', demands=['TaskAttributionTiming'], returns='float'),
        FieldCall(field='duration', demands=['EncodedAudioChunk'], returns='int'),
        FieldCall(field='duration', demands=['EncodedVideoChunk'], returns='int'),
        FieldCall(field='duration', demands=['AudioData'], returns='int'),
        FieldCall(field='duration', demands=['VideoFrame'], returns='int'),
        FieldCall(field='duration', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='duration', demands=['VisibilityStateEntry'], returns='int'),
        FieldCall(field='duration', demands=['PerformanceServerTiming'], returns='float'),
        FieldCall(field='duration', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='duration', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
        FieldCall(field='duration', demands=['PerformanceScriptTiming'], returns='float'),
        FieldCall(field='duration', demands=['MediaSource'], returns='float'),
        FieldCall(field='duration', demands=['MediaSource', 'float'], returns='float'),
    ],
    "navigationId": [
        FieldCall(field='navigationId', demands=['PerformanceEntry'], returns='int'),
    ],
    "PerformanceObserver": [
        NewCall(constructor='PerformanceObserver', demands=['PerformanceObserverCallback'], returns='PerformanceObserver'),
    ],
    "observe": [
        PrototypeCall(constructor='PerformanceObserver', fn='observe', demands=['PerformanceObserver'], returns='None'),
        PrototypeCall(constructor='PerformanceObserver', fn='observe', demands=['PerformanceObserver', 'dict'], returns='None'),
        PrototypeCall(constructor='IntersectionObserver', fn='observe', demands=['IntersectionObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='observe', demands=['ResizeObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='observe', demands=['ResizeObserver', 'Element', 'dict'], returns='None'),
        PrototypeCall(constructor='PressureObserver', fn='observe', demands=['PressureObserver', 'PressureSource'], returns='None'),
        PrototypeCall(constructor='PressureObserver', fn='observe', demands=['PressureObserver', 'PressureSource', 'dict'], returns='None'),
        PrototypeCall(constructor='ReportingObserver', fn='observe', demands=['ReportingObserver'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='observe', demands=['MutationObserver', 'Node'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='observe', demands=['MutationObserver', 'Node', 'dict'], returns='None'),
    ],
    "disconnect": [
        PrototypeCall(constructor='PerformanceObserver', fn='disconnect', demands=['PerformanceObserver'], returns='None'),
        PrototypeCall(constructor='BluetoothRemoteGATTServer', fn='disconnect', demands=['BluetoothRemoteGATTServer'], returns='None'),
        PrototypeCall(constructor='IntersectionObserver', fn='disconnect', demands=['IntersectionObserver'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'int'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode', 'int'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioNode', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='disconnect', demands=['AudioNode', 'AudioParam', 'int'], returns='None'),
        DirectCall(fn='disconnect', receiver='IdentityCredential', demands=['dict'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='disconnect', demands=['ResizeObserver'], returns='None'),
        PrototypeCall(constructor='PressureObserver', fn='disconnect', demands=['PressureObserver'], returns='None'),
        PrototypeCall(constructor='ReportingObserver', fn='disconnect', demands=['ReportingObserver'], returns='None'),
        PrototypeCall(constructor='MutationObserver', fn='disconnect', demands=['MutationObserver'], returns='None'),
    ],
    "takeRecords": [
        PrototypeCall(constructor='PerformanceObserver', fn='takeRecords', demands=['PerformanceObserver'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='IntersectionObserver', fn='takeRecords', demands=['IntersectionObserver'], returns='IntersectionObserverEntry'),
        PrototypeCall(constructor='PressureObserver', fn='takeRecords', demands=['PressureObserver'], returns='PressureRecord'),
        PrototypeCall(constructor='ReportingObserver', fn='takeRecords', demands=['ReportingObserver'], returns='ReportList'),
        PrototypeCall(constructor='MutationObserver', fn='takeRecords', demands=['MutationObserver'], returns='MutationRecord'),
    ],
    "supportedEntryTypes": [
        FieldCall(field='supportedEntryTypes', demands=['PerformanceObserver'], returns='str'),
    ],
    "getEntries": [
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntries', demands=['PerformanceObserverEntryList'], returns='PerformanceEntryList'),
    ],
    "getEntriesByType": [
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByType', demands=['PerformanceObserverEntryList', 'str'], returns='PerformanceEntryList'),
    ],
    "getEntriesByName": [
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByName', demands=['PerformanceObserverEntryList', 'str'], returns='PerformanceEntryList'),
        PrototypeCall(constructor='PerformanceObserverEntryList', fn='getEntriesByName', demands=['PerformanceObserverEntryList', 'str', 'str'], returns='PerformanceEntryList'),
    ],
    "initTimeEvent": [
        PrototypeCall(constructor='TimeEvent', fn='initTimeEvent', demands=['TimeEvent', 'str', 'Window', 'int'], returns='None'),
    ],
    "targetElement": [
        FieldCall(field='targetElement', demands=['SVGAnimationElement'], returns='SVGElement'),
    ],
    "onbegin": [
        FieldCall(field='onbegin', demands=['SVGAnimationElement'], returns='EventHandler'),
        FieldCall(field='onbegin', demands=['SVGAnimationElement', 'EventHandler'], returns='EventHandler'),
    ],
    "onend": [
        FieldCall(field='onend', demands=['SVGAnimationElement'], returns='EventHandler'),
        FieldCall(field='onend', demands=['SVGAnimationElement', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onend', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onend', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onend', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onend', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onend', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onend', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onrepeat": [
        FieldCall(field='onrepeat', demands=['SVGAnimationElement'], returns='EventHandler'),
        FieldCall(field='onrepeat', demands=['SVGAnimationElement', 'EventHandler'], returns='EventHandler'),
    ],
    "getStartTime": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getStartTime', demands=['SVGAnimationElement'], returns='float'),
    ],
    "getCurrentTime": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getCurrentTime', demands=['SVGAnimationElement'], returns='float'),
    ],
    "getSimpleDuration": [
        PrototypeCall(constructor='SVGAnimationElement', fn='getSimpleDuration', demands=['SVGAnimationElement'], returns='float'),
    ],
    "beginElement": [
        PrototypeCall(constructor='SVGAnimationElement', fn='beginElement', demands=['SVGAnimationElement'], returns='None'),
    ],
    "beginElementAt": [
        PrototypeCall(constructor='SVGAnimationElement', fn='beginElementAt', demands=['SVGAnimationElement', 'float'], returns='None'),
    ],
    "endElement": [
        PrototypeCall(constructor='SVGAnimationElement', fn='endElement', demands=['SVGAnimationElement'], returns='None'),
    ],
    "endElementAt": [
        PrototypeCall(constructor='SVGAnimationElement', fn='endElementAt', demands=['SVGAnimationElement', 'float'], returns='None'),
    ],
    "AnimationEvent": [
        NewCall(constructor='AnimationEvent', demands=['CSSOMString'], returns='AnimationEvent'),
        NewCall(constructor='AnimationEvent', demands=['CSSOMString', 'dict'], returns='AnimationEvent'),
    ],
    "animationName": [
        FieldCall(field='animationName', demands=['AnimationEvent'], returns='CSSOMString'),
        FieldCall(field='animationName', demands=['CSSAnimation'], returns='CSSOMString'),
    ],
    "elapsedTime": [
        FieldCall(field='elapsedTime', demands=['AnimationEvent'], returns='float'),
        FieldCall(field='elapsedTime', demands=['SpeechSynthesisEvent'], returns='float'),
        FieldCall(field='elapsedTime', demands=['TransitionEvent'], returns='float'),
    ],
    "keyText": [
        FieldCall(field='keyText', demands=['CSSKeyframeRule'], returns='CSSOMString'),
        FieldCall(field='keyText', demands=['CSSKeyframeRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "cssRules": [
        FieldCall(field='cssRules', demands=['CSSKeyframesRule'], returns='CSSRuleList'),
        FieldCall(field='cssRules', demands=['CSSStyleSheet'], returns='CSSRuleList'),
        FieldCall(field='cssRules', demands=['CSSGroupingRule'], returns='CSSRuleList'),
    ],
    "": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='', demands=['CSSKeyframesRule', 'int'], returns='CSSKeyframeRule'),
        PrototypeCall(constructor='ImageTrackList', fn='', demands=['ImageTrackList', 'int'], returns='ImageTrack'),
        PrototypeCall(constructor='HTMLAllCollection', fn='', demands=['HTMLAllCollection', 'int'], returns='Element'),
        PrototypeCall(constructor='HTMLOptionsCollection', fn='', demands=['HTMLOptionsCollection', 'int', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='DOMStringMap', fn='', demands=['DOMStringMap', 'str'], returns='str'),
        PrototypeCall(constructor='DOMStringMap', fn='', demands=['DOMStringMap', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='DOMStringMap', fn='', demands=['DOMStringMap', 'str'], returns='None'),
        PrototypeCall(constructor='AudioTrackList', fn='', demands=['AudioTrackList', 'int'], returns='AudioTrack'),
        PrototypeCall(constructor='VideoTrackList', fn='', demands=['VideoTrackList', 'int'], returns='VideoTrack'),
        PrototypeCall(constructor='TextTrackList', fn='', demands=['TextTrackList', 'int'], returns='TextTrack'),
        PrototypeCall(constructor='TextTrackCueList', fn='', demands=['TextTrackCueList', 'int'], returns='TextTrackCue'),
        PrototypeCall(constructor='HTMLFormElement', fn='', demands=['HTMLFormElement', 'int'], returns='Element'),
        PrototypeCall(constructor='HTMLFormElement', fn='', demands=['HTMLFormElement', 'str'], returns='RadioNodeList'),
        PrototypeCall(constructor='HTMLSelectElement', fn='', demands=['HTMLSelectElement', 'int', 'HTMLOptionElement'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='', demands=['DataTransferItemList', 'int'], returns='DataTransferItem'),
        DirectCall(fn='', receiver=None, demands=['str'], returns='object'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='', demands=['CSSUnparsedValue', 'int'], returns='CSSUnparsedSegment'),
        PrototypeCall(constructor='CSSUnparsedValue', fn='', demands=['CSSUnparsedValue', 'int', 'CSSUnparsedSegment'], returns='None'),
        PrototypeCall(constructor='CSSNumericArray', fn='', demands=['CSSNumericArray', 'int'], returns='CSSNumericValue'),
        PrototypeCall(constructor='CSSTransformValue', fn='', demands=['CSSTransformValue', 'int'], returns='CSSTransformComponent'),
        PrototypeCall(constructor='CSSTransformValue', fn='', demands=['CSSTransformValue', 'int', 'CSSTransformComponent'], returns='None'),
        PrototypeCall(constructor='FontFacePalette', fn='', demands=['FontFacePalette', 'int'], returns='str'),
        PrototypeCall(constructor='FontFacePalettes', fn='', demands=['FontFacePalettes', 'int'], returns='FontFacePalette'),
        PrototypeCall(constructor='SVGNumberList', fn='', demands=['SVGNumberList', 'int', 'SVGNumber'], returns='None'),
        PrototypeCall(constructor='SVGLengthList', fn='', demands=['SVGLengthList', 'int', 'SVGLength'], returns='None'),
        PrototypeCall(constructor='SVGStringList', fn='', demands=['SVGStringList', 'int', 'str'], returns='None'),
        PrototypeCall(constructor='SVGTransformList', fn='', demands=['SVGTransformList', 'int', 'SVGTransform'], returns='None'),
        PrototypeCall(constructor='SVGPointList', fn='', demands=['SVGPointList', 'int', 'DOMPoint'], returns='None'),
        PrototypeCall(constructor='XRInputSourceArray', fn='', demands=['XRInputSourceArray', 'int'], returns='XRInputSource'),
        PrototypeCall(constructor='SourceBufferList', fn='', demands=['SourceBufferList', 'int'], returns='SourceBuffer'),
    ],
    "appendRule": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='appendRule', demands=['CSSKeyframesRule', 'CSSOMString'], returns='None'),
    ],
    "deleteRule": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='deleteRule', demands=['CSSKeyframesRule', 'CSSOMString'], returns='None'),
        PrototypeCall(constructor='CSSStyleSheet', fn='deleteRule', demands=['CSSStyleSheet', 'int'], returns='None'),
        PrototypeCall(constructor='CSSGroupingRule', fn='deleteRule', demands=['CSSGroupingRule', 'int'], returns='None'),
    ],
    "findRule": [
        PrototypeCall(constructor='CSSKeyframesRule', fn='findRule', demands=['CSSKeyframesRule', 'CSSOMString'], returns='CSSKeyframeRule'),
    ],
    "show": [
        PrototypeCall(constructor='VirtualKeyboard', fn='show', demands=['VirtualKeyboard'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='show', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='show', demands=['PaymentRequest'], returns='PaymentResponse'),
        PrototypeCall(constructor='PaymentRequest', fn='show', demands=['PaymentRequest', 'dict'], returns='PaymentResponse'),
    ],
    "hide": [
        PrototypeCall(constructor='VirtualKeyboard', fn='hide', demands=['VirtualKeyboard'], returns='None'),
    ],
    "boundingRect": [
        FieldCall(field='boundingRect', demands=['VirtualKeyboard'], returns='DOMRect'),
    ],
    "overlaysContent": [
        FieldCall(field='overlaysContent', demands=['VirtualKeyboard'], returns='bool'),
        FieldCall(field='overlaysContent', demands=['VirtualKeyboard', 'bool'], returns='bool'),
    ],
    "ongeometrychange": [
        FieldCall(field='ongeometrychange', demands=['VirtualKeyboard'], returns='EventHandler'),
        FieldCall(field='ongeometrychange', demands=['VirtualKeyboard', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ongeometrychange', demands=['WindowControlsOverlay'], returns='EventHandler'),
        FieldCall(field='ongeometrychange', demands=['WindowControlsOverlay', 'EventHandler'], returns='EventHandler'),
    ],
    "attribution": [
        FieldCall(field='attribution', demands=['PerformanceLongTaskTiming'], returns='TaskAttributionTiming'),
    ],
    "containerType": [
        FieldCall(field='containerType', demands=['TaskAttributionTiming'], returns='str'),
    ],
    "containerSrc": [
        FieldCall(field='containerSrc', demands=['TaskAttributionTiming'], returns='str'),
    ],
    "containerId": [
        FieldCall(field='containerId', demands=['TaskAttributionTiming'], returns='str'),
    ],
    "containerName": [
        FieldCall(field='containerName', demands=['TaskAttributionTiming'], returns='str'),
        FieldCall(field='containerName', demands=['CSSContainerRule'], returns='CSSOMString'),
    ],
    "index": [
        FieldCall(field='index', demands=['Gamepad'], returns='int'),
        PrototypeCall(constructor='IDBObjectStore', fn='index', demands=['IDBObjectStore', 'str'], returns='IDBIndex'),
        FieldCall(field='index', demands=['HTMLOptionElement'], returns='int'),
        FieldCall(field='index', demands=['NavigationHistoryEntry'], returns='long long'),
        FieldCall(field='index', demands=['NavigationDestination'], returns='long long'),
    ],
    "connected": [
        FieldCall(field='connected', demands=['Gamepad'], returns='bool'),
        FieldCall(field='connected', demands=['BluetoothRemoteGATTServer'], returns='bool'),
        FieldCall(field='connected', demands=['SerialPort'], returns='bool'),
    ],
    "timestamp": [
        FieldCall(field='timestamp', demands=['Gamepad'], returns='float'),
        FieldCall(field='timestamp', demands=['GeolocationPosition'], returns='EpochTimeStamp'),
        FieldCall(field='timestamp', demands=['EncodedAudioChunk'], returns='long long'),
        FieldCall(field='timestamp', demands=['EncodedVideoChunk'], returns='long long'),
        FieldCall(field='timestamp', demands=['AudioData'], returns='long long'),
        FieldCall(field='timestamp', demands=['VideoFrame'], returns='long long'),
        FieldCall(field='timestamp', demands=['Sensor'], returns='float'),
        FieldCall(field='timestamp', demands=['Notification'], returns='EpochTimeStamp'),
    ],
    "mapping": [
        FieldCall(field='mapping', demands=['Gamepad'], returns='GamepadMappingType'),
    ],
    "axes": [
        FieldCall(field='axes', demands=['Gamepad'], returns='float'),
    ],
    "touches": [
        FieldCall(field='touches', demands=['Gamepad'], returns='dict'),
        FieldCall(field='touches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "vibrationActuator": [
        FieldCall(field='vibrationActuator', demands=['Gamepad'], returns='GamepadHapticActuator'),
    ],
    "pressed": [
        FieldCall(field='pressed', demands=['GamepadButton'], returns='bool'),
    ],
    "touched": [
        FieldCall(field='touched', demands=['GamepadButton'], returns='bool'),
    ],
    "effects": [
        FieldCall(field='effects', demands=['GamepadHapticActuator'], returns='GamepadHapticEffectType'),
    ],
    "playEffect": [
        PrototypeCall(constructor='GamepadHapticActuator', fn='playEffect', demands=['GamepadHapticActuator', 'GamepadHapticEffectType'], returns='GamepadHapticsResult'),
        PrototypeCall(constructor='GamepadHapticActuator', fn='playEffect', demands=['GamepadHapticActuator', 'GamepadHapticEffectType', 'dict'], returns='GamepadHapticsResult'),
    ],
    "reset": [
        PrototypeCall(constructor='GamepadHapticActuator', fn='reset', demands=['GamepadHapticActuator'], returns='GamepadHapticsResult'),
        PrototypeCall(constructor='AudioDecoder', fn='reset', demands=['AudioDecoder'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='reset', demands=['VideoDecoder'], returns='None'),
        PrototypeCall(constructor='AudioEncoder', fn='reset', demands=['AudioEncoder'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='reset', demands=['VideoEncoder'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='reset', demands=['ImageDecoder'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='reset', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='reset', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='reset', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='USBDevice', fn='reset', demands=['USBDevice'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='reset', demands=['PaintRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='XSLTProcessor', fn='reset', demands=['XSLTProcessor'], returns='None'),
    ],
    "GamepadEvent": [
        NewCall(constructor='GamepadEvent', demands=['str', 'dict'], returns='GamepadEvent'),
    ],
    "gamepad": [
        FieldCall(field='gamepad', demands=['GamepadEvent'], returns='Gamepad'),
    ],
    "TextDecoder": [
        NewCall(constructor='TextDecoder', demands=[], returns='TextDecoder'),
        NewCall(constructor='TextDecoder', demands=['str'], returns='TextDecoder'),
        NewCall(constructor='TextDecoder', demands=['str', 'dict'], returns='TextDecoder'),
    ],
    "decode": [
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder'], returns='str'),
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder', 'AllowSharedBufferSource'], returns='str'),
        PrototypeCall(constructor='TextDecoder', fn='decode', demands=['TextDecoder', 'AllowSharedBufferSource', 'dict'], returns='str'),
        PrototypeCall(constructor='AudioDecoder', fn='decode', demands=['AudioDecoder', 'EncodedAudioChunk'], returns='None'),
        PrototypeCall(constructor='VideoDecoder', fn='decode', demands=['VideoDecoder', 'EncodedVideoChunk'], returns='None'),
        PrototypeCall(constructor='ImageDecoder', fn='decode', demands=['ImageDecoder'], returns='dict'),
        PrototypeCall(constructor='ImageDecoder', fn='decode', demands=['ImageDecoder', 'dict'], returns='dict'),
        PrototypeCall(constructor='HTMLImageElement', fn='decode', demands=['HTMLImageElement'], returns='None'),
    ],
    "TextEncoder": [
        NewCall(constructor='TextEncoder', demands=[], returns='TextEncoder'),
    ],
    "encode": [
        PrototypeCall(constructor='TextEncoder', fn='encode', demands=['TextEncoder'], returns='Uint8Array'),
        PrototypeCall(constructor='TextEncoder', fn='encode', demands=['TextEncoder', 'str'], returns='Uint8Array'),
        PrototypeCall(constructor='AudioEncoder', fn='encode', demands=['AudioEncoder', 'AudioData'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='encode', demands=['VideoEncoder', 'VideoFrame'], returns='None'),
        PrototypeCall(constructor='VideoEncoder', fn='encode', demands=['VideoEncoder', 'VideoFrame', 'dict'], returns='None'),
    ],
    "encodeInto": [
        PrototypeCall(constructor='TextEncoder', fn='encodeInto', demands=['TextEncoder', 'str', 'Uint8Array'], returns='dict'),
    ],
    "TextDecoderStream": [
        NewCall(constructor='TextDecoderStream', demands=[], returns='TextDecoderStream'),
        NewCall(constructor='TextDecoderStream', demands=['str'], returns='TextDecoderStream'),
        NewCall(constructor='TextDecoderStream', demands=['str', 'dict'], returns='TextDecoderStream'),
    ],
    "TextEncoderStream": [
        NewCall(constructor='TextEncoderStream', demands=[], returns='TextEncoderStream'),
    ],
    "quaternion": [
        FieldCall(field='quaternion', demands=['OrientationSensor'], returns='float'),
    ],
    "populateMatrix": [
        PrototypeCall(constructor='OrientationSensor', fn='populateMatrix', demands=['OrientationSensor', 'RotationMatrixType'], returns='None'),
    ],
    "AbsoluteOrientationSensor": [
        NewCall(constructor='AbsoluteOrientationSensor', demands=[], returns='AbsoluteOrientationSensor'),
        NewCall(constructor='AbsoluteOrientationSensor', demands=['dict'], returns='AbsoluteOrientationSensor'),
    ],
    "RelativeOrientationSensor": [
        NewCall(constructor='RelativeOrientationSensor', demands=[], returns='RelativeOrientationSensor'),
        NewCall(constructor='RelativeOrientationSensor', demands=['dict'], returns='RelativeOrientationSensor'),
    ],
    "URLPattern": [
        NewCall(constructor='URLPattern', demands=['URLPatternInput', 'str'], returns='URLPattern'),
        NewCall(constructor='URLPattern', demands=['URLPatternInput', 'str', 'dict'], returns='URLPattern'),
        NewCall(constructor='URLPattern', demands=[], returns='URLPattern'),
        NewCall(constructor='URLPattern', demands=['URLPatternInput'], returns='URLPattern'),
        NewCall(constructor='URLPattern', demands=['URLPatternInput', 'dict'], returns='URLPattern'),
    ],
    "test": [
        PrototypeCall(constructor='URLPattern', fn='test', demands=['URLPattern'], returns='bool'),
        PrototypeCall(constructor='URLPattern', fn='test', demands=['URLPattern', 'URLPatternInput'], returns='bool'),
        PrototypeCall(constructor='URLPattern', fn='test', demands=['URLPattern', 'URLPatternInput', 'str'], returns='bool'),
    ],
    "exec": [
        PrototypeCall(constructor='URLPattern', fn='exec', demands=['URLPattern'], returns='dict'),
        PrototypeCall(constructor='URLPattern', fn='exec', demands=['URLPattern', 'URLPatternInput'], returns='dict'),
        PrototypeCall(constructor='URLPattern', fn='exec', demands=['URLPattern', 'URLPatternInput', 'str'], returns='dict'),
    ],
    "username": [
        FieldCall(field='username', demands=['URLPattern'], returns='str'),
        FieldCall(field='username', demands=['URL'], returns='str'),
        FieldCall(field='username', demands=['URL', 'str'], returns='str'),
    ],
    "password": [
        FieldCall(field='password', demands=['URLPattern'], returns='str'),
        FieldCall(field='password', demands=['URL'], returns='str'),
        FieldCall(field='password', demands=['URL', 'str'], returns='str'),
        FieldCall(field='password', demands=['PasswordCredential'], returns='str'),
    ],
    "hostname": [
        FieldCall(field='hostname', demands=['URLPattern'], returns='str'),
        FieldCall(field='hostname', demands=['URL'], returns='str'),
        FieldCall(field='hostname', demands=['URL', 'str'], returns='str'),
        FieldCall(field='hostname', demands=['Location'], returns='str'),
        FieldCall(field='hostname', demands=['Location', 'str'], returns='str'),
        FieldCall(field='hostname', demands=['WorkerLocation'], returns='str'),
    ],
    "port": [
        FieldCall(field='port', demands=['URLPattern'], returns='str'),
        FieldCall(field='port', demands=['URL'], returns='str'),
        FieldCall(field='port', demands=['URL', 'str'], returns='str'),
        FieldCall(field='port', demands=['RTCIceCandidate'], returns='unsigned short'),
        FieldCall(field='port', demands=['RTCPeerConnectionIceErrorEvent'], returns='unsigned short'),
        FieldCall(field='port', demands=['Location'], returns='str'),
        FieldCall(field='port', demands=['Location', 'str'], returns='str'),
        FieldCall(field='port', demands=['SharedWorker'], returns='MessagePort'),
        FieldCall(field='port', demands=['WorkerLocation'], returns='str'),
        FieldCall(field='port', demands=['AudioWorklet'], returns='MessagePort'),
        FieldCall(field='port', demands=['AudioWorkletGlobalScope'], returns='MessagePort'),
        FieldCall(field='port', demands=['AudioWorkletNode'], returns='MessagePort'),
        FieldCall(field='port', demands=['AudioWorkletProcessor'], returns='MessagePort'),
        FieldCall(field='port', demands=['MIDIConnectionEvent'], returns='MIDIPort'),
    ],
    "pathname": [
        FieldCall(field='pathname', demands=['URLPattern'], returns='str'),
        FieldCall(field='pathname', demands=['URL'], returns='str'),
        FieldCall(field='pathname', demands=['URL', 'str'], returns='str'),
        FieldCall(field='pathname', demands=['Location'], returns='str'),
        FieldCall(field='pathname', demands=['Location', 'str'], returns='str'),
        FieldCall(field='pathname', demands=['WorkerLocation'], returns='str'),
    ],
    "search": [
        FieldCall(field='search', demands=['URLPattern'], returns='str'),
        FieldCall(field='search', demands=['URL'], returns='str'),
        FieldCall(field='search', demands=['URL', 'str'], returns='str'),
        FieldCall(field='search', demands=['Location'], returns='str'),
        FieldCall(field='search', demands=['Location', 'str'], returns='str'),
        FieldCall(field='search', demands=['WorkerLocation'], returns='str'),
    ],
    "hash": [
        FieldCall(field='hash', demands=['URLPattern'], returns='str'),
        FieldCall(field='hash', demands=['URL'], returns='str'),
        FieldCall(field='hash', demands=['URL', 'str'], returns='str'),
        FieldCall(field='hash', demands=['Location'], returns='str'),
        FieldCall(field='hash', demands=['Location', 'str'], returns='str'),
        FieldCall(field='hash', demands=['WorkerLocation'], returns='str'),
    ],
    "hasRegExpGroups": [
        FieldCall(field='hasRegExpGroups', demands=['URLPattern'], returns='bool'),
    ],
    "loadTime": [
        FieldCall(field='loadTime', demands=['LargestContentfulPaint'], returns='float'),
        FieldCall(field='loadTime', demands=['PerformanceElementTiming'], returns='float'),
    ],
    "renderTime": [
        FieldCall(field='renderTime', demands=['LargestContentfulPaint'], returns='float'),
        FieldCall(field='renderTime', demands=['PerformanceElementTiming'], returns='float'),
    ],
    "element": [
        FieldCall(field='element', demands=['LargestContentfulPaint'], returns='Element'),
        FieldCall(field='element', demands=['CSSPseudoElement'], returns='Element'),
        FieldCall(field='element', demands=['PerformanceElementTiming'], returns='Element'),
    ],
    "getCurrentPosition": [
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback'], returns='None'),
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback'], returns='None'),
        PrototypeCall(constructor='Geolocation', fn='getCurrentPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback', 'dict'], returns='None'),
    ],
    "watchPosition": [
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback'], returns='int'),
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback'], returns='int'),
        PrototypeCall(constructor='Geolocation', fn='watchPosition', demands=['Geolocation', 'PositionCallback', 'PositionErrorCallback', 'dict'], returns='int'),
    ],
    "clearWatch": [
        PrototypeCall(constructor='Geolocation', fn='clearWatch', demands=['Geolocation', 'int'], returns='None'),
    ],
    "coords": [
        FieldCall(field='coords', demands=['GeolocationPosition'], returns='GeolocationCoordinates'),
        FieldCall(field='coords', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='coords', demands=['HTMLAreaElement', 'str'], returns='str'),
    ],
    "accuracy": [
        FieldCall(field='accuracy', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='accuracy', demands=['GeolocationSensor'], returns='float'),
    ],
    "latitude": [
        FieldCall(field='latitude', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='latitude', demands=['GeolocationSensor'], returns='float'),
    ],
    "longitude": [
        FieldCall(field='longitude', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='longitude', demands=['GeolocationSensor'], returns='float'),
    ],
    "altitude": [
        FieldCall(field='altitude', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='altitude', demands=['GeolocationSensor'], returns='float'),
    ],
    "altitudeAccuracy": [
        FieldCall(field='altitudeAccuracy', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='altitudeAccuracy', demands=['GeolocationSensor'], returns='float'),
    ],
    "heading": [
        FieldCall(field='heading', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='heading', demands=['GeolocationSensor'], returns='float'),
    ],
    "speed": [
        FieldCall(field='speed', demands=['GeolocationCoordinates'], returns='float'),
        FieldCall(field='speed', demands=['GeolocationSensor'], returns='float'),
    ],
    "BluetoothDataFilter": [
        NewCall(constructor='BluetoothDataFilter', demands=[], returns='BluetoothDataFilter'),
        NewCall(constructor='BluetoothDataFilter', demands=['dict'], returns='BluetoothDataFilter'),
    ],
    "dataPrefix": [
        FieldCall(field='dataPrefix', demands=['BluetoothDataFilter'], returns='ArrayBuffer'),
    ],
    "mask": [
        FieldCall(field='mask', demands=['BluetoothDataFilter'], returns='ArrayBuffer'),
    ],
    "BluetoothManufacturerDataFilter": [
        NewCall(constructor='BluetoothManufacturerDataFilter', demands=[], returns='BluetoothManufacturerDataFilter'),
        NewCall(constructor='BluetoothManufacturerDataFilter', demands=['object'], returns='BluetoothManufacturerDataFilter'),
    ],
    "BluetoothServiceDataFilter": [
        NewCall(constructor='BluetoothServiceDataFilter', demands=[], returns='BluetoothServiceDataFilter'),
        NewCall(constructor='BluetoothServiceDataFilter', demands=['object'], returns='BluetoothServiceDataFilter'),
    ],
    "BluetoothLEScanFilter": [
        NewCall(constructor='BluetoothLEScanFilter', demands=[], returns='BluetoothLEScanFilter'),
        NewCall(constructor='BluetoothLEScanFilter', demands=['dict'], returns='BluetoothLEScanFilter'),
    ],
    "namePrefix": [
        FieldCall(field='namePrefix', demands=['BluetoothLEScanFilter'], returns='str'),
    ],
    "services": [
        FieldCall(field='services', demands=['BluetoothLEScanFilter'], returns='UUID'),
    ],
    "manufacturerData": [
        FieldCall(field='manufacturerData', demands=['BluetoothLEScanFilter'], returns='BluetoothManufacturerDataFilter'),
        FieldCall(field='manufacturerData', demands=['BluetoothAdvertisingEvent'], returns='BluetoothManufacturerDataMap'),
    ],
    "serviceData": [
        FieldCall(field='serviceData', demands=['BluetoothLEScanFilter'], returns='BluetoothServiceDataFilter'),
        FieldCall(field='serviceData', demands=['BluetoothAdvertisingEvent'], returns='BluetoothServiceDataMap'),
    ],
    "filters": [
        FieldCall(field='filters', demands=['BluetoothLEScan'], returns='BluetoothLEScanFilter'),
    ],
    "keepRepeatedDevices": [
        FieldCall(field='keepRepeatedDevices', demands=['BluetoothLEScan'], returns='bool'),
    ],
    "acceptAllAdvertisements": [
        FieldCall(field='acceptAllAdvertisements', demands=['BluetoothLEScan'], returns='bool'),
    ],
    "stop": [
        PrototypeCall(constructor='BluetoothLEScan', fn='stop', demands=['BluetoothLEScan'], returns='None'),
        PrototypeCall(constructor='RTCRtpTransceiver', fn='stop', demands=['RTCRtpTransceiver'], returns='None'),
        DirectCall(fn='stop', receiver=None, demands=[], returns='None'),
        PrototypeCall(constructor='HTMLMarqueeElement', fn='stop', demands=['HTMLMarqueeElement'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='stop', demands=['MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='Sensor', fn='stop', demands=['Sensor'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='stop', demands=['AudioScheduledSourceNode'], returns='None'),
        PrototypeCall(constructor='AudioScheduledSourceNode', fn='stop', demands=['AudioScheduledSourceNode', 'float'], returns='None'),
        PrototypeCall(constructor='Profiler', fn='stop', demands=['Profiler'], returns='dict'),
        PrototypeCall(constructor='SpeechRecognition', fn='stop', demands=['SpeechRecognition'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='stop', demands=['MediaRecorder'], returns='None'),
    ],
    "scans": [
        FieldCall(field='scans', demands=['BluetoothLEScanPermissionResult'], returns='BluetoothLEScan'),
        FieldCall(field='scans', demands=['BluetoothLEScanPermissionResult', 'BluetoothLEScan'], returns='BluetoothLEScan'),
    ],
    "AudioDecoder": [
        NewCall(constructor='AudioDecoder', demands=['dict'], returns='AudioDecoder'),
    ],
    "decodeQueueSize": [
        FieldCall(field='decodeQueueSize', demands=['AudioDecoder'], returns='int'),
        FieldCall(field='decodeQueueSize', demands=['VideoDecoder'], returns='int'),
    ],
    "ondequeue": [
        FieldCall(field='ondequeue', demands=['AudioDecoder'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['AudioDecoder', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['VideoDecoder'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['VideoDecoder', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['AudioEncoder'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['AudioEncoder', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['VideoEncoder'], returns='EventHandler'),
        FieldCall(field='ondequeue', demands=['VideoEncoder', 'EventHandler'], returns='EventHandler'),
    ],
    "isConfigSupported": [
        DirectCall(fn='isConfigSupported', receiver='AudioDecoder', demands=['dict'], returns='dict'),
        DirectCall(fn='isConfigSupported', receiver='VideoDecoder', demands=['dict'], returns='dict'),
        DirectCall(fn='isConfigSupported', receiver='AudioEncoder', demands=['dict'], returns='dict'),
        DirectCall(fn='isConfigSupported', receiver='VideoEncoder', demands=['dict'], returns='dict'),
    ],
    "VideoDecoder": [
        NewCall(constructor='VideoDecoder', demands=['dict'], returns='VideoDecoder'),
    ],
    "AudioEncoder": [
        NewCall(constructor='AudioEncoder', demands=['dict'], returns='AudioEncoder'),
    ],
    "encodeQueueSize": [
        FieldCall(field='encodeQueueSize', demands=['AudioEncoder'], returns='int'),
        FieldCall(field='encodeQueueSize', demands=['VideoEncoder'], returns='int'),
    ],
    "VideoEncoder": [
        NewCall(constructor='VideoEncoder', demands=['dict'], returns='VideoEncoder'),
    ],
    "EncodedAudioChunk": [
        NewCall(constructor='EncodedAudioChunk', demands=['dict'], returns='EncodedAudioChunk'),
    ],
    "byteLength": [
        FieldCall(field='byteLength', demands=['EncodedAudioChunk'], returns='int'),
        FieldCall(field='byteLength', demands=['EncodedVideoChunk'], returns='int'),
    ],
    "copyTo": [
        PrototypeCall(constructor='EncodedAudioChunk', fn='copyTo', demands=['EncodedAudioChunk', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='EncodedVideoChunk', fn='copyTo', demands=['EncodedVideoChunk', 'AllowSharedBufferSource'], returns='None'),
        PrototypeCall(constructor='AudioData', fn='copyTo', demands=['AudioData', 'AllowSharedBufferSource', 'dict'], returns='None'),
        PrototypeCall(constructor='VideoFrame', fn='copyTo', demands=['VideoFrame', 'AllowSharedBufferSource'], returns='dict'),
        PrototypeCall(constructor='VideoFrame', fn='copyTo', demands=['VideoFrame', 'AllowSharedBufferSource', 'dict'], returns='dict'),
    ],
    "EncodedVideoChunk": [
        NewCall(constructor='EncodedVideoChunk', demands=['dict'], returns='EncodedVideoChunk'),
    ],
    "AudioData": [
        NewCall(constructor='AudioData', demands=['dict'], returns='AudioData'),
    ],
    "sampleRate": [
        FieldCall(field='sampleRate', demands=['AudioData'], returns='float'),
        FieldCall(field='sampleRate', demands=['BaseAudioContext'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioBuffer'], returns='float'),
        FieldCall(field='sampleRate', demands=['AudioWorkletGlobalScope'], returns='float'),
    ],
    "numberOfFrames": [
        FieldCall(field='numberOfFrames', demands=['AudioData'], returns='int'),
    ],
    "numberOfChannels": [
        FieldCall(field='numberOfChannels', demands=['AudioData'], returns='int'),
        FieldCall(field='numberOfChannels', demands=['AudioBuffer'], returns='int'),
    ],
    "allocationSize": [
        PrototypeCall(constructor='AudioData', fn='allocationSize', demands=['AudioData', 'dict'], returns='int'),
        PrototypeCall(constructor='VideoFrame', fn='allocationSize', demands=['VideoFrame'], returns='int'),
        PrototypeCall(constructor='VideoFrame', fn='allocationSize', demands=['VideoFrame', 'dict'], returns='int'),
    ],
    "VideoFrame": [
        NewCall(constructor='VideoFrame', demands=['CanvasImageSource'], returns='VideoFrame'),
        NewCall(constructor='VideoFrame', demands=['CanvasImageSource', 'dict'], returns='VideoFrame'),
        NewCall(constructor='VideoFrame', demands=['AllowSharedBufferSource', 'dict'], returns='VideoFrame'),
    ],
    "codedWidth": [
        FieldCall(field='codedWidth', demands=['VideoFrame'], returns='int'),
    ],
    "codedHeight": [
        FieldCall(field='codedHeight', demands=['VideoFrame'], returns='int'),
    ],
    "codedRect": [
        FieldCall(field='codedRect', demands=['VideoFrame'], returns='DOMRectReadOnly'),
    ],
    "visibleRect": [
        FieldCall(field='visibleRect', demands=['VideoFrame'], returns='DOMRectReadOnly'),
    ],
    "rotation": [
        FieldCall(field='rotation', demands=['VideoFrame'], returns='float'),
    ],
    "flip": [
        FieldCall(field='flip', demands=['VideoFrame'], returns='bool'),
    ],
    "displayWidth": [
        FieldCall(field='displayWidth', demands=['VideoFrame'], returns='int'),
    ],
    "displayHeight": [
        FieldCall(field='displayHeight', demands=['VideoFrame'], returns='int'),
    ],
    "colorSpace": [
        FieldCall(field='colorSpace', demands=['VideoFrame'], returns='VideoColorSpace'),
        FieldCall(field='colorSpace', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='colorSpace', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='colorSpace', demands=['ImageData'], returns='PredefinedColorSpace'),
        FieldCall(field='colorSpace', demands=['CSSColor'], returns='CSSKeywordish'),
        FieldCall(field='colorSpace', demands=['CSSColor', 'CSSKeywordish'], returns='CSSKeywordish'),
    ],
    "metadata": [
        PrototypeCall(constructor='VideoFrame', fn='metadata', demands=['VideoFrame'], returns='dict'),
        FieldCall(field='metadata', demands=['MediaSession'], returns='MediaMetadata'),
        FieldCall(field='metadata', demands=['MediaSession', 'MediaMetadata'], returns='MediaMetadata'),
    ],
    "VideoColorSpace": [
        NewCall(constructor='VideoColorSpace', demands=[], returns='VideoColorSpace'),
        NewCall(constructor='VideoColorSpace', demands=['dict'], returns='VideoColorSpace'),
    ],
    "primaries": [
        FieldCall(field='primaries', demands=['VideoColorSpace'], returns='VideoColorPrimaries'),
    ],
    "transfer": [
        FieldCall(field='transfer', demands=['VideoColorSpace'], returns='VideoTransferCharacteristics'),
    ],
    "matrix": [
        FieldCall(field='matrix', demands=['VideoColorSpace'], returns='VideoMatrixCoefficients'),
        FieldCall(field='matrix', demands=['CSSMatrixComponent'], returns='DOMMatrix'),
        FieldCall(field='matrix', demands=['CSSMatrixComponent', 'DOMMatrix'], returns='DOMMatrix'),
        FieldCall(field='matrix', demands=['SVGTransform'], returns='DOMMatrix'),
        FieldCall(field='matrix', demands=['XRRigidTransform'], returns='Float32Array'),
        FieldCall(field='matrix', demands=['XRRay'], returns='Float32Array'),
    ],
    "fullRange": [
        FieldCall(field='fullRange', demands=['VideoColorSpace'], returns='bool'),
    ],
    "ImageDecoder": [
        NewCall(constructor='ImageDecoder', demands=['dict'], returns='ImageDecoder'),
    ],
    "completed": [
        FieldCall(field='completed', demands=['ImageDecoder'], returns='None'),
    ],
    "tracks": [
        FieldCall(field='tracks', demands=['ImageDecoder'], returns='ImageTrackList'),
    ],
    "isTypeSupported": [
        DirectCall(fn='isTypeSupported', receiver='ImageDecoder', demands=['str'], returns='bool'),
        DirectCall(fn='isTypeSupported', receiver='MediaRecorder', demands=['str'], returns='bool'),
        DirectCall(fn='isTypeSupported', receiver='MediaSource', demands=['str'], returns='bool'),
    ],
    "selectedIndex": [
        FieldCall(field='selectedIndex', demands=['ImageTrackList'], returns='int'),
        FieldCall(field='selectedIndex', demands=['HTMLOptionsCollection'], returns='int'),
        FieldCall(field='selectedIndex', demands=['HTMLOptionsCollection', 'int'], returns='int'),
        FieldCall(field='selectedIndex', demands=['VideoTrackList'], returns='int'),
        FieldCall(field='selectedIndex', demands=['HTMLSelectElement'], returns='int'),
        FieldCall(field='selectedIndex', demands=['HTMLSelectElement', 'int'], returns='int'),
    ],
    "selectedTrack": [
        FieldCall(field='selectedTrack', demands=['ImageTrackList'], returns='ImageTrack'),
    ],
    "animated": [
        FieldCall(field='animated', demands=['ImageTrack'], returns='bool'),
    ],
    "frameCount": [
        FieldCall(field='frameCount', demands=['ImageTrack'], returns='int'),
    ],
    "repetitionCount": [
        FieldCall(field='repetitionCount', demands=['ImageTrack'], returns='unrestricted float'),
    ],
    "selected": [
        FieldCall(field='selected', demands=['ImageTrack'], returns='bool'),
        FieldCall(field='selected', demands=['ImageTrack', 'bool'], returns='bool'),
        FieldCall(field='selected', demands=['VideoTrack'], returns='bool'),
        FieldCall(field='selected', demands=['VideoTrack', 'bool'], returns='bool'),
        FieldCall(field='selected', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='selected', demands=['HTMLOptionElement', 'bool'], returns='bool'),
    ],
    "register": [
        PrototypeCall(constructor='SyncManager', fn='register', demands=['SyncManager', 'str'], returns='None'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'TrustedScriptURL'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'str'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'TrustedScriptURL', 'dict'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='register', demands=['ServiceWorkerContainer', 'str', 'dict'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='RTCIdentityProviderRegistrar', fn='register', demands=['RTCIdentityProviderRegistrar', 'dict'], returns='None'),
        PrototypeCall(constructor='PeriodicSyncManager', fn='register', demands=['PeriodicSyncManager', 'str'], returns='None'),
        PrototypeCall(constructor='PeriodicSyncManager', fn='register', demands=['PeriodicSyncManager', 'str', 'dict'], returns='None'),
        PrototypeCall(constructor='SharedStorageWorkletGlobalScope', fn='register', demands=['SharedStorageWorkletGlobalScope', 'str', 'Function'], returns='None'),
    ],
    "getTags": [
        PrototypeCall(constructor='SyncManager', fn='getTags', demands=['SyncManager'], returns='str'),
        PrototypeCall(constructor='PeriodicSyncManager', fn='getTags', demands=['PeriodicSyncManager'], returns='str'),
    ],
    "SyncEvent": [
        NewCall(constructor='SyncEvent', demands=['str', 'dict'], returns='SyncEvent'),
    ],
    "tag": [
        FieldCall(field='tag', demands=['SyncEvent'], returns='str'),
        FieldCall(field='tag', demands=['Notification'], returns='str'),
        FieldCall(field='tag', demands=['PeriodicSyncEvent'], returns='str'),
    ],
    "lastChance": [
        FieldCall(field='lastChance', demands=['SyncEvent'], returns='bool'),
    ],
    "request": [
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'LockGrantedCallback'], returns='*'),
        PrototypeCall(constructor='LockManager', fn='request', demands=['LockManager', 'str', 'dict', 'LockGrantedCallback'], returns='*'),
        FieldCall(field='request', demands=['IDBCursor'], returns='IDBRequest'),
        PrototypeCall(constructor='WakeLock', fn='request', demands=['WakeLock'], returns='WakeLockSentinel'),
        PrototypeCall(constructor='WakeLock', fn='request', demands=['WakeLock', 'WakeLockType'], returns='WakeLockSentinel'),
        FieldCall(field='request', demands=['FetchEvent'], returns='Request'),
        FieldCall(field='request', demands=['BackgroundFetchRecord'], returns='Request'),
    ],
    "query": [
        PrototypeCall(constructor='LockManager', fn='query', demands=['LockManager'], returns='dict'),
        PrototypeCall(constructor='Permissions', fn='query', demands=['Permissions', 'object'], returns='PermissionStatus'),
        FieldCall(field='query', demands=['CSSCustomMediaRule'], returns='CustomMediaQuery'),
    ],
    "registerAnimator": [
        PrototypeCall(constructor='AnimationWorkletGlobalScope', fn='registerAnimator', demands=['AnimationWorkletGlobalScope', 'str', 'AnimatorInstanceConstructor'], returns='None'),
    ],
    "localTime": [
        FieldCall(field='localTime', demands=['WorkletAnimationEffect'], returns='float'),
        FieldCall(field='localTime', demands=['WorkletAnimationEffect', 'float'], returns='float'),
    ],
    "WorkletAnimation": [
        NewCall(constructor='WorkletAnimation', demands=['str'], returns='WorkletAnimation'),
        NewCall(constructor='WorkletAnimation', demands=['str', 'AnimationEffect'], returns='WorkletAnimation'),
        NewCall(constructor='WorkletAnimation', demands=['str', 'AnimationEffect', 'AnimationTimeline'], returns='WorkletAnimation'),
        NewCall(constructor='WorkletAnimation', demands=['str', 'AnimationEffect', 'AnimationTimeline', '*'], returns='WorkletAnimation'),
    ],
    "animatorName": [
        FieldCall(field='animatorName', demands=['WorkletAnimation'], returns='str'),
    ],
    "getChildren": [
        PrototypeCall(constructor='WorkletGroupEffect', fn='getChildren', demands=['WorkletGroupEffect'], returns='WorkletAnimationEffect'),
    ],
    "charging": [
        FieldCall(field='charging', demands=['BatteryManager'], returns='bool'),
    ],
    "chargingTime": [
        FieldCall(field='chargingTime', demands=['BatteryManager'], returns='float'),
    ],
    "dischargingTime": [
        FieldCall(field='dischargingTime', demands=['BatteryManager'], returns='float'),
    ],
    "level": [
        FieldCall(field='level', demands=['BatteryManager'], returns='float'),
    ],
    "onchargingchange": [
        FieldCall(field='onchargingchange', demands=['BatteryManager'], returns='EventHandler'),
        FieldCall(field='onchargingchange', demands=['BatteryManager', 'EventHandler'], returns='EventHandler'),
    ],
    "onchargingtimechange": [
        FieldCall(field='onchargingtimechange', demands=['BatteryManager'], returns='EventHandler'),
        FieldCall(field='onchargingtimechange', demands=['BatteryManager', 'EventHandler'], returns='EventHandler'),
    ],
    "ondischargingtimechange": [
        FieldCall(field='ondischargingtimechange', demands=['BatteryManager'], returns='EventHandler'),
        FieldCall(field='ondischargingtimechange', demands=['BatteryManager', 'EventHandler'], returns='EventHandler'),
    ],
    "onlevelchange": [
        FieldCall(field='onlevelchange', demands=['BatteryManager'], returns='EventHandler'),
        FieldCall(field='onlevelchange', demands=['BatteryManager', 'EventHandler'], returns='EventHandler'),
    ],
    "PointerEvent": [
        NewCall(constructor='PointerEvent', demands=['str'], returns='PointerEvent'),
        NewCall(constructor='PointerEvent', demands=['str', 'dict'], returns='PointerEvent'),
    ],
    "pointerId": [
        FieldCall(field='pointerId', demands=['PointerEvent'], returns='int'),
    ],
    "pressure": [
        FieldCall(field='pressure', demands=['PointerEvent'], returns='float'),
    ],
    "tangentialPressure": [
        FieldCall(field='tangentialPressure', demands=['PointerEvent'], returns='float'),
    ],
    "tiltX": [
        FieldCall(field='tiltX', demands=['PointerEvent'], returns='int'),
    ],
    "tiltY": [
        FieldCall(field='tiltY', demands=['PointerEvent'], returns='int'),
    ],
    "twist": [
        FieldCall(field='twist', demands=['PointerEvent'], returns='int'),
    ],
    "altitudeAngle": [
        FieldCall(field='altitudeAngle', demands=['PointerEvent'], returns='float'),
        FieldCall(field='altitudeAngle', demands=['Touch'], returns='float'),
    ],
    "azimuthAngle": [
        FieldCall(field='azimuthAngle', demands=['PointerEvent'], returns='float'),
        FieldCall(field='azimuthAngle', demands=['Touch'], returns='float'),
    ],
    "pointerType": [
        FieldCall(field='pointerType', demands=['PointerEvent'], returns='str'),
    ],
    "isPrimary": [
        FieldCall(field='isPrimary', demands=['PointerEvent'], returns='bool'),
        FieldCall(field='isPrimary', demands=['BluetoothRemoteGATTService'], returns='bool'),
        FieldCall(field='isPrimary', demands=['ScreenDetailed'], returns='bool'),
    ],
    "persistentDeviceId": [
        FieldCall(field='persistentDeviceId', demands=['PointerEvent'], returns='int'),
    ],
    "getCoalescedEvents": [
        PrototypeCall(constructor='PointerEvent', fn='getCoalescedEvents', demands=['PointerEvent'], returns='PointerEvent'),
    ],
    "getPredictedEvents": [
        PrototypeCall(constructor='PointerEvent', fn='getPredictedEvents', demands=['PointerEvent'], returns='PointerEvent'),
    ],
    "Gyroscope": [
        NewCall(constructor='Gyroscope', demands=[], returns='Gyroscope'),
        NewCall(constructor='Gyroscope', demands=['dict'], returns='Gyroscope'),
    ],
    "fromElement": [
        DirectCall(fn='fromElement', receiver='CropTarget', demands=['Element'], returns='CropTarget'),
        DirectCall(fn='fromElement', receiver='RestrictionTarget', demands=['Element'], returns='RestrictionTarget'),
    ],
    "cropTo": [
        PrototypeCall(constructor='BrowserCaptureMediaStreamTrack', fn='cropTo', demands=['BrowserCaptureMediaStreamTrack', 'CropTarget'], returns='None'),
    ],
    "SFrameTransform": [
        NewCall(constructor='SFrameTransform', demands=[], returns='SFrameTransform'),
        NewCall(constructor='SFrameTransform', demands=['dict'], returns='SFrameTransform'),
    ],
    "setEncryptionKey": [
        PrototypeCall(constructor='SFrameTransform', fn='setEncryptionKey', demands=['SFrameTransform', 'CryptoKey'], returns='None'),
        PrototypeCall(constructor='SFrameTransform', fn='setEncryptionKey', demands=['SFrameTransform', 'CryptoKey', 'CryptoKeyID'], returns='None'),
    ],
    "onerror": [
        FieldCall(field='onerror', demands=['SFrameTransform'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SFrameTransform', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBRequest'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBRequest', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBDatabase'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBDatabase', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBTransaction'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['IDBTransaction', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['RTCDtlsTransport'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['RTCDtlsTransport', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['EventSource'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['EventSource', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['WorkerGlobalScope'], returns='OnErrorEventHandler'),
        FieldCall(field='onerror', demands=['WorkerGlobalScope', 'OnErrorEventHandler'], returns='OnErrorEventHandler'),
        FieldCall(field='onerror', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['Sensor'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['Sensor', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['AudioContext'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['AudioContext', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['Notification'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['Notification', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['WebSocket'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['WebSocket', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SourceBuffer'], returns='EventHandler'),
        FieldCall(field='onerror', demands=['SourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "SFrameTransformErrorEvent": [
        NewCall(constructor='SFrameTransformErrorEvent', demands=['str', 'dict'], returns='SFrameTransformErrorEvent'),
    ],
    "errorType": [
        FieldCall(field='errorType', demands=['SFrameTransformErrorEvent'], returns='SFrameTransformErrorEventType'),
    ],
    "keyID": [
        FieldCall(field='keyID', demands=['SFrameTransformErrorEvent'], returns='CryptoKeyID'),
    ],
    "frame": [
        FieldCall(field='frame', demands=['SFrameTransformErrorEvent'], returns='*'),
        FieldCall(field='frame', demands=['XRInputSourceEvent'], returns='XRFrame'),
    ],
    "RTCEncodedVideoFrame": [
        NewCall(constructor='RTCEncodedVideoFrame', demands=['RTCEncodedVideoFrame'], returns='RTCEncodedVideoFrame'),
        NewCall(constructor='RTCEncodedVideoFrame', demands=['RTCEncodedVideoFrame', 'dict'], returns='RTCEncodedVideoFrame'),
    ],
    "getMetadata": [
        PrototypeCall(constructor='RTCEncodedVideoFrame', fn='getMetadata', demands=['RTCEncodedVideoFrame'], returns='dict'),
        PrototypeCall(constructor='RTCEncodedAudioFrame', fn='getMetadata', demands=['RTCEncodedAudioFrame'], returns='dict'),
    ],
    "RTCEncodedAudioFrame": [
        NewCall(constructor='RTCEncodedAudioFrame', demands=['RTCEncodedAudioFrame'], returns='RTCEncodedAudioFrame'),
        NewCall(constructor='RTCEncodedAudioFrame', demands=['RTCEncodedAudioFrame', 'dict'], returns='RTCEncodedAudioFrame'),
    ],
    "transformer": [
        FieldCall(field='transformer', demands=['RTCTransformEvent'], returns='RTCRtpScriptTransformer'),
    ],
    "generateKeyFrame": [
        PrototypeCall(constructor='RTCRtpScriptTransformer', fn='generateKeyFrame', demands=['RTCRtpScriptTransformer'], returns='int'),
        PrototypeCall(constructor='RTCRtpScriptTransformer', fn='generateKeyFrame', demands=['RTCRtpScriptTransformer', 'str'], returns='int'),
    ],
    "sendKeyFrameRequest": [
        PrototypeCall(constructor='RTCRtpScriptTransformer', fn='sendKeyFrameRequest', demands=['RTCRtpScriptTransformer'], returns='None'),
    ],
    "onkeyframerequest": [
        FieldCall(field='onkeyframerequest', demands=['RTCRtpScriptTransformer'], returns='EventHandler'),
        FieldCall(field='onkeyframerequest', demands=['RTCRtpScriptTransformer', 'EventHandler'], returns='EventHandler'),
    ],
    "RTCRtpScriptTransform": [
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker'], returns='RTCRtpScriptTransform'),
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker', '*'], returns='RTCRtpScriptTransform'),
        NewCall(constructor='RTCRtpScriptTransform', demands=['Worker', '*', 'object'], returns='RTCRtpScriptTransform'),
    ],
    "KeyFrameRequestEvent": [
        NewCall(constructor='KeyFrameRequestEvent', demands=['str'], returns='KeyFrameRequestEvent'),
        NewCall(constructor='KeyFrameRequestEvent', demands=['str', 'str'], returns='KeyFrameRequestEvent'),
    ],
    "rid": [
        FieldCall(field='rid', demands=['KeyFrameRequestEvent'], returns='str'),
    ],
    "GeolocationSensor": [
        NewCall(constructor='GeolocationSensor', demands=[], returns='GeolocationSensor'),
        NewCall(constructor='GeolocationSensor', demands=['dict'], returns='GeolocationSensor'),
    ],
    "read": [
        DirectCall(fn='read', receiver='GeolocationSensor', demands=[], returns='dict'),
        DirectCall(fn='read', receiver='GeolocationSensor', demands=['dict'], returns='dict'),
        FieldCall(field='read', demands=['BluetoothCharacteristicProperties'], returns='bool'),
        PrototypeCall(constructor='Clipboard', fn='read', demands=['Clipboard'], returns='ClipboardItems'),
        PrototypeCall(constructor='Clipboard', fn='read', demands=['Clipboard', 'dict'], returns='ClipboardItems'),
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='read', demands=['ReadableStreamDefaultReader'], returns='dict'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='read', demands=['ReadableStreamBYOBReader', 'ArrayBufferView'], returns='dict'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='read', demands=['ReadableStreamBYOBReader', 'ArrayBufferView', 'dict'], returns='dict'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='read', demands=['FileSystemSyncAccessHandle', 'AllowSharedBufferSource'], returns='int'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='read', demands=['FileSystemSyncAccessHandle', 'AllowSharedBufferSource', 'dict'], returns='int'),
    ],
    "sessionStorage": [
        FieldCall(field='sessionStorage', demands=['StorageAccessHandle'], returns='Storage'),
    ],
    "localStorage": [
        FieldCall(field='localStorage', demands=['StorageAccessHandle'], returns='Storage'),
    ],
    "indexedDB": [
        FieldCall(field='indexedDB', demands=['StorageAccessHandle'], returns='IDBFactory'),
        FieldCall(field='indexedDB', demands=['StorageBucket'], returns='IDBFactory'),
    ],
    "locks": [
        FieldCall(field='locks', demands=['StorageAccessHandle'], returns='LockManager'),
    ],
    "caches": [
        FieldCall(field='caches', demands=['StorageAccessHandle'], returns='CacheStorage'),
        FieldCall(field='caches', demands=['StorageBucket'], returns='CacheStorage'),
    ],
    "estimate": [
        PrototypeCall(constructor='StorageAccessHandle', fn='estimate', demands=['StorageAccessHandle'], returns='dict'),
        PrototypeCall(constructor='StorageManager', fn='estimate', demands=['StorageManager'], returns='dict'),
        PrototypeCall(constructor='StorageBucket', fn='estimate', demands=['StorageBucket'], returns='dict'),
    ],
    "createObjectURL": [
        PrototypeCall(constructor='StorageAccessHandle', fn='createObjectURL', demands=['StorageAccessHandle', 'Blob'], returns='str'),
        PrototypeCall(constructor='StorageAccessHandle', fn='createObjectURL', demands=['StorageAccessHandle', 'MediaSource'], returns='str'),
    ],
    "revokeObjectURL": [
        PrototypeCall(constructor='StorageAccessHandle', fn='revokeObjectURL', demands=['StorageAccessHandle', 'str'], returns='None'),
    ],
    "BroadcastChannel": [
        PrototypeCall(constructor='StorageAccessHandle', fn='BroadcastChannel', demands=['StorageAccessHandle', 'str'], returns='BroadcastChannel'),
        NewCall(constructor='BroadcastChannel', demands=['str'], returns='BroadcastChannel'),
    ],
    "SharedWorker": [
        PrototypeCall(constructor='StorageAccessHandle', fn='SharedWorker', demands=['StorageAccessHandle', 'str'], returns='SharedWorker'),
        PrototypeCall(constructor='StorageAccessHandle', fn='SharedWorker', demands=['StorageAccessHandle', 'str', 'str'], returns='SharedWorker'),
        PrototypeCall(constructor='StorageAccessHandle', fn='SharedWorker', demands=['StorageAccessHandle', 'str', 'dict'], returns='SharedWorker'),
        NewCall(constructor='SharedWorker', demands=['TrustedScriptURL'], returns='SharedWorker'),
        NewCall(constructor='SharedWorker', demands=['TrustedScriptURL', 'str'], returns='SharedWorker'),
    ],
    "persisted": [
        PrototypeCall(constructor='StorageManager', fn='persisted', demands=['StorageManager'], returns='bool'),
        FieldCall(field='persisted', demands=['PageTransitionEvent'], returns='bool'),
        PrototypeCall(constructor='StorageBucket', fn='persisted', demands=['StorageBucket'], returns='bool'),
    ],
    "source": [
        FieldCall(field='source', demands=['IDBRequest'], returns='IDBObjectStore'),
        FieldCall(field='source', demands=['IDBCursor'], returns='IDBObjectStore'),
        FieldCall(field='source', demands=['ExtendableMessageEvent'], returns='Client'),
        FieldCall(field='source', demands=['ToggleEvent'], returns='Element'),
        FieldCall(field='source', demands=['CommandEvent'], returns='Element'),
        FieldCall(field='source', demands=['MessageEvent'], returns='MessageEventSource'),
        FieldCall(field='source', demands=['WebTransportError'], returns='WebTransportErrorSource'),
        FieldCall(field='source', demands=['ScrollTimeline'], returns='Element'),
        FieldCall(field='source', demands=['PointerTimeline'], returns='Element'),
        FieldCall(field='source', demands=['PressureRecord'], returns='PressureSource'),
    ],
    "transaction": [
        FieldCall(field='transaction', demands=['IDBRequest'], returns='IDBTransaction'),
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str'], returns='IDBTransaction'),
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str', 'IDBTransactionMode'], returns='IDBTransaction'),
        PrototypeCall(constructor='IDBDatabase', fn='transaction', demands=['IDBDatabase', 'str', 'IDBTransactionMode', 'dict'], returns='IDBTransaction'),
        FieldCall(field='transaction', demands=['IDBObjectStore'], returns='IDBTransaction'),
    ],
    "readyState": [
        FieldCall(field='readyState', demands=['IDBRequest'], returns='IDBRequestReadyState'),
        FieldCall(field='readyState', demands=['RTCDataChannel'], returns='RTCDataChannelState'),
        FieldCall(field='readyState', demands=['HTMLTrackElement'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['HTMLMediaElement'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['EventSource'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['MediaStreamTrack'], returns='MediaStreamTrackState'),
        FieldCall(field='readyState', demands=['XMLHttpRequest'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['WebSocket'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['FileReader'], returns='unsigned short'),
        FieldCall(field='readyState', demands=['MediaSource'], returns='ReadyState'),
    ],
    "onsuccess": [
        FieldCall(field='onsuccess', demands=['IDBRequest'], returns='EventHandler'),
        FieldCall(field='onsuccess', demands=['IDBRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "onblocked": [
        FieldCall(field='onblocked', demands=['IDBOpenDBRequest'], returns='EventHandler'),
        FieldCall(field='onblocked', demands=['IDBOpenDBRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "onupgradeneeded": [
        FieldCall(field='onupgradeneeded', demands=['IDBOpenDBRequest'], returns='EventHandler'),
        FieldCall(field='onupgradeneeded', demands=['IDBOpenDBRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "IDBVersionChangeEvent": [
        NewCall(constructor='IDBVersionChangeEvent', demands=['str'], returns='IDBVersionChangeEvent'),
        NewCall(constructor='IDBVersionChangeEvent', demands=['str', 'dict'], returns='IDBVersionChangeEvent'),
    ],
    "oldVersion": [
        FieldCall(field='oldVersion', demands=['IDBVersionChangeEvent'], returns='int'),
    ],
    "newVersion": [
        FieldCall(field='newVersion', demands=['IDBVersionChangeEvent'], returns='int'),
    ],
    "deleteDatabase": [
        PrototypeCall(constructor='IDBFactory', fn='deleteDatabase', demands=['IDBFactory', 'str'], returns='IDBOpenDBRequest'),
    ],
    "databases": [
        PrototypeCall(constructor='IDBFactory', fn='databases', demands=['IDBFactory'], returns='dict'),
    ],
    "cmp": [
        PrototypeCall(constructor='IDBFactory', fn='cmp', demands=['IDBFactory', '*', '*'], returns='short'),
    ],
    "version": [
        FieldCall(field='version', demands=['IDBDatabase'], returns='int'),
        FieldCall(field='version', demands=['MIDIPort'], returns='str'),
    ],
    "objectStoreNames": [
        FieldCall(field='objectStoreNames', demands=['IDBDatabase'], returns='DOMStringList'),
        FieldCall(field='objectStoreNames', demands=['IDBTransaction'], returns='DOMStringList'),
    ],
    "createObjectStore": [
        PrototypeCall(constructor='IDBDatabase', fn='createObjectStore', demands=['IDBDatabase', 'str'], returns='IDBObjectStore'),
        PrototypeCall(constructor='IDBDatabase', fn='createObjectStore', demands=['IDBDatabase', 'str', 'dict'], returns='IDBObjectStore'),
    ],
    "deleteObjectStore": [
        PrototypeCall(constructor='IDBDatabase', fn='deleteObjectStore', demands=['IDBDatabase', 'str'], returns='None'),
    ],
    "onabort": [
        FieldCall(field='onabort', demands=['IDBDatabase'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['IDBDatabase', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['IDBTransaction'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['IDBTransaction', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['AbortSignal'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['AbortSignal', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['SourceBuffer'], returns='EventHandler'),
        FieldCall(field='onabort', demands=['SourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "onclose": [
        FieldCall(field='onclose', demands=['IDBDatabase'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['IDBDatabase', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['CloseWatcher'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['CloseWatcher', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['MessagePort'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['MessagePort', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['Notification'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['Notification', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['WebSocket'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['WebSocket', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['PresentationConnection'], returns='EventHandler'),
        FieldCall(field='onclose', demands=['PresentationConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onversionchange": [
        FieldCall(field='onversionchange', demands=['IDBDatabase'], returns='EventHandler'),
        FieldCall(field='onversionchange', demands=['IDBDatabase', 'EventHandler'], returns='EventHandler'),
    ],
    "keyPath": [
        FieldCall(field='keyPath', demands=['IDBObjectStore'], returns='*'),
        FieldCall(field='keyPath', demands=['IDBIndex'], returns='*'),
    ],
    "indexNames": [
        FieldCall(field='indexNames', demands=['IDBObjectStore'], returns='DOMStringList'),
    ],
    "autoIncrement": [
        FieldCall(field='autoIncrement', demands=['IDBObjectStore'], returns='bool'),
    ],
    "put": [
        PrototypeCall(constructor='IDBObjectStore', fn='put', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='put', demands=['IDBObjectStore', '*', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='Cache', fn='put', demands=['Cache', '*', 'Response'], returns='None'),
    ],
    "getAllKeys": [
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllKeys', demands=['IDBObjectStore', '*', 'int'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllKeys', demands=['IDBIndex', '*', 'int'], returns='IDBRequest'),
    ],
    "getAllRecords": [
        PrototypeCall(constructor='IDBObjectStore', fn='getAllRecords', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='getAllRecords', demands=['IDBObjectStore', 'dict'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllRecords', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='getAllRecords', demands=['IDBIndex', 'dict'], returns='IDBRequest'),
    ],
    "openCursor": [
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='openCursor', demands=['IDBObjectStore', '*', 'IDBCursorDirection'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openCursor', demands=['IDBIndex', '*', 'IDBCursorDirection'], returns='IDBRequest'),
    ],
    "openKeyCursor": [
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBObjectStore', fn='openKeyCursor', demands=['IDBObjectStore', '*', 'IDBCursorDirection'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='IDBIndex', fn='openKeyCursor', demands=['IDBIndex', '*', 'IDBCursorDirection'], returns='IDBRequest'),
    ],
    "createIndex": [
        PrototypeCall(constructor='IDBObjectStore', fn='createIndex', demands=['IDBObjectStore', 'str', 'str'], returns='IDBIndex'),
        PrototypeCall(constructor='IDBObjectStore', fn='createIndex', demands=['IDBObjectStore', 'str', 'str', 'dict'], returns='IDBIndex'),
    ],
    "deleteIndex": [
        PrototypeCall(constructor='IDBObjectStore', fn='deleteIndex', demands=['IDBObjectStore', 'str'], returns='None'),
    ],
    "objectStore": [
        FieldCall(field='objectStore', demands=['IDBIndex'], returns='IDBObjectStore'),
        PrototypeCall(constructor='IDBTransaction', fn='objectStore', demands=['IDBTransaction', 'str'], returns='IDBObjectStore'),
    ],
    "multiEntry": [
        FieldCall(field='multiEntry', demands=['IDBIndex'], returns='bool'),
    ],
    "unique": [
        FieldCall(field='unique', demands=['IDBIndex'], returns='bool'),
    ],
    "lower": [
        FieldCall(field='lower', demands=['IDBKeyRange'], returns='*'),
        FieldCall(field='lower', demands=['CSSMathClamp'], returns='CSSNumericValue'),
    ],
    "upper": [
        FieldCall(field='upper', demands=['IDBKeyRange'], returns='*'),
        FieldCall(field='upper', demands=['CSSMathClamp'], returns='CSSNumericValue'),
    ],
    "lowerOpen": [
        FieldCall(field='lowerOpen', demands=['IDBKeyRange'], returns='bool'),
    ],
    "upperOpen": [
        FieldCall(field='upperOpen', demands=['IDBKeyRange'], returns='bool'),
    ],
    "only": [
        DirectCall(fn='only', receiver='IDBKeyRange', demands=['*'], returns='IDBKeyRange'),
    ],
    "lowerBound": [
        DirectCall(fn='lowerBound', receiver='IDBKeyRange', demands=['*'], returns='IDBKeyRange'),
        DirectCall(fn='lowerBound', receiver='IDBKeyRange', demands=['*', 'bool'], returns='IDBKeyRange'),
    ],
    "upperBound": [
        DirectCall(fn='upperBound', receiver='IDBKeyRange', demands=['*'], returns='IDBKeyRange'),
        DirectCall(fn='upperBound', receiver='IDBKeyRange', demands=['*', 'bool'], returns='IDBKeyRange'),
    ],
    "bound": [
        DirectCall(fn='bound', receiver='IDBKeyRange', demands=['*', '*'], returns='IDBKeyRange'),
        DirectCall(fn='bound', receiver='IDBKeyRange', demands=['*', '*', 'bool'], returns='IDBKeyRange'),
        DirectCall(fn='bound', receiver='IDBKeyRange', demands=['*', '*', 'bool', 'bool'], returns='IDBKeyRange'),
    ],
    "includes": [
        PrototypeCall(constructor='IDBKeyRange', fn='includes', demands=['IDBKeyRange', '*'], returns='bool'),
    ],
    "primaryKey": [
        FieldCall(field='primaryKey', demands=['IDBRecord'], returns='*'),
        FieldCall(field='primaryKey', demands=['IDBCursor'], returns='*'),
    ],
    "direction": [
        FieldCall(field='direction', demands=['IDBCursor'], returns='IDBCursorDirection'),
        FieldCall(field='direction', demands=['RTCRtpTransceiver'], returns='RTCRtpTransceiverDirection'),
        FieldCall(field='direction', demands=['RTCRtpTransceiver', 'RTCRtpTransceiverDirection'], returns='RTCRtpTransceiverDirection'),
        FieldCall(field='direction', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='direction', demands=['HTMLMarqueeElement', 'str'], returns='str'),
        FieldCall(field='direction', demands=['USBEndpoint'], returns='USBDirection'),
        FieldCall(field='direction', demands=['XRRay'], returns='DOMPointReadOnly'),
        FieldCall(field='direction', demands=['Selection'], returns='str'),
    ],
    "advance": [
        PrototypeCall(constructor='IDBCursor', fn='advance', demands=['IDBCursor', 'int'], returns='None'),
    ],
    "continue": [
        PrototypeCall(constructor='IDBCursor', fn='continue', demands=['IDBCursor'], returns='None'),
        PrototypeCall(constructor='IDBCursor', fn='continue', demands=['IDBCursor', '*'], returns='None'),
    ],
    "continuePrimaryKey": [
        PrototypeCall(constructor='IDBCursor', fn='continuePrimaryKey', demands=['IDBCursor', '*', '*'], returns='None'),
    ],
    "update": [
        PrototypeCall(constructor='IDBCursor', fn='update', demands=['IDBCursor', '*'], returns='IDBRequest'),
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='update', demands=['ServiceWorkerRegistration'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='MediaKeySession', fn='update', demands=['MediaKeySession', 'BufferSource'], returns='None'),
    ],
    "durability": [
        FieldCall(field='durability', demands=['IDBTransaction'], returns='IDBTransactionDurability'),
    ],
    "db": [
        FieldCall(field='db', demands=['IDBTransaction'], returns='IDBDatabase'),
    ],
    "commit": [
        PrototypeCall(constructor='IDBTransaction', fn='commit', demands=['IDBTransaction'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='commit', demands=['WebTransportWriter'], returns='None'),
    ],
    "abort": [
        PrototypeCall(constructor='IDBTransaction', fn='abort', demands=['IDBTransaction'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='abort', demands=['XMLHttpRequest'], returns='None'),
        PrototypeCall(constructor='PaymentRequest', fn='abort', demands=['PaymentRequest'], returns='None'),
        PrototypeCall(constructor='SpeechRecognition', fn='abort', demands=['SpeechRecognition'], returns='None'),
        PrototypeCall(constructor='WritableStream', fn='abort', demands=['WritableStream'], returns='None'),
        PrototypeCall(constructor='WritableStream', fn='abort', demands=['WritableStream', '*'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='abort', demands=['WritableStreamDefaultWriter'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='abort', demands=['WritableStreamDefaultWriter', '*'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='abort', demands=['FileReader'], returns='None'),
        PrototypeCall(constructor='AbortController', fn='abort', demands=['AbortController'], returns='None'),
        PrototypeCall(constructor='AbortController', fn='abort', demands=['AbortController', '*'], returns='None'),
        DirectCall(fn='abort', receiver='AbortSignal', demands=[], returns='AbortSignal'),
        DirectCall(fn='abort', receiver='AbortSignal', demands=['*'], returns='AbortSignal'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='abort', demands=['BackgroundFetchRegistration'], returns='bool'),
        PrototypeCall(constructor='SourceBuffer', fn='abort', demands=['SourceBuffer'], returns='None'),
    ],
    "oncomplete": [
        FieldCall(field='oncomplete', demands=['IDBTransaction'], returns='EventHandler'),
        FieldCall(field='oncomplete', demands=['IDBTransaction', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='oncomplete', demands=['OfflineAudioContext'], returns='EventHandler'),
        FieldCall(field='oncomplete', demands=['OfflineAudioContext', 'EventHandler'], returns='EventHandler'),
    ],
    "drawArraysInstancedANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='drawArraysInstancedANGLE', demands=['ANGLE_instanced_arrays', 'GLenum', 'GLint', 'GLsizei', 'GLsizei'], returns='None'),
    ],
    "drawElementsInstancedANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='drawElementsInstancedANGLE', demands=['ANGLE_instanced_arrays', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr', 'GLsizei'], returns='None'),
    ],
    "vertexAttribDivisorANGLE": [
        PrototypeCall(constructor='ANGLE_instanced_arrays', fn='vertexAttribDivisorANGLE', demands=['ANGLE_instanced_arrays', 'GLuint', 'GLuint'], returns='None'),
    ],
    "URL": [
        NewCall(constructor='URL', demands=['str'], returns='URL'),
        NewCall(constructor='URL', demands=['str', 'str'], returns='URL'),
        FieldCall(field='URL', demands=['Document'], returns='str'),
    ],
    "parse": [
        DirectCall(fn='parse', receiver='URL', demands=['str'], returns='URL'),
        DirectCall(fn='parse', receiver='URL', demands=['str', 'str'], returns='URL'),
        DirectCall(fn='parse', receiver='CSSStyleValue', demands=['str', 'str'], returns='CSSStyleValue'),
        DirectCall(fn='parse', receiver='CSSNumericValue', demands=['str'], returns='CSSNumericValue'),
        DirectCall(fn='parse', receiver='CSSColorValue', demands=['str'], returns='CSSColorValue'),
    ],
    "canParse": [
        DirectCall(fn='canParse', receiver='URL', demands=['str'], returns='bool'),
        DirectCall(fn='canParse', receiver='URL', demands=['str', 'str'], returns='bool'),
    ],
    "href": [
        FieldCall(field='href', demands=['URL'], returns='str'),
        FieldCall(field='href', demands=['URL', 'str'], returns='str'),
        FieldCall(field='href', demands=['HTMLBaseElement'], returns='str'),
        FieldCall(field='href', demands=['HTMLBaseElement', 'str'], returns='str'),
        FieldCall(field='href', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='href', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='href', demands=['Location'], returns='str'),
        FieldCall(field='href', demands=['Location', 'str'], returns='str'),
        FieldCall(field='href', demands=['WorkerLocation'], returns='str'),
        FieldCall(field='href', demands=['StyleSheet'], returns='str'),
        FieldCall(field='href', demands=['CSSImportRule'], returns='str'),
    ],
    "origin": [
        FieldCall(field='origin', demands=['URL'], returns='str'),
        FieldCall(field='origin', demands=['ExtendableMessageEvent'], returns='str'),
        FieldCall(field='origin', demands=['Location'], returns='str'),
        FieldCall(field='origin', demands=['MessageEvent'], returns='str'),
        FieldCall(field='origin', demands=['WorkerLocation'], returns='str'),
        FieldCall(field='origin', demands=['XRRay'], returns='DOMPointReadOnly'),
    ],
    "host": [
        FieldCall(field='host', demands=['URL'], returns='str'),
        FieldCall(field='host', demands=['URL', 'str'], returns='str'),
        FieldCall(field='host', demands=['Location'], returns='str'),
        FieldCall(field='host', demands=['Location', 'str'], returns='str'),
        FieldCall(field='host', demands=['WorkerLocation'], returns='str'),
        FieldCall(field='host', demands=['ShadowRoot'], returns='Element'),
    ],
    "searchParams": [
        FieldCall(field='searchParams', demands=['URL'], returns='URLSearchParams'),
    ],
    "URLSearchParams": [
        NewCall(constructor='URLSearchParams', demands=[], returns='URLSearchParams'),
        NewCall(constructor='URLSearchParams', demands=['str'], returns='URLSearchParams'),
    ],
    "sort": [
        PrototypeCall(constructor='URLSearchParams', fn='sort', demands=['URLSearchParams'], returns='None'),
    ],
    "registerLayout": [
        PrototypeCall(constructor='LayoutWorkletGlobalScope', fn='registerLayout', demands=['LayoutWorkletGlobalScope', 'str', 'VoidFunction'], returns='None'),
    ],
    "styleMap": [
        FieldCall(field='styleMap', demands=['LayoutChild'], returns='StylePropertyMapReadOnly'),
    ],
    "intrinsicSizes": [
        PrototypeCall(constructor='LayoutChild', fn='intrinsicSizes', demands=['LayoutChild'], returns='IntrinsicSizes'),
    ],
    "layoutNextFragment": [
        PrototypeCall(constructor='LayoutChild', fn='layoutNextFragment', demands=['LayoutChild', 'dict', 'ChildBreakToken'], returns='LayoutFragment'),
    ],
    "inlineSize": [
        FieldCall(field='inlineSize', demands=['LayoutFragment'], returns='float'),
        FieldCall(field='inlineSize', demands=['FragmentResult'], returns='float'),
        FieldCall(field='inlineSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inlineSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='inlineSize', demands=['ResizeObserverSize'], returns='float'),
    ],
    "blockSize": [
        FieldCall(field='blockSize', demands=['LayoutFragment'], returns='float'),
        FieldCall(field='blockSize', demands=['FragmentResult'], returns='float'),
        FieldCall(field='blockSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='blockSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='blockSize', demands=['ResizeObserverSize'], returns='float'),
    ],
    "inlineOffset": [
        FieldCall(field='inlineOffset', demands=['LayoutFragment'], returns='float'),
        FieldCall(field='inlineOffset', demands=['LayoutFragment', 'float'], returns='float'),
    ],
    "blockOffset": [
        FieldCall(field='blockOffset', demands=['LayoutFragment'], returns='float'),
        FieldCall(field='blockOffset', demands=['LayoutFragment', 'float'], returns='float'),
    ],
    "breakToken": [
        FieldCall(field='breakToken', demands=['LayoutFragment'], returns='ChildBreakToken'),
    ],
    "minContentSize": [
        FieldCall(field='minContentSize', demands=['IntrinsicSizes'], returns='float'),
    ],
    "maxContentSize": [
        FieldCall(field='maxContentSize', demands=['IntrinsicSizes'], returns='float'),
    ],
    "availableInlineSize": [
        FieldCall(field='availableInlineSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "availableBlockSize": [
        FieldCall(field='availableBlockSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "fixedInlineSize": [
        FieldCall(field='fixedInlineSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "fixedBlockSize": [
        FieldCall(field='fixedBlockSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "percentageInlineSize": [
        FieldCall(field='percentageInlineSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "percentageBlockSize": [
        FieldCall(field='percentageBlockSize', demands=['LayoutConstraints'], returns='float'),
    ],
    "blockFragmentationOffset": [
        FieldCall(field='blockFragmentationOffset', demands=['LayoutConstraints'], returns='float'),
    ],
    "blockFragmentationType": [
        FieldCall(field='blockFragmentationType', demands=['LayoutConstraints'], returns='BlockFragmentationType'),
    ],
    "breakType": [
        FieldCall(field='breakType', demands=['ChildBreakToken'], returns='BreakType'),
    ],
    "child": [
        FieldCall(field='child', demands=['ChildBreakToken'], returns='LayoutChild'),
    ],
    "childBreakTokens": [
        FieldCall(field='childBreakTokens', demands=['BreakToken'], returns='ChildBreakToken'),
    ],
    "inlineStart": [
        FieldCall(field='inlineStart', demands=['LayoutEdges'], returns='float'),
    ],
    "inlineEnd": [
        FieldCall(field='inlineEnd', demands=['LayoutEdges'], returns='float'),
    ],
    "blockStart": [
        FieldCall(field='blockStart', demands=['LayoutEdges'], returns='float'),
    ],
    "blockEnd": [
        FieldCall(field='blockEnd', demands=['LayoutEdges'], returns='float'),
    ],
    "inline": [
        FieldCall(field='inline', demands=['LayoutEdges'], returns='float'),
    ],
    "block": [
        FieldCall(field='block', demands=['LayoutEdges'], returns='float'),
    ],
    "FragmentResult": [
        NewCall(constructor='FragmentResult', demands=[], returns='FragmentResult'),
        NewCall(constructor='FragmentResult', demands=['dict'], returns='FragmentResult'),
    ],
    "normDepthBufferFromNormView": [
        FieldCall(field='normDepthBufferFromNormView', demands=['XRDepthInformation'], returns='XRRigidTransform'),
    ],
    "rawValueToMeters": [
        FieldCall(field='rawValueToMeters', demands=['XRDepthInformation'], returns='float'),
    ],
    "getDepthInMeters": [
        PrototypeCall(constructor='XRCPUDepthInformation', fn='getDepthInMeters', demands=['XRCPUDepthInformation', 'float', 'float'], returns='float'),
    ],
    "texture": [
        FieldCall(field='texture', demands=['XRWebGLDepthInformation'], returns='WebGLTexture'),
    ],
    "textureType": [
        FieldCall(field='textureType', demands=['XRWebGLDepthInformation'], returns='XRTextureType'),
    ],
    "SnapEvent": [
        NewCall(constructor='SnapEvent', demands=['str'], returns='SnapEvent'),
        NewCall(constructor='SnapEvent', demands=['str', 'dict'], returns='SnapEvent'),
    ],
    "snapTargetBlock": [
        FieldCall(field='snapTargetBlock', demands=['SnapEvent'], returns='Node'),
    ],
    "snapTargetInline": [
        FieldCall(field='snapTargetInline', demands=['SnapEvent'], returns='Node'),
    ],
    "released": [
        FieldCall(field='released', demands=['WakeLockSentinel'], returns='bool'),
    ],
    "release": [
        PrototypeCall(constructor='WakeLockSentinel', fn='release', demands=['WakeLockSentinel'], returns='None'),
        FieldCall(field='release', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "onrelease": [
        FieldCall(field='onrelease', demands=['WakeLockSentinel'], returns='EventHandler'),
        FieldCall(field='onrelease', demands=['WakeLockSentinel', 'EventHandler'], returns='EventHandler'),
    ],
    "FaceDetector": [
        NewCall(constructor='FaceDetector', demands=[], returns='FaceDetector'),
        NewCall(constructor='FaceDetector', demands=['dict'], returns='FaceDetector'),
    ],
    "detect": [
        PrototypeCall(constructor='FaceDetector', fn='detect', demands=['FaceDetector', 'ImageBitmapSource'], returns='dict'),
        PrototypeCall(constructor='BarcodeDetector', fn='detect', demands=['BarcodeDetector', 'ImageBitmapSource'], returns='dict'),
        PrototypeCall(constructor='LanguageDetector', fn='detect', demands=['LanguageDetector', 'str'], returns='dict'),
        PrototypeCall(constructor='LanguageDetector', fn='detect', demands=['LanguageDetector', 'str', 'dict'], returns='dict'),
        PrototypeCall(constructor='TextDetector', fn='detect', demands=['TextDetector', 'ImageBitmapSource'], returns='dict'),
    ],
    "BarcodeDetector": [
        NewCall(constructor='BarcodeDetector', demands=[], returns='BarcodeDetector'),
        NewCall(constructor='BarcodeDetector', demands=['dict'], returns='BarcodeDetector'),
    ],
    "getSupportedFormats": [
        DirectCall(fn='getSupportedFormats', receiver='BarcodeDetector', demands=[], returns='BarcodeFormat'),
    ],
    "containerQuery": [
        FieldCall(field='containerQuery', demands=['CSSContainerRule'], returns='CSSOMString'),
    ],
    "getAvailability": [
        PrototypeCall(constructor='Bluetooth', fn='getAvailability', demands=['Bluetooth'], returns='bool'),
        PrototypeCall(constructor='PresentationRequest', fn='getAvailability', demands=['PresentationRequest'], returns='PresentationAvailability'),
    ],
    "onavailabilitychanged": [
        FieldCall(field='onavailabilitychanged', demands=['Bluetooth'], returns='EventHandler'),
        FieldCall(field='onavailabilitychanged', demands=['Bluetooth', 'EventHandler'], returns='EventHandler'),
    ],
    "referringDevice": [
        FieldCall(field='referringDevice', demands=['Bluetooth'], returns='BluetoothDevice'),
    ],
    "devices": [
        FieldCall(field='devices', demands=['BluetoothPermissionResult'], returns='BluetoothDevice'),
        FieldCall(field='devices', demands=['BluetoothPermissionResult', 'BluetoothDevice'], returns='BluetoothDevice'),
        FieldCall(field='devices', demands=['DeviceChangeEvent'], returns='MediaDeviceInfo'),
        FieldCall(field='devices', demands=['USBPermissionResult'], returns='USBDevice'),
        FieldCall(field='devices', demands=['USBPermissionResult', 'USBDevice'], returns='USBDevice'),
    ],
    "ValueEvent": [
        NewCall(constructor='ValueEvent', demands=['str'], returns='ValueEvent'),
        NewCall(constructor='ValueEvent', demands=['str', 'dict'], returns='ValueEvent'),
    ],
    "gatt": [
        FieldCall(field='gatt', demands=['BluetoothDevice'], returns='BluetoothRemoteGATTServer'),
    ],
    "watchAdvertisements": [
        PrototypeCall(constructor='BluetoothDevice', fn='watchAdvertisements', demands=['BluetoothDevice'], returns='None'),
        PrototypeCall(constructor='BluetoothDevice', fn='watchAdvertisements', demands=['BluetoothDevice', 'dict'], returns='None'),
    ],
    "watchingAdvertisements": [
        FieldCall(field='watchingAdvertisements', demands=['BluetoothDevice'], returns='bool'),
    ],
    "BluetoothAdvertisingEvent": [
        NewCall(constructor='BluetoothAdvertisingEvent', demands=['str', 'dict'], returns='BluetoothAdvertisingEvent'),
    ],
    "uuids": [
        FieldCall(field='uuids', demands=['BluetoothAdvertisingEvent'], returns='UUID'),
    ],
    "appearance": [
        FieldCall(field='appearance', demands=['BluetoothAdvertisingEvent'], returns='unsigned short'),
    ],
    "txPower": [
        FieldCall(field='txPower', demands=['BluetoothAdvertisingEvent'], returns='byte'),
    ],
    "rssi": [
        FieldCall(field='rssi', demands=['BluetoothAdvertisingEvent'], returns='byte'),
    ],
    "connect": [
        PrototypeCall(constructor='BluetoothRemoteGATTServer', fn='connect', demands=['BluetoothRemoteGATTServer'], returns='BluetoothRemoteGATTServer'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode', 'int'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioNode', 'int', 'int'], returns='AudioNode'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioParam'], returns='None'),
        PrototypeCall(constructor='AudioNode', fn='connect', demands=['AudioNode', 'AudioParam', 'int'], returns='None'),
    ],
    "getPrimaryService": [
        PrototypeCall(constructor='BluetoothRemoteGATTServer', fn='getPrimaryService', demands=['BluetoothRemoteGATTServer', 'BluetoothServiceUUID'], returns='BluetoothRemoteGATTService'),
    ],
    "getPrimaryServices": [
        PrototypeCall(constructor='BluetoothRemoteGATTServer', fn='getPrimaryServices', demands=['BluetoothRemoteGATTServer'], returns='BluetoothRemoteGATTService'),
        PrototypeCall(constructor='BluetoothRemoteGATTServer', fn='getPrimaryServices', demands=['BluetoothRemoteGATTServer', 'BluetoothServiceUUID'], returns='BluetoothRemoteGATTService'),
    ],
    "uuid": [
        FieldCall(field='uuid', demands=['BluetoothRemoteGATTService'], returns='UUID'),
        FieldCall(field='uuid', demands=['BluetoothRemoteGATTCharacteristic'], returns='UUID'),
        FieldCall(field='uuid', demands=['BluetoothRemoteGATTDescriptor'], returns='UUID'),
    ],
    "getCharacteristic": [
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getCharacteristic', demands=['BluetoothRemoteGATTService', 'BluetoothCharacteristicUUID'], returns='BluetoothRemoteGATTCharacteristic'),
        DirectCall(fn='getCharacteristic', receiver='BluetoothUUID', demands=['str'], returns='UUID'),
        DirectCall(fn='getCharacteristic', receiver='BluetoothUUID', demands=['int'], returns='UUID'),
    ],
    "getCharacteristics": [
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getCharacteristics', demands=['BluetoothRemoteGATTService'], returns='BluetoothRemoteGATTCharacteristic'),
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getCharacteristics', demands=['BluetoothRemoteGATTService', 'BluetoothCharacteristicUUID'], returns='BluetoothRemoteGATTCharacteristic'),
    ],
    "getIncludedService": [
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getIncludedService', demands=['BluetoothRemoteGATTService', 'BluetoothServiceUUID'], returns='BluetoothRemoteGATTService'),
    ],
    "getIncludedServices": [
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getIncludedServices', demands=['BluetoothRemoteGATTService'], returns='BluetoothRemoteGATTService'),
        PrototypeCall(constructor='BluetoothRemoteGATTService', fn='getIncludedServices', demands=['BluetoothRemoteGATTService', 'BluetoothServiceUUID'], returns='BluetoothRemoteGATTService'),
    ],
    "service": [
        FieldCall(field='service', demands=['BluetoothRemoteGATTCharacteristic'], returns='BluetoothRemoteGATTService'),
    ],
    "properties": [
        FieldCall(field='properties', demands=['BluetoothRemoteGATTCharacteristic'], returns='BluetoothCharacteristicProperties'),
    ],
    "getDescriptor": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='getDescriptor', demands=['BluetoothRemoteGATTCharacteristic', 'BluetoothDescriptorUUID'], returns='BluetoothRemoteGATTDescriptor'),
        DirectCall(fn='getDescriptor', receiver='BluetoothUUID', demands=['str'], returns='UUID'),
        DirectCall(fn='getDescriptor', receiver='BluetoothUUID', demands=['int'], returns='UUID'),
    ],
    "getDescriptors": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='getDescriptors', demands=['BluetoothRemoteGATTCharacteristic'], returns='BluetoothRemoteGATTDescriptor'),
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='getDescriptors', demands=['BluetoothRemoteGATTCharacteristic', 'BluetoothDescriptorUUID'], returns='BluetoothRemoteGATTDescriptor'),
    ],
    "readValue": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='readValue', demands=['BluetoothRemoteGATTCharacteristic'], returns='DataView'),
        PrototypeCall(constructor='BluetoothRemoteGATTDescriptor', fn='readValue', demands=['BluetoothRemoteGATTDescriptor'], returns='DataView'),
    ],
    "writeValue": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='writeValue', demands=['BluetoothRemoteGATTCharacteristic', 'BufferSource'], returns='None'),
        PrototypeCall(constructor='BluetoothRemoteGATTDescriptor', fn='writeValue', demands=['BluetoothRemoteGATTDescriptor', 'BufferSource'], returns='None'),
    ],
    "writeValueWithResponse": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='writeValueWithResponse', demands=['BluetoothRemoteGATTCharacteristic', 'BufferSource'], returns='None'),
    ],
    "writeValueWithoutResponse": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='writeValueWithoutResponse', demands=['BluetoothRemoteGATTCharacteristic', 'BufferSource'], returns='None'),
    ],
    "startNotifications": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='startNotifications', demands=['BluetoothRemoteGATTCharacteristic'], returns='BluetoothRemoteGATTCharacteristic'),
    ],
    "stopNotifications": [
        PrototypeCall(constructor='BluetoothRemoteGATTCharacteristic', fn='stopNotifications', demands=['BluetoothRemoteGATTCharacteristic'], returns='BluetoothRemoteGATTCharacteristic'),
    ],
    "broadcast": [
        FieldCall(field='broadcast', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "writeWithoutResponse": [
        FieldCall(field='writeWithoutResponse', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "notify": [
        FieldCall(field='notify', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "indicate": [
        FieldCall(field='indicate', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "authenticatedSignedWrites": [
        FieldCall(field='authenticatedSignedWrites', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "reliableWrite": [
        FieldCall(field='reliableWrite', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "writableAuxiliaries": [
        FieldCall(field='writableAuxiliaries', demands=['BluetoothCharacteristicProperties'], returns='bool'),
    ],
    "characteristic": [
        FieldCall(field='characteristic', demands=['BluetoothRemoteGATTDescriptor'], returns='BluetoothRemoteGATTCharacteristic'),
    ],
    "getService": [
        DirectCall(fn='getService', receiver='BluetoothUUID', demands=['str'], returns='UUID'),
        DirectCall(fn='getService', receiver='BluetoothUUID', demands=['int'], returns='UUID'),
    ],
    "canonicalUUID": [
        DirectCall(fn='canonicalUUID', receiver='BluetoothUUID', demands=['int'], returns='UUID'),
    ],
    "requestPresenter": [
        PrototypeCall(constructor='Ink', fn='requestPresenter', demands=['Ink'], returns='DelegatedInkTrailPresenter'),
        PrototypeCall(constructor='Ink', fn='requestPresenter', demands=['Ink', 'dict'], returns='DelegatedInkTrailPresenter'),
    ],
    "presentationArea": [
        FieldCall(field='presentationArea', demands=['DelegatedInkTrailPresenter'], returns='Element'),
    ],
    "updateInkTrailStartPoint": [
        PrototypeCall(constructor='DelegatedInkTrailPresenter', fn='updateInkTrailStartPoint', demands=['DelegatedInkTrailPresenter', 'PointerEvent', 'dict'], returns='None'),
    ],
    "requestWindow": [
        PrototypeCall(constructor='DocumentPictureInPicture', fn='requestWindow', demands=['DocumentPictureInPicture'], returns='Window'),
        PrototypeCall(constructor='DocumentPictureInPicture', fn='requestWindow', demands=['DocumentPictureInPicture', 'dict'], returns='Window'),
    ],
    "window": [
        FieldCall(field='window', demands=['DocumentPictureInPicture'], returns='Window'),
        FieldCall(field='window', demands=['DocumentPictureInPictureEvent'], returns='Window'),
        FieldCall(field='window', demands=['Window'], returns='WindowProxy'),
        FieldCall(field='window', demands=['PerformanceScriptTiming'], returns='Window'),
    ],
    "onenter": [
        FieldCall(field='onenter', demands=['DocumentPictureInPicture'], returns='EventHandler'),
        FieldCall(field='onenter', demands=['DocumentPictureInPicture', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onenter', demands=['TextTrackCue'], returns='EventHandler'),
        FieldCall(field='onenter', demands=['TextTrackCue', 'EventHandler'], returns='EventHandler'),
    ],
    "DocumentPictureInPictureEvent": [
        NewCall(constructor='DocumentPictureInPictureEvent', demands=['str', 'dict'], returns='DocumentPictureInPictureEvent'),
    ],
    "postscriptName": [
        FieldCall(field='postscriptName', demands=['FontData'], returns='str'),
    ],
    "fullName": [
        FieldCall(field='fullName', demands=['FontData'], returns='str'),
    ],
    "family": [
        FieldCall(field='family', demands=['FontData'], returns='str'),
        FieldCall(field='family', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='family', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "BeforeInstallPromptEvent": [
        NewCall(constructor='BeforeInstallPromptEvent', demands=['str'], returns='BeforeInstallPromptEvent'),
        NewCall(constructor='BeforeInstallPromptEvent', demands=['str', 'dict'], returns='BeforeInstallPromptEvent'),
    ],
    "prompt": [
        PrototypeCall(constructor='BeforeInstallPromptEvent', fn='prompt', demands=['BeforeInstallPromptEvent'], returns='dict'),
        DirectCall(fn='prompt', receiver=None, demands=[], returns='str'),
        DirectCall(fn='prompt', receiver=None, demands=['str'], returns='str'),
        DirectCall(fn='prompt', receiver=None, demands=['str', 'str'], returns='str'),
        PrototypeCall(constructor='RemotePlayback', fn='prompt', demands=['RemotePlayback'], returns='None'),
    ],
    "hasOrientation": [
        FieldCall(field='hasOrientation', demands=['GamepadPose'], returns='bool'),
    ],
    "hasPosition": [
        FieldCall(field='hasPosition', demands=['GamepadPose'], returns='bool'),
    ],
    "position": [
        FieldCall(field='position', demands=['GamepadPose'], returns='Float32Array'),
        FieldCall(field='position', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='position', demands=['VTTCue'], returns='LineAndPositionSetting'),
        FieldCall(field='position', demands=['VTTCue', 'LineAndPositionSetting'], returns='LineAndPositionSetting'),
        FieldCall(field='position', demands=['XRRigidTransform'], returns='DOMPointReadOnly'),
    ],
    "linearVelocity": [
        FieldCall(field='linearVelocity', demands=['GamepadPose'], returns='Float32Array'),
        FieldCall(field='linearVelocity', demands=['XRPose'], returns='DOMPointReadOnly'),
    ],
    "linearAcceleration": [
        FieldCall(field='linearAcceleration', demands=['GamepadPose'], returns='Float32Array'),
    ],
    "angularVelocity": [
        FieldCall(field='angularVelocity', demands=['GamepadPose'], returns='Float32Array'),
        FieldCall(field='angularVelocity', demands=['XRPose'], returns='DOMPointReadOnly'),
    ],
    "angularAcceleration": [
        FieldCall(field='angularAcceleration', demands=['GamepadPose'], returns='Float32Array'),
    ],
    "initiatorType": [
        FieldCall(field='initiatorType', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "deliveryType": [
        FieldCall(field='deliveryType', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "nextHopProtocol": [
        FieldCall(field='nextHopProtocol', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "workerStart": [
        FieldCall(field='workerStart', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "redirectStart": [
        FieldCall(field='redirectStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='redirectStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "redirectEnd": [
        FieldCall(field='redirectEnd', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='redirectEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "fetchStart": [
        FieldCall(field='fetchStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='fetchStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "domainLookupStart": [
        FieldCall(field='domainLookupStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='domainLookupStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "domainLookupEnd": [
        FieldCall(field='domainLookupEnd', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='domainLookupEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "connectStart": [
        FieldCall(field='connectStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='connectStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "connectEnd": [
        FieldCall(field='connectEnd', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='connectEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "secureConnectionStart": [
        FieldCall(field='secureConnectionStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='secureConnectionStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "requestStart": [
        FieldCall(field='requestStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='requestStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "finalResponseHeadersStart": [
        FieldCall(field='finalResponseHeadersStart', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "firstInterimResponseStart": [
        FieldCall(field='firstInterimResponseStart', demands=['PerformanceResourceTiming'], returns='float'),
    ],
    "responseStart": [
        FieldCall(field='responseStart', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='responseStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "responseEnd": [
        FieldCall(field='responseEnd', demands=['PerformanceResourceTiming'], returns='float'),
        FieldCall(field='responseEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "transferSize": [
        FieldCall(field='transferSize', demands=['PerformanceResourceTiming'], returns='int'),
    ],
    "encodedBodySize": [
        FieldCall(field='encodedBodySize', demands=['PerformanceResourceTiming'], returns='int'),
    ],
    "decodedBodySize": [
        FieldCall(field='decodedBodySize', demands=['PerformanceResourceTiming'], returns='int'),
    ],
    "responseStatus": [
        FieldCall(field='responseStatus', demands=['PerformanceResourceTiming'], returns='unsigned short'),
    ],
    "renderBlockingStatus": [
        FieldCall(field='renderBlockingStatus', demands=['PerformanceResourceTiming'], returns='RenderBlockingStatusType'),
    ],
    "contentType": [
        FieldCall(field='contentType', demands=['PerformanceResourceTiming'], returns='str'),
        FieldCall(field='contentType', demands=['RemoteDocument'], returns='str'),
        FieldCall(field='contentType', demands=['Document'], returns='str'),
    ],
    "contentEncoding": [
        FieldCall(field='contentEncoding', demands=['PerformanceResourceTiming'], returns='str'),
    ],
    "scriptURL": [
        FieldCall(field='scriptURL', demands=['ServiceWorker'], returns='str'),
    ],
    "postMessage": [
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*', 'object'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*'], returns='None'),
        PrototypeCall(constructor='ServiceWorker', fn='postMessage', demands=['ServiceWorker', '*', 'dict'], returns='None'),
        PrototypeCall(constructor='Client', fn='postMessage', demands=['Client', '*', 'object'], returns='None'),
        PrototypeCall(constructor='Client', fn='postMessage', demands=['Client', '*'], returns='None'),
        PrototypeCall(constructor='Client', fn='postMessage', demands=['Client', '*', 'dict'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'str'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'str', 'object'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*'], returns='None'),
        DirectCall(fn='postMessage', receiver=None, demands=['*', 'dict'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*', 'object'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*'], returns='None'),
        PrototypeCall(constructor='MessagePort', fn='postMessage', demands=['MessagePort', '*', 'dict'], returns='None'),
        PrototypeCall(constructor='BroadcastChannel', fn='postMessage', demands=['BroadcastChannel', '*'], returns='None'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='postMessage', demands=['DedicatedWorkerGlobalScope', '*', 'object'], returns='None'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='postMessage', demands=['DedicatedWorkerGlobalScope', '*'], returns='None'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='postMessage', demands=['DedicatedWorkerGlobalScope', '*', 'dict'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*', 'object'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*'], returns='None'),
        PrototypeCall(constructor='Worker', fn='postMessage', demands=['Worker', '*', 'dict'], returns='None'),
        PrototypeCall(constructor='HTMLPortalElement', fn='postMessage', demands=['HTMLPortalElement', '*'], returns='None'),
        PrototypeCall(constructor='HTMLPortalElement', fn='postMessage', demands=['HTMLPortalElement', '*', 'dict'], returns='None'),
        PrototypeCall(constructor='PortalHost', fn='postMessage', demands=['PortalHost', '*'], returns='None'),
        PrototypeCall(constructor='PortalHost', fn='postMessage', demands=['PortalHost', '*', 'dict'], returns='None'),
    ],
    "installing": [
        FieldCall(field='installing', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
    ],
    "waiting": [
        FieldCall(field='waiting', demands=['ServiceWorkerRegistration'], returns='ServiceWorker'),
    ],
    "navigationPreload": [
        FieldCall(field='navigationPreload', demands=['ServiceWorkerRegistration'], returns='NavigationPreloadManager'),
    ],
    "scope": [
        FieldCall(field='scope', demands=['ServiceWorkerRegistration'], returns='str'),
        FieldCall(field='scope', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='scope', demands=['HTMLTableCellElement', 'str'], returns='str'),
    ],
    "updateViaCache": [
        FieldCall(field='updateViaCache', demands=['ServiceWorkerRegistration'], returns='ServiceWorkerUpdateViaCache'),
    ],
    "unregister": [
        PrototypeCall(constructor='ServiceWorkerRegistration', fn='unregister', demands=['ServiceWorkerRegistration'], returns='bool'),
        PrototypeCall(constructor='PeriodicSyncManager', fn='unregister', demands=['PeriodicSyncManager', 'str'], returns='None'),
    ],
    "onupdatefound": [
        FieldCall(field='onupdatefound', demands=['ServiceWorkerRegistration'], returns='EventHandler'),
        FieldCall(field='onupdatefound', demands=['ServiceWorkerRegistration', 'EventHandler'], returns='EventHandler'),
    ],
    "controller": [
        FieldCall(field='controller', demands=['ServiceWorkerContainer'], returns='ServiceWorker'),
    ],
    "getRegistration": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistration', demands=['ServiceWorkerContainer'], returns='ServiceWorkerRegistration'),
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistration', demands=['ServiceWorkerContainer', 'str'], returns='ServiceWorkerRegistration'),
    ],
    "getRegistrations": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='getRegistrations', demands=['ServiceWorkerContainer'], returns='ServiceWorkerRegistration'),
    ],
    "startMessages": [
        PrototypeCall(constructor='ServiceWorkerContainer', fn='startMessages', demands=['ServiceWorkerContainer'], returns='None'),
    ],
    "oncontrollerchange": [
        FieldCall(field='oncontrollerchange', demands=['ServiceWorkerContainer'], returns='EventHandler'),
        FieldCall(field='oncontrollerchange', demands=['ServiceWorkerContainer', 'EventHandler'], returns='EventHandler'),
    ],
    "onmessage": [
        FieldCall(field='onmessage', demands=['ServiceWorkerContainer'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['ServiceWorkerContainer', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['ServiceWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['ServiceWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['EventSource'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['EventSource', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['BroadcastChannel'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['BroadcastChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['HTMLPortalElement'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['HTMLPortalElement', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['PortalHost'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['PortalHost', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['MediaKeySession'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['MediaKeySession', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['WebSocket'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['WebSocket', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['PresentationConnection'], returns='EventHandler'),
        FieldCall(field='onmessage', demands=['PresentationConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onmessageerror": [
        FieldCall(field='onmessageerror', demands=['ServiceWorkerContainer'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['ServiceWorkerContainer', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['ServiceWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['ServiceWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['BroadcastChannel'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['BroadcastChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['HTMLPortalElement'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['HTMLPortalElement', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['PortalHost'], returns='EventHandler'),
        FieldCall(field='onmessageerror', demands=['PortalHost', 'EventHandler'], returns='EventHandler'),
    ],
    "setHeaderValue": [
        PrototypeCall(constructor='NavigationPreloadManager', fn='setHeaderValue', demands=['NavigationPreloadManager', 'str'], returns='None'),
    ],
    "getState": [
        PrototypeCall(constructor='NavigationPreloadManager', fn='getState', demands=['NavigationPreloadManager'], returns='dict'),
        PrototypeCall(constructor='NavigationHistoryEntry', fn='getState', demands=['NavigationHistoryEntry'], returns='*'),
        PrototypeCall(constructor='NavigationDestination', fn='getState', demands=['NavigationDestination'], returns='*'),
    ],
    "clients": [
        FieldCall(field='clients', demands=['ServiceWorkerGlobalScope'], returns='Clients'),
    ],
    "registration": [
        FieldCall(field='registration', demands=['ServiceWorkerGlobalScope'], returns='ServiceWorkerRegistration'),
        FieldCall(field='registration', demands=['BackgroundFetchEvent'], returns='BackgroundFetchRegistration'),
    ],
    "serviceWorker": [
        FieldCall(field='serviceWorker', demands=['ServiceWorkerGlobalScope'], returns='ServiceWorker'),
    ],
    "skipWaiting": [
        PrototypeCall(constructor='ServiceWorkerGlobalScope', fn='skipWaiting', demands=['ServiceWorkerGlobalScope'], returns='None'),
    ],
    "oninstall": [
        FieldCall(field='oninstall', demands=['ServiceWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='oninstall', demands=['ServiceWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "onactivate": [
        FieldCall(field='onactivate', demands=['ServiceWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onactivate', demands=['ServiceWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onactivate', demands=['Sensor'], returns='EventHandler'),
        FieldCall(field='onactivate', demands=['Sensor', 'EventHandler'], returns='EventHandler'),
    ],
    "onfetch": [
        FieldCall(field='onfetch', demands=['ServiceWorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onfetch', demands=['ServiceWorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "frameType": [
        FieldCall(field='frameType', demands=['Client'], returns='FrameType'),
    ],
    "visibilityState": [
        FieldCall(field='visibilityState', demands=['WindowClient'], returns='DocumentVisibilityState'),
        FieldCall(field='visibilityState', demands=['XRSession'], returns='XRVisibilityState'),
    ],
    "focused": [
        FieldCall(field='focused', demands=['WindowClient'], returns='bool'),
    ],
    "ancestorOrigins": [
        FieldCall(field='ancestorOrigins', demands=['WindowClient'], returns='str'),
        FieldCall(field='ancestorOrigins', demands=['Location'], returns='DOMStringList'),
    ],
    "navigate": [
        PrototypeCall(constructor='WindowClient', fn='navigate', demands=['WindowClient', 'str'], returns='WindowClient'),
        PrototypeCall(constructor='Navigation', fn='navigate', demands=['Navigation', 'str'], returns='dict'),
        PrototypeCall(constructor='Navigation', fn='navigate', demands=['Navigation', 'str', 'dict'], returns='dict'),
        FieldCall(field='navigate', demands=['Notification'], returns='str'),
    ],
    "matchAll": [
        PrototypeCall(constructor='Clients', fn='matchAll', demands=['Clients'], returns='Client'),
        PrototypeCall(constructor='Clients', fn='matchAll', demands=['Clients', 'dict'], returns='Client'),
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache'], returns='Response'),
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache', '*'], returns='Response'),
        PrototypeCall(constructor='Cache', fn='matchAll', demands=['Cache', '*', 'dict'], returns='Response'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='matchAll', demands=['BackgroundFetchRegistration'], returns='BackgroundFetchRecord'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='matchAll', demands=['BackgroundFetchRegistration', '*'], returns='BackgroundFetchRecord'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='matchAll', demands=['BackgroundFetchRegistration', '*', 'dict'], returns='BackgroundFetchRecord'),
    ],
    "openWindow": [
        PrototypeCall(constructor='Clients', fn='openWindow', demands=['Clients', 'str'], returns='WindowClient'),
        PrototypeCall(constructor='PaymentRequestEvent', fn='openWindow', demands=['PaymentRequestEvent', 'str'], returns='WindowClient'),
    ],
    "claim": [
        PrototypeCall(constructor='Clients', fn='claim', demands=['Clients'], returns='None'),
    ],
    "ExtendableEvent": [
        NewCall(constructor='ExtendableEvent', demands=['str'], returns='ExtendableEvent'),
        NewCall(constructor='ExtendableEvent', demands=['str', 'dict'], returns='ExtendableEvent'),
    ],
    "waitUntil": [
        PrototypeCall(constructor='ExtendableEvent', fn='waitUntil', demands=['ExtendableEvent', '*'], returns='None'),
    ],
    "InstallEvent": [
        NewCall(constructor='InstallEvent', demands=['str'], returns='InstallEvent'),
        NewCall(constructor='InstallEvent', demands=['str', 'dict'], returns='InstallEvent'),
    ],
    "addRoutes": [
        PrototypeCall(constructor='InstallEvent', fn='addRoutes', demands=['InstallEvent', 'dict'], returns='None'),
    ],
    "FetchEvent": [
        NewCall(constructor='FetchEvent', demands=['str', 'dict'], returns='FetchEvent'),
    ],
    "preloadResponse": [
        FieldCall(field='preloadResponse', demands=['FetchEvent'], returns='*'),
    ],
    "clientId": [
        FieldCall(field='clientId', demands=['FetchEvent'], returns='str'),
    ],
    "resultingClientId": [
        FieldCall(field='resultingClientId', demands=['FetchEvent'], returns='str'),
    ],
    "replacesClientId": [
        FieldCall(field='replacesClientId', demands=['FetchEvent'], returns='str'),
    ],
    "handled": [
        FieldCall(field='handled', demands=['FetchEvent'], returns='None'),
    ],
    "respondWith": [
        PrototypeCall(constructor='FetchEvent', fn='respondWith', demands=['FetchEvent', 'Response'], returns='None'),
        PrototypeCall(constructor='CanMakePaymentEvent', fn='respondWith', demands=['CanMakePaymentEvent', 'bool'], returns='None'),
        PrototypeCall(constructor='PaymentRequestEvent', fn='respondWith', demands=['PaymentRequestEvent', 'dict'], returns='None'),
    ],
    "ExtendableMessageEvent": [
        NewCall(constructor='ExtendableMessageEvent', demands=['str'], returns='ExtendableMessageEvent'),
        NewCall(constructor='ExtendableMessageEvent', demands=['str', 'dict'], returns='ExtendableMessageEvent'),
    ],
    "lastEventId": [
        FieldCall(field='lastEventId', demands=['ExtendableMessageEvent'], returns='str'),
        FieldCall(field='lastEventId', demands=['MessageEvent'], returns='str'),
    ],
    "ports": [
        FieldCall(field='ports', demands=['ExtendableMessageEvent'], returns='MessagePort'),
        FieldCall(field='ports', demands=['MessageEvent'], returns='MessagePort'),
    ],
    "match": [
        PrototypeCall(constructor='Cache', fn='match', demands=['Cache', '*'], returns='Response'),
        PrototypeCall(constructor='Cache', fn='match', demands=['Cache', '*', 'dict'], returns='Response'),
        PrototypeCall(constructor='CacheStorage', fn='match', demands=['CacheStorage', '*'], returns='Response'),
        PrototypeCall(constructor='CacheStorage', fn='match', demands=['CacheStorage', '*', 'dict'], returns='Response'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='match', demands=['BackgroundFetchRegistration', '*'], returns='BackgroundFetchRecord'),
        PrototypeCall(constructor='BackgroundFetchRegistration', fn='match', demands=['BackgroundFetchRegistration', '*', 'dict'], returns='BackgroundFetchRecord'),
    ],
    "addAll": [
        PrototypeCall(constructor='Cache', fn='addAll', demands=['Cache', '*'], returns='None'),
    ],
    "keys": [
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache'], returns='Request'),
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache', '*'], returns='Request'),
        PrototypeCall(constructor='Cache', fn='keys', demands=['Cache', '*', 'dict'], returns='Request'),
        PrototypeCall(constructor='CacheStorage', fn='keys', demands=['CacheStorage'], returns='str'),
        PrototypeCall(constructor='StorageBucketManager', fn='keys', demands=['StorageBucketManager'], returns='str'),
    ],
    "RTCPeerConnection": [
        NewCall(constructor='RTCPeerConnection', demands=[], returns='RTCPeerConnection'),
        NewCall(constructor='RTCPeerConnection', demands=['dict'], returns='RTCPeerConnection'),
    ],
    "createOffer": [
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection'], returns='dict'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'dict'], returns='dict'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createOffer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback', 'dict'], returns='None'),
    ],
    "createAnswer": [
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection'], returns='dict'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection', 'dict'], returns='dict'),
        PrototypeCall(constructor='RTCPeerConnection', fn='createAnswer', demands=['RTCPeerConnection', 'RTCSessionDescriptionCallback', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "setLocalDescription": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection', 'dict'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setLocalDescription', demands=['RTCPeerConnection', 'dict', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "localDescription": [
        FieldCall(field='localDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "currentLocalDescription": [
        FieldCall(field='currentLocalDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "pendingLocalDescription": [
        FieldCall(field='pendingLocalDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "setRemoteDescription": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setRemoteDescription', demands=['RTCPeerConnection', 'dict'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setRemoteDescription', demands=['RTCPeerConnection', 'dict', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "remoteDescription": [
        FieldCall(field='remoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "currentRemoteDescription": [
        FieldCall(field='currentRemoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "pendingRemoteDescription": [
        FieldCall(field='pendingRemoteDescription', demands=['RTCPeerConnection'], returns='RTCSessionDescription'),
    ],
    "addIceCandidate": [
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection', 'dict'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='addIceCandidate', demands=['RTCPeerConnection', 'dict', 'VoidFunction', 'RTCPeerConnectionErrorCallback'], returns='None'),
    ],
    "signalingState": [
        FieldCall(field='signalingState', demands=['RTCPeerConnection'], returns='RTCSignalingState'),
    ],
    "iceGatheringState": [
        FieldCall(field='iceGatheringState', demands=['RTCPeerConnection'], returns='RTCIceGatheringState'),
    ],
    "iceConnectionState": [
        FieldCall(field='iceConnectionState', demands=['RTCPeerConnection'], returns='RTCIceConnectionState'),
    ],
    "connectionState": [
        FieldCall(field='connectionState', demands=['RTCPeerConnection'], returns='RTCPeerConnectionState'),
    ],
    "canTrickleIceCandidates": [
        FieldCall(field='canTrickleIceCandidates', demands=['RTCPeerConnection'], returns='bool'),
    ],
    "restartIce": [
        PrototypeCall(constructor='RTCPeerConnection', fn='restartIce', demands=['RTCPeerConnection'], returns='None'),
    ],
    "setConfiguration": [
        PrototypeCall(constructor='RTCPeerConnection', fn='setConfiguration', demands=['RTCPeerConnection'], returns='None'),
        PrototypeCall(constructor='RTCPeerConnection', fn='setConfiguration', demands=['RTCPeerConnection', 'dict'], returns='None'),
    ],
    "onnegotiationneeded": [
        FieldCall(field='onnegotiationneeded', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onnegotiationneeded', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onicecandidate": [
        FieldCall(field='onicecandidate', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onicecandidate', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onicecandidateerror": [
        FieldCall(field='onicecandidateerror', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onicecandidateerror', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onsignalingstatechange": [
        FieldCall(field='onsignalingstatechange', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onsignalingstatechange', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "oniceconnectionstatechange": [
        FieldCall(field='oniceconnectionstatechange', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='oniceconnectionstatechange', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onicegatheringstatechange": [
        FieldCall(field='onicegatheringstatechange', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onicegatheringstatechange', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "onconnectionstatechange": [
        FieldCall(field='onconnectionstatechange', demands=['RTCPeerConnection'], returns='EventHandler'),
        FieldCall(field='onconnectionstatechange', demands=['RTCPeerConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "RTCSessionDescription": [
        NewCall(constructor='RTCSessionDescription', demands=['dict'], returns='RTCSessionDescription'),
    ],
    "sdp": [
        FieldCall(field='sdp', demands=['RTCSessionDescription'], returns='str'),
    ],
    "RTCIceCandidate": [
        NewCall(constructor='RTCIceCandidate', demands=[], returns='RTCIceCandidate'),
        NewCall(constructor='RTCIceCandidate', demands=['dict'], returns='RTCIceCandidate'),
    ],
    "candidate": [
        FieldCall(field='candidate', demands=['RTCIceCandidate'], returns='str'),
        FieldCall(field='candidate', demands=['RTCPeerConnectionIceEvent'], returns='RTCIceCandidate'),
    ],
    "sdpMid": [
        FieldCall(field='sdpMid', demands=['RTCIceCandidate'], returns='str'),
    ],
    "sdpMLineIndex": [
        FieldCall(field='sdpMLineIndex', demands=['RTCIceCandidate'], returns='unsigned short'),
    ],
    "foundation": [
        FieldCall(field='foundation', demands=['RTCIceCandidate'], returns='str'),
    ],
    "component": [
        FieldCall(field='component', demands=['RTCIceCandidate'], returns='RTCIceComponent'),
        FieldCall(field='component', demands=['RTCIceTransport'], returns='RTCIceComponent'),
    ],
    "priority": [
        FieldCall(field='priority', demands=['RTCIceCandidate'], returns='int'),
        FieldCall(field='priority', demands=['TaskSignal'], returns='TaskPriority'),
        FieldCall(field='priority', demands=['Highlight'], returns='int'),
        FieldCall(field='priority', demands=['Highlight', 'int'], returns='int'),
    ],
    "address": [
        FieldCall(field='address', demands=['RTCIceCandidate'], returns='str'),
        FieldCall(field='address', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
    ],
    "tcpType": [
        FieldCall(field='tcpType', demands=['RTCIceCandidate'], returns='RTCIceTcpCandidateType'),
    ],
    "relatedAddress": [
        FieldCall(field='relatedAddress', demands=['RTCIceCandidate'], returns='str'),
    ],
    "relatedPort": [
        FieldCall(field='relatedPort', demands=['RTCIceCandidate'], returns='unsigned short'),
    ],
    "usernameFragment": [
        FieldCall(field='usernameFragment', demands=['RTCIceCandidate'], returns='str'),
    ],
    "relayProtocol": [
        FieldCall(field='relayProtocol', demands=['RTCIceCandidate'], returns='RTCIceServerTransportProtocol'),
    ],
    "RTCPeerConnectionIceEvent": [
        NewCall(constructor='RTCPeerConnectionIceEvent', demands=['str'], returns='RTCPeerConnectionIceEvent'),
        NewCall(constructor='RTCPeerConnectionIceEvent', demands=['str', 'dict'], returns='RTCPeerConnectionIceEvent'),
    ],
    "RTCPeerConnectionIceErrorEvent": [
        NewCall(constructor='RTCPeerConnectionIceErrorEvent', demands=['str', 'dict'], returns='RTCPeerConnectionIceErrorEvent'),
    ],
    "errorCode": [
        FieldCall(field='errorCode', demands=['RTCPeerConnectionIceErrorEvent'], returns='unsigned short'),
    ],
    "errorText": [
        FieldCall(field='errorText', demands=['RTCPeerConnectionIceErrorEvent'], returns='str'),
    ],
    "expires": [
        FieldCall(field='expires', demands=['RTCCertificate'], returns='EpochTimeStamp'),
        PrototypeCall(constructor='StorageBucket', fn='expires', demands=['StorageBucket'], returns='float'),
    ],
    "getFingerprints": [
        PrototypeCall(constructor='RTCCertificate', fn='getFingerprints', demands=['RTCCertificate'], returns='dict'),
    ],
    "track": [
        FieldCall(field='track', demands=['RTCRtpSender'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCRtpReceiver'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['RTCTrackEvent'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['VideoTrackGenerator'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['HTMLTrackElement'], returns='TextTrack'),
        FieldCall(field='track', demands=['TextTrackCue'], returns='TextTrack'),
        FieldCall(field='track', demands=['TrackEvent'], returns='VideoTrack'),
        FieldCall(field='track', demands=['ImageCapture'], returns='MediaStreamTrack'),
        FieldCall(field='track', demands=['MediaStreamTrackEvent'], returns='MediaStreamTrack'),
    ],
    "transport": [
        FieldCall(field='transport', demands=['RTCRtpSender'], returns='RTCDtlsTransport'),
        FieldCall(field='transport', demands=['RTCRtpReceiver'], returns='RTCDtlsTransport'),
        FieldCall(field='transport', demands=['RTCSctpTransport'], returns='RTCDtlsTransport'),
    ],
    "getCapabilities": [
        DirectCall(fn='getCapabilities', receiver='RTCRtpSender', demands=['str'], returns='dict'),
        DirectCall(fn='getCapabilities', receiver='RTCRtpReceiver', demands=['str'], returns='dict'),
        PrototypeCall(constructor='MediaStreamTrack', fn='getCapabilities', demands=['MediaStreamTrack'], returns='dict'),
        PrototypeCall(constructor='InputDeviceInfo', fn='getCapabilities', demands=['InputDeviceInfo'], returns='dict'),
    ],
    "setParameters": [
        PrototypeCall(constructor='RTCRtpSender', fn='setParameters', demands=['RTCRtpSender', 'dict'], returns='None'),
        PrototypeCall(constructor='RTCRtpSender', fn='setParameters', demands=['RTCRtpSender', 'dict', 'dict'], returns='None'),
    ],
    "replaceTrack": [
        PrototypeCall(constructor='RTCRtpSender', fn='replaceTrack', demands=['RTCRtpSender', 'MediaStreamTrack'], returns='None'),
    ],
    "setStreams": [
        PrototypeCall(constructor='RTCRtpSender', fn='setStreams', demands=['RTCRtpSender', 'MediaStream'], returns='None'),
    ],
    "getStats": [
        PrototypeCall(constructor='RTCRtpSender', fn='getStats', demands=['RTCRtpSender'], returns='RTCStatsReport'),
        PrototypeCall(constructor='RTCRtpReceiver', fn='getStats', demands=['RTCRtpReceiver'], returns='RTCStatsReport'),
        PrototypeCall(constructor='WebTransport', fn='getStats', demands=['WebTransport'], returns='dict'),
        PrototypeCall(constructor='WebTransportSendStream', fn='getStats', demands=['WebTransportSendStream'], returns='dict'),
        PrototypeCall(constructor='WebTransportSendGroup', fn='getStats', demands=['WebTransportSendGroup'], returns='dict'),
        PrototypeCall(constructor='WebTransportReceiveStream', fn='getStats', demands=['WebTransportReceiveStream'], returns='dict'),
    ],
    "getContributingSources": [
        PrototypeCall(constructor='RTCRtpReceiver', fn='getContributingSources', demands=['RTCRtpReceiver'], returns='dict'),
    ],
    "getSynchronizationSources": [
        PrototypeCall(constructor='RTCRtpReceiver', fn='getSynchronizationSources', demands=['RTCRtpReceiver'], returns='dict'),
    ],
    "jitterBufferTarget": [
        FieldCall(field='jitterBufferTarget', demands=['RTCRtpReceiver'], returns='float'),
        FieldCall(field='jitterBufferTarget', demands=['RTCRtpReceiver', 'float'], returns='float'),
    ],
    "mid": [
        FieldCall(field='mid', demands=['RTCRtpTransceiver'], returns='str'),
    ],
    "sender": [
        FieldCall(field='sender', demands=['RTCRtpTransceiver'], returns='RTCRtpSender'),
    ],
    "receiver": [
        FieldCall(field='receiver', demands=['RTCRtpTransceiver'], returns='RTCRtpReceiver'),
        FieldCall(field='receiver', demands=['RTCTrackEvent'], returns='RTCRtpReceiver'),
    ],
    "currentDirection": [
        FieldCall(field='currentDirection', demands=['RTCRtpTransceiver'], returns='RTCRtpTransceiverDirection'),
    ],
    "setCodecPreferences": [
        PrototypeCall(constructor='RTCRtpTransceiver', fn='setCodecPreferences', demands=['RTCRtpTransceiver', 'dict'], returns='None'),
    ],
    "iceTransport": [
        FieldCall(field='iceTransport', demands=['RTCDtlsTransport'], returns='RTCIceTransport'),
    ],
    "getRemoteCertificates": [
        PrototypeCall(constructor='RTCDtlsTransport', fn='getRemoteCertificates', demands=['RTCDtlsTransport'], returns='ArrayBuffer'),
    ],
    "role": [
        FieldCall(field='role', demands=['RTCIceTransport'], returns='RTCIceRole'),
    ],
    "gatheringState": [
        FieldCall(field='gatheringState', demands=['RTCIceTransport'], returns='RTCIceGathererState'),
    ],
    "getLocalCandidates": [
        PrototypeCall(constructor='RTCIceTransport', fn='getLocalCandidates', demands=['RTCIceTransport'], returns='RTCIceCandidate'),
    ],
    "getRemoteCandidates": [
        PrototypeCall(constructor='RTCIceTransport', fn='getRemoteCandidates', demands=['RTCIceTransport'], returns='RTCIceCandidate'),
    ],
    "getSelectedCandidatePair": [
        PrototypeCall(constructor='RTCIceTransport', fn='getSelectedCandidatePair', demands=['RTCIceTransport'], returns='RTCIceCandidatePair'),
    ],
    "getLocalParameters": [
        PrototypeCall(constructor='RTCIceTransport', fn='getLocalParameters', demands=['RTCIceTransport'], returns='dict'),
    ],
    "getRemoteParameters": [
        PrototypeCall(constructor='RTCIceTransport', fn='getRemoteParameters', demands=['RTCIceTransport'], returns='dict'),
    ],
    "ongatheringstatechange": [
        FieldCall(field='ongatheringstatechange', demands=['RTCIceTransport'], returns='EventHandler'),
        FieldCall(field='ongatheringstatechange', demands=['RTCIceTransport', 'EventHandler'], returns='EventHandler'),
    ],
    "onselectedcandidatepairchange": [
        FieldCall(field='onselectedcandidatepairchange', demands=['RTCIceTransport'], returns='EventHandler'),
        FieldCall(field='onselectedcandidatepairchange', demands=['RTCIceTransport', 'EventHandler'], returns='EventHandler'),
    ],
    "local": [
        FieldCall(field='local', demands=['RTCIceCandidatePair'], returns='RTCIceCandidate'),
    ],
    "remote": [
        FieldCall(field='remote', demands=['RTCIceCandidatePair'], returns='RTCIceCandidate'),
    ],
    "RTCTrackEvent": [
        NewCall(constructor='RTCTrackEvent', demands=['str', 'dict'], returns='RTCTrackEvent'),
    ],
    "streams": [
        FieldCall(field='streams', demands=['RTCTrackEvent'], returns='MediaStream'),
    ],
    "transceiver": [
        FieldCall(field='transceiver', demands=['RTCTrackEvent'], returns='RTCRtpTransceiver'),
    ],
    "maxMessageSize": [
        FieldCall(field='maxMessageSize', demands=['RTCSctpTransport'], returns='float'),
    ],
    "maxChannels": [
        FieldCall(field='maxChannels', demands=['RTCSctpTransport'], returns='unsigned short'),
    ],
    "label": [
        FieldCall(field='label', demands=['RTCDataChannel'], returns='str'),
        FieldCall(field='label', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLTrackElement', 'str'], returns='str'),
        FieldCall(field='label', demands=['AudioTrack'], returns='str'),
        FieldCall(field='label', demands=['VideoTrack'], returns='str'),
        FieldCall(field='label', demands=['TextTrack'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptGroupElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptGroupElement', 'str'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptionElement'], returns='str'),
        FieldCall(field='label', demands=['HTMLOptionElement', 'str'], returns='str'),
        FieldCall(field='label', demands=['WebGLObject'], returns='str'),
        FieldCall(field='label', demands=['WebGLObject', 'str'], returns='str'),
        FieldCall(field='label', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='label', demands=['MediaDeviceInfo'], returns='str'),
        FieldCall(field='label', demands=['ScreenDetailed'], returns='str'),
    ],
    "ordered": [
        FieldCall(field='ordered', demands=['RTCDataChannel'], returns='bool'),
    ],
    "maxPacketLifeTime": [
        FieldCall(field='maxPacketLifeTime', demands=['RTCDataChannel'], returns='unsigned short'),
    ],
    "maxRetransmits": [
        FieldCall(field='maxRetransmits', demands=['RTCDataChannel'], returns='unsigned short'),
    ],
    "negotiated": [
        FieldCall(field='negotiated', demands=['RTCDataChannel'], returns='bool'),
    ],
    "bufferedAmount": [
        FieldCall(field='bufferedAmount', demands=['RTCDataChannel'], returns='int'),
        FieldCall(field='bufferedAmount', demands=['WebSocket'], returns='int'),
    ],
    "bufferedAmountLowThreshold": [
        FieldCall(field='bufferedAmountLowThreshold', demands=['RTCDataChannel'], returns='int'),
        FieldCall(field='bufferedAmountLowThreshold', demands=['RTCDataChannel', 'int'], returns='int'),
    ],
    "onopen": [
        FieldCall(field='onopen', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onopen', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onopen', demands=['EventSource'], returns='EventHandler'),
        FieldCall(field='onopen', demands=['EventSource', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onopen', demands=['WebSocket'], returns='EventHandler'),
        FieldCall(field='onopen', demands=['WebSocket', 'EventHandler'], returns='EventHandler'),
    ],
    "onbufferedamountlow": [
        FieldCall(field='onbufferedamountlow', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onbufferedamountlow', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
    ],
    "onclosing": [
        FieldCall(field='onclosing', demands=['RTCDataChannel'], returns='EventHandler'),
        FieldCall(field='onclosing', demands=['RTCDataChannel', 'EventHandler'], returns='EventHandler'),
    ],
    "binaryType": [
        FieldCall(field='binaryType', demands=['RTCDataChannel'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['RTCDataChannel', 'BinaryType'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['WebSocket'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['WebSocket', 'BinaryType'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['PresentationConnection'], returns='BinaryType'),
        FieldCall(field='binaryType', demands=['PresentationConnection', 'BinaryType'], returns='BinaryType'),
    ],
    "send": [
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'Blob'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'ArrayBuffer'], returns='None'),
        PrototypeCall(constructor='RTCDataChannel', fn='send', demands=['RTCDataChannel', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='send', demands=['XMLHttpRequest'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='send', demands=['XMLHttpRequest', 'Document'], returns='None'),
        PrototypeCall(constructor='XMLHttpRequest', fn='send', demands=['XMLHttpRequest', 'XMLHttpRequestBodyInit'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'int'], returns='None'),
        PrototypeCall(constructor='MIDIOutput', fn='send', demands=['MIDIOutput', 'int', 'float'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='send', demands=['WebSocket', 'BufferSource'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='send', demands=['WebSocket', 'Blob'], returns='None'),
        PrototypeCall(constructor='WebSocket', fn='send', demands=['WebSocket', 'str'], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='send', demands=['PresentationConnection', 'str'], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='send', demands=['PresentationConnection', 'Blob'], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='send', demands=['PresentationConnection', 'ArrayBuffer'], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='send', demands=['PresentationConnection', 'ArrayBufferView'], returns='None'),
    ],
    "RTCDataChannelEvent": [
        NewCall(constructor='RTCDataChannelEvent', demands=['str', 'dict'], returns='RTCDataChannelEvent'),
    ],
    "channel": [
        FieldCall(field='channel', demands=['RTCDataChannelEvent'], returns='RTCDataChannel'),
    ],
    "insertDTMF": [
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str', 'int'], returns='None'),
        PrototypeCall(constructor='RTCDTMFSender', fn='insertDTMF', demands=['RTCDTMFSender', 'str', 'int', 'int'], returns='None'),
    ],
    "ontonechange": [
        FieldCall(field='ontonechange', demands=['RTCDTMFSender'], returns='EventHandler'),
        FieldCall(field='ontonechange', demands=['RTCDTMFSender', 'EventHandler'], returns='EventHandler'),
    ],
    "canInsertDTMF": [
        FieldCall(field='canInsertDTMF', demands=['RTCDTMFSender'], returns='bool'),
    ],
    "toneBuffer": [
        FieldCall(field='toneBuffer', demands=['RTCDTMFSender'], returns='str'),
    ],
    "RTCDTMFToneChangeEvent": [
        NewCall(constructor='RTCDTMFToneChangeEvent', demands=['str'], returns='RTCDTMFToneChangeEvent'),
        NewCall(constructor='RTCDTMFToneChangeEvent', demands=['str', 'dict'], returns='RTCDTMFToneChangeEvent'),
    ],
    "RTCError": [
        NewCall(constructor='RTCError', demands=['dict'], returns='RTCError'),
        NewCall(constructor='RTCError', demands=['dict', 'str'], returns='RTCError'),
    ],
    "errorDetail": [
        FieldCall(field='errorDetail', demands=['RTCError'], returns='RTCErrorDetailType'),
    ],
    "sdpLineNumber": [
        FieldCall(field='sdpLineNumber', demands=['RTCError'], returns='int'),
    ],
    "sctpCauseCode": [
        FieldCall(field='sctpCauseCode', demands=['RTCError'], returns='int'),
    ],
    "receivedAlert": [
        FieldCall(field='receivedAlert', demands=['RTCError'], returns='int'),
    ],
    "sentAlert": [
        FieldCall(field='sentAlert', demands=['RTCError'], returns='int'),
    ],
    "RTCErrorEvent": [
        NewCall(constructor='RTCErrorEvent', demands=['str', 'dict'], returns='RTCErrorEvent'),
    ],
    "advances": [
        FieldCall(field='advances', demands=['FontMetrics'], returns='float'),
    ],
    "boundingBoxLeft": [
        FieldCall(field='boundingBoxLeft', demands=['FontMetrics'], returns='float'),
    ],
    "boundingBoxRight": [
        FieldCall(field='boundingBoxRight', demands=['FontMetrics'], returns='float'),
    ],
    "emHeightAscent": [
        FieldCall(field='emHeightAscent', demands=['FontMetrics'], returns='float'),
        FieldCall(field='emHeightAscent', demands=['TextMetrics'], returns='float'),
    ],
    "emHeightDescent": [
        FieldCall(field='emHeightDescent', demands=['FontMetrics'], returns='float'),
        FieldCall(field='emHeightDescent', demands=['TextMetrics'], returns='float'),
    ],
    "boundingBoxAscent": [
        FieldCall(field='boundingBoxAscent', demands=['FontMetrics'], returns='float'),
    ],
    "boundingBoxDescent": [
        FieldCall(field='boundingBoxDescent', demands=['FontMetrics'], returns='float'),
    ],
    "fontBoundingBoxAscent": [
        FieldCall(field='fontBoundingBoxAscent', demands=['FontMetrics'], returns='float'),
        FieldCall(field='fontBoundingBoxAscent', demands=['TextMetrics'], returns='float'),
    ],
    "fontBoundingBoxDescent": [
        FieldCall(field='fontBoundingBoxDescent', demands=['FontMetrics'], returns='float'),
        FieldCall(field='fontBoundingBoxDescent', demands=['TextMetrics'], returns='float'),
    ],
    "dominantBaseline": [
        FieldCall(field='dominantBaseline', demands=['FontMetrics'], returns='Baseline'),
    ],
    "baselines": [
        FieldCall(field='baselines', demands=['FontMetrics'], returns='Baseline'),
    ],
    "fonts": [
        FieldCall(field='fonts', demands=['FontMetrics'], returns='Font'),
    ],
    "glyphsRendered": [
        FieldCall(field='glyphsRendered', demands=['Font'], returns='int'),
    ],
    "MediaStreamTrackProcessor": [
        NewCall(constructor='MediaStreamTrackProcessor', demands=['dict'], returns='MediaStreamTrackProcessor'),
    ],
    "VideoTrackGenerator": [
        NewCall(constructor='VideoTrackGenerator', demands=[], returns='VideoTrackGenerator'),
    ],
    "muted": [
        FieldCall(field='muted', demands=['VideoTrackGenerator'], returns='bool'),
        FieldCall(field='muted', demands=['VideoTrackGenerator', 'bool'], returns='bool'),
        FieldCall(field='muted', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='muted', demands=['HTMLMediaElement', 'bool'], returns='bool'),
        FieldCall(field='muted', demands=['MediaStreamTrack'], returns='bool'),
    ],
    "JsonLdProcessor": [
        NewCall(constructor='JsonLdProcessor', demands=[], returns='JsonLdProcessor'),
    ],
    "compact": [
        DirectCall(fn='compact', receiver='JsonLdProcessor', demands=['JsonLdInput'], returns='JsonLdRecord'),
        DirectCall(fn='compact', receiver='JsonLdProcessor', demands=['JsonLdInput', 'JsonLdContext'], returns='JsonLdRecord'),
        DirectCall(fn='compact', receiver='JsonLdProcessor', demands=['JsonLdInput', 'JsonLdContext', 'dict'], returns='JsonLdRecord'),
        FieldCall(field='compact', demands=['HTMLDirectoryElement'], returns='bool'),
        FieldCall(field='compact', demands=['HTMLDirectoryElement', 'bool'], returns='bool'),
    ],
    "expand": [
        DirectCall(fn='expand', receiver='JsonLdProcessor', demands=['JsonLdInput'], returns='JsonLdRecord'),
        DirectCall(fn='expand', receiver='JsonLdProcessor', demands=['JsonLdInput', 'dict'], returns='JsonLdRecord'),
    ],
    "flatten": [
        DirectCall(fn='flatten', receiver='JsonLdProcessor', demands=['JsonLdInput'], returns='JsonLdRecord'),
        DirectCall(fn='flatten', receiver='JsonLdProcessor', demands=['JsonLdInput', 'JsonLdContext'], returns='JsonLdRecord'),
        DirectCall(fn='flatten', receiver='JsonLdProcessor', demands=['JsonLdInput', 'JsonLdContext', 'dict'], returns='JsonLdRecord'),
    ],
    "fromRdf": [
        DirectCall(fn='fromRdf', receiver='JsonLdProcessor', demands=['RdfDataset'], returns='JsonLdRecord'),
        DirectCall(fn='fromRdf', receiver='JsonLdProcessor', demands=['RdfDataset', 'dict'], returns='JsonLdRecord'),
    ],
    "toRdf": [
        DirectCall(fn='toRdf', receiver='JsonLdProcessor', demands=['JsonLdInput'], returns='RdfDataset'),
        DirectCall(fn='toRdf', receiver='JsonLdProcessor', demands=['JsonLdInput', 'dict'], returns='RdfDataset'),
    ],
    "RdfDataset": [
        NewCall(constructor='RdfDataset', demands=[], returns='RdfDataset'),
    ],
    "defaultGraph": [
        FieldCall(field='defaultGraph', demands=['RdfDataset'], returns='RdfGraph'),
    ],
    "RdfGraph": [
        NewCall(constructor='RdfGraph', demands=[], returns='RdfGraph'),
    ],
    "RdfTriple": [
        NewCall(constructor='RdfTriple', demands=[], returns='RdfTriple'),
    ],
    "subject": [
        FieldCall(field='subject', demands=['RdfTriple'], returns='str'),
        FieldCall(field='subject', demands=['ViewTimeline'], returns='Element'),
    ],
    "predicate": [
        FieldCall(field='predicate', demands=['RdfTriple'], returns='str'),
    ],
    "object": [
        FieldCall(field='object', demands=['RdfTriple'], returns='str'),
    ],
    "RdfLiteral": [
        NewCall(constructor='RdfLiteral', demands=[], returns='RdfLiteral'),
    ],
    "datatype": [
        FieldCall(field='datatype', demands=['RdfLiteral'], returns='str'),
    ],
    "language": [
        FieldCall(field='language', demands=['RdfLiteral'], returns='str'),
        FieldCall(field='language', demands=['AudioTrack'], returns='str'),
        FieldCall(field='language', demands=['VideoTrack'], returns='str'),
        FieldCall(field='language', demands=['TextTrack'], returns='str'),
    ],
    "RemoteDocument": [
        NewCall(constructor='RemoteDocument', demands=[], returns='RemoteDocument'),
    ],
    "contextUrl": [
        FieldCall(field='contextUrl', demands=['RemoteDocument'], returns='str'),
    ],
    "document": [
        FieldCall(field='document', demands=['RemoteDocument'], returns='*'),
        FieldCall(field='document', demands=['RemoteDocument', '*'], returns='*'),
        FieldCall(field='document', demands=['Window'], returns='Document'),
    ],
    "documentUrl": [
        FieldCall(field='documentUrl', demands=['RemoteDocument'], returns='str'),
    ],
    "profile": [
        FieldCall(field='profile', demands=['RemoteDocument'], returns='str'),
    ],
    "namedItem": [
        PrototypeCall(constructor='HTMLAllCollection', fn='namedItem', demands=['HTMLAllCollection', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='HTMLFormControlsCollection', fn='namedItem', demands=['HTMLFormControlsCollection', 'str'], returns='RadioNodeList'),
        PrototypeCall(constructor='HTMLSelectElement', fn='namedItem', demands=['HTMLSelectElement', 'str'], returns='HTMLOptionElement'),
        PrototypeCall(constructor='PluginArray', fn='namedItem', demands=['PluginArray', 'str'], returns='Plugin'),
        PrototypeCall(constructor='MimeTypeArray', fn='namedItem', demands=['MimeTypeArray', 'str'], returns='MimeType'),
        PrototypeCall(constructor='Plugin', fn='namedItem', demands=['Plugin', 'str'], returns='MimeType'),
        PrototypeCall(constructor='HTMLCollection', fn='namedItem', demands=['HTMLCollection', 'str'], returns='Element'),
    ],
    "remove": [
        PrototypeCall(constructor='HTMLOptionsCollection', fn='remove', demands=['HTMLOptionsCollection', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='remove', demands=['HTMLSelectElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='remove', demands=['HTMLSelectElement', 'int'], returns='None'),
        PrototypeCall(constructor='DataTransferItemList', fn='remove', demands=['DataTransferItemList', 'int'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='remove', demands=['MediaKeySession'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='remove', demands=['DocumentType'], returns='None'),
        PrototypeCall(constructor='Element', fn='remove', demands=['Element'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='remove', demands=['CharacterData'], returns='None'),
        PrototypeCall(constructor='DOMTokenList', fn='remove', demands=['DOMTokenList', 'str'], returns='None'),
        PrototypeCall(constructor='SourceBuffer', fn='remove', demands=['SourceBuffer', 'float', 'float'], returns='None'),
    ],
    "contains": [
        PrototypeCall(constructor='DOMStringList', fn='contains', demands=['DOMStringList', 'str'], returns='bool'),
        PrototypeCall(constructor='Node', fn='contains', demands=['Node', 'Node'], returns='bool'),
        PrototypeCall(constructor='DOMTokenList', fn='contains', demands=['DOMTokenList', 'str'], returns='bool'),
    ],
    "HTMLElement": [
        NewCall(constructor='HTMLElement', demands=[], returns='HTMLElement'),
    ],
    "title": [
        FieldCall(field='title', demands=['HTMLElement'], returns='str'),
        FieldCall(field='title', demands=['HTMLElement', 'str'], returns='str'),
        FieldCall(field='title', demands=['Notification'], returns='str'),
        FieldCall(field='title', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='title', demands=['SVGStyleElement', 'str'], returns='str'),
        FieldCall(field='title', demands=['StyleSheet'], returns='str'),
        FieldCall(field='title', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='title', demands=['MediaMetadata', 'str'], returns='str'),
        FieldCall(field='title', demands=['ChapterInformation'], returns='str'),
    ],
    "lang": [
        FieldCall(field='lang', demands=['HTMLElement'], returns='str'),
        FieldCall(field='lang', demands=['HTMLElement', 'str'], returns='str'),
        FieldCall(field='lang', demands=['Notification'], returns='str'),
        FieldCall(field='lang', demands=['SpeechRecognition'], returns='str'),
        FieldCall(field='lang', demands=['SpeechRecognition', 'str'], returns='str'),
        FieldCall(field='lang', demands=['SpeechSynthesisUtterance'], returns='str'),
        FieldCall(field='lang', demands=['SpeechSynthesisUtterance', 'str'], returns='str'),
        FieldCall(field='lang', demands=['SpeechSynthesisVoice'], returns='str'),
        FieldCall(field='lang', demands=['NDEFRecord'], returns='str'),
    ],
    "dir": [
        FieldCall(field='dir', demands=['HTMLElement'], returns='str'),
        FieldCall(field='dir', demands=['HTMLElement', 'str'], returns='str'),
        FieldCall(field='dir', demands=['Notification'], returns='NotificationDirection'),
        FieldCall(field='dir', demands=['NavigationEvent'], returns='SpatialNavigationDirection'),
    ],
    "hidden": [
        FieldCall(field='hidden', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='hidden', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "inert": [
        FieldCall(field='inert', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='inert', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "click": [
        PrototypeCall(constructor='HTMLElement', fn='click', demands=['HTMLElement'], returns='None'),
    ],
    "accessKey": [
        FieldCall(field='accessKey', demands=['HTMLElement'], returns='str'),
        FieldCall(field='accessKey', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "accessKeyLabel": [
        FieldCall(field='accessKeyLabel', demands=['HTMLElement'], returns='str'),
    ],
    "draggable": [
        FieldCall(field='draggable', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='draggable', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "spellcheck": [
        FieldCall(field='spellcheck', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='spellcheck', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "writingSuggestions": [
        FieldCall(field='writingSuggestions', demands=['HTMLElement'], returns='str'),
        FieldCall(field='writingSuggestions', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "autocapitalize": [
        FieldCall(field='autocapitalize', demands=['HTMLElement'], returns='str'),
        FieldCall(field='autocapitalize', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "autocorrect": [
        FieldCall(field='autocorrect', demands=['HTMLElement'], returns='bool'),
        FieldCall(field='autocorrect', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "innerText": [
        FieldCall(field='innerText', demands=['HTMLElement'], returns='str'),
        FieldCall(field='innerText', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "outerText": [
        FieldCall(field='outerText', demands=['HTMLElement'], returns='str'),
        FieldCall(field='outerText', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "attachInternals": [
        PrototypeCall(constructor='HTMLElement', fn='attachInternals', demands=['HTMLElement'], returns='ElementInternals'),
    ],
    "showPopover": [
        PrototypeCall(constructor='HTMLElement', fn='showPopover', demands=['HTMLElement'], returns='None'),
        PrototypeCall(constructor='HTMLElement', fn='showPopover', demands=['HTMLElement', 'dict'], returns='None'),
    ],
    "hidePopover": [
        PrototypeCall(constructor='HTMLElement', fn='hidePopover', demands=['HTMLElement'], returns='None'),
    ],
    "togglePopover": [
        PrototypeCall(constructor='HTMLElement', fn='togglePopover', demands=['HTMLElement'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='togglePopover', demands=['HTMLElement', 'dict'], returns='bool'),
        PrototypeCall(constructor='HTMLElement', fn='togglePopover', demands=['HTMLElement', 'bool'], returns='bool'),
    ],
    "popover": [
        FieldCall(field='popover', demands=['HTMLElement'], returns='str'),
        FieldCall(field='popover', demands=['HTMLElement', 'str'], returns='str'),
    ],
    "HTMLHtmlElement": [
        NewCall(constructor='HTMLHtmlElement', demands=[], returns='HTMLHtmlElement'),
    ],
    "HTMLHeadElement": [
        NewCall(constructor='HTMLHeadElement', demands=[], returns='HTMLHeadElement'),
    ],
    "HTMLTitleElement": [
        NewCall(constructor='HTMLTitleElement', demands=[], returns='HTMLTitleElement'),
    ],
    "HTMLBaseElement": [
        NewCall(constructor='HTMLBaseElement', demands=[], returns='HTMLBaseElement'),
    ],
    "HTMLLinkElement": [
        NewCall(constructor='HTMLLinkElement', demands=[], returns='HTMLLinkElement'),
    ],
    "crossOrigin": [
        FieldCall(field='crossOrigin', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLMediaElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLMediaElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['HTMLScriptElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGImageElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGImageElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGScriptElement'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGScriptElement', 'str'], returns='str'),
        FieldCall(field='crossOrigin', demands=['SVGFEImageElement'], returns='SVGAnimatedString'),
    ],
    "rel": [
        FieldCall(field='rel', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='rel', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='rel', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='rel', demands=['SVGAElement'], returns='str'),
        FieldCall(field='rel', demands=['SVGAElement', 'str'], returns='str'),
    ],
    "as": [
        FieldCall(field='as', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='as', demands=['HTMLLinkElement', 'str'], returns='str'),
    ],
    "relList": [
        FieldCall(field='relList', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        FieldCall(field='relList', demands=['HTMLAnchorElement'], returns='DOMTokenList'),
        FieldCall(field='relList', demands=['HTMLAreaElement'], returns='DOMTokenList'),
        FieldCall(field='relList', demands=['HTMLFormElement'], returns='DOMTokenList'),
        FieldCall(field='relList', demands=['SVGAElement'], returns='DOMTokenList'),
    ],
    "media": [
        FieldCall(field='media', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='media', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLMetaElement', 'str'], returns='str'),
        FieldCall(field='media', demands=['HTMLStyleElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLStyleElement', 'str'], returns='str'),
        FieldCall(field='media', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='media', demands=['HTMLSourceElement', 'str'], returns='str'),
        FieldCall(field='media', demands=['CSSMediaRule'], returns='MediaList'),
        FieldCall(field='media', demands=['MediaQueryList'], returns='CSSOMString'),
        FieldCall(field='media', demands=['MediaQueryListEvent'], returns='CSSOMString'),
        FieldCall(field='media', demands=['SVGStyleElement'], returns='str'),
        FieldCall(field='media', demands=['SVGStyleElement', 'str'], returns='str'),
        FieldCall(field='media', demands=['StyleSheet'], returns='MediaList'),
        FieldCall(field='media', demands=['CSSImportRule'], returns='MediaList'),
    ],
    "hreflang": [
        FieldCall(field='hreflang', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='hreflang', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='hreflang', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='hreflang', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='hreflang', demands=['SVGAElement'], returns='str'),
        FieldCall(field='hreflang', demands=['SVGAElement', 'str'], returns='str'),
    ],
    "sizes": [
        FieldCall(field='sizes', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        FieldCall(field='sizes', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='sizes', demands=['HTMLSourceElement', 'str'], returns='str'),
        FieldCall(field='sizes', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='sizes', demands=['HTMLImageElement', 'str'], returns='str'),
    ],
    "imageSrcset": [
        FieldCall(field='imageSrcset', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='imageSrcset', demands=['HTMLLinkElement', 'str'], returns='str'),
    ],
    "imageSizes": [
        FieldCall(field='imageSizes', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='imageSizes', demands=['HTMLLinkElement', 'str'], returns='str'),
    ],
    "blocking": [
        FieldCall(field='blocking', demands=['HTMLLinkElement'], returns='DOMTokenList'),
        FieldCall(field='blocking', demands=['HTMLStyleElement'], returns='DOMTokenList'),
        FieldCall(field='blocking', demands=['HTMLScriptElement'], returns='DOMTokenList'),
    ],
    "disabled": [
        FieldCall(field='disabled', demands=['HTMLLinkElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLLinkElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLStyleElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLStyleElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLButtonElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLSelectElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptGroupElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptGroupElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLOptionElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLTextAreaElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLFieldSetElement'], returns='bool'),
        FieldCall(field='disabled', demands=['HTMLFieldSetElement', 'bool'], returns='bool'),
        FieldCall(field='disabled', demands=['StyleSheet'], returns='bool'),
        FieldCall(field='disabled', demands=['StyleSheet', 'bool'], returns='bool'),
    ],
    "fetchPriority": [
        FieldCall(field='fetchPriority', demands=['HTMLLinkElement'], returns='str'),
        FieldCall(field='fetchPriority', demands=['HTMLLinkElement', 'str'], returns='str'),
        FieldCall(field='fetchPriority', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='fetchPriority', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='fetchPriority', demands=['HTMLScriptElement'], returns='str'),
        FieldCall(field='fetchPriority', demands=['HTMLScriptElement', 'str'], returns='str'),
    ],
    "HTMLMetaElement": [
        NewCall(constructor='HTMLMetaElement', demands=[], returns='HTMLMetaElement'),
    ],
    "httpEquiv": [
        FieldCall(field='httpEquiv', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='httpEquiv', demands=['HTMLMetaElement', 'str'], returns='str'),
    ],
    "content": [
        FieldCall(field='content', demands=['HTMLMetaElement'], returns='str'),
        FieldCall(field='content', demands=['HTMLMetaElement', 'str'], returns='str'),
        FieldCall(field='content', demands=['HTMLTemplateElement'], returns='DocumentFragment'),
    ],
    "HTMLStyleElement": [
        NewCall(constructor='HTMLStyleElement', demands=[], returns='HTMLStyleElement'),
    ],
    "HTMLBodyElement": [
        NewCall(constructor='HTMLBodyElement', demands=[], returns='HTMLBodyElement'),
    ],
    "HTMLHeadingElement": [
        NewCall(constructor='HTMLHeadingElement', demands=[], returns='HTMLHeadingElement'),
    ],
    "HTMLParagraphElement": [
        NewCall(constructor='HTMLParagraphElement', demands=[], returns='HTMLParagraphElement'),
    ],
    "HTMLHRElement": [
        NewCall(constructor='HTMLHRElement', demands=[], returns='HTMLHRElement'),
    ],
    "HTMLPreElement": [
        NewCall(constructor='HTMLPreElement', demands=[], returns='HTMLPreElement'),
    ],
    "HTMLQuoteElement": [
        NewCall(constructor='HTMLQuoteElement', demands=[], returns='HTMLQuoteElement'),
    ],
    "cite": [
        FieldCall(field='cite', demands=['HTMLQuoteElement'], returns='str'),
        FieldCall(field='cite', demands=['HTMLQuoteElement', 'str'], returns='str'),
        FieldCall(field='cite', demands=['HTMLModElement'], returns='str'),
        FieldCall(field='cite', demands=['HTMLModElement', 'str'], returns='str'),
    ],
    "HTMLOListElement": [
        NewCall(constructor='HTMLOListElement', demands=[], returns='HTMLOListElement'),
    ],
    "reversed": [
        FieldCall(field='reversed', demands=['HTMLOListElement'], returns='bool'),
        FieldCall(field='reversed', demands=['HTMLOListElement', 'bool'], returns='bool'),
    ],
    "HTMLUListElement": [
        NewCall(constructor='HTMLUListElement', demands=[], returns='HTMLUListElement'),
    ],
    "HTMLMenuElement": [
        NewCall(constructor='HTMLMenuElement', demands=[], returns='HTMLMenuElement'),
    ],
    "HTMLLIElement": [
        NewCall(constructor='HTMLLIElement', demands=[], returns='HTMLLIElement'),
    ],
    "HTMLDListElement": [
        NewCall(constructor='HTMLDListElement', demands=[], returns='HTMLDListElement'),
    ],
    "HTMLDivElement": [
        NewCall(constructor='HTMLDivElement', demands=[], returns='HTMLDivElement'),
    ],
    "HTMLAnchorElement": [
        NewCall(constructor='HTMLAnchorElement', demands=[], returns='HTMLAnchorElement'),
    ],
    "download": [
        FieldCall(field='download', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='download', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='download', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='download', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='download', demands=['SVGAElement'], returns='str'),
        FieldCall(field='download', demands=['SVGAElement', 'str'], returns='str'),
    ],
    "ping": [
        FieldCall(field='ping', demands=['HTMLAnchorElement'], returns='str'),
        FieldCall(field='ping', demands=['HTMLAnchorElement', 'str'], returns='str'),
        FieldCall(field='ping', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='ping', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='ping', demands=['SVGAElement'], returns='str'),
        FieldCall(field='ping', demands=['SVGAElement', 'str'], returns='str'),
    ],
    "HTMLDataElement": [
        NewCall(constructor='HTMLDataElement', demands=[], returns='HTMLDataElement'),
    ],
    "HTMLTimeElement": [
        NewCall(constructor='HTMLTimeElement', demands=[], returns='HTMLTimeElement'),
    ],
    "dateTime": [
        FieldCall(field='dateTime', demands=['HTMLTimeElement'], returns='str'),
        FieldCall(field='dateTime', demands=['HTMLTimeElement', 'str'], returns='str'),
        FieldCall(field='dateTime', demands=['HTMLModElement'], returns='str'),
        FieldCall(field='dateTime', demands=['HTMLModElement', 'str'], returns='str'),
    ],
    "HTMLSpanElement": [
        NewCall(constructor='HTMLSpanElement', demands=[], returns='HTMLSpanElement'),
    ],
    "HTMLBRElement": [
        NewCall(constructor='HTMLBRElement', demands=[], returns='HTMLBRElement'),
    ],
    "HTMLModElement": [
        NewCall(constructor='HTMLModElement', demands=[], returns='HTMLModElement'),
    ],
    "HTMLPictureElement": [
        NewCall(constructor='HTMLPictureElement', demands=[], returns='HTMLPictureElement'),
    ],
    "HTMLSourceElement": [
        NewCall(constructor='HTMLSourceElement', demands=[], returns='HTMLSourceElement'),
    ],
    "srcset": [
        FieldCall(field='srcset', demands=['HTMLSourceElement'], returns='str'),
        FieldCall(field='srcset', demands=['HTMLSourceElement', 'str'], returns='str'),
        FieldCall(field='srcset', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='srcset', demands=['HTMLImageElement', 'str'], returns='str'),
    ],
    "HTMLImageElement": [
        NewCall(constructor='HTMLImageElement', demands=[], returns='HTMLImageElement'),
    ],
    "alt": [
        FieldCall(field='alt', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='alt', demands=['HTMLAreaElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLAreaElement', 'str'], returns='str'),
        FieldCall(field='alt', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='alt', demands=['HTMLInputElement', 'str'], returns='str'),
    ],
    "useMap": [
        FieldCall(field='useMap', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='useMap', demands=['HTMLImageElement', 'str'], returns='str'),
    ],
    "isMap": [
        FieldCall(field='isMap', demands=['HTMLImageElement'], returns='bool'),
        FieldCall(field='isMap', demands=['HTMLImageElement', 'bool'], returns='bool'),
    ],
    "naturalWidth": [
        FieldCall(field='naturalWidth', demands=['HTMLImageElement'], returns='int'),
        FieldCall(field='naturalWidth', demands=['PerformanceElementTiming'], returns='int'),
    ],
    "naturalHeight": [
        FieldCall(field='naturalHeight', demands=['HTMLImageElement'], returns='int'),
        FieldCall(field='naturalHeight', demands=['PerformanceElementTiming'], returns='int'),
    ],
    "currentSrc": [
        FieldCall(field='currentSrc', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='currentSrc', demands=['HTMLMediaElement'], returns='str'),
    ],
    "decoding": [
        FieldCall(field='decoding', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='decoding', demands=['HTMLImageElement', 'str'], returns='str'),
    ],
    "loading": [
        FieldCall(field='loading', demands=['HTMLImageElement'], returns='str'),
        FieldCall(field='loading', demands=['HTMLImageElement', 'str'], returns='str'),
        FieldCall(field='loading', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='loading', demands=['HTMLIFrameElement', 'str'], returns='str'),
    ],
    "HTMLIFrameElement": [
        NewCall(constructor='HTMLIFrameElement', demands=[], returns='HTMLIFrameElement'),
    ],
    "srcdoc": [
        FieldCall(field='srcdoc', demands=['HTMLIFrameElement'], returns='TrustedHTML'),
        FieldCall(field='srcdoc', demands=['HTMLIFrameElement', 'TrustedHTML'], returns='TrustedHTML'),
    ],
    "sandbox": [
        FieldCall(field='sandbox', demands=['HTMLIFrameElement'], returns='DOMTokenList'),
        FieldCall(field='sandbox', demands=['HTMLFencedFrameElement'], returns='DOMTokenList'),
    ],
    "allow": [
        FieldCall(field='allow', demands=['HTMLIFrameElement'], returns='str'),
        FieldCall(field='allow', demands=['HTMLIFrameElement', 'str'], returns='str'),
        FieldCall(field='allow', demands=['HTMLFencedFrameElement'], returns='str'),
        FieldCall(field='allow', demands=['HTMLFencedFrameElement', 'str'], returns='str'),
    ],
    "allowFullscreen": [
        FieldCall(field='allowFullscreen', demands=['HTMLIFrameElement'], returns='bool'),
        FieldCall(field='allowFullscreen', demands=['HTMLIFrameElement', 'bool'], returns='bool'),
    ],
    "contentDocument": [
        FieldCall(field='contentDocument', demands=['HTMLIFrameElement'], returns='Document'),
        FieldCall(field='contentDocument', demands=['HTMLObjectElement'], returns='Document'),
        FieldCall(field='contentDocument', demands=['HTMLFrameElement'], returns='Document'),
    ],
    "contentWindow": [
        FieldCall(field='contentWindow', demands=['HTMLIFrameElement'], returns='WindowProxy'),
        FieldCall(field='contentWindow', demands=['HTMLObjectElement'], returns='WindowProxy'),
        FieldCall(field='contentWindow', demands=['HTMLFrameElement'], returns='WindowProxy'),
    ],
    "getSVGDocument": [
        PrototypeCall(constructor='HTMLIFrameElement', fn='getSVGDocument', demands=['HTMLIFrameElement'], returns='Document'),
        PrototypeCall(constructor='HTMLEmbedElement', fn='getSVGDocument', demands=['HTMLEmbedElement'], returns='Document'),
        PrototypeCall(constructor='HTMLObjectElement', fn='getSVGDocument', demands=['HTMLObjectElement'], returns='Document'),
    ],
    "HTMLEmbedElement": [
        NewCall(constructor='HTMLEmbedElement', demands=[], returns='HTMLEmbedElement'),
    ],
    "HTMLObjectElement": [
        NewCall(constructor='HTMLObjectElement', demands=[], returns='HTMLObjectElement'),
    ],
    "form": [
        FieldCall(field='form', demands=['HTMLObjectElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLLabelElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLInputElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLButtonElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLSelectElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLOptionElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLTextAreaElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLOutputElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLFieldSetElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['HTMLLegendElement'], returns='HTMLFormElement'),
        FieldCall(field='form', demands=['ElementInternals'], returns='HTMLFormElement'),
    ],
    "willValidate": [
        FieldCall(field='willValidate', demands=['HTMLObjectElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLOutputElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['HTMLFieldSetElement'], returns='bool'),
        FieldCall(field='willValidate', demands=['ElementInternals'], returns='bool'),
    ],
    "validity": [
        FieldCall(field='validity', demands=['HTMLObjectElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLInputElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLButtonElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLSelectElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLTextAreaElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLOutputElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['HTMLFieldSetElement'], returns='ValidityState'),
        FieldCall(field='validity', demands=['ElementInternals'], returns='ValidityState'),
    ],
    "validationMessage": [
        FieldCall(field='validationMessage', demands=['HTMLObjectElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['HTMLFieldSetElement'], returns='str'),
        FieldCall(field='validationMessage', demands=['ElementInternals'], returns='str'),
    ],
    "checkValidity": [
        PrototypeCall(constructor='HTMLObjectElement', fn='checkValidity', demands=['HTMLObjectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='checkValidity', demands=['HTMLFormElement'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='checkValidity', demands=['HTMLInputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='checkValidity', demands=['HTMLButtonElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='checkValidity', demands=['HTMLSelectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='checkValidity', demands=['HTMLTextAreaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='checkValidity', demands=['HTMLOutputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='checkValidity', demands=['HTMLFieldSetElement'], returns='bool'),
        PrototypeCall(constructor='ElementInternals', fn='checkValidity', demands=['ElementInternals'], returns='bool'),
    ],
    "reportValidity": [
        PrototypeCall(constructor='HTMLObjectElement', fn='reportValidity', demands=['HTMLObjectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFormElement', fn='reportValidity', demands=['HTMLFormElement'], returns='bool'),
        PrototypeCall(constructor='HTMLInputElement', fn='reportValidity', demands=['HTMLInputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLButtonElement', fn='reportValidity', demands=['HTMLButtonElement'], returns='bool'),
        PrototypeCall(constructor='HTMLSelectElement', fn='reportValidity', demands=['HTMLSelectElement'], returns='bool'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='reportValidity', demands=['HTMLTextAreaElement'], returns='bool'),
        PrototypeCall(constructor='HTMLOutputElement', fn='reportValidity', demands=['HTMLOutputElement'], returns='bool'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='reportValidity', demands=['HTMLFieldSetElement'], returns='bool'),
        PrototypeCall(constructor='ElementInternals', fn='reportValidity', demands=['ElementInternals'], returns='bool'),
    ],
    "setCustomValidity": [
        PrototypeCall(constructor='HTMLObjectElement', fn='setCustomValidity', demands=['HTMLObjectElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setCustomValidity', demands=['HTMLInputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLButtonElement', fn='setCustomValidity', demands=['HTMLButtonElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='setCustomValidity', demands=['HTMLSelectElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setCustomValidity', demands=['HTMLTextAreaElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLOutputElement', fn='setCustomValidity', demands=['HTMLOutputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLFieldSetElement', fn='setCustomValidity', demands=['HTMLFieldSetElement', 'str'], returns='None'),
    ],
    "HTMLVideoElement": [
        NewCall(constructor='HTMLVideoElement', demands=[], returns='HTMLVideoElement'),
    ],
    "videoWidth": [
        FieldCall(field='videoWidth', demands=['HTMLVideoElement'], returns='int'),
    ],
    "videoHeight": [
        FieldCall(field='videoHeight', demands=['HTMLVideoElement'], returns='int'),
    ],
    "poster": [
        FieldCall(field='poster', demands=['HTMLVideoElement'], returns='str'),
        FieldCall(field='poster', demands=['HTMLVideoElement', 'str'], returns='str'),
    ],
    "playsInline": [
        FieldCall(field='playsInline', demands=['HTMLVideoElement'], returns='bool'),
        FieldCall(field='playsInline', demands=['HTMLVideoElement', 'bool'], returns='bool'),
    ],
    "HTMLAudioElement": [
        NewCall(constructor='HTMLAudioElement', demands=[], returns='HTMLAudioElement'),
    ],
    "HTMLTrackElement": [
        NewCall(constructor='HTMLTrackElement', demands=[], returns='HTMLTrackElement'),
    ],
    "kind": [
        FieldCall(field='kind', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='kind', demands=['HTMLTrackElement', 'str'], returns='str'),
        FieldCall(field='kind', demands=['AudioTrack'], returns='str'),
        FieldCall(field='kind', demands=['VideoTrack'], returns='str'),
        FieldCall(field='kind', demands=['TextTrack'], returns='TextTrackKind'),
        FieldCall(field='kind', demands=['DataTransferItem'], returns='str'),
        FieldCall(field='kind', demands=['MediaStreamTrack'], returns='str'),
        FieldCall(field='kind', demands=['MediaDeviceInfo'], returns='MediaDeviceKind'),
        FieldCall(field='kind', demands=['FileSystemHandle'], returns='FileSystemHandleKind'),
    ],
    "srclang": [
        FieldCall(field='srclang', demands=['HTMLTrackElement'], returns='str'),
        FieldCall(field='srclang', demands=['HTMLTrackElement', 'str'], returns='str'),
    ],
    "default": [
        FieldCall(field='default', demands=['HTMLTrackElement'], returns='bool'),
        FieldCall(field='default', demands=['HTMLTrackElement', 'bool'], returns='bool'),
        FieldCall(field='default', demands=['SpeechSynthesisVoice'], returns='bool'),
    ],
    "srcObject": [
        FieldCall(field='srcObject', demands=['HTMLMediaElement'], returns='MediaProvider'),
        FieldCall(field='srcObject', demands=['HTMLMediaElement', 'MediaProvider'], returns='MediaProvider'),
    ],
    "networkState": [
        FieldCall(field='networkState', demands=['HTMLMediaElement'], returns='unsigned short'),
    ],
    "preload": [
        FieldCall(field='preload', demands=['HTMLMediaElement'], returns='str'),
        FieldCall(field='preload', demands=['HTMLMediaElement', 'str'], returns='str'),
    ],
    "buffered": [
        FieldCall(field='buffered', demands=['HTMLMediaElement'], returns='TimeRanges'),
        FieldCall(field='buffered', demands=['SourceBuffer'], returns='TimeRanges'),
    ],
    "load": [
        PrototypeCall(constructor='HTMLMediaElement', fn='load', demands=['HTMLMediaElement'], returns='None'),
        PrototypeCall(constructor='MediaKeySession', fn='load', demands=['MediaKeySession', 'str'], returns='bool'),
        PrototypeCall(constructor='FontFace', fn='load', demands=['FontFace'], returns='FontFace'),
        PrototypeCall(constructor='FontFaceSet', fn='load', demands=['FontFaceSet', 'CSSOMString'], returns='FontFace'),
        PrototypeCall(constructor='FontFaceSet', fn='load', demands=['FontFaceSet', 'CSSOMString', 'CSSOMString'], returns='FontFace'),
    ],
    "canPlayType": [
        PrototypeCall(constructor='HTMLMediaElement', fn='canPlayType', demands=['HTMLMediaElement', 'str'], returns='CanPlayTypeResult'),
    ],
    "seeking": [
        FieldCall(field='seeking', demands=['HTMLMediaElement'], returns='bool'),
    ],
    "currentTime": [
        FieldCall(field='currentTime', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='currentTime', demands=['HTMLMediaElement', 'float'], returns='float'),
        FieldCall(field='currentTime', demands=['BaseAudioContext'], returns='float'),
        FieldCall(field='currentTime', demands=['AudioWorkletGlobalScope'], returns='float'),
        FieldCall(field='currentTime', demands=['AnimationPlaybackEvent'], returns='CSSNumberish'),
    ],
    "fastSeek": [
        PrototypeCall(constructor='HTMLMediaElement', fn='fastSeek', demands=['HTMLMediaElement', 'float'], returns='None'),
    ],
    "getStartDate": [
        PrototypeCall(constructor='HTMLMediaElement', fn='getStartDate', demands=['HTMLMediaElement'], returns='object'),
    ],
    "paused": [
        FieldCall(field='paused', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='paused', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "defaultPlaybackRate": [
        FieldCall(field='defaultPlaybackRate', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='defaultPlaybackRate', demands=['HTMLMediaElement', 'float'], returns='float'),
    ],
    "preservesPitch": [
        FieldCall(field='preservesPitch', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='preservesPitch', demands=['HTMLMediaElement', 'bool'], returns='bool'),
    ],
    "played": [
        FieldCall(field='played', demands=['HTMLMediaElement'], returns='TimeRanges'),
    ],
    "seekable": [
        FieldCall(field='seekable', demands=['HTMLMediaElement'], returns='TimeRanges'),
    ],
    "ended": [
        FieldCall(field='ended', demands=['HTMLMediaElement'], returns='bool'),
    ],
    "autoplay": [
        FieldCall(field='autoplay', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='autoplay', demands=['HTMLMediaElement', 'bool'], returns='bool'),
    ],
    "loop": [
        FieldCall(field='loop', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='loop', demands=['HTMLMediaElement', 'bool'], returns='bool'),
        FieldCall(field='loop', demands=['HTMLMarqueeElement'], returns='int'),
        FieldCall(field='loop', demands=['HTMLMarqueeElement', 'int'], returns='int'),
        FieldCall(field='loop', demands=['AudioBufferSourceNode'], returns='bool'),
        FieldCall(field='loop', demands=['AudioBufferSourceNode', 'bool'], returns='bool'),
    ],
    "controls": [
        FieldCall(field='controls', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='controls', demands=['HTMLMediaElement', 'bool'], returns='bool'),
    ],
    "volume": [
        FieldCall(field='volume', demands=['HTMLMediaElement'], returns='float'),
        FieldCall(field='volume', demands=['HTMLMediaElement', 'float'], returns='float'),
        FieldCall(field='volume', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='volume', demands=['SpeechSynthesisUtterance', 'float'], returns='float'),
    ],
    "defaultMuted": [
        FieldCall(field='defaultMuted', demands=['HTMLMediaElement'], returns='bool'),
        FieldCall(field='defaultMuted', demands=['HTMLMediaElement', 'bool'], returns='bool'),
    ],
    "audioTracks": [
        FieldCall(field='audioTracks', demands=['HTMLMediaElement'], returns='AudioTrackList'),
        FieldCall(field='audioTracks', demands=['SourceBuffer'], returns='AudioTrackList'),
    ],
    "videoTracks": [
        FieldCall(field='videoTracks', demands=['HTMLMediaElement'], returns='VideoTrackList'),
        FieldCall(field='videoTracks', demands=['SourceBuffer'], returns='VideoTrackList'),
    ],
    "textTracks": [
        FieldCall(field='textTracks', demands=['HTMLMediaElement'], returns='TextTrackList'),
        FieldCall(field='textTracks', demands=['SourceBuffer'], returns='TextTrackList'),
    ],
    "addTextTrack": [
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='HTMLMediaElement', fn='addTextTrack', demands=['HTMLMediaElement', 'TextTrackKind', 'str', 'str'], returns='TextTrack'),
    ],
    "getTrackById": [
        PrototypeCall(constructor='AudioTrackList', fn='getTrackById', demands=['AudioTrackList', 'str'], returns='AudioTrack'),
        PrototypeCall(constructor='VideoTrackList', fn='getTrackById', demands=['VideoTrackList', 'str'], returns='VideoTrack'),
        PrototypeCall(constructor='TextTrackList', fn='getTrackById', demands=['TextTrackList', 'str'], returns='TextTrack'),
        PrototypeCall(constructor='MediaStream', fn='getTrackById', demands=['MediaStream', 'str'], returns='MediaStreamTrack'),
    ],
    "onaddtrack": [
        FieldCall(field='onaddtrack', demands=['AudioTrackList'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['AudioTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['VideoTrackList'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['VideoTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['TextTrackList'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['TextTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['MediaStream'], returns='EventHandler'),
        FieldCall(field='onaddtrack', demands=['MediaStream', 'EventHandler'], returns='EventHandler'),
    ],
    "onremovetrack": [
        FieldCall(field='onremovetrack', demands=['AudioTrackList'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['AudioTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['VideoTrackList'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['VideoTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['TextTrackList'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['TextTrackList', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['MediaStream'], returns='EventHandler'),
        FieldCall(field='onremovetrack', demands=['MediaStream', 'EventHandler'], returns='EventHandler'),
    ],
    "enabled": [
        FieldCall(field='enabled', demands=['AudioTrack'], returns='bool'),
        FieldCall(field='enabled', demands=['AudioTrack', 'bool'], returns='bool'),
        FieldCall(field='enabled', demands=['MediaStreamTrack'], returns='bool'),
        FieldCall(field='enabled', demands=['MediaStreamTrack', 'bool'], returns='bool'),
    ],
    "inBandMetadataTrackDispatchType": [
        FieldCall(field='inBandMetadataTrackDispatchType', demands=['TextTrack'], returns='str'),
    ],
    "cues": [
        FieldCall(field='cues', demands=['TextTrack'], returns='TextTrackCueList'),
    ],
    "activeCues": [
        FieldCall(field='activeCues', demands=['TextTrack'], returns='TextTrackCueList'),
    ],
    "addCue": [
        PrototypeCall(constructor='TextTrack', fn='addCue', demands=['TextTrack', 'TextTrackCue'], returns='None'),
    ],
    "removeCue": [
        PrototypeCall(constructor='TextTrack', fn='removeCue', demands=['TextTrack', 'TextTrackCue'], returns='None'),
    ],
    "oncuechange": [
        FieldCall(field='oncuechange', demands=['TextTrack'], returns='EventHandler'),
        FieldCall(field='oncuechange', demands=['TextTrack', 'EventHandler'], returns='EventHandler'),
    ],
    "getCueById": [
        PrototypeCall(constructor='TextTrackCueList', fn='getCueById', demands=['TextTrackCueList', 'str'], returns='TextTrackCue'),
    ],
    "endTime": [
        FieldCall(field='endTime', demands=['TextTrackCue'], returns='float'),
        FieldCall(field='endTime', demands=['TextTrackCue', 'float'], returns='float'),
    ],
    "pauseOnExit": [
        FieldCall(field='pauseOnExit', demands=['TextTrackCue'], returns='bool'),
        FieldCall(field='pauseOnExit', demands=['TextTrackCue', 'bool'], returns='bool'),
    ],
    "onexit": [
        FieldCall(field='onexit', demands=['TextTrackCue'], returns='EventHandler'),
        FieldCall(field='onexit', demands=['TextTrackCue', 'EventHandler'], returns='EventHandler'),
    ],
    "TrackEvent": [
        NewCall(constructor='TrackEvent', demands=['str'], returns='TrackEvent'),
        NewCall(constructor='TrackEvent', demands=['str', 'dict'], returns='TrackEvent'),
    ],
    "HTMLMapElement": [
        NewCall(constructor='HTMLMapElement', demands=[], returns='HTMLMapElement'),
    ],
    "areas": [
        FieldCall(field='areas', demands=['HTMLMapElement'], returns='HTMLCollection'),
    ],
    "HTMLAreaElement": [
        NewCall(constructor='HTMLAreaElement', demands=[], returns='HTMLAreaElement'),
    ],
    "HTMLTableElement": [
        NewCall(constructor='HTMLTableElement', demands=[], returns='HTMLTableElement'),
    ],
    "caption": [
        FieldCall(field='caption', demands=['HTMLTableElement'], returns='HTMLTableCaptionElement'),
        FieldCall(field='caption', demands=['HTMLTableElement', 'HTMLTableCaptionElement'], returns='HTMLTableCaptionElement'),
    ],
    "createCaption": [
        PrototypeCall(constructor='HTMLTableElement', fn='createCaption', demands=['HTMLTableElement'], returns='HTMLTableCaptionElement'),
    ],
    "deleteCaption": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteCaption', demands=['HTMLTableElement'], returns='None'),
    ],
    "tHead": [
        FieldCall(field='tHead', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
        FieldCall(field='tHead', demands=['HTMLTableElement', 'HTMLTableSectionElement'], returns='HTMLTableSectionElement'),
    ],
    "createTHead": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTHead', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "deleteTHead": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteTHead', demands=['HTMLTableElement'], returns='None'),
    ],
    "tFoot": [
        FieldCall(field='tFoot', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
        FieldCall(field='tFoot', demands=['HTMLTableElement', 'HTMLTableSectionElement'], returns='HTMLTableSectionElement'),
    ],
    "createTFoot": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTFoot', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "deleteTFoot": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteTFoot', demands=['HTMLTableElement'], returns='None'),
    ],
    "tBodies": [
        FieldCall(field='tBodies', demands=['HTMLTableElement'], returns='HTMLCollection'),
    ],
    "createTBody": [
        PrototypeCall(constructor='HTMLTableElement', fn='createTBody', demands=['HTMLTableElement'], returns='HTMLTableSectionElement'),
    ],
    "rows": [
        FieldCall(field='rows', demands=['HTMLTableElement'], returns='HTMLCollection'),
        FieldCall(field='rows', demands=['HTMLTableSectionElement'], returns='HTMLCollection'),
        FieldCall(field='rows', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='rows', demands=['HTMLTextAreaElement', 'int'], returns='int'),
        FieldCall(field='rows', demands=['HTMLFrameSetElement'], returns='str'),
        FieldCall(field='rows', demands=['HTMLFrameSetElement', 'str'], returns='str'),
    ],
    "insertRow": [
        PrototypeCall(constructor='HTMLTableElement', fn='insertRow', demands=['HTMLTableElement'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableElement', fn='insertRow', demands=['HTMLTableElement', 'int'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='insertRow', demands=['HTMLTableSectionElement'], returns='HTMLTableRowElement'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='insertRow', demands=['HTMLTableSectionElement', 'int'], returns='HTMLTableRowElement'),
    ],
    "deleteRow": [
        PrototypeCall(constructor='HTMLTableElement', fn='deleteRow', demands=['HTMLTableElement', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLTableSectionElement', fn='deleteRow', demands=['HTMLTableSectionElement', 'int'], returns='None'),
    ],
    "HTMLTableCaptionElement": [
        NewCall(constructor='HTMLTableCaptionElement', demands=[], returns='HTMLTableCaptionElement'),
    ],
    "HTMLTableColElement": [
        NewCall(constructor='HTMLTableColElement', demands=[], returns='HTMLTableColElement'),
    ],
    "span": [
        FieldCall(field='span', demands=['HTMLTableColElement'], returns='int'),
        FieldCall(field='span', demands=['HTMLTableColElement', 'int'], returns='int'),
    ],
    "HTMLTableSectionElement": [
        NewCall(constructor='HTMLTableSectionElement', demands=[], returns='HTMLTableSectionElement'),
    ],
    "HTMLTableRowElement": [
        NewCall(constructor='HTMLTableRowElement', demands=[], returns='HTMLTableRowElement'),
    ],
    "rowIndex": [
        FieldCall(field='rowIndex', demands=['HTMLTableRowElement'], returns='int'),
    ],
    "sectionRowIndex": [
        FieldCall(field='sectionRowIndex', demands=['HTMLTableRowElement'], returns='int'),
    ],
    "cells": [
        FieldCall(field='cells', demands=['HTMLTableRowElement'], returns='HTMLCollection'),
    ],
    "insertCell": [
        PrototypeCall(constructor='HTMLTableRowElement', fn='insertCell', demands=['HTMLTableRowElement'], returns='HTMLTableCellElement'),
        PrototypeCall(constructor='HTMLTableRowElement', fn='insertCell', demands=['HTMLTableRowElement', 'int'], returns='HTMLTableCellElement'),
    ],
    "deleteCell": [
        PrototypeCall(constructor='HTMLTableRowElement', fn='deleteCell', demands=['HTMLTableRowElement', 'int'], returns='None'),
    ],
    "HTMLTableCellElement": [
        NewCall(constructor='HTMLTableCellElement', demands=[], returns='HTMLTableCellElement'),
    ],
    "colSpan": [
        FieldCall(field='colSpan', demands=['HTMLTableCellElement'], returns='int'),
        FieldCall(field='colSpan', demands=['HTMLTableCellElement', 'int'], returns='int'),
    ],
    "rowSpan": [
        FieldCall(field='rowSpan', demands=['HTMLTableCellElement'], returns='int'),
        FieldCall(field='rowSpan', demands=['HTMLTableCellElement', 'int'], returns='int'),
    ],
    "cellIndex": [
        FieldCall(field='cellIndex', demands=['HTMLTableCellElement'], returns='int'),
    ],
    "abbr": [
        FieldCall(field='abbr', demands=['HTMLTableCellElement'], returns='str'),
        FieldCall(field='abbr', demands=['HTMLTableCellElement', 'str'], returns='str'),
    ],
    "HTMLFormElement": [
        NewCall(constructor='HTMLFormElement', demands=[], returns='HTMLFormElement'),
    ],
    "acceptCharset": [
        FieldCall(field='acceptCharset', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='acceptCharset', demands=['HTMLFormElement', 'str'], returns='str'),
    ],
    "action": [
        FieldCall(field='action', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='action', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='action', demands=['CaptureActionEvent'], returns='CaptureAction'),
        FieldCall(field='action', demands=['NotificationEvent'], returns='str'),
    ],
    "autocomplete": [
        FieldCall(field='autocomplete', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLSelectElement'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLSelectElement', 'str'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='autocomplete', demands=['HTMLTextAreaElement', 'str'], returns='str'),
    ],
    "enctype": [
        FieldCall(field='enctype', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='enctype', demands=['HTMLFormElement', 'str'], returns='str'),
    ],
    "encoding": [
        FieldCall(field='encoding', demands=['HTMLFormElement'], returns='str'),
        FieldCall(field='encoding', demands=['HTMLFormElement', 'str'], returns='str'),
        FieldCall(field='encoding', demands=['NDEFRecord'], returns='str'),
    ],
    "noValidate": [
        FieldCall(field='noValidate', demands=['HTMLFormElement'], returns='bool'),
        FieldCall(field='noValidate', demands=['HTMLFormElement', 'bool'], returns='bool'),
    ],
    "elements": [
        FieldCall(field='elements', demands=['HTMLFormElement'], returns='HTMLFormControlsCollection'),
        FieldCall(field='elements', demands=['HTMLFieldSetElement'], returns='HTMLCollection'),
    ],
    "requestSubmit": [
        PrototypeCall(constructor='HTMLFormElement', fn='requestSubmit', demands=['HTMLFormElement'], returns='None'),
        PrototypeCall(constructor='HTMLFormElement', fn='requestSubmit', demands=['HTMLFormElement', 'HTMLElement'], returns='None'),
    ],
    "HTMLLabelElement": [
        NewCall(constructor='HTMLLabelElement', demands=[], returns='HTMLLabelElement'),
    ],
    "htmlFor": [
        FieldCall(field='htmlFor', demands=['HTMLLabelElement'], returns='str'),
        FieldCall(field='htmlFor', demands=['HTMLLabelElement', 'str'], returns='str'),
        FieldCall(field='htmlFor', demands=['HTMLOutputElement'], returns='DOMTokenList'),
    ],
    "control": [
        FieldCall(field='control', demands=['HTMLLabelElement'], returns='HTMLElement'),
    ],
    "HTMLInputElement": [
        NewCall(constructor='HTMLInputElement', demands=[], returns='HTMLInputElement'),
    ],
    "accept": [
        FieldCall(field='accept', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='accept', demands=['HTMLInputElement', 'str'], returns='str'),
    ],
    "alpha": [
        FieldCall(field='alpha', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='alpha', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='alpha', demands=['CSSRGB'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSRGB', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSHSL'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSHSL', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSHWB'], returns='CSSNumberish'),
        FieldCall(field='alpha', demands=['CSSHWB', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='alpha', demands=['CSSLab'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSLab', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSLCH'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSOKLab'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSOKLab', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSOKLCH'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSOKLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='alpha', demands=['CSSColor'], returns='CSSNumberish'),
        FieldCall(field='alpha', demands=['CSSColor', 'CSSNumberish'], returns='CSSNumberish'),
        FieldCall(field='alpha', demands=['DeviceOrientationEvent'], returns='float'),
        FieldCall(field='alpha', demands=['DeviceMotionEventRotationRate'], returns='float'),
    ],
    "defaultChecked": [
        FieldCall(field='defaultChecked', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='defaultChecked', demands=['HTMLInputElement', 'bool'], returns='bool'),
    ],
    "checked": [
        FieldCall(field='checked', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='checked', demands=['HTMLInputElement', 'bool'], returns='bool'),
    ],
    "dirName": [
        FieldCall(field='dirName', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='dirName', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='dirName', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='dirName', demands=['HTMLTextAreaElement', 'str'], returns='str'),
    ],
    "files": [
        FieldCall(field='files', demands=['HTMLInputElement'], returns='FileList'),
        FieldCall(field='files', demands=['HTMLInputElement', 'FileList'], returns='FileList'),
        FieldCall(field='files', demands=['DataTransfer'], returns='FileList'),
        FieldCall(field='files', demands=['LaunchParams'], returns='FileSystemHandle'),
    ],
    "formAction": [
        FieldCall(field='formAction', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formAction', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='formAction', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formAction', demands=['HTMLButtonElement', 'str'], returns='str'),
    ],
    "formEnctype": [
        FieldCall(field='formEnctype', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formEnctype', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='formEnctype', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formEnctype', demands=['HTMLButtonElement', 'str'], returns='str'),
    ],
    "formMethod": [
        FieldCall(field='formMethod', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formMethod', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='formMethod', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formMethod', demands=['HTMLButtonElement', 'str'], returns='str'),
    ],
    "formNoValidate": [
        FieldCall(field='formNoValidate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='formNoValidate', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='formNoValidate', demands=['HTMLButtonElement'], returns='bool'),
        FieldCall(field='formNoValidate', demands=['HTMLButtonElement', 'bool'], returns='bool'),
    ],
    "formTarget": [
        FieldCall(field='formTarget', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='formTarget', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='formTarget', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='formTarget', demands=['HTMLButtonElement', 'str'], returns='str'),
    ],
    "indeterminate": [
        FieldCall(field='indeterminate', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='indeterminate', demands=['HTMLInputElement', 'bool'], returns='bool'),
    ],
    "list": [
        FieldCall(field='list', demands=['HTMLInputElement'], returns='HTMLDataListElement'),
    ],
    "max": [
        FieldCall(field='max', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='max', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='max', demands=['HTMLProgressElement'], returns='float'),
        FieldCall(field='max', demands=['HTMLProgressElement', 'float'], returns='float'),
        FieldCall(field='max', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='max', demands=['HTMLMeterElement', 'float'], returns='float'),
        PrototypeCall(constructor='CSSNumericValue', fn='max', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
        FieldCall(field='max', demands=['ProximitySensor'], returns='float'),
    ],
    "maxLength": [
        FieldCall(field='maxLength', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='maxLength', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='maxLength', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='maxLength', demands=['HTMLTextAreaElement', 'int'], returns='int'),
    ],
    "min": [
        FieldCall(field='min', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='min', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='min', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='min', demands=['HTMLMeterElement', 'float'], returns='float'),
        PrototypeCall(constructor='CSSNumericValue', fn='min', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
    ],
    "minLength": [
        FieldCall(field='minLength', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='minLength', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='minLength', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='minLength', demands=['HTMLTextAreaElement', 'int'], returns='int'),
    ],
    "multiple": [
        FieldCall(field='multiple', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='multiple', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='multiple', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='multiple', demands=['HTMLSelectElement', 'bool'], returns='bool'),
    ],
    "pattern": [
        FieldCall(field='pattern', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='pattern', demands=['HTMLInputElement', 'str'], returns='str'),
    ],
    "placeholder": [
        FieldCall(field='placeholder', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='placeholder', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='placeholder', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='placeholder', demands=['HTMLTextAreaElement', 'str'], returns='str'),
    ],
    "readOnly": [
        FieldCall(field='readOnly', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='readOnly', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='readOnly', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='readOnly', demands=['HTMLTextAreaElement', 'bool'], returns='bool'),
    ],
    "required": [
        FieldCall(field='required', demands=['HTMLInputElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLInputElement', 'bool'], returns='bool'),
        FieldCall(field='required', demands=['HTMLSelectElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLSelectElement', 'bool'], returns='bool'),
        FieldCall(field='required', demands=['HTMLTextAreaElement'], returns='bool'),
        FieldCall(field='required', demands=['HTMLTextAreaElement', 'bool'], returns='bool'),
    ],
    "step": [
        FieldCall(field='step', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='step', demands=['HTMLInputElement', 'str'], returns='str'),
    ],
    "defaultValue": [
        FieldCall(field='defaultValue', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLTextAreaElement', 'str'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLOutputElement'], returns='str'),
        FieldCall(field='defaultValue', demands=['HTMLOutputElement', 'str'], returns='str'),
        FieldCall(field='defaultValue', demands=['AudioParam'], returns='float'),
        FieldCall(field='defaultValue', demands=['FontFaceVariationAxis'], returns='float'),
    ],
    "valueAsDate": [
        FieldCall(field='valueAsDate', demands=['HTMLInputElement'], returns='object'),
        FieldCall(field='valueAsDate', demands=['HTMLInputElement', 'object'], returns='object'),
    ],
    "valueAsNumber": [
        FieldCall(field='valueAsNumber', demands=['HTMLInputElement'], returns='float'),
        FieldCall(field='valueAsNumber', demands=['HTMLInputElement', 'float'], returns='float'),
    ],
    "stepUp": [
        PrototypeCall(constructor='HTMLInputElement', fn='stepUp', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='stepUp', demands=['HTMLInputElement', 'int'], returns='None'),
    ],
    "stepDown": [
        PrototypeCall(constructor='HTMLInputElement', fn='stepDown', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='stepDown', demands=['HTMLInputElement', 'int'], returns='None'),
    ],
    "labels": [
        FieldCall(field='labels', demands=['HTMLInputElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLButtonElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLSelectElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLTextAreaElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLOutputElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLProgressElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['HTMLMeterElement'], returns='NodeList'),
        FieldCall(field='labels', demands=['ElementInternals'], returns='NodeList'),
    ],
    "selectionStart": [
        FieldCall(field='selectionStart', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='selectionStart', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='selectionStart', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='selectionStart', demands=['HTMLTextAreaElement', 'int'], returns='int'),
        FieldCall(field='selectionStart', demands=['EditContext'], returns='int'),
        FieldCall(field='selectionStart', demands=['TextUpdateEvent'], returns='int'),
    ],
    "selectionEnd": [
        FieldCall(field='selectionEnd', demands=['HTMLInputElement'], returns='int'),
        FieldCall(field='selectionEnd', demands=['HTMLInputElement', 'int'], returns='int'),
        FieldCall(field='selectionEnd', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='selectionEnd', demands=['HTMLTextAreaElement', 'int'], returns='int'),
        FieldCall(field='selectionEnd', demands=['EditContext'], returns='int'),
        FieldCall(field='selectionEnd', demands=['TextUpdateEvent'], returns='int'),
    ],
    "selectionDirection": [
        FieldCall(field='selectionDirection', demands=['HTMLInputElement'], returns='str'),
        FieldCall(field='selectionDirection', demands=['HTMLInputElement', 'str'], returns='str'),
        FieldCall(field='selectionDirection', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='selectionDirection', demands=['HTMLTextAreaElement', 'str'], returns='str'),
    ],
    "setRangeText": [
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setRangeText', demands=['HTMLInputElement', 'str', 'int', 'int', 'SelectionMode'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setRangeText', demands=['HTMLTextAreaElement', 'str', 'int', 'int', 'SelectionMode'], returns='None'),
    ],
    "setSelectionRange": [
        PrototypeCall(constructor='HTMLInputElement', fn='setSelectionRange', demands=['HTMLInputElement', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLInputElement', fn='setSelectionRange', demands=['HTMLInputElement', 'int', 'int', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setSelectionRange', demands=['HTMLTextAreaElement', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='HTMLTextAreaElement', fn='setSelectionRange', demands=['HTMLTextAreaElement', 'int', 'int', 'str'], returns='None'),
    ],
    "showPicker": [
        PrototypeCall(constructor='HTMLInputElement', fn='showPicker', demands=['HTMLInputElement'], returns='None'),
        PrototypeCall(constructor='HTMLSelectElement', fn='showPicker', demands=['HTMLSelectElement'], returns='None'),
    ],
    "HTMLButtonElement": [
        NewCall(constructor='HTMLButtonElement', demands=[], returns='HTMLButtonElement'),
    ],
    "command": [
        FieldCall(field='command', demands=['HTMLButtonElement'], returns='str'),
        FieldCall(field='command', demands=['HTMLButtonElement', 'str'], returns='str'),
        FieldCall(field='command', demands=['CommandEvent'], returns='str'),
    ],
    "commandForElement": [
        FieldCall(field='commandForElement', demands=['HTMLButtonElement'], returns='Element'),
        FieldCall(field='commandForElement', demands=['HTMLButtonElement', 'Element'], returns='Element'),
    ],
    "HTMLSelectElement": [
        NewCall(constructor='HTMLSelectElement', demands=[], returns='HTMLSelectElement'),
    ],
    "selectedOptions": [
        FieldCall(field='selectedOptions', demands=['HTMLSelectElement'], returns='HTMLCollection'),
    ],
    "HTMLDataListElement": [
        NewCall(constructor='HTMLDataListElement', demands=[], returns='HTMLDataListElement'),
    ],
    "HTMLOptGroupElement": [
        NewCall(constructor='HTMLOptGroupElement', demands=[], returns='HTMLOptGroupElement'),
    ],
    "HTMLOptionElement": [
        NewCall(constructor='HTMLOptionElement', demands=[], returns='HTMLOptionElement'),
    ],
    "defaultSelected": [
        FieldCall(field='defaultSelected', demands=['HTMLOptionElement'], returns='bool'),
        FieldCall(field='defaultSelected', demands=['HTMLOptionElement', 'bool'], returns='bool'),
    ],
    "HTMLTextAreaElement": [
        NewCall(constructor='HTMLTextAreaElement', demands=[], returns='HTMLTextAreaElement'),
    ],
    "cols": [
        FieldCall(field='cols', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='cols', demands=['HTMLTextAreaElement', 'int'], returns='int'),
        FieldCall(field='cols', demands=['HTMLFrameSetElement'], returns='str'),
        FieldCall(field='cols', demands=['HTMLFrameSetElement', 'str'], returns='str'),
    ],
    "wrap": [
        FieldCall(field='wrap', demands=['HTMLTextAreaElement'], returns='str'),
        FieldCall(field='wrap', demands=['HTMLTextAreaElement', 'str'], returns='str'),
    ],
    "textLength": [
        FieldCall(field='textLength', demands=['HTMLTextAreaElement'], returns='int'),
        FieldCall(field='textLength', demands=['SVGTextContentElement'], returns='SVGAnimatedLength'),
    ],
    "HTMLOutputElement": [
        NewCall(constructor='HTMLOutputElement', demands=[], returns='HTMLOutputElement'),
    ],
    "HTMLProgressElement": [
        NewCall(constructor='HTMLProgressElement', demands=[], returns='HTMLProgressElement'),
    ],
    "HTMLMeterElement": [
        NewCall(constructor='HTMLMeterElement', demands=[], returns='HTMLMeterElement'),
    ],
    "low": [
        FieldCall(field='low', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='low', demands=['HTMLMeterElement', 'float'], returns='float'),
    ],
    "high": [
        FieldCall(field='high', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='high', demands=['HTMLMeterElement', 'float'], returns='float'),
    ],
    "optimum": [
        FieldCall(field='optimum', demands=['HTMLMeterElement'], returns='float'),
        FieldCall(field='optimum', demands=['HTMLMeterElement', 'float'], returns='float'),
    ],
    "HTMLFieldSetElement": [
        NewCall(constructor='HTMLFieldSetElement', demands=[], returns='HTMLFieldSetElement'),
    ],
    "HTMLLegendElement": [
        NewCall(constructor='HTMLLegendElement', demands=[], returns='HTMLLegendElement'),
    ],
    "HTMLSelectedContentElement": [
        NewCall(constructor='HTMLSelectedContentElement', demands=[], returns='HTMLSelectedContentElement'),
    ],
    "valueMissing": [
        FieldCall(field='valueMissing', demands=['ValidityState'], returns='bool'),
    ],
    "typeMismatch": [
        FieldCall(field='typeMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "patternMismatch": [
        FieldCall(field='patternMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "tooLong": [
        FieldCall(field='tooLong', demands=['ValidityState'], returns='bool'),
    ],
    "tooShort": [
        FieldCall(field='tooShort', demands=['ValidityState'], returns='bool'),
    ],
    "rangeUnderflow": [
        FieldCall(field='rangeUnderflow', demands=['ValidityState'], returns='bool'),
    ],
    "rangeOverflow": [
        FieldCall(field='rangeOverflow', demands=['ValidityState'], returns='bool'),
    ],
    "stepMismatch": [
        FieldCall(field='stepMismatch', demands=['ValidityState'], returns='bool'),
    ],
    "badInput": [
        FieldCall(field='badInput', demands=['ValidityState'], returns='bool'),
    ],
    "customError": [
        FieldCall(field='customError', demands=['ValidityState'], returns='bool'),
    ],
    "valid": [
        FieldCall(field='valid', demands=['ValidityState'], returns='bool'),
    ],
    "SubmitEvent": [
        NewCall(constructor='SubmitEvent', demands=['str'], returns='SubmitEvent'),
        NewCall(constructor='SubmitEvent', demands=['str', 'dict'], returns='SubmitEvent'),
    ],
    "submitter": [
        FieldCall(field='submitter', demands=['SubmitEvent'], returns='HTMLElement'),
    ],
    "FormDataEvent": [
        NewCall(constructor='FormDataEvent', demands=['str', 'dict'], returns='FormDataEvent'),
    ],
    "HTMLDetailsElement": [
        NewCall(constructor='HTMLDetailsElement', demands=[], returns='HTMLDetailsElement'),
    ],
    "HTMLDialogElement": [
        NewCall(constructor='HTMLDialogElement', demands=[], returns='HTMLDialogElement'),
    ],
    "returnValue": [
        FieldCall(field='returnValue', demands=['HTMLDialogElement'], returns='str'),
        FieldCall(field='returnValue', demands=['HTMLDialogElement', 'str'], returns='str'),
        FieldCall(field='returnValue', demands=['BeforeUnloadEvent'], returns='str'),
        FieldCall(field='returnValue', demands=['BeforeUnloadEvent', 'str'], returns='str'),
        FieldCall(field='returnValue', demands=['Event'], returns='bool'),
        FieldCall(field='returnValue', demands=['Event', 'bool'], returns='bool'),
    ],
    "closedBy": [
        FieldCall(field='closedBy', demands=['HTMLDialogElement'], returns='str'),
        FieldCall(field='closedBy', demands=['HTMLDialogElement', 'str'], returns='str'),
    ],
    "showModal": [
        PrototypeCall(constructor='HTMLDialogElement', fn='showModal', demands=['HTMLDialogElement'], returns='None'),
    ],
    "requestClose": [
        PrototypeCall(constructor='HTMLDialogElement', fn='requestClose', demands=['HTMLDialogElement'], returns='None'),
        PrototypeCall(constructor='HTMLDialogElement', fn='requestClose', demands=['HTMLDialogElement', 'str'], returns='None'),
        PrototypeCall(constructor='CloseWatcher', fn='requestClose', demands=['CloseWatcher'], returns='None'),
    ],
    "HTMLScriptElement": [
        NewCall(constructor='HTMLScriptElement', demands=[], returns='HTMLScriptElement'),
    ],
    "noModule": [
        FieldCall(field='noModule', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='noModule', demands=['HTMLScriptElement', 'bool'], returns='bool'),
    ],
    "async": [
        FieldCall(field='async', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='async', demands=['HTMLScriptElement', 'bool'], returns='bool'),
    ],
    "defer": [
        FieldCall(field='defer', demands=['HTMLScriptElement'], returns='bool'),
        FieldCall(field='defer', demands=['HTMLScriptElement', 'bool'], returns='bool'),
    ],
    "supports": [
        DirectCall(fn='supports', receiver='HTMLScriptElement', demands=['str'], returns='bool'),
        DirectCall(fn='supports', receiver='ClipboardItem', demands=['str'], returns='bool'),
        PrototypeCall(constructor='DOMTokenList', fn='supports', demands=['DOMTokenList', 'str'], returns='bool'),
    ],
    "HTMLTemplateElement": [
        NewCall(constructor='HTMLTemplateElement', demands=[], returns='HTMLTemplateElement'),
    ],
    "shadowRootMode": [
        FieldCall(field='shadowRootMode', demands=['HTMLTemplateElement'], returns='str'),
        FieldCall(field='shadowRootMode', demands=['HTMLTemplateElement', 'str'], returns='str'),
    ],
    "shadowRootDelegatesFocus": [
        FieldCall(field='shadowRootDelegatesFocus', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootDelegatesFocus', demands=['HTMLTemplateElement', 'bool'], returns='bool'),
    ],
    "shadowRootClonable": [
        FieldCall(field='shadowRootClonable', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootClonable', demands=['HTMLTemplateElement', 'bool'], returns='bool'),
    ],
    "shadowRootSerializable": [
        FieldCall(field='shadowRootSerializable', demands=['HTMLTemplateElement'], returns='bool'),
        FieldCall(field='shadowRootSerializable', demands=['HTMLTemplateElement', 'bool'], returns='bool'),
    ],
    "shadowRootCustomElementRegistry": [
        FieldCall(field='shadowRootCustomElementRegistry', demands=['HTMLTemplateElement'], returns='str'),
        FieldCall(field='shadowRootCustomElementRegistry', demands=['HTMLTemplateElement', 'str'], returns='str'),
    ],
    "HTMLSlotElement": [
        NewCall(constructor='HTMLSlotElement', demands=[], returns='HTMLSlotElement'),
    ],
    "assignedNodes": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedNodes', demands=['HTMLSlotElement'], returns='Node'),
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedNodes', demands=['HTMLSlotElement', 'dict'], returns='Node'),
    ],
    "assignedElements": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedElements', demands=['HTMLSlotElement'], returns='Element'),
        PrototypeCall(constructor='HTMLSlotElement', fn='assignedElements', demands=['HTMLSlotElement', 'dict'], returns='Element'),
    ],
    "assign": [
        PrototypeCall(constructor='HTMLSlotElement', fn='assign', demands=['HTMLSlotElement', 'Element'], returns='None'),
        PrototypeCall(constructor='HTMLSlotElement', fn='assign', demands=['HTMLSlotElement', 'Text'], returns='None'),
        PrototypeCall(constructor='Location', fn='assign', demands=['Location', 'str'], returns='None'),
    ],
    "HTMLCanvasElement": [
        NewCall(constructor='HTMLCanvasElement', demands=[], returns='HTMLCanvasElement'),
    ],
    "getContext": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', 'str'], returns='RenderingContext'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='getContext', demands=['HTMLCanvasElement', 'str', '*'], returns='RenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', 'OffscreenRenderingContextId'], returns='OffscreenRenderingContext'),
        PrototypeCall(constructor='OffscreenCanvas', fn='getContext', demands=['OffscreenCanvas', 'OffscreenRenderingContextId', '*'], returns='OffscreenRenderingContext'),
    ],
    "toDataURL": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement'], returns='str'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement', 'str'], returns='str'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toDataURL', demands=['HTMLCanvasElement', 'str', '*'], returns='str'),
    ],
    "toBlob": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback', 'str'], returns='None'),
        PrototypeCall(constructor='HTMLCanvasElement', fn='toBlob', demands=['HTMLCanvasElement', 'BlobCallback', 'str', '*'], returns='None'),
    ],
    "transferControlToOffscreen": [
        PrototypeCall(constructor='HTMLCanvasElement', fn='transferControlToOffscreen', demands=['HTMLCanvasElement'], returns='OffscreenCanvas'),
    ],
    "save": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='save', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='save', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='save', demands=['PaintRenderingContext2D'], returns='None'),
    ],
    "restore": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='restore', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='restore', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='restore', demands=['PaintRenderingContext2D'], returns='None'),
    ],
    "getTransform": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getTransform', demands=['CanvasRenderingContext2D'], returns='DOMMatrix'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='DOMMatrix'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='getTransform', demands=['PaintRenderingContext2D'], returns='DOMMatrix'),
    ],
    "setTransform": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setTransform', demands=['CanvasRenderingContext2D', 'dict'], returns='None'),
        PrototypeCall(constructor='CanvasPattern', fn='setTransform', demands=['CanvasPattern'], returns='None'),
        PrototypeCall(constructor='CanvasPattern', fn='setTransform', demands=['CanvasPattern', 'dict'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setTransform', demands=['OffscreenCanvasRenderingContext2D', 'dict'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='setTransform', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='setTransform', demands=['PaintRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='setTransform', demands=['PaintRenderingContext2D', 'dict'], returns='None'),
    ],
    "resetTransform": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='resetTransform', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='resetTransform', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='resetTransform', demands=['PaintRenderingContext2D'], returns='None'),
    ],
    "createLinearGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createLinearGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createLinearGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='createLinearGradient', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createRadialGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createRadialGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createRadialGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='createRadialGradient', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createConicGradient": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createConicGradient', demands=['CanvasRenderingContext2D', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createConicGradient', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float'], returns='CanvasGradient'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='createConicGradient', demands=['PaintRenderingContext2D', 'float', 'float', 'float'], returns='CanvasGradient'),
    ],
    "createPattern": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createPattern', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'str'], returns='CanvasPattern'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createPattern', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'str'], returns='CanvasPattern'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='createPattern', demands=['PaintRenderingContext2D', 'CanvasImageSource', 'str'], returns='CanvasPattern'),
    ],
    "clearRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clearRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clearRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='clearRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "fillRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='fillRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "strokeRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='strokeRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "beginPath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='beginPath', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='beginPath', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='beginPath', demands=['PaintRenderingContext2D'], returns='None'),
    ],
    "fill": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fill', demands=['CanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fill', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='fill', demands=['PaintRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='fill', demands=['PaintRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='fill', demands=['PaintRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='fill', demands=['PaintRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
    ],
    "stroke": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='stroke', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='stroke', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='stroke', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='stroke', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='stroke', demands=['PaintRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='stroke', demands=['PaintRenderingContext2D', 'Path2D'], returns='None'),
    ],
    "clip": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='clip', demands=['CanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='clip', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='clip', demands=['PaintRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='clip', demands=['PaintRenderingContext2D', 'CanvasFillRule'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='clip', demands=['PaintRenderingContext2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='clip', demands=['PaintRenderingContext2D', 'Path2D', 'CanvasFillRule'], returns='None'),
    ],
    "isPointInPath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInPath', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInPath', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInPath', demands=['PaintRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInPath', demands=['PaintRenderingContext2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInPath', demands=['PaintRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInPath', demands=['PaintRenderingContext2D', 'Path2D', 'float', 'float', 'CanvasFillRule'], returns='bool'),
    ],
    "isPointInStroke": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInStroke', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='isPointInStroke', demands=['CanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInStroke', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='isPointInStroke', demands=['OffscreenCanvasRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInStroke', demands=['PaintRenderingContext2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='isPointInStroke', demands=['PaintRenderingContext2D', 'Path2D', 'float', 'float'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInStroke', demands=['SVGGeometryElement'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInStroke', demands=['SVGGeometryElement', 'dict'], returns='bool'),
    ],
    "drawFocusIfNeeded": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawFocusIfNeeded', demands=['CanvasRenderingContext2D', 'Element'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawFocusIfNeeded', demands=['CanvasRenderingContext2D', 'Path2D', 'Element'], returns='None'),
    ],
    "fillText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='fillText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='fillText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
    ],
    "strokeText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='strokeText', demands=['CanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='strokeText', demands=['OffscreenCanvasRenderingContext2D', 'str', 'float', 'float', 'float'], returns='None'),
    ],
    "measureText": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='measureText', demands=['CanvasRenderingContext2D', 'str'], returns='TextMetrics'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='measureText', demands=['OffscreenCanvasRenderingContext2D', 'str'], returns='TextMetrics'),
    ],
    "drawImage": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='drawImage', demands=['CanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='drawImage', demands=['OffscreenCanvasRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='drawImage', demands=['PaintRenderingContext2D', 'CanvasImageSource', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='drawImage', demands=['PaintRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='drawImage', demands=['PaintRenderingContext2D', 'CanvasImageSource', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "createImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'int', 'int'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'int', 'int', 'dict'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='createImageData', demands=['CanvasRenderingContext2D', 'ImageData'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'int', 'int'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'int', 'int', 'dict'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='createImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData'], returns='ImageData'),
    ],
    "getImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getImageData', demands=['CanvasRenderingContext2D', 'int', 'int', 'int', 'int'], returns='ImageData'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getImageData', demands=['CanvasRenderingContext2D', 'int', 'int', 'int', 'int', 'dict'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getImageData', demands=['OffscreenCanvasRenderingContext2D', 'int', 'int', 'int', 'int'], returns='ImageData'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getImageData', demands=['OffscreenCanvasRenderingContext2D', 'int', 'int', 'int', 'int', 'dict'], returns='ImageData'),
    ],
    "putImageData": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='putImageData', demands=['CanvasRenderingContext2D', 'ImageData', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='putImageData', demands=['CanvasRenderingContext2D', 'ImageData', 'int', 'int', 'int', 'int', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='putImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData', 'int', 'int'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='putImageData', demands=['OffscreenCanvasRenderingContext2D', 'ImageData', 'int', 'int', 'int', 'int', 'int', 'int'], returns='None'),
    ],
    "setLineDash": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='setLineDash', demands=['CanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='setLineDash', demands=['OffscreenCanvasRenderingContext2D', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='setLineDash', demands=['PaintRenderingContext2D', 'float'], returns='None'),
    ],
    "getLineDash": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='getLineDash', demands=['CanvasRenderingContext2D'], returns='float'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='getLineDash', demands=['OffscreenCanvasRenderingContext2D'], returns='float'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='getLineDash', demands=['PaintRenderingContext2D'], returns='float'),
    ],
    "closePath": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='closePath', demands=['CanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='closePath', demands=['Path2D'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='closePath', demands=['OffscreenCanvasRenderingContext2D'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='closePath', demands=['PaintRenderingContext2D'], returns='None'),
    ],
    "moveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='moveTo', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='moveTo', demands=['Path2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='moveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='moveTo', demands=['PaintRenderingContext2D', 'float', 'float'], returns='None'),
    ],
    "lineTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='lineTo', demands=['CanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='lineTo', demands=['Path2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='lineTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='lineTo', demands=['PaintRenderingContext2D', 'float', 'float'], returns='None'),
    ],
    "quadraticCurveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='quadraticCurveTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='quadraticCurveTo', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='quadraticCurveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='quadraticCurveTo', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "bezierCurveTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='bezierCurveTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='bezierCurveTo', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='bezierCurveTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='bezierCurveTo', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "arcTo": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arcTo', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arcTo', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arcTo', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='arcTo', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "rect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='rect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='rect', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='rect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='rect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
    ],
    "roundRect": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='roundRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='roundRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='roundRect', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'dict'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='roundRect', demands=['Path2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='roundRect', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='roundRect', demands=['Path2D', 'float', 'float', 'float', 'float', 'dict'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='roundRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='roundRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='roundRect', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'dict'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='roundRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='roundRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='roundRect', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'dict'], returns='None'),
    ],
    "arc": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arc', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='arc', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arc', demands=['Path2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='arc', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arc', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='arc', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='arc', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='arc', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
    ],
    "ellipse": [
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='ellipse', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='CanvasRenderingContext2D', fn='ellipse', demands=['CanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='ellipse', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='ellipse', demands=['Path2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='ellipse', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='OffscreenCanvasRenderingContext2D', fn='ellipse', demands=['OffscreenCanvasRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='ellipse', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PaintRenderingContext2D', fn='ellipse', demands=['PaintRenderingContext2D', 'float', 'float', 'float', 'float', 'float', 'float', 'float', 'bool'], returns='None'),
    ],
    "addColorStop": [
        PrototypeCall(constructor='CanvasGradient', fn='addColorStop', demands=['CanvasGradient', 'float', 'str'], returns='None'),
    ],
    "actualBoundingBoxLeft": [
        FieldCall(field='actualBoundingBoxLeft', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxRight": [
        FieldCall(field='actualBoundingBoxRight', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxAscent": [
        FieldCall(field='actualBoundingBoxAscent', demands=['TextMetrics'], returns='float'),
    ],
    "actualBoundingBoxDescent": [
        FieldCall(field='actualBoundingBoxDescent', demands=['TextMetrics'], returns='float'),
    ],
    "hangingBaseline": [
        FieldCall(field='hangingBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "alphabeticBaseline": [
        FieldCall(field='alphabeticBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "ideographicBaseline": [
        FieldCall(field='ideographicBaseline', demands=['TextMetrics'], returns='float'),
    ],
    "Path2D": [
        NewCall(constructor='Path2D', demands=[], returns='Path2D'),
        NewCall(constructor='Path2D', demands=['Path2D'], returns='Path2D'),
    ],
    "addPath": [
        PrototypeCall(constructor='Path2D', fn='addPath', demands=['Path2D', 'Path2D'], returns='None'),
        PrototypeCall(constructor='Path2D', fn='addPath', demands=['Path2D', 'Path2D', 'dict'], returns='None'),
    ],
    "transferFromImageBitmap": [
        PrototypeCall(constructor='ImageBitmapRenderingContext', fn='transferFromImageBitmap', demands=['ImageBitmapRenderingContext', 'ImageBitmap'], returns='None'),
    ],
    "OffscreenCanvas": [
        NewCall(constructor='OffscreenCanvas', demands=['int', 'int'], returns='OffscreenCanvas'),
    ],
    "transferToImageBitmap": [
        PrototypeCall(constructor='OffscreenCanvas', fn='transferToImageBitmap', demands=['OffscreenCanvas'], returns='ImageBitmap'),
    ],
    "convertToBlob": [
        PrototypeCall(constructor='OffscreenCanvas', fn='convertToBlob', demands=['OffscreenCanvas'], returns='Blob'),
        PrototypeCall(constructor='OffscreenCanvas', fn='convertToBlob', demands=['OffscreenCanvas', 'dict'], returns='Blob'),
    ],
    "oncontextlost": [
        FieldCall(field='oncontextlost', demands=['OffscreenCanvas'], returns='EventHandler'),
        FieldCall(field='oncontextlost', demands=['OffscreenCanvas', 'EventHandler'], returns='EventHandler'),
    ],
    "oncontextrestored": [
        FieldCall(field='oncontextrestored', demands=['OffscreenCanvas'], returns='EventHandler'),
        FieldCall(field='oncontextrestored', demands=['OffscreenCanvas', 'EventHandler'], returns='EventHandler'),
    ],
    "CustomElementRegistry": [
        NewCall(constructor='CustomElementRegistry', demands=[], returns='CustomElementRegistry'),
    ],
    "define": [
        PrototypeCall(constructor='CustomElementRegistry', fn='define', demands=['CustomElementRegistry', 'str', 'CustomElementConstructor'], returns='None'),
        PrototypeCall(constructor='CustomElementRegistry', fn='define', demands=['CustomElementRegistry', 'str', 'CustomElementConstructor', 'dict'], returns='None'),
    ],
    "getName": [
        PrototypeCall(constructor='CustomElementRegistry', fn='getName', demands=['CustomElementRegistry', 'CustomElementConstructor'], returns='str'),
    ],
    "whenDefined": [
        PrototypeCall(constructor='CustomElementRegistry', fn='whenDefined', demands=['CustomElementRegistry', 'str'], returns='CustomElementConstructor'),
    ],
    "upgrade": [
        PrototypeCall(constructor='CustomElementRegistry', fn='upgrade', demands=['CustomElementRegistry', 'Node'], returns='None'),
    ],
    "initialize": [
        PrototypeCall(constructor='CustomElementRegistry', fn='initialize', demands=['CustomElementRegistry', 'Node'], returns='None'),
        PrototypeCall(constructor='SVGNumberList', fn='initialize', demands=['SVGNumberList', 'SVGNumber'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='initialize', demands=['SVGLengthList', 'SVGLength'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='initialize', demands=['SVGStringList', 'str'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='initialize', demands=['SVGTransformList', 'SVGTransform'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='initialize', demands=['SVGPointList', 'DOMPoint'], returns='DOMPoint'),
    ],
    "shadowRoot": [
        FieldCall(field='shadowRoot', demands=['ElementInternals'], returns='ShadowRoot'),
        FieldCall(field='shadowRoot', demands=['Element'], returns='ShadowRoot'),
    ],
    "setFormValue": [
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'FormData'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File', 'File'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'File', 'FormData'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'str', 'File'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'str', 'FormData'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'FormData', 'File'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'FormData', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setFormValue', demands=['ElementInternals', 'FormData', 'FormData'], returns='None'),
    ],
    "setValidity": [
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'dict'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'dict', 'str'], returns='None'),
        PrototypeCall(constructor='ElementInternals', fn='setValidity', demands=['ElementInternals', 'dict', 'str', 'HTMLElement'], returns='None'),
    ],
    "states": [
        FieldCall(field='states', demands=['ElementInternals'], returns='CustomStateSet'),
    ],
    "hasBeenActive": [
        FieldCall(field='hasBeenActive', demands=['UserActivation'], returns='bool'),
    ],
    "isActive": [
        FieldCall(field='isActive', demands=['UserActivation'], returns='bool'),
    ],
    "ToggleEvent": [
        NewCall(constructor='ToggleEvent', demands=['str'], returns='ToggleEvent'),
        NewCall(constructor='ToggleEvent', demands=['str', 'dict'], returns='ToggleEvent'),
    ],
    "oldState": [
        FieldCall(field='oldState', demands=['ToggleEvent'], returns='str'),
    ],
    "newState": [
        FieldCall(field='newState', demands=['ToggleEvent'], returns='str'),
    ],
    "CommandEvent": [
        NewCall(constructor='CommandEvent', demands=['str'], returns='CommandEvent'),
        NewCall(constructor='CommandEvent', demands=['str', 'dict'], returns='CommandEvent'),
    ],
    "CloseWatcher": [
        NewCall(constructor='CloseWatcher', demands=[], returns='CloseWatcher'),
        NewCall(constructor='CloseWatcher', demands=['dict'], returns='CloseWatcher'),
    ],
    "DataTransfer": [
        NewCall(constructor='DataTransfer', demands=[], returns='DataTransfer'),
    ],
    "dropEffect": [
        FieldCall(field='dropEffect', demands=['DataTransfer'], returns='str'),
        FieldCall(field='dropEffect', demands=['DataTransfer', 'str'], returns='str'),
    ],
    "effectAllowed": [
        FieldCall(field='effectAllowed', demands=['DataTransfer'], returns='str'),
        FieldCall(field='effectAllowed', demands=['DataTransfer', 'str'], returns='str'),
    ],
    "items": [
        FieldCall(field='items', demands=['DataTransfer'], returns='DataTransferItemList'),
    ],
    "setDragImage": [
        PrototypeCall(constructor='DataTransfer', fn='setDragImage', demands=['DataTransfer', 'Element', 'int', 'int'], returns='None'),
    ],
    "types": [
        FieldCall(field='types', demands=['DataTransfer'], returns='str'),
        FieldCall(field='types', demands=['CSSViewTransitionRule'], returns='CSSOMString'),
        FieldCall(field='types', demands=['ClipboardItem'], returns='str'),
    ],
    "getData": [
        PrototypeCall(constructor='DataTransfer', fn='getData', demands=['DataTransfer', 'str'], returns='str'),
    ],
    "setData": [
        PrototypeCall(constructor='DataTransfer', fn='setData', demands=['DataTransfer', 'str', 'str'], returns='None'),
    ],
    "clearData": [
        PrototypeCall(constructor='DataTransfer', fn='clearData', demands=['DataTransfer'], returns='None'),
        PrototypeCall(constructor='DataTransfer', fn='clearData', demands=['DataTransfer', 'str'], returns='None'),
    ],
    "getAsString": [
        PrototypeCall(constructor='DataTransferItem', fn='getAsString', demands=['DataTransferItem', 'FunctionStringCallback'], returns='None'),
    ],
    "getAsFile": [
        PrototypeCall(constructor='DataTransferItem', fn='getAsFile', demands=['DataTransferItem'], returns='File'),
    ],
    "DragEvent": [
        NewCall(constructor='DragEvent', demands=['str'], returns='DragEvent'),
        NewCall(constructor='DragEvent', demands=['str', 'dict'], returns='DragEvent'),
    ],
    "dataTransfer": [
        FieldCall(field='dataTransfer', demands=['DragEvent'], returns='DataTransfer'),
    ],
    "self": [
        FieldCall(field='self', demands=['Window'], returns='WindowProxy'),
        FieldCall(field='self', demands=['WorkerGlobalScope'], returns='WorkerGlobalScope'),
    ],
    "history": [
        FieldCall(field='history', demands=['Window'], returns='History'),
    ],
    "navigation": [
        FieldCall(field='navigation', demands=['Window'], returns='Navigation'),
        FieldCall(field='navigation', demands=['CSSViewTransitionRule'], returns='CSSOMString'),
    ],
    "customElements": [
        FieldCall(field='customElements', demands=['Window'], returns='CustomElementRegistry'),
    ],
    "locationbar": [
        FieldCall(field='locationbar', demands=['Window'], returns='BarProp'),
    ],
    "menubar": [
        FieldCall(field='menubar', demands=['Window'], returns='BarProp'),
    ],
    "personalbar": [
        FieldCall(field='personalbar', demands=['Window'], returns='BarProp'),
    ],
    "scrollbars": [
        FieldCall(field='scrollbars', demands=['Window'], returns='BarProp'),
    ],
    "statusbar": [
        FieldCall(field='statusbar', demands=['Window'], returns='BarProp'),
    ],
    "toolbar": [
        FieldCall(field='toolbar', demands=['Window'], returns='BarProp'),
    ],
    "closed": [
        FieldCall(field='closed', demands=['Window'], returns='bool'),
        FieldCall(field='closed', demands=['WebTransport'], returns='dict'),
        FieldCall(field='closed', demands=['MediaKeySession'], returns='MediaKeySessionClosedReason'),
        FieldCall(field='closed', demands=['WritableStreamDefaultWriter'], returns='None'),
    ],
    "frames": [
        FieldCall(field='frames', demands=['Window'], returns='WindowProxy'),
    ],
    "opener": [
        FieldCall(field='opener', demands=['Window'], returns='*'),
        FieldCall(field='opener', demands=['Window', '*'], returns='*'),
    ],
    "parent": [
        FieldCall(field='parent', demands=['Window'], returns='WindowProxy'),
        FieldCall(field='parent', demands=['CSSPseudoElement'], returns='Element'),
    ],
    "frameElement": [
        FieldCall(field='frameElement', demands=['Window'], returns='Element'),
    ],
    "navigator": [
        FieldCall(field='navigator', demands=['Window'], returns='Navigator'),
        FieldCall(field='navigator', demands=['WorkerGlobalScope'], returns='WorkerNavigator'),
        FieldCall(field='navigator', demands=['SharedStorageWorkletGlobalScope'], returns='SharedStorageWorkletNavigator'),
    ],
    "clientInformation": [
        FieldCall(field='clientInformation', demands=['Window'], returns='Navigator'),
    ],
    "originAgentCluster": [
        FieldCall(field='originAgentCluster', demands=['Window'], returns='bool'),
    ],
    "alert": [
        DirectCall(fn='alert', receiver=None, demands=[], returns='None'),
        DirectCall(fn='alert', receiver=None, demands=['str'], returns='None'),
    ],
    "confirm": [
        DirectCall(fn='confirm', receiver=None, demands=[], returns='bool'),
        DirectCall(fn='confirm', receiver=None, demands=['str'], returns='bool'),
    ],
    "print": [
        DirectCall(fn='print', receiver=None, demands=[], returns='None'),
    ],
    "fetch": [
        DirectCall(fn='fetch', receiver=None, demands=['*'], returns='Response'),
        DirectCall(fn='fetch', receiver=None, demands=['*', 'dict'], returns='Response'),
        PrototypeCall(constructor='BackgroundFetchManager', fn='fetch', demands=['BackgroundFetchManager', 'str', '*'], returns='BackgroundFetchRegistration'),
        PrototypeCall(constructor='BackgroundFetchManager', fn='fetch', demands=['BackgroundFetchManager', 'str', '*', 'dict'], returns='BackgroundFetchRegistration'),
    ],
    "reportError": [
        DirectCall(fn='reportError', receiver=None, demands=['*'], returns='None'),
    ],
    "btoa": [
        DirectCall(fn='btoa', receiver=None, demands=['str'], returns='str'),
    ],
    "atob": [
        DirectCall(fn='atob', receiver=None, demands=['str'], returns='str'),
    ],
    "setTimeout": [
        DirectCall(fn='setTimeout', receiver=None, demands=['TimerHandler', 'int'], returns='int'),
        DirectCall(fn='setTimeout', receiver=None, demands=['TimerHandler', 'int', '*'], returns='int'),
    ],
    "clearTimeout": [
        DirectCall(fn='clearTimeout', receiver=None, demands=[], returns='None'),
        DirectCall(fn='clearTimeout', receiver=None, demands=['int'], returns='None'),
    ],
    "setInterval": [
        DirectCall(fn='setInterval', receiver=None, demands=['TimerHandler', 'int'], returns='int'),
        DirectCall(fn='setInterval', receiver=None, demands=['TimerHandler', 'int', '*'], returns='int'),
    ],
    "clearInterval": [
        DirectCall(fn='clearInterval', receiver=None, demands=[], returns='None'),
        DirectCall(fn='clearInterval', receiver=None, demands=['int'], returns='None'),
    ],
    "queueMicrotask": [
        DirectCall(fn='queueMicrotask', receiver=None, demands=['VoidFunction'], returns='None'),
    ],
    "createImageBitmap": [
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'dict'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'int', 'int', 'int', 'int'], returns='ImageBitmap'),
        DirectCall(fn='createImageBitmap', receiver=None, demands=['ImageBitmapSource', 'int', 'int', 'int', 'int', 'dict'], returns='ImageBitmap'),
    ],
    "structuredClone": [
        DirectCall(fn='structuredClone', receiver=None, demands=['*'], returns='*'),
        DirectCall(fn='structuredClone', receiver=None, demands=['*', 'dict'], returns='*'),
    ],
    "requestAnimationFrame": [
        DirectCall(fn='requestAnimationFrame', receiver=None, demands=['FrameRequestCallback'], returns='int'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='requestAnimationFrame', demands=['DedicatedWorkerGlobalScope', 'FrameRequestCallback'], returns='int'),
        PrototypeCall(constructor='XRSession', fn='requestAnimationFrame', demands=['XRSession', 'XRFrameRequestCallback'], returns='int'),
    ],
    "cancelAnimationFrame": [
        DirectCall(fn='cancelAnimationFrame', receiver=None, demands=['int'], returns='None'),
        PrototypeCall(constructor='DedicatedWorkerGlobalScope', fn='cancelAnimationFrame', demands=['DedicatedWorkerGlobalScope', 'int'], returns='None'),
        PrototypeCall(constructor='XRSession', fn='cancelAnimationFrame', demands=['XRSession', 'int'], returns='None'),
    ],
    "visible": [
        FieldCall(field='visible', demands=['BarProp'], returns='bool'),
        FieldCall(field='visible', demands=['WindowControlsOverlay'], returns='bool'),
        FieldCall(field='visible', demands=['WindowControlsOverlayGeometryChangeEvent'], returns='bool'),
    ],
    "replace": [
        PrototypeCall(constructor='Location', fn='replace', demands=['Location', 'str'], returns='None'),
        PrototypeCall(constructor='CSSStyleSheet', fn='replace', demands=['CSSStyleSheet', 'str'], returns='CSSStyleSheet'),
        PrototypeCall(constructor='DOMTokenList', fn='replace', demands=['DOMTokenList', 'str', 'str'], returns='bool'),
    ],
    "reload": [
        PrototypeCall(constructor='Location', fn='reload', demands=['Location'], returns='None'),
        PrototypeCall(constructor='Navigation', fn='reload', demands=['Navigation'], returns='dict'),
        PrototypeCall(constructor='Navigation', fn='reload', demands=['Navigation', 'dict'], returns='dict'),
    ],
    "scrollRestoration": [
        FieldCall(field='scrollRestoration', demands=['History'], returns='ScrollRestoration'),
        FieldCall(field='scrollRestoration', demands=['History', 'ScrollRestoration'], returns='ScrollRestoration'),
    ],
    "go": [
        PrototypeCall(constructor='History', fn='go', demands=['History'], returns='None'),
        PrototypeCall(constructor='History', fn='go', demands=['History', 'int'], returns='None'),
    ],
    "back": [
        PrototypeCall(constructor='History', fn='back', demands=['History'], returns='None'),
        PrototypeCall(constructor='Navigation', fn='back', demands=['Navigation'], returns='dict'),
        PrototypeCall(constructor='Navigation', fn='back', demands=['Navigation', 'dict'], returns='dict'),
    ],
    "forward": [
        PrototypeCall(constructor='History', fn='forward', demands=['History'], returns='None'),
        PrototypeCall(constructor='Navigation', fn='forward', demands=['Navigation'], returns='dict'),
        PrototypeCall(constructor='Navigation', fn='forward', demands=['Navigation', 'dict'], returns='dict'),
    ],
    "pushState": [
        PrototypeCall(constructor='History', fn='pushState', demands=['History', '*', 'str'], returns='None'),
        PrototypeCall(constructor='History', fn='pushState', demands=['History', '*', 'str', 'str'], returns='None'),
    ],
    "entries": [
        PrototypeCall(constructor='Navigation', fn='entries', demands=['Navigation'], returns='NavigationHistoryEntry'),
    ],
    "currentEntry": [
        FieldCall(field='currentEntry', demands=['Navigation'], returns='NavigationHistoryEntry'),
    ],
    "updateCurrentEntry": [
        PrototypeCall(constructor='Navigation', fn='updateCurrentEntry', demands=['Navigation', 'dict'], returns='None'),
    ],
    "transition": [
        FieldCall(field='transition', demands=['Navigation'], returns='NavigationTransition'),
    ],
    "activation": [
        FieldCall(field='activation', demands=['Navigation'], returns='NavigationActivation'),
        FieldCall(field='activation', demands=['PageSwapEvent'], returns='NavigationActivation'),
    ],
    "canGoBack": [
        FieldCall(field='canGoBack', demands=['Navigation'], returns='bool'),
    ],
    "canGoForward": [
        FieldCall(field='canGoForward', demands=['Navigation'], returns='bool'),
    ],
    "traverseTo": [
        PrototypeCall(constructor='Navigation', fn='traverseTo', demands=['Navigation', 'str'], returns='dict'),
        PrototypeCall(constructor='Navigation', fn='traverseTo', demands=['Navigation', 'str', 'dict'], returns='dict'),
    ],
    "onnavigate": [
        FieldCall(field='onnavigate', demands=['Navigation'], returns='EventHandler'),
        FieldCall(field='onnavigate', demands=['Navigation', 'EventHandler'], returns='EventHandler'),
    ],
    "onnavigatesuccess": [
        FieldCall(field='onnavigatesuccess', demands=['Navigation'], returns='EventHandler'),
        FieldCall(field='onnavigatesuccess', demands=['Navigation', 'EventHandler'], returns='EventHandler'),
    ],
    "onnavigateerror": [
        FieldCall(field='onnavigateerror', demands=['Navigation'], returns='EventHandler'),
        FieldCall(field='onnavigateerror', demands=['Navigation', 'EventHandler'], returns='EventHandler'),
    ],
    "oncurrententrychange": [
        FieldCall(field='oncurrententrychange', demands=['Navigation'], returns='EventHandler'),
        FieldCall(field='oncurrententrychange', demands=['Navigation', 'EventHandler'], returns='EventHandler'),
    ],
    "sameDocument": [
        FieldCall(field='sameDocument', demands=['NavigationHistoryEntry'], returns='bool'),
        FieldCall(field='sameDocument', demands=['NavigationDestination'], returns='bool'),
    ],
    "ondispose": [
        FieldCall(field='ondispose', demands=['NavigationHistoryEntry'], returns='EventHandler'),
        FieldCall(field='ondispose', demands=['NavigationHistoryEntry', 'EventHandler'], returns='EventHandler'),
    ],
    "navigationType": [
        FieldCall(field='navigationType', demands=['NavigationTransition'], returns='NavigationType'),
        FieldCall(field='navigationType', demands=['NavigationActivation'], returns='NavigationType'),
        FieldCall(field='navigationType', demands=['NavigateEvent'], returns='NavigationType'),
        FieldCall(field='navigationType', demands=['NavigationCurrentEntryChangeEvent'], returns='NavigationType'),
    ],
    "entry": [
        FieldCall(field='entry', demands=['NavigationActivation'], returns='NavigationHistoryEntry'),
    ],
    "NavigateEvent": [
        NewCall(constructor='NavigateEvent', demands=['str', 'dict'], returns='NavigateEvent'),
    ],
    "canIntercept": [
        FieldCall(field='canIntercept', demands=['NavigateEvent'], returns='bool'),
    ],
    "userInitiated": [
        FieldCall(field='userInitiated', demands=['NavigateEvent'], returns='bool'),
    ],
    "hashChange": [
        FieldCall(field='hashChange', demands=['NavigateEvent'], returns='bool'),
    ],
    "downloadRequest": [
        FieldCall(field='downloadRequest', demands=['NavigateEvent'], returns='str'),
    ],
    "hasUAVisualTransition": [
        FieldCall(field='hasUAVisualTransition', demands=['NavigateEvent'], returns='bool'),
        FieldCall(field='hasUAVisualTransition', demands=['PopStateEvent'], returns='bool'),
    ],
    "sourceElement": [
        FieldCall(field='sourceElement', demands=['NavigateEvent'], returns='Element'),
    ],
    "intercept": [
        PrototypeCall(constructor='NavigateEvent', fn='intercept', demands=['NavigateEvent'], returns='None'),
        PrototypeCall(constructor='NavigateEvent', fn='intercept', demands=['NavigateEvent', 'dict'], returns='None'),
        FieldCall(field='intercept', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "scroll": [
        PrototypeCall(constructor='NavigateEvent', fn='scroll', demands=['NavigateEvent'], returns='None'),
        FieldCall(field='scroll', demands=['VTTRegion'], returns='ScrollSetting'),
        FieldCall(field='scroll', demands=['VTTRegion', 'ScrollSetting'], returns='ScrollSetting'),
    ],
    "NavigationCurrentEntryChangeEvent": [
        NewCall(constructor='NavigationCurrentEntryChangeEvent', demands=['str', 'dict'], returns='NavigationCurrentEntryChangeEvent'),
    ],
    "PopStateEvent": [
        NewCall(constructor='PopStateEvent', demands=['str'], returns='PopStateEvent'),
        NewCall(constructor='PopStateEvent', demands=['str', 'dict'], returns='PopStateEvent'),
    ],
    "HashChangeEvent": [
        NewCall(constructor='HashChangeEvent', demands=['str'], returns='HashChangeEvent'),
        NewCall(constructor='HashChangeEvent', demands=['str', 'dict'], returns='HashChangeEvent'),
    ],
    "oldURL": [
        FieldCall(field='oldURL', demands=['HashChangeEvent'], returns='str'),
    ],
    "newURL": [
        FieldCall(field='newURL', demands=['HashChangeEvent'], returns='str'),
    ],
    "PageSwapEvent": [
        NewCall(constructor='PageSwapEvent', demands=['str'], returns='PageSwapEvent'),
        NewCall(constructor='PageSwapEvent', demands=['str', 'dict'], returns='PageSwapEvent'),
    ],
    "viewTransition": [
        FieldCall(field='viewTransition', demands=['PageSwapEvent'], returns='ViewTransition'),
        FieldCall(field='viewTransition', demands=['PageRevealEvent'], returns='ViewTransition'),
    ],
    "PageRevealEvent": [
        NewCall(constructor='PageRevealEvent', demands=['str'], returns='PageRevealEvent'),
        NewCall(constructor='PageRevealEvent', demands=['str', 'dict'], returns='PageRevealEvent'),
    ],
    "PageTransitionEvent": [
        NewCall(constructor='PageTransitionEvent', demands=['str'], returns='PageTransitionEvent'),
        NewCall(constructor='PageTransitionEvent', demands=['str', 'dict'], returns='PageTransitionEvent'),
    ],
    "reasons": [
        FieldCall(field='reasons', demands=['NotRestoredReasons'], returns='NotRestoredReasonDetails'),
    ],
    "children": [
        FieldCall(field='children', demands=['NotRestoredReasons'], returns='NotRestoredReasons'),
        FieldCall(field='children', demands=['GroupEffect'], returns='AnimationNodeList'),
    ],
    "ErrorEvent": [
        NewCall(constructor='ErrorEvent', demands=['str'], returns='ErrorEvent'),
        NewCall(constructor='ErrorEvent', demands=['str', 'dict'], returns='ErrorEvent'),
    ],
    "filename": [
        FieldCall(field='filename', demands=['ErrorEvent'], returns='str'),
        FieldCall(field='filename', demands=['Plugin'], returns='str'),
    ],
    "lineno": [
        FieldCall(field='lineno', demands=['ErrorEvent'], returns='int'),
    ],
    "colno": [
        FieldCall(field='colno', demands=['ErrorEvent'], returns='int'),
    ],
    "PromiseRejectionEvent": [
        NewCall(constructor='PromiseRejectionEvent', demands=['str', 'dict'], returns='PromiseRejectionEvent'),
    ],
    "promise": [
        FieldCall(field='promise', demands=['PromiseRejectionEvent'], returns='object'),
    ],
    "DOMParser": [
        NewCall(constructor='DOMParser', demands=[], returns='DOMParser'),
    ],
    "parseFromString": [
        PrototypeCall(constructor='DOMParser', fn='parseFromString', demands=['DOMParser', 'TrustedHTML', 'DOMParserSupportedType'], returns='Document'),
        PrototypeCall(constructor='DOMParser', fn='parseFromString', demands=['DOMParser', 'str', 'DOMParserSupportedType'], returns='Document'),
    ],
    "XMLSerializer": [
        NewCall(constructor='XMLSerializer', demands=[], returns='XMLSerializer'),
    ],
    "serializeToString": [
        PrototypeCall(constructor='XMLSerializer', fn='serializeToString', demands=['XMLSerializer', 'Node'], returns='str'),
    ],
    "setAppBadge": [
        PrototypeCall(constructor='Navigator', fn='setAppBadge', demands=['Navigator'], returns='None'),
        PrototypeCall(constructor='Navigator', fn='setAppBadge', demands=['Navigator', 'int'], returns='None'),
        PrototypeCall(constructor='WorkerNavigator', fn='setAppBadge', demands=['WorkerNavigator'], returns='None'),
        PrototypeCall(constructor='WorkerNavigator', fn='setAppBadge', demands=['WorkerNavigator', 'int'], returns='None'),
    ],
    "clearAppBadge": [
        PrototypeCall(constructor='Navigator', fn='clearAppBadge', demands=['Navigator'], returns='None'),
        PrototypeCall(constructor='WorkerNavigator', fn='clearAppBadge', demands=['WorkerNavigator'], returns='None'),
    ],
    "taintEnabled": [
        PrototypeCall(constructor='Navigator', fn='taintEnabled', demands=['Navigator'], returns='bool'),
        PrototypeCall(constructor='WorkerNavigator', fn='taintEnabled', demands=['WorkerNavigator'], returns='bool'),
    ],
    "registerProtocolHandler": [
        PrototypeCall(constructor='Navigator', fn='registerProtocolHandler', demands=['Navigator', 'str', 'str'], returns='None'),
    ],
    "unregisterProtocolHandler": [
        PrototypeCall(constructor='Navigator', fn='unregisterProtocolHandler', demands=['Navigator', 'str', 'str'], returns='None'),
    ],
    "javaEnabled": [
        PrototypeCall(constructor='Navigator', fn='javaEnabled', demands=['Navigator'], returns='bool'),
    ],
    "refresh": [
        PrototypeCall(constructor='PluginArray', fn='refresh', demands=['PluginArray'], returns='None'),
    ],
    "suffixes": [
        FieldCall(field='suffixes', demands=['MimeType'], returns='str'),
    ],
    "enabledPlugin": [
        FieldCall(field='enabledPlugin', demands=['MimeType'], returns='Plugin'),
    ],
    "ImageData": [
        NewCall(constructor='ImageData', demands=['int', 'int'], returns='ImageData'),
        NewCall(constructor='ImageData', demands=['int', 'int', 'dict'], returns='ImageData'),
        NewCall(constructor='ImageData', demands=['ImageDataArray', 'int'], returns='ImageData'),
        NewCall(constructor='ImageData', demands=['ImageDataArray', 'int', 'int'], returns='ImageData'),
        NewCall(constructor='ImageData', demands=['ImageDataArray', 'int', 'int', 'dict'], returns='ImageData'),
    ],
    "pixelFormat": [
        FieldCall(field='pixelFormat', demands=['ImageData'], returns='ImageDataPixelFormat'),
    ],
    "MessageEvent": [
        NewCall(constructor='MessageEvent', demands=['str'], returns='MessageEvent'),
        NewCall(constructor='MessageEvent', demands=['str', 'dict'], returns='MessageEvent'),
    ],
    "initMessageEvent": [
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str', 'MessageEventSource'], returns='None'),
        PrototypeCall(constructor='MessageEvent', fn='initMessageEvent', demands=['MessageEvent', 'str', 'bool', 'bool', '*', 'str', 'str', 'MessageEventSource', 'MessagePort'], returns='None'),
    ],
    "EventSource": [
        NewCall(constructor='EventSource', demands=['str'], returns='EventSource'),
        NewCall(constructor='EventSource', demands=['str', 'dict'], returns='EventSource'),
    ],
    "withCredentials": [
        FieldCall(field='withCredentials', demands=['EventSource'], returns='bool'),
        FieldCall(field='withCredentials', demands=['XMLHttpRequest'], returns='bool'),
        FieldCall(field='withCredentials', demands=['XMLHttpRequest', 'bool'], returns='bool'),
    ],
    "MessageChannel": [
        NewCall(constructor='MessageChannel', demands=[], returns='MessageChannel'),
    ],
    "port1": [
        FieldCall(field='port1', demands=['MessageChannel'], returns='MessagePort'),
    ],
    "port2": [
        FieldCall(field='port2', demands=['MessageChannel'], returns='MessagePort'),
    ],
    "importScripts": [
        PrototypeCall(constructor='WorkerGlobalScope', fn='importScripts', demands=['WorkerGlobalScope', 'TrustedScriptURL'], returns='None'),
        PrototypeCall(constructor='WorkerGlobalScope', fn='importScripts', demands=['WorkerGlobalScope', 'str'], returns='None'),
    ],
    "onlanguagechange": [
        FieldCall(field='onlanguagechange', demands=['WorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onlanguagechange', demands=['WorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "onoffline": [
        FieldCall(field='onoffline', demands=['WorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onoffline', demands=['WorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "ononline": [
        FieldCall(field='ononline', demands=['WorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='ononline', demands=['WorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "onrejectionhandled": [
        FieldCall(field='onrejectionhandled', demands=['WorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onrejectionhandled', demands=['WorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "onunhandledrejection": [
        FieldCall(field='onunhandledrejection', demands=['WorkerGlobalScope'], returns='EventHandler'),
        FieldCall(field='onunhandledrejection', demands=['WorkerGlobalScope', 'EventHandler'], returns='EventHandler'),
    ],
    "Worker": [
        NewCall(constructor='Worker', demands=['TrustedScriptURL'], returns='Worker'),
        NewCall(constructor='Worker', demands=['TrustedScriptURL', 'dict'], returns='Worker'),
    ],
    "terminate": [
        PrototypeCall(constructor='Worker', fn='terminate', demands=['Worker'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='terminate', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='PresentationConnection', fn='terminate', demands=['PresentationConnection'], returns='None'),
    ],
    "addModule": [
        PrototypeCall(constructor='Worklet', fn='addModule', demands=['Worklet', 'str'], returns='None'),
        PrototypeCall(constructor='Worklet', fn='addModule', demands=['Worklet', 'str', 'dict'], returns='None'),
    ],
    "getItem": [
        PrototypeCall(constructor='Storage', fn='getItem', demands=['Storage', 'str'], returns='str'),
        PrototypeCall(constructor='SVGNumberList', fn='getItem', demands=['SVGNumberList', 'int'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='getItem', demands=['SVGLengthList', 'int'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='getItem', demands=['SVGStringList', 'int'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='getItem', demands=['SVGTransformList', 'int'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='getItem', demands=['SVGPointList', 'int'], returns='DOMPoint'),
    ],
    "setItem": [
        PrototypeCall(constructor='Storage', fn='setItem', demands=['Storage', 'str', 'str'], returns='None'),
    ],
    "removeItem": [
        PrototypeCall(constructor='Storage', fn='removeItem', demands=['Storage', 'str'], returns='None'),
        PrototypeCall(constructor='SVGNumberList', fn='removeItem', demands=['SVGNumberList', 'int'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='removeItem', demands=['SVGLengthList', 'int'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='removeItem', demands=['SVGStringList', 'int'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='removeItem', demands=['SVGTransformList', 'int'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='removeItem', demands=['SVGPointList', 'int'], returns='DOMPoint'),
    ],
    "StorageEvent": [
        NewCall(constructor='StorageEvent', demands=['str'], returns='StorageEvent'),
        NewCall(constructor='StorageEvent', demands=['str', 'dict'], returns='StorageEvent'),
    ],
    "oldValue": [
        FieldCall(field='oldValue', demands=['StorageEvent'], returns='str'),
        FieldCall(field='oldValue', demands=['MutationRecord'], returns='str'),
    ],
    "newValue": [
        FieldCall(field='newValue', demands=['StorageEvent'], returns='str'),
    ],
    "storageArea": [
        FieldCall(field='storageArea', demands=['StorageEvent'], returns='Storage'),
    ],
    "initStorageEvent": [
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='StorageEvent', fn='initStorageEvent', demands=['StorageEvent', 'str', 'bool', 'bool', 'str', 'str', 'str', 'str', 'Storage'], returns='None'),
    ],
    "HTMLMarqueeElement": [
        NewCall(constructor='HTMLMarqueeElement', demands=[], returns='HTMLMarqueeElement'),
    ],
    "behavior": [
        FieldCall(field='behavior', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='behavior', demands=['HTMLMarqueeElement', 'str'], returns='str'),
        FieldCall(field='behavior', demands=['AnimationTrigger'], returns='AnimationTriggerBehavior'),
        FieldCall(field='behavior', demands=['AnimationTrigger', 'AnimationTriggerBehavior'], returns='AnimationTriggerBehavior'),
    ],
    "bgColor": [
        FieldCall(field='bgColor', demands=['HTMLMarqueeElement'], returns='str'),
        FieldCall(field='bgColor', demands=['HTMLMarqueeElement', 'str'], returns='str'),
    ],
    "hspace": [
        FieldCall(field='hspace', demands=['HTMLMarqueeElement'], returns='int'),
        FieldCall(field='hspace', demands=['HTMLMarqueeElement', 'int'], returns='int'),
    ],
    "scrollAmount": [
        FieldCall(field='scrollAmount', demands=['HTMLMarqueeElement'], returns='int'),
        FieldCall(field='scrollAmount', demands=['HTMLMarqueeElement', 'int'], returns='int'),
    ],
    "scrollDelay": [
        FieldCall(field='scrollDelay', demands=['HTMLMarqueeElement'], returns='int'),
        FieldCall(field='scrollDelay', demands=['HTMLMarqueeElement', 'int'], returns='int'),
    ],
    "trueSpeed": [
        FieldCall(field='trueSpeed', demands=['HTMLMarqueeElement'], returns='bool'),
        FieldCall(field='trueSpeed', demands=['HTMLMarqueeElement', 'bool'], returns='bool'),
    ],
    "vspace": [
        FieldCall(field='vspace', demands=['HTMLMarqueeElement'], returns='int'),
        FieldCall(field='vspace', demands=['HTMLMarqueeElement', 'int'], returns='int'),
    ],
    "HTMLFrameSetElement": [
        NewCall(constructor='HTMLFrameSetElement', demands=[], returns='HTMLFrameSetElement'),
    ],
    "HTMLFrameElement": [
        NewCall(constructor='HTMLFrameElement', demands=[], returns='HTMLFrameElement'),
    ],
    "scrolling": [
        FieldCall(field='scrolling', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='scrolling', demands=['HTMLFrameElement', 'str'], returns='str'),
    ],
    "frameBorder": [
        FieldCall(field='frameBorder', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='frameBorder', demands=['HTMLFrameElement', 'str'], returns='str'),
    ],
    "longDesc": [
        FieldCall(field='longDesc', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='longDesc', demands=['HTMLFrameElement', 'str'], returns='str'),
    ],
    "noResize": [
        FieldCall(field='noResize', demands=['HTMLFrameElement'], returns='bool'),
        FieldCall(field='noResize', demands=['HTMLFrameElement', 'bool'], returns='bool'),
    ],
    "marginHeight": [
        FieldCall(field='marginHeight', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='marginHeight', demands=['HTMLFrameElement', 'str'], returns='str'),
    ],
    "marginWidth": [
        FieldCall(field='marginWidth', demands=['HTMLFrameElement'], returns='str'),
        FieldCall(field='marginWidth', demands=['HTMLFrameElement', 'str'], returns='str'),
    ],
    "HTMLDirectoryElement": [
        NewCall(constructor='HTMLDirectoryElement', demands=[], returns='HTMLDirectoryElement'),
    ],
    "HTMLFontElement": [
        NewCall(constructor='HTMLFontElement', demands=[], returns='HTMLFontElement'),
    ],
    "color": [
        FieldCall(field='color', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='color', demands=['HTMLFontElement', 'str'], returns='str'),
    ],
    "face": [
        FieldCall(field='face', demands=['HTMLFontElement'], returns='str'),
        FieldCall(field='face', demands=['HTMLFontElement', 'str'], returns='str'),
    ],
    "HTMLParamElement": [
        NewCall(constructor='HTMLParamElement', demands=[], returns='HTMLParamElement'),
    ],
    "valueType": [
        FieldCall(field='valueType', demands=['HTMLParamElement'], returns='str'),
        FieldCall(field='valueType', demands=['HTMLParamElement', 'str'], returns='str'),
    ],
    "AddSearchProvider": [
        PrototypeCall(constructor='External', fn='AddSearchProvider', demands=['External'], returns='None'),
    ],
    "IsSearchProviderInstalled": [
        PrototypeCall(constructor='External', fn='IsSearchProviderInstalled', demands=['External'], returns='None'),
    ],
    "isInputPending": [
        PrototypeCall(constructor='Scheduling', fn='isInputPending', demands=['Scheduling'], returns='bool'),
        PrototypeCall(constructor='Scheduling', fn='isInputPending', demands=['Scheduling', 'dict'], returns='bool'),
    ],
    "EditContext": [
        NewCall(constructor='EditContext', demands=[], returns='EditContext'),
        NewCall(constructor='EditContext', demands=['dict'], returns='EditContext'),
    ],
    "updateText": [
        PrototypeCall(constructor='EditContext', fn='updateText', demands=['EditContext', 'int', 'int', 'str'], returns='None'),
    ],
    "updateSelection": [
        PrototypeCall(constructor='EditContext', fn='updateSelection', demands=['EditContext', 'int', 'int'], returns='None'),
    ],
    "updateControlBounds": [
        PrototypeCall(constructor='EditContext', fn='updateControlBounds', demands=['EditContext', 'DOMRect'], returns='None'),
    ],
    "updateSelectionBounds": [
        PrototypeCall(constructor='EditContext', fn='updateSelectionBounds', demands=['EditContext', 'DOMRect'], returns='None'),
    ],
    "updateCharacterBounds": [
        PrototypeCall(constructor='EditContext', fn='updateCharacterBounds', demands=['EditContext', 'int', 'DOMRect'], returns='None'),
    ],
    "attachedElements": [
        PrototypeCall(constructor='EditContext', fn='attachedElements', demands=['EditContext'], returns='HTMLElement'),
    ],
    "characterBoundsRangeStart": [
        FieldCall(field='characterBoundsRangeStart', demands=['EditContext'], returns='int'),
    ],
    "characterBounds": [
        PrototypeCall(constructor='EditContext', fn='characterBounds', demands=['EditContext'], returns='DOMRect'),
    ],
    "ontextupdate": [
        FieldCall(field='ontextupdate', demands=['EditContext'], returns='EventHandler'),
        FieldCall(field='ontextupdate', demands=['EditContext', 'EventHandler'], returns='EventHandler'),
    ],
    "ontextformatupdate": [
        FieldCall(field='ontextformatupdate', demands=['EditContext'], returns='EventHandler'),
        FieldCall(field='ontextformatupdate', demands=['EditContext', 'EventHandler'], returns='EventHandler'),
    ],
    "oncharacterboundsupdate": [
        FieldCall(field='oncharacterboundsupdate', demands=['EditContext'], returns='EventHandler'),
        FieldCall(field='oncharacterboundsupdate', demands=['EditContext', 'EventHandler'], returns='EventHandler'),
    ],
    "oncompositionstart": [
        FieldCall(field='oncompositionstart', demands=['EditContext'], returns='EventHandler'),
        FieldCall(field='oncompositionstart', demands=['EditContext', 'EventHandler'], returns='EventHandler'),
    ],
    "oncompositionend": [
        FieldCall(field='oncompositionend', demands=['EditContext'], returns='EventHandler'),
        FieldCall(field='oncompositionend', demands=['EditContext', 'EventHandler'], returns='EventHandler'),
    ],
    "TextUpdateEvent": [
        NewCall(constructor='TextUpdateEvent', demands=['str'], returns='TextUpdateEvent'),
        NewCall(constructor='TextUpdateEvent', demands=['str', 'dict'], returns='TextUpdateEvent'),
    ],
    "updateRangeStart": [
        FieldCall(field='updateRangeStart', demands=['TextUpdateEvent'], returns='int'),
    ],
    "updateRangeEnd": [
        FieldCall(field='updateRangeEnd', demands=['TextUpdateEvent'], returns='int'),
    ],
    "TextFormat": [
        NewCall(constructor='TextFormat', demands=[], returns='TextFormat'),
        NewCall(constructor='TextFormat', demands=['dict'], returns='TextFormat'),
    ],
    "rangeStart": [
        FieldCall(field='rangeStart', demands=['TextFormat'], returns='int'),
        FieldCall(field='rangeStart', demands=['CharacterBoundsUpdateEvent'], returns='int'),
        FieldCall(field='rangeStart', demands=['AnimationTrigger'], returns='*'),
        FieldCall(field='rangeStart', demands=['AnimationTrigger', '*'], returns='*'),
    ],
    "rangeEnd": [
        FieldCall(field='rangeEnd', demands=['TextFormat'], returns='int'),
        FieldCall(field='rangeEnd', demands=['CharacterBoundsUpdateEvent'], returns='int'),
        FieldCall(field='rangeEnd', demands=['AnimationTrigger'], returns='*'),
        FieldCall(field='rangeEnd', demands=['AnimationTrigger', '*'], returns='*'),
    ],
    "underlineStyle": [
        FieldCall(field='underlineStyle', demands=['TextFormat'], returns='UnderlineStyle'),
    ],
    "underlineThickness": [
        FieldCall(field='underlineThickness', demands=['TextFormat'], returns='UnderlineThickness'),
    ],
    "TextFormatUpdateEvent": [
        NewCall(constructor='TextFormatUpdateEvent', demands=['str'], returns='TextFormatUpdateEvent'),
        NewCall(constructor='TextFormatUpdateEvent', demands=['str', 'dict'], returns='TextFormatUpdateEvent'),
    ],
    "getTextFormats": [
        PrototypeCall(constructor='TextFormatUpdateEvent', fn='getTextFormats', demands=['TextFormatUpdateEvent'], returns='TextFormat'),
    ],
    "CharacterBoundsUpdateEvent": [
        NewCall(constructor='CharacterBoundsUpdateEvent', demands=['str'], returns='CharacterBoundsUpdateEvent'),
        NewCall(constructor='CharacterBoundsUpdateEvent', demands=['str', 'dict'], returns='CharacterBoundsUpdateEvent'),
    ],
    "anchorSpace": [
        FieldCall(field='anchorSpace', demands=['XRAnchor'], returns='XRSpace'),
    ],
    "requestPersistentHandle": [
        PrototypeCall(constructor='XRAnchor', fn='requestPersistentHandle', demands=['XRAnchor'], returns='str'),
    ],
    "sendGroup": [
        FieldCall(field='sendGroup', demands=['WebTransportDatagramsWritable'], returns='WebTransportSendGroup'),
        FieldCall(field='sendGroup', demands=['WebTransportDatagramsWritable', 'WebTransportSendGroup'], returns='WebTransportSendGroup'),
        FieldCall(field='sendGroup', demands=['WebTransportSendStream'], returns='WebTransportSendGroup'),
        FieldCall(field='sendGroup', demands=['WebTransportSendStream', 'WebTransportSendGroup'], returns='WebTransportSendGroup'),
    ],
    "sendOrder": [
        FieldCall(field='sendOrder', demands=['WebTransportDatagramsWritable'], returns='long long'),
        FieldCall(field='sendOrder', demands=['WebTransportDatagramsWritable', 'long long'], returns='long long'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStream'], returns='long long'),
        FieldCall(field='sendOrder', demands=['WebTransportSendStream', 'long long'], returns='long long'),
    ],
    "createWritable": [
        PrototypeCall(constructor='WebTransportDatagramDuplexStream', fn='createWritable', demands=['WebTransportDatagramDuplexStream'], returns='WebTransportDatagramsWritable'),
        PrototypeCall(constructor='WebTransportDatagramDuplexStream', fn='createWritable', demands=['WebTransportDatagramDuplexStream', 'dict'], returns='WebTransportDatagramsWritable'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='createWritable', demands=['FileSystemFileHandle'], returns='FileSystemWritableFileStream'),
        PrototypeCall(constructor='FileSystemFileHandle', fn='createWritable', demands=['FileSystemFileHandle', 'dict'], returns='FileSystemWritableFileStream'),
    ],
    "maxDatagramSize": [
        FieldCall(field='maxDatagramSize', demands=['WebTransportDatagramDuplexStream'], returns='int'),
    ],
    "incomingMaxAge": [
        FieldCall(field='incomingMaxAge', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='incomingMaxAge', demands=['WebTransportDatagramDuplexStream', 'float'], returns='float'),
    ],
    "outgoingMaxAge": [
        FieldCall(field='outgoingMaxAge', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='outgoingMaxAge', demands=['WebTransportDatagramDuplexStream', 'float'], returns='float'),
    ],
    "incomingHighWaterMark": [
        FieldCall(field='incomingHighWaterMark', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='incomingHighWaterMark', demands=['WebTransportDatagramDuplexStream', 'float'], returns='float'),
    ],
    "outgoingHighWaterMark": [
        FieldCall(field='outgoingHighWaterMark', demands=['WebTransportDatagramDuplexStream'], returns='float'),
        FieldCall(field='outgoingHighWaterMark', demands=['WebTransportDatagramDuplexStream', 'float'], returns='float'),
    ],
    "WebTransport": [
        NewCall(constructor='WebTransport', demands=['str'], returns='WebTransport'),
        NewCall(constructor='WebTransport', demands=['str', 'dict'], returns='WebTransport'),
    ],
    "exportKeyingMaterial": [
        PrototypeCall(constructor='WebTransport', fn='exportKeyingMaterial', demands=['WebTransport', 'BufferSource'], returns='ArrayBuffer'),
        PrototypeCall(constructor='WebTransport', fn='exportKeyingMaterial', demands=['WebTransport', 'BufferSource', 'BufferSource'], returns='ArrayBuffer'),
    ],
    "reliability": [
        FieldCall(field='reliability', demands=['WebTransport'], returns='WebTransportReliabilityMode'),
    ],
    "congestionControl": [
        FieldCall(field='congestionControl', demands=['WebTransport'], returns='WebTransportCongestionControl'),
    ],
    "anticipatedConcurrentIncomingUnidirectionalStreams": [
        FieldCall(field='anticipatedConcurrentIncomingUnidirectionalStreams', demands=['WebTransport'], returns='unsigned short'),
        FieldCall(field='anticipatedConcurrentIncomingUnidirectionalStreams', demands=['WebTransport', 'unsigned short'], returns='unsigned short'),
    ],
    "anticipatedConcurrentIncomingBidirectionalStreams": [
        FieldCall(field='anticipatedConcurrentIncomingBidirectionalStreams', demands=['WebTransport'], returns='unsigned short'),
        FieldCall(field='anticipatedConcurrentIncomingBidirectionalStreams', demands=['WebTransport', 'unsigned short'], returns='unsigned short'),
    ],
    "draining": [
        FieldCall(field='draining', demands=['WebTransport'], returns='None'),
    ],
    "datagrams": [
        FieldCall(field='datagrams', demands=['WebTransport'], returns='WebTransportDatagramDuplexStream'),
    ],
    "createBidirectionalStream": [
        PrototypeCall(constructor='WebTransport', fn='createBidirectionalStream', demands=['WebTransport'], returns='WebTransportBidirectionalStream'),
        PrototypeCall(constructor='WebTransport', fn='createBidirectionalStream', demands=['WebTransport', 'dict'], returns='WebTransportBidirectionalStream'),
    ],
    "incomingBidirectionalStreams": [
        FieldCall(field='incomingBidirectionalStreams', demands=['WebTransport'], returns='ReadableStream'),
    ],
    "createUnidirectionalStream": [
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport'], returns='WebTransportSendStream'),
        PrototypeCall(constructor='WebTransport', fn='createUnidirectionalStream', demands=['WebTransport', 'dict'], returns='WebTransportSendStream'),
    ],
    "incomingUnidirectionalStreams": [
        FieldCall(field='incomingUnidirectionalStreams', demands=['WebTransport'], returns='ReadableStream'),
    ],
    "createSendGroup": [
        PrototypeCall(constructor='WebTransport', fn='createSendGroup', demands=['WebTransport'], returns='WebTransportSendGroup'),
    ],
    "supportsReliableOnly": [
        FieldCall(field='supportsReliableOnly', demands=['WebTransport'], returns='bool'),
    ],
    "getWriter": [
        PrototypeCall(constructor='WebTransportSendStream', fn='getWriter', demands=['WebTransportSendStream'], returns='WebTransportWriter'),
        PrototypeCall(constructor='WritableStream', fn='getWriter', demands=['WritableStream'], returns='WritableStreamDefaultWriter'),
    ],
    "atomicWrite": [
        PrototypeCall(constructor='WebTransportWriter', fn='atomicWrite', demands=['WebTransportWriter'], returns='None'),
        PrototypeCall(constructor='WebTransportWriter', fn='atomicWrite', demands=['WebTransportWriter', '*'], returns='None'),
    ],
    "WebTransportError": [
        NewCall(constructor='WebTransportError', demands=[], returns='WebTransportError'),
        NewCall(constructor='WebTransportError', demands=['str'], returns='WebTransportError'),
        NewCall(constructor='WebTransportError', demands=['str', 'dict'], returns='WebTransportError'),
    ],
    "streamErrorCode": [
        FieldCall(field='streamErrorCode', demands=['WebTransportError'], returns='int'),
    ],
    "ScrollTimeline": [
        NewCall(constructor='ScrollTimeline', demands=[], returns='ScrollTimeline'),
        NewCall(constructor='ScrollTimeline', demands=['dict'], returns='ScrollTimeline'),
    ],
    "axis": [
        FieldCall(field='axis', demands=['ScrollTimeline'], returns='ScrollAxis'),
        FieldCall(field='axis', demands=['PointerTimeline'], returns='PointerAxis'),
    ],
    "ViewTimeline": [
        NewCall(constructor='ViewTimeline', demands=[], returns='ViewTimeline'),
        NewCall(constructor='ViewTimeline', demands=['dict'], returns='ViewTimeline'),
    ],
    "startOffset": [
        FieldCall(field='startOffset', demands=['ViewTimeline'], returns='CSSNumericValue'),
        FieldCall(field='startOffset', demands=['SVGTextPathElement'], returns='SVGAnimatedLength'),
        FieldCall(field='startOffset', demands=['AbstractRange'], returns='int'),
    ],
    "endOffset": [
        FieldCall(field='endOffset', demands=['ViewTimeline'], returns='CSSNumericValue'),
        FieldCall(field='endOffset', demands=['AbstractRange'], returns='int'),
    ],
    "IntersectionObserver": [
        NewCall(constructor='IntersectionObserver', demands=['IntersectionObserverCallback'], returns='IntersectionObserver'),
        NewCall(constructor='IntersectionObserver', demands=['IntersectionObserverCallback', 'dict'], returns='IntersectionObserver'),
    ],
    "rootMargin": [
        FieldCall(field='rootMargin', demands=['IntersectionObserver'], returns='str'),
    ],
    "scrollMargin": [
        FieldCall(field='scrollMargin', demands=['IntersectionObserver'], returns='str'),
    ],
    "thresholds": [
        FieldCall(field='thresholds', demands=['IntersectionObserver'], returns='float'),
    ],
    "delay": [
        FieldCall(field='delay', demands=['IntersectionObserver'], returns='int'),
    ],
    "trackVisibility": [
        FieldCall(field='trackVisibility', demands=['IntersectionObserver'], returns='bool'),
    ],
    "unobserve": [
        PrototypeCall(constructor='IntersectionObserver', fn='unobserve', demands=['IntersectionObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='ResizeObserver', fn='unobserve', demands=['ResizeObserver', 'Element'], returns='None'),
        PrototypeCall(constructor='PressureObserver', fn='unobserve', demands=['PressureObserver', 'PressureSource'], returns='None'),
    ],
    "IntersectionObserverEntry": [
        NewCall(constructor='IntersectionObserverEntry', demands=['dict'], returns='IntersectionObserverEntry'),
    ],
    "time": [
        FieldCall(field='time', demands=['IntersectionObserverEntry'], returns='float'),
        FieldCall(field='time', demands=['PressureRecord'], returns='float'),
    ],
    "rootBounds": [
        FieldCall(field='rootBounds', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "boundingClientRect": [
        FieldCall(field='boundingClientRect', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "intersectionRect": [
        FieldCall(field='intersectionRect', demands=['IntersectionObserverEntry'], returns='DOMRectReadOnly'),
        FieldCall(field='intersectionRect', demands=['PerformanceElementTiming'], returns='DOMRectReadOnly'),
    ],
    "isIntersecting": [
        FieldCall(field='isIntersecting', demands=['IntersectionObserverEntry'], returns='bool'),
    ],
    "isVisible": [
        FieldCall(field='isVisible', demands=['IntersectionObserverEntry'], returns='bool'),
    ],
    "intersectionRatio": [
        FieldCall(field='intersectionRatio', demands=['IntersectionObserverEntry'], returns='float'),
    ],
    "rtcIdentityProvider": [
        FieldCall(field='rtcIdentityProvider', demands=['RTCIdentityProviderGlobalScope'], returns='RTCIdentityProviderRegistrar'),
    ],
    "RTCIdentityAssertion": [
        NewCall(constructor='RTCIdentityAssertion', demands=['str', 'str'], returns='RTCIdentityAssertion'),
    ],
    "idp": [
        FieldCall(field='idp', demands=['RTCIdentityAssertion'], returns='str'),
        FieldCall(field='idp', demands=['RTCIdentityAssertion', 'str'], returns='str'),
    ],
    "loseContext": [
        PrototypeCall(constructor='WEBGL_lose_context', fn='loseContext', demands=['WEBGL_lose_context'], returns='None'),
    ],
    "restoreContext": [
        PrototypeCall(constructor='WEBGL_lose_context', fn='restoreContext', demands=['WEBGL_lose_context'], returns='None'),
    ],
    "parseAll": [
        DirectCall(fn='parseAll', receiver='CSSStyleValue', demands=['str', 'str'], returns='CSSStyleValue'),
    ],
    "CSSUnparsedValue": [
        NewCall(constructor='CSSUnparsedValue', demands=['CSSUnparsedSegment'], returns='CSSUnparsedValue'),
    ],
    "CSSVariableReferenceValue": [
        NewCall(constructor='CSSVariableReferenceValue', demands=['str'], returns='CSSVariableReferenceValue'),
        NewCall(constructor='CSSVariableReferenceValue', demands=['str', 'CSSUnparsedValue'], returns='CSSVariableReferenceValue'),
    ],
    "variable": [
        FieldCall(field='variable', demands=['CSSVariableReferenceValue'], returns='str'),
        FieldCall(field='variable', demands=['CSSVariableReferenceValue', 'str'], returns='str'),
    ],
    "fallback": [
        FieldCall(field='fallback', demands=['CSSVariableReferenceValue'], returns='CSSUnparsedValue'),
        FieldCall(field='fallback', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='fallback', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "CSSKeywordValue": [
        NewCall(constructor='CSSKeywordValue', demands=['str'], returns='CSSKeywordValue'),
    ],
    "sub": [
        PrototypeCall(constructor='CSSNumericValue', fn='sub', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
    ],
    "mul": [
        PrototypeCall(constructor='CSSNumericValue', fn='mul', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
    ],
    "div": [
        PrototypeCall(constructor='CSSNumericValue', fn='div', demands=['CSSNumericValue', 'CSSNumberish'], returns='CSSNumericValue'),
    ],
    "equals": [
        PrototypeCall(constructor='CSSNumericValue', fn='equals', demands=['CSSNumericValue', 'CSSNumberish'], returns='bool'),
    ],
    "to": [
        PrototypeCall(constructor='CSSNumericValue', fn='to', demands=['CSSNumericValue', 'str'], returns='CSSUnitValue'),
    ],
    "toSum": [
        PrototypeCall(constructor='CSSNumericValue', fn='toSum', demands=['CSSNumericValue', 'str'], returns='CSSMathSum'),
    ],
    "CSSUnitValue": [
        NewCall(constructor='CSSUnitValue', demands=['float', 'str'], returns='CSSUnitValue'),
    ],
    "unit": [
        FieldCall(field='unit', demands=['CSSUnitValue'], returns='str'),
    ],
    "operator": [
        FieldCall(field='operator', demands=['CSSMathValue'], returns='CSSMathOperator'),
        FieldCall(field='operator', demands=['SVGFECompositeElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='operator', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedEnumeration'),
    ],
    "CSSMathSum": [
        NewCall(constructor='CSSMathSum', demands=['CSSNumberish'], returns='CSSMathSum'),
    ],
    "values": [
        FieldCall(field='values', demands=['CSSMathSum'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathProduct'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathMin'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['CSSMathMax'], returns='CSSNumericArray'),
        FieldCall(field='values', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedNumberList'),
        FieldCall(field='values', demands=['SVGPathSegment'], returns='float'),
        FieldCall(field='values', demands=['SVGPathSegment', 'float'], returns='float'),
    ],
    "CSSMathProduct": [
        NewCall(constructor='CSSMathProduct', demands=['CSSNumberish'], returns='CSSMathProduct'),
    ],
    "CSSMathNegate": [
        NewCall(constructor='CSSMathNegate', demands=['CSSNumberish'], returns='CSSMathNegate'),
    ],
    "CSSMathInvert": [
        NewCall(constructor='CSSMathInvert', demands=['CSSNumberish'], returns='CSSMathInvert'),
    ],
    "CSSMathMin": [
        NewCall(constructor='CSSMathMin', demands=['CSSNumberish'], returns='CSSMathMin'),
    ],
    "CSSMathMax": [
        NewCall(constructor='CSSMathMax', demands=['CSSNumberish'], returns='CSSMathMax'),
    ],
    "CSSMathClamp": [
        NewCall(constructor='CSSMathClamp', demands=['CSSNumberish', 'CSSNumberish', 'CSSNumberish'], returns='CSSMathClamp'),
    ],
    "CSSTransformValue": [
        NewCall(constructor='CSSTransformValue', demands=['CSSTransformComponent'], returns='CSSTransformValue'),
    ],
    "toMatrix": [
        PrototypeCall(constructor='CSSTransformValue', fn='toMatrix', demands=['CSSTransformValue'], returns='DOMMatrix'),
        PrototypeCall(constructor='CSSTransformComponent', fn='toMatrix', demands=['CSSTransformComponent'], returns='DOMMatrix'),
    ],
    "CSSTranslate": [
        NewCall(constructor='CSSTranslate', demands=['CSSNumericValue', 'CSSNumericValue'], returns='CSSTranslate'),
        NewCall(constructor='CSSTranslate', demands=['CSSNumericValue', 'CSSNumericValue', 'CSSNumericValue'], returns='CSSTranslate'),
    ],
    "CSSRotate": [
        NewCall(constructor='CSSRotate', demands=['CSSNumericValue'], returns='CSSRotate'),
        NewCall(constructor='CSSRotate', demands=['CSSNumberish', 'CSSNumberish', 'CSSNumberish', 'CSSNumericValue'], returns='CSSRotate'),
    ],
    "angle": [
        FieldCall(field='angle', demands=['CSSRotate'], returns='CSSNumericValue'),
        FieldCall(field='angle', demands=['CSSRotate', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='angle', demands=['ScreenOrientation'], returns='unsigned short'),
        FieldCall(field='angle', demands=['SVGTransform'], returns='float'),
    ],
    "CSSScale": [
        NewCall(constructor='CSSScale', demands=['CSSNumberish', 'CSSNumberish'], returns='CSSScale'),
        NewCall(constructor='CSSScale', demands=['CSSNumberish', 'CSSNumberish', 'CSSNumberish'], returns='CSSScale'),
    ],
    "CSSSkew": [
        NewCall(constructor='CSSSkew', demands=['CSSNumericValue', 'CSSNumericValue'], returns='CSSSkew'),
    ],
    "ax": [
        FieldCall(field='ax', demands=['CSSSkew'], returns='CSSNumericValue'),
        FieldCall(field='ax', demands=['CSSSkew', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='ax', demands=['CSSSkewX'], returns='CSSNumericValue'),
        FieldCall(field='ax', demands=['CSSSkewX', 'CSSNumericValue'], returns='CSSNumericValue'),
    ],
    "ay": [
        FieldCall(field='ay', demands=['CSSSkew'], returns='CSSNumericValue'),
        FieldCall(field='ay', demands=['CSSSkew', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='ay', demands=['CSSSkewY'], returns='CSSNumericValue'),
        FieldCall(field='ay', demands=['CSSSkewY', 'CSSNumericValue'], returns='CSSNumericValue'),
    ],
    "CSSSkewX": [
        NewCall(constructor='CSSSkewX', demands=['CSSNumericValue'], returns='CSSSkewX'),
    ],
    "CSSSkewY": [
        NewCall(constructor='CSSSkewY', demands=['CSSNumericValue'], returns='CSSSkewY'),
    ],
    "CSSPerspective": [
        NewCall(constructor='CSSPerspective', demands=['CSSPerspectiveValue'], returns='CSSPerspective'),
    ],
    "CSSMatrixComponent": [
        NewCall(constructor='CSSMatrixComponent', demands=['DOMMatrixReadOnly'], returns='CSSMatrixComponent'),
        NewCall(constructor='CSSMatrixComponent', demands=['DOMMatrixReadOnly', 'dict'], returns='CSSMatrixComponent'),
    ],
    "CSSRGB": [
        NewCall(constructor='CSSRGB', demands=['CSSColorRGBComp', 'CSSColorRGBComp', 'CSSColorRGBComp'], returns='CSSRGB'),
        NewCall(constructor='CSSRGB', demands=['CSSColorRGBComp', 'CSSColorRGBComp', 'CSSColorRGBComp', 'CSSColorPercent'], returns='CSSRGB'),
    ],
    "r": [
        FieldCall(field='r', demands=['CSSRGB'], returns='CSSColorRGBComp'),
        FieldCall(field='r', demands=['CSSRGB', 'CSSColorRGBComp'], returns='CSSColorRGBComp'),
        FieldCall(field='r', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='r', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "g": [
        FieldCall(field='g', demands=['CSSRGB'], returns='CSSColorRGBComp'),
        FieldCall(field='g', demands=['CSSRGB', 'CSSColorRGBComp'], returns='CSSColorRGBComp'),
    ],
    "CSSHSL": [
        NewCall(constructor='CSSHSL', demands=['CSSColorAngle', 'CSSColorPercent', 'CSSColorPercent'], returns='CSSHSL'),
        NewCall(constructor='CSSHSL', demands=['CSSColorAngle', 'CSSColorPercent', 'CSSColorPercent', 'CSSColorPercent'], returns='CSSHSL'),
    ],
    "h": [
        FieldCall(field='h', demands=['CSSHSL'], returns='CSSColorAngle'),
        FieldCall(field='h', demands=['CSSHSL', 'CSSColorAngle'], returns='CSSColorAngle'),
        FieldCall(field='h', demands=['CSSHWB'], returns='CSSNumericValue'),
        FieldCall(field='h', demands=['CSSHWB', 'CSSNumericValue'], returns='CSSNumericValue'),
        FieldCall(field='h', demands=['CSSLCH'], returns='CSSColorAngle'),
        FieldCall(field='h', demands=['CSSLCH', 'CSSColorAngle'], returns='CSSColorAngle'),
        FieldCall(field='h', demands=['CSSOKLCH'], returns='CSSColorAngle'),
        FieldCall(field='h', demands=['CSSOKLCH', 'CSSColorAngle'], returns='CSSColorAngle'),
    ],
    "s": [
        FieldCall(field='s', demands=['CSSHSL'], returns='CSSColorPercent'),
        FieldCall(field='s', demands=['CSSHSL', 'CSSColorPercent'], returns='CSSColorPercent'),
    ],
    "l": [
        FieldCall(field='l', demands=['CSSHSL'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSHSL', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSLab'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSLab', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSLCH'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSOKLab'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSOKLab', 'CSSColorPercent'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSOKLCH'], returns='CSSColorPercent'),
        FieldCall(field='l', demands=['CSSOKLCH', 'CSSColorPercent'], returns='CSSColorPercent'),
    ],
    "CSSHWB": [
        NewCall(constructor='CSSHWB', demands=['CSSNumericValue', 'CSSNumberish', 'CSSNumberish'], returns='CSSHWB'),
        NewCall(constructor='CSSHWB', demands=['CSSNumericValue', 'CSSNumberish', 'CSSNumberish', 'CSSNumberish'], returns='CSSHWB'),
    ],
    "CSSLab": [
        NewCall(constructor='CSSLab', demands=['CSSColorPercent', 'CSSColorNumber', 'CSSColorNumber'], returns='CSSLab'),
        NewCall(constructor='CSSLab', demands=['CSSColorPercent', 'CSSColorNumber', 'CSSColorNumber', 'CSSColorPercent'], returns='CSSLab'),
    ],
    "CSSLCH": [
        NewCall(constructor='CSSLCH', demands=['CSSColorPercent', 'CSSColorPercent', 'CSSColorAngle'], returns='CSSLCH'),
        NewCall(constructor='CSSLCH', demands=['CSSColorPercent', 'CSSColorPercent', 'CSSColorAngle', 'CSSColorPercent'], returns='CSSLCH'),
    ],
    "CSSOKLab": [
        NewCall(constructor='CSSOKLab', demands=['CSSColorPercent', 'CSSColorNumber', 'CSSColorNumber'], returns='CSSOKLab'),
        NewCall(constructor='CSSOKLab', demands=['CSSColorPercent', 'CSSColorNumber', 'CSSColorNumber', 'CSSColorPercent'], returns='CSSOKLab'),
    ],
    "CSSOKLCH": [
        NewCall(constructor='CSSOKLCH', demands=['CSSColorPercent', 'CSSColorPercent', 'CSSColorAngle'], returns='CSSOKLCH'),
        NewCall(constructor='CSSOKLCH', demands=['CSSColorPercent', 'CSSColorPercent', 'CSSColorAngle', 'CSSColorPercent'], returns='CSSOKLCH'),
    ],
    "CSSColor": [
        NewCall(constructor='CSSColor', demands=['CSSKeywordish', 'CSSColorPercent'], returns='CSSColor'),
        NewCall(constructor='CSSColor', demands=['CSSKeywordish', 'CSSColorPercent', 'CSSNumberish'], returns='CSSColor'),
    ],
    "channels": [
        FieldCall(field='channels', demands=['CSSColor'], returns='CSSColorPercent'),
        FieldCall(field='channels', demands=['CSSColor', 'CSSColorPercent'], returns='CSSColorPercent'),
    ],
    "CaptureActionEvent": [
        NewCall(constructor='CaptureActionEvent', demands=[], returns='CaptureActionEvent'),
        NewCall(constructor='CaptureActionEvent', demands=['dict'], returns='CaptureActionEvent'),
    ],
    "createVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='createVertexArrayOES', demands=['OES_vertex_array_object'], returns='WebGLVertexArrayObjectOES'),
    ],
    "deleteVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='deleteVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='None'),
    ],
    "isVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='isVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='GLboolean'),
    ],
    "bindVertexArrayOES": [
        PrototypeCall(constructor='OES_vertex_array_object', fn='bindVertexArrayOES', demands=['OES_vertex_array_object', 'WebGLVertexArrayObjectOES'], returns='None'),
    ],
    "ContentVisibilityAutoStateChangeEvent": [
        NewCall(constructor='ContentVisibilityAutoStateChangeEvent', demands=['str'], returns='ContentVisibilityAutoStateChangeEvent'),
        NewCall(constructor='ContentVisibilityAutoStateChangeEvent', demands=['str', 'dict'], returns='ContentVisibilityAutoStateChangeEvent'),
    ],
    "skipped": [
        FieldCall(field='skipped', demands=['ContentVisibilityAutoStateChangeEvent'], returns='bool'),
    ],
    "PerformanceMark": [
        NewCall(constructor='PerformanceMark', demands=['str'], returns='PerformanceMark'),
        NewCall(constructor='PerformanceMark', demands=['str', 'dict'], returns='PerformanceMark'),
    ],
    "overset": [
        FieldCall(field='overset', demands=['NamedFlow'], returns='bool'),
    ],
    "getRegions": [
        PrototypeCall(constructor='NamedFlow', fn='getRegions', demands=['NamedFlow'], returns='Element'),
    ],
    "firstEmptyRegionIndex": [
        FieldCall(field='firstEmptyRegionIndex', demands=['NamedFlow'], returns='short'),
    ],
    "getContent": [
        PrototypeCall(constructor='NamedFlow', fn='getContent', demands=['NamedFlow'], returns='Node'),
    ],
    "getRegionsByContent": [
        PrototypeCall(constructor='NamedFlow', fn='getRegionsByContent', demands=['NamedFlow', 'Node'], returns='Element'),
    ],
    "unloadEventStart": [
        FieldCall(field='unloadEventStart', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='unloadEventStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "unloadEventEnd": [
        FieldCall(field='unloadEventEnd', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='unloadEventEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "domInteractive": [
        FieldCall(field='domInteractive', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='domInteractive', demands=['PerformanceTiming'], returns='int'),
    ],
    "domContentLoadedEventStart": [
        FieldCall(field='domContentLoadedEventStart', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='domContentLoadedEventStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "domContentLoadedEventEnd": [
        FieldCall(field='domContentLoadedEventEnd', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='domContentLoadedEventEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "domComplete": [
        FieldCall(field='domComplete', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='domComplete', demands=['PerformanceTiming'], returns='int'),
    ],
    "loadEventStart": [
        FieldCall(field='loadEventStart', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='loadEventStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "loadEventEnd": [
        FieldCall(field='loadEventEnd', demands=['PerformanceNavigationTiming'], returns='float'),
        FieldCall(field='loadEventEnd', demands=['PerformanceTiming'], returns='int'),
    ],
    "redirectCount": [
        FieldCall(field='redirectCount', demands=['PerformanceNavigationTiming'], returns='unsigned short'),
        FieldCall(field='redirectCount', demands=['PerformanceNavigation'], returns='unsigned short'),
    ],
    "criticalCHRestart": [
        FieldCall(field='criticalCHRestart', demands=['PerformanceNavigationTiming'], returns='float'),
    ],
    "notRestoredReasons": [
        FieldCall(field='notRestoredReasons', demands=['PerformanceNavigationTiming'], returns='NotRestoredReasons'),
    ],
    "navigationStart": [
        FieldCall(field='navigationStart', demands=['PerformanceTiming'], returns='int'),
    ],
    "domLoading": [
        FieldCall(field='domLoading', demands=['PerformanceTiming'], returns='int'),
    ],
    "framebufferTextureMultiviewOVR": [
        PrototypeCall(constructor='OVR_multiview2', fn='framebufferTextureMultiviewOVR', demands=['OVR_multiview2', 'GLenum', 'GLenum', 'WebGLTexture', 'GLint', 'GLint', 'GLsizei'], returns='None'),
    ],
    "planeSpace": [
        FieldCall(field='planeSpace', demands=['XRPlane'], returns='XRSpace'),
    ],
    "polygon": [
        FieldCall(field='polygon', demands=['XRPlane'], returns='DOMPointReadOnly'),
    ],
    "lastChangedTime": [
        FieldCall(field='lastChangedTime', demands=['XRPlane'], returns='float'),
        FieldCall(field='lastChangedTime', demands=['XRMesh'], returns='float'),
    ],
    "semanticLabel": [
        FieldCall(field='semanticLabel', demands=['XRPlane'], returns='str'),
        FieldCall(field='semanticLabel', demands=['XRMesh'], returns='str'),
    ],
    "annotation": [
        FieldCall(field='annotation', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "ornaments": [
        FieldCall(field='ornaments', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "stylistic": [
        FieldCall(field='stylistic', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "swash": [
        FieldCall(field='swash', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "characterVariant": [
        FieldCall(field='characterVariant', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "styleset": [
        FieldCall(field='styleset', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "historicalForms": [
        FieldCall(field='historicalForms', demands=['CSSFontFeatureValuesRule'], returns='CSSFontFeatureValuesMap'),
    ],
    "basePalette": [
        FieldCall(field='basePalette', demands=['CSSFontPaletteValuesRule'], returns='CSSOMString'),
    ],
    "overrideColors": [
        FieldCall(field='overrideColors', demands=['CSSFontPaletteValuesRule'], returns='CSSOMString'),
    ],
    "ImageCapture": [
        NewCall(constructor='ImageCapture', demands=['MediaStreamTrack'], returns='ImageCapture'),
    ],
    "takePhoto": [
        PrototypeCall(constructor='ImageCapture', fn='takePhoto', demands=['ImageCapture'], returns='Blob'),
        PrototypeCall(constructor='ImageCapture', fn='takePhoto', demands=['ImageCapture', 'dict'], returns='Blob'),
    ],
    "getPhotoCapabilities": [
        PrototypeCall(constructor='ImageCapture', fn='getPhotoCapabilities', demands=['ImageCapture'], returns='dict'),
    ],
    "getPhotoSettings": [
        PrototypeCall(constructor='ImageCapture', fn='getPhotoSettings', demands=['ImageCapture'], returns='dict'),
    ],
    "grabFrame": [
        PrototypeCall(constructor='ImageCapture', fn='grabFrame', demands=['ImageCapture'], returns='ImageBitmap'),
    ],
    "meshSpace": [
        FieldCall(field='meshSpace', demands=['XRMesh'], returns='XRSpace'),
    ],
    "vertices": [
        FieldCall(field='vertices', demands=['XRMesh'], returns='Float32Array'),
    ],
    "indices": [
        FieldCall(field='indices', demands=['XRMesh'], returns='Uint32Array'),
    ],
    "lock": [
        PrototypeCall(constructor='Keyboard', fn='lock', demands=['Keyboard'], returns='None'),
        PrototypeCall(constructor='Keyboard', fn='lock', demands=['Keyboard', 'str'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='lock', demands=['ScreenOrientation', 'OrientationLockType'], returns='None'),
    ],
    "unlock": [
        PrototypeCall(constructor='Keyboard', fn='unlock', demands=['Keyboard'], returns='None'),
        PrototypeCall(constructor='ScreenOrientation', fn='unlock', demands=['ScreenOrientation'], returns='None'),
    ],
    "translateStreaming": [
        PrototypeCall(constructor='Translator', fn='translateStreaming', demands=['Translator', 'str'], returns='ReadableStream'),
        PrototypeCall(constructor='Translator', fn='translateStreaming', demands=['Translator', 'str', 'dict'], returns='ReadableStream'),
    ],
    "sourceLanguage": [
        FieldCall(field='sourceLanguage', demands=['Translator'], returns='str'),
    ],
    "targetLanguage": [
        FieldCall(field='targetLanguage', demands=['Translator'], returns='str'),
    ],
    "rangeMin": [
        FieldCall(field='rangeMin', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "rangeMax": [
        FieldCall(field='rangeMax', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "precision": [
        FieldCall(field='precision', demands=['WebGLShaderPrecisionFormat'], returns='GLint'),
    ],
    "WebGLContextEvent": [
        NewCall(constructor='WebGLContextEvent', demands=['str'], returns='WebGLContextEvent'),
        NewCall(constructor='WebGLContextEvent', demands=['str', 'dict'], returns='WebGLContextEvent'),
    ],
    "statusMessage": [
        FieldCall(field='statusMessage', demands=['WebGLContextEvent'], returns='str'),
    ],
    "Magnetometer": [
        NewCall(constructor='Magnetometer', demands=[], returns='Magnetometer'),
        NewCall(constructor='Magnetometer', demands=['dict'], returns='Magnetometer'),
    ],
    "UncalibratedMagnetometer": [
        NewCall(constructor='UncalibratedMagnetometer', demands=[], returns='UncalibratedMagnetometer'),
        NewCall(constructor='UncalibratedMagnetometer', demands=['dict'], returns='UncalibratedMagnetometer'),
    ],
    "xBias": [
        FieldCall(field='xBias', demands=['UncalibratedMagnetometer'], returns='float'),
    ],
    "yBias": [
        FieldCall(field='yBias', demands=['UncalibratedMagnetometer'], returns='float'),
    ],
    "zBias": [
        FieldCall(field='zBias', demands=['UncalibratedMagnetometer'], returns='float'),
    ],
    "onresize": [
        FieldCall(field='onresize', demands=['PictureInPictureWindow'], returns='EventHandler'),
        FieldCall(field='onresize', demands=['PictureInPictureWindow', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onresize', demands=['VisualViewport'], returns='EventHandler'),
        FieldCall(field='onresize', demands=['VisualViewport', 'EventHandler'], returns='EventHandler'),
    ],
    "PictureInPictureEvent": [
        NewCall(constructor='PictureInPictureEvent', demands=['str', 'dict'], returns='PictureInPictureEvent'),
    ],
    "pictureInPictureWindow": [
        FieldCall(field='pictureInPictureWindow', demands=['PictureInPictureEvent'], returns='PictureInPictureWindow'),
    ],
    "setExpires": [
        PrototypeCall(constructor='StorageBucket', fn='setExpires', demands=['StorageBucket', 'float'], returns='None'),
    ],
    "MediaStream": [
        NewCall(constructor='MediaStream', demands=[], returns='MediaStream'),
        NewCall(constructor='MediaStream', demands=['MediaStream'], returns='MediaStream'),
        NewCall(constructor='MediaStream', demands=['MediaStreamTrack'], returns='MediaStream'),
    ],
    "getAudioTracks": [
        PrototypeCall(constructor='MediaStream', fn='getAudioTracks', demands=['MediaStream'], returns='MediaStreamTrack'),
    ],
    "getVideoTracks": [
        PrototypeCall(constructor='MediaStream', fn='getVideoTracks', demands=['MediaStream'], returns='MediaStreamTrack'),
    ],
    "getTracks": [
        PrototypeCall(constructor='MediaStream', fn='getTracks', demands=['MediaStream'], returns='MediaStreamTrack'),
    ],
    "addTrack": [
        PrototypeCall(constructor='MediaStream', fn='addTrack', demands=['MediaStream', 'MediaStreamTrack'], returns='None'),
    ],
    "removeTrack": [
        PrototypeCall(constructor='MediaStream', fn='removeTrack', demands=['MediaStream', 'MediaStreamTrack'], returns='None'),
    ],
    "onmute": [
        FieldCall(field='onmute', demands=['MediaStreamTrack'], returns='EventHandler'),
        FieldCall(field='onmute', demands=['MediaStreamTrack', 'EventHandler'], returns='EventHandler'),
    ],
    "onunmute": [
        FieldCall(field='onunmute', demands=['MediaStreamTrack'], returns='EventHandler'),
        FieldCall(field='onunmute', demands=['MediaStreamTrack', 'EventHandler'], returns='EventHandler'),
    ],
    "onended": [
        FieldCall(field='onended', demands=['MediaStreamTrack'], returns='EventHandler'),
        FieldCall(field='onended', demands=['MediaStreamTrack', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onended', demands=['AudioScheduledSourceNode'], returns='EventHandler'),
        FieldCall(field='onended', demands=['AudioScheduledSourceNode', 'EventHandler'], returns='EventHandler'),
    ],
    "getConstraints": [
        PrototypeCall(constructor='MediaStreamTrack', fn='getConstraints', demands=['MediaStreamTrack'], returns='dict'),
    ],
    "getSettings": [
        PrototypeCall(constructor='MediaStreamTrack', fn='getSettings', demands=['MediaStreamTrack'], returns='dict'),
    ],
    "applyConstraints": [
        PrototypeCall(constructor='MediaStreamTrack', fn='applyConstraints', demands=['MediaStreamTrack'], returns='None'),
        PrototypeCall(constructor='MediaStreamTrack', fn='applyConstraints', demands=['MediaStreamTrack', 'dict'], returns='None'),
    ],
    "MediaStreamTrackEvent": [
        NewCall(constructor='MediaStreamTrackEvent', demands=['str', 'dict'], returns='MediaStreamTrackEvent'),
    ],
    "OverconstrainedError": [
        NewCall(constructor='OverconstrainedError', demands=['str'], returns='OverconstrainedError'),
        NewCall(constructor='OverconstrainedError', demands=['str', 'str'], returns='OverconstrainedError'),
    ],
    "constraint": [
        FieldCall(field='constraint', demands=['OverconstrainedError'], returns='str'),
    ],
    "ondevicechange": [
        FieldCall(field='ondevicechange', demands=['MediaDevices'], returns='EventHandler'),
        FieldCall(field='ondevicechange', demands=['MediaDevices', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='ondevicechange', demands=['XRSystem'], returns='EventHandler'),
        FieldCall(field='ondevicechange', demands=['XRSystem', 'EventHandler'], returns='EventHandler'),
    ],
    "enumerateDevices": [
        PrototypeCall(constructor='MediaDevices', fn='enumerateDevices', demands=['MediaDevices'], returns='MediaDeviceInfo'),
    ],
    "deviceId": [
        FieldCall(field='deviceId', demands=['MediaDeviceInfo'], returns='str'),
    ],
    "groupId": [
        FieldCall(field='groupId', demands=['MediaDeviceInfo'], returns='str'),
    ],
    "DeviceChangeEvent": [
        NewCall(constructor='DeviceChangeEvent', demands=['str'], returns='DeviceChangeEvent'),
        NewCall(constructor='DeviceChangeEvent', demands=['str', 'dict'], returns='DeviceChangeEvent'),
    ],
    "userInsertedDevices": [
        FieldCall(field='userInsertedDevices', demands=['DeviceChangeEvent'], returns='MediaDeviceInfo'),
    ],
    "CapturedMouseEvent": [
        NewCall(constructor='CapturedMouseEvent', demands=['str'], returns='CapturedMouseEvent'),
        NewCall(constructor='CapturedMouseEvent', demands=['str', 'dict'], returns='CapturedMouseEvent'),
    ],
    "surfaceX": [
        FieldCall(field='surfaceX', demands=['CapturedMouseEvent'], returns='int'),
    ],
    "surfaceY": [
        FieldCall(field='surfaceY', demands=['CapturedMouseEvent'], returns='int'),
    ],
    "CaptureController": [
        NewCall(constructor='CaptureController', demands=[], returns='CaptureController'),
    ],
    "setFocusBehavior": [
        PrototypeCall(constructor='CaptureController', fn='setFocusBehavior', demands=['CaptureController', 'CaptureStartFocusBehavior'], returns='None'),
    ],
    "allowsFeature": [
        PrototypeCall(constructor='PermissionsPolicy', fn='allowsFeature', demands=['PermissionsPolicy', 'str'], returns='bool'),
        PrototypeCall(constructor='PermissionsPolicy', fn='allowsFeature', demands=['PermissionsPolicy', 'str', 'str'], returns='bool'),
    ],
    "allowedFeatures": [
        PrototypeCall(constructor='PermissionsPolicy', fn='allowedFeatures', demands=['PermissionsPolicy'], returns='str'),
    ],
    "getAllowlistForFeature": [
        PrototypeCall(constructor='PermissionsPolicy', fn='getAllowlistForFeature', demands=['PermissionsPolicy', 'str'], returns='str'),
    ],
    "AmbientLightSensor": [
        NewCall(constructor='AmbientLightSensor', demands=[], returns='AmbientLightSensor'),
        NewCall(constructor='AmbientLightSensor', demands=['dict'], returns='AmbientLightSensor'),
    ],
    "illuminance": [
        FieldCall(field='illuminance', demands=['AmbientLightSensor'], returns='float'),
    ],
    "onloadstart": [
        FieldCall(field='onloadstart', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onloadstart', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onloadstart', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onloadstart', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
    ],
    "onprogress": [
        FieldCall(field='onprogress', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onprogress', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onprogress', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onprogress', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onprogress', demands=['BackgroundFetchRegistration'], returns='EventHandler'),
        FieldCall(field='onprogress', demands=['BackgroundFetchRegistration', 'EventHandler'], returns='EventHandler'),
    ],
    "onload": [
        FieldCall(field='onload', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onload', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onload', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onload', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
    ],
    "ontimeout": [
        FieldCall(field='ontimeout', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='ontimeout', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
    ],
    "onloadend": [
        FieldCall(field='onloadend', demands=['XMLHttpRequestEventTarget'], returns='EventHandler'),
        FieldCall(field='onloadend', demands=['XMLHttpRequestEventTarget', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onloadend', demands=['FileReader'], returns='EventHandler'),
        FieldCall(field='onloadend', demands=['FileReader', 'EventHandler'], returns='EventHandler'),
    ],
    "XMLHttpRequest": [
        NewCall(constructor='XMLHttpRequest', demands=[], returns='XMLHttpRequest'),
    ],
    "onreadystatechange": [
        FieldCall(field='onreadystatechange', demands=['XMLHttpRequest'], returns='EventHandler'),
        FieldCall(field='onreadystatechange', demands=['XMLHttpRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "setRequestHeader": [
        PrototypeCall(constructor='XMLHttpRequest', fn='setRequestHeader', demands=['XMLHttpRequest', 'str', 'str'], returns='None'),
    ],
    "timeout": [
        FieldCall(field='timeout', demands=['XMLHttpRequest'], returns='int'),
        FieldCall(field='timeout', demands=['XMLHttpRequest', 'int'], returns='int'),
        DirectCall(fn='timeout', receiver='AbortSignal', demands=['int'], returns='AbortSignal'),
    ],
    "upload": [
        FieldCall(field='upload', demands=['XMLHttpRequest'], returns='XMLHttpRequestUpload'),
    ],
    "responseURL": [
        FieldCall(field='responseURL', demands=['XMLHttpRequest'], returns='str'),
    ],
    "getResponseHeader": [
        PrototypeCall(constructor='XMLHttpRequest', fn='getResponseHeader', demands=['XMLHttpRequest', 'str'], returns='str'),
    ],
    "getAllResponseHeaders": [
        PrototypeCall(constructor='XMLHttpRequest', fn='getAllResponseHeaders', demands=['XMLHttpRequest'], returns='str'),
    ],
    "overrideMimeType": [
        PrototypeCall(constructor='XMLHttpRequest', fn='overrideMimeType', demands=['XMLHttpRequest', 'str'], returns='None'),
    ],
    "responseType": [
        FieldCall(field='responseType', demands=['XMLHttpRequest'], returns='XMLHttpRequestResponseType'),
        FieldCall(field='responseType', demands=['XMLHttpRequest', 'XMLHttpRequestResponseType'], returns='XMLHttpRequestResponseType'),
    ],
    "responseText": [
        FieldCall(field='responseText', demands=['XMLHttpRequest'], returns='str'),
    ],
    "responseXML": [
        FieldCall(field='responseXML', demands=['XMLHttpRequest'], returns='Document'),
    ],
    "FormData": [
        NewCall(constructor='FormData', demands=[], returns='FormData'),
        NewCall(constructor='FormData', demands=['HTMLFormElement'], returns='FormData'),
        NewCall(constructor='FormData', demands=['HTMLFormElement', 'HTMLElement'], returns='FormData'),
    ],
    "ProgressEvent": [
        NewCall(constructor='ProgressEvent', demands=['str'], returns='ProgressEvent'),
        NewCall(constructor='ProgressEvent', demands=['str', 'dict'], returns='ProgressEvent'),
    ],
    "lengthComputable": [
        FieldCall(field='lengthComputable', demands=['ProgressEvent'], returns='bool'),
    ],
    "loaded": [
        FieldCall(field='loaded', demands=['ProgressEvent'], returns='float'),
        FieldCall(field='loaded', demands=['FontFace'], returns='FontFace'),
    ],
    "total": [
        FieldCall(field='total', demands=['ProgressEvent'], returns='float'),
        FieldCall(field='total', demands=['PaymentRequestEvent'], returns='object'),
    ],
    "provokingVertexWEBGL": [
        PrototypeCall(constructor='WEBGL_provoking_vertex', fn='provokingVertexWEBGL', demands=['WEBGL_provoking_vertex', 'GLenum'], returns='None'),
    ],
    "conditionText": [
        FieldCall(field='conditionText', demands=['CSSConditionRule'], returns='CSSOMString'),
    ],
    "matches": [
        FieldCall(field='matches', demands=['CSSMediaRule'], returns='bool'),
        FieldCall(field='matches', demands=['CSSSupportsRule'], returns='bool'),
        FieldCall(field='matches', demands=['MediaQueryList'], returns='bool'),
        FieldCall(field='matches', demands=['MediaQueryListEvent'], returns='bool'),
        PrototypeCall(constructor='Element', fn='matches', demands=['Element', 'str'], returns='bool'),
    ],
    "TextDetector": [
        NewCall(constructor='TextDetector', demands=[], returns='TextDetector'),
    ],
    "drawArraysInstancedBaseInstanceWEBGL": [
        PrototypeCall(constructor='WEBGL_draw_instanced_base_vertex_base_instance', fn='drawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'GLsizei', 'GLsizei', 'GLuint'], returns='None'),
    ],
    "drawElementsInstancedBaseVertexBaseInstanceWEBGL": [
        PrototypeCall(constructor='WEBGL_draw_instanced_base_vertex_base_instance', fn='drawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'GLenum', 'GLintptr', 'GLsizei', 'GLint', 'GLuint'], returns='None'),
    ],
    "addListener": [
        PrototypeCall(constructor='MediaQueryList', fn='addListener', demands=['MediaQueryList', 'EventListener'], returns='None'),
    ],
    "removeListener": [
        PrototypeCall(constructor='MediaQueryList', fn='removeListener', demands=['MediaQueryList', 'EventListener'], returns='None'),
    ],
    "MediaQueryListEvent": [
        NewCall(constructor='MediaQueryListEvent', demands=['CSSOMString'], returns='MediaQueryListEvent'),
        NewCall(constructor='MediaQueryListEvent', demands=['CSSOMString', 'dict'], returns='MediaQueryListEvent'),
    ],
    "availWidth": [
        FieldCall(field='availWidth', demands=['Screen'], returns='int'),
    ],
    "availHeight": [
        FieldCall(field='availHeight', demands=['Screen'], returns='int'),
    ],
    "colorDepth": [
        FieldCall(field='colorDepth', demands=['Screen'], returns='int'),
    ],
    "pixelDepth": [
        FieldCall(field='pixelDepth', demands=['Screen'], returns='int'),
    ],
    "offsetNode": [
        FieldCall(field='offsetNode', demands=['CaretPosition'], returns='Node'),
    ],
    "getClientRect": [
        PrototypeCall(constructor='CaretPosition', fn='getClientRect', demands=['CaretPosition'], returns='DOMRect'),
    ],
    "offsetLeft": [
        FieldCall(field='offsetLeft', demands=['VisualViewport'], returns='float'),
    ],
    "offsetTop": [
        FieldCall(field='offsetTop', demands=['VisualViewport'], returns='float'),
    ],
    "pageLeft": [
        FieldCall(field='pageLeft', demands=['VisualViewport'], returns='float'),
    ],
    "pageTop": [
        FieldCall(field='pageTop', demands=['VisualViewport'], returns='float'),
    ],
    "onscroll": [
        FieldCall(field='onscroll', demands=['VisualViewport'], returns='EventHandler'),
        FieldCall(field='onscroll', demands=['VisualViewport', 'EventHandler'], returns='EventHandler'),
    ],
    "onscrollend": [
        FieldCall(field='onscrollend', demands=['VisualViewport'], returns='EventHandler'),
        FieldCall(field='onscrollend', demands=['VisualViewport', 'EventHandler'], returns='EventHandler'),
    ],
    "system": [
        FieldCall(field='system', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='system', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "symbols": [
        FieldCall(field='symbols', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='symbols', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "additiveSymbols": [
        FieldCall(field='additiveSymbols', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='additiveSymbols', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "negative": [
        FieldCall(field='negative', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='negative', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "prefix": [
        FieldCall(field='prefix', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='prefix', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='prefix', demands=['CSSNamespaceRule'], returns='CSSOMString'),
        FieldCall(field='prefix', demands=['Element'], returns='str'),
        FieldCall(field='prefix', demands=['Attr'], returns='str'),
    ],
    "suffix": [
        FieldCall(field='suffix', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='suffix', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "range": [
        FieldCall(field='range', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='range', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "pad": [
        FieldCall(field='pad', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='pad', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "speakAs": [
        FieldCall(field='speakAs', demands=['CSSCounterStyleRule'], returns='CSSOMString'),
        FieldCall(field='speakAs', demands=['CSSCounterStyleRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "watchAvailability": [
        PrototypeCall(constructor='RemotePlayback', fn='watchAvailability', demands=['RemotePlayback', 'RemotePlaybackAvailabilityCallback'], returns='int'),
    ],
    "cancelWatchAvailability": [
        PrototypeCall(constructor='RemotePlayback', fn='cancelWatchAvailability', demands=['RemotePlayback'], returns='None'),
        PrototypeCall(constructor='RemotePlayback', fn='cancelWatchAvailability', demands=['RemotePlayback', 'int'], returns='None'),
    ],
    "onconnecting": [
        FieldCall(field='onconnecting', demands=['RemotePlayback'], returns='EventHandler'),
        FieldCall(field='onconnecting', demands=['RemotePlayback', 'EventHandler'], returns='EventHandler'),
    ],
    "HTMLPortalElement": [
        NewCall(constructor='HTMLPortalElement', demands=[], returns='HTMLPortalElement'),
    ],
    "activate": [
        PrototypeCall(constructor='HTMLPortalElement', fn='activate', demands=['HTMLPortalElement'], returns='None'),
        PrototypeCall(constructor='HTMLPortalElement', fn='activate', demands=['HTMLPortalElement', 'dict'], returns='None'),
    ],
    "PortalActivateEvent": [
        NewCall(constructor='PortalActivateEvent', demands=['str'], returns='PortalActivateEvent'),
        NewCall(constructor='PortalActivateEvent', demands=['str', 'dict'], returns='PortalActivateEvent'),
    ],
    "adoptPredecessor": [
        PrototypeCall(constructor='PortalActivateEvent', fn='adoptPredecessor', demands=['PortalActivateEvent'], returns='HTMLPortalElement'),
    ],
    "timeRemaining": [
        PrototypeCall(constructor='IdleDeadline', fn='timeRemaining', demands=['IdleDeadline'], returns='float'),
    ],
    "didTimeout": [
        FieldCall(field='didTimeout', demands=['IdleDeadline'], returns='bool'),
    ],
    "keySystem": [
        FieldCall(field='keySystem', demands=['MediaKeySystemAccess'], returns='str'),
    ],
    "createMediaKeys": [
        PrototypeCall(constructor='MediaKeySystemAccess', fn='createMediaKeys', demands=['MediaKeySystemAccess'], returns='MediaKeys'),
    ],
    "createSession": [
        PrototypeCall(constructor='MediaKeys', fn='createSession', demands=['MediaKeys'], returns='MediaKeySession'),
        PrototypeCall(constructor='MediaKeys', fn='createSession', demands=['MediaKeys', 'MediaKeySessionType'], returns='MediaKeySession'),
    ],
    "getStatusForPolicy": [
        PrototypeCall(constructor='MediaKeys', fn='getStatusForPolicy', demands=['MediaKeys'], returns='MediaKeyStatus'),
        PrototypeCall(constructor='MediaKeys', fn='getStatusForPolicy', demands=['MediaKeys', 'dict'], returns='MediaKeyStatus'),
    ],
    "setServerCertificate": [
        PrototypeCall(constructor='MediaKeys', fn='setServerCertificate', demands=['MediaKeys', 'BufferSource'], returns='bool'),
    ],
    "sessionId": [
        FieldCall(field='sessionId', demands=['MediaKeySession'], returns='str'),
    ],
    "expiration": [
        FieldCall(field='expiration', demands=['MediaKeySession'], returns='float'),
    ],
    "keyStatuses": [
        FieldCall(field='keyStatuses', demands=['MediaKeySession'], returns='MediaKeyStatusMap'),
    ],
    "onkeystatuseschange": [
        FieldCall(field='onkeystatuseschange', demands=['MediaKeySession'], returns='EventHandler'),
        FieldCall(field='onkeystatuseschange', demands=['MediaKeySession', 'EventHandler'], returns='EventHandler'),
    ],
    "generateRequest": [
        PrototypeCall(constructor='MediaKeySession', fn='generateRequest', demands=['MediaKeySession', 'str', 'BufferSource'], returns='None'),
    ],
    "MediaKeyMessageEvent": [
        NewCall(constructor='MediaKeyMessageEvent', demands=['str', 'dict'], returns='MediaKeyMessageEvent'),
    ],
    "messageType": [
        FieldCall(field='messageType', demands=['MediaKeyMessageEvent'], returns='MediaKeyMessageType'),
    ],
    "MediaEncryptedEvent": [
        NewCall(constructor='MediaEncryptedEvent', demands=['str'], returns='MediaEncryptedEvent'),
        NewCall(constructor='MediaEncryptedEvent', demands=['str', 'dict'], returns='MediaEncryptedEvent'),
    ],
    "initDataType": [
        FieldCall(field='initDataType', demands=['MediaEncryptedEvent'], returns='str'),
    ],
    "initData": [
        FieldCall(field='initData', demands=['MediaEncryptedEvent'], returns='ArrayBuffer'),
    ],
    "hasReading": [
        FieldCall(field='hasReading', demands=['Sensor'], returns='bool'),
    ],
    "onreading": [
        FieldCall(field='onreading', demands=['Sensor'], returns='EventHandler'),
        FieldCall(field='onreading', demands=['Sensor', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onreading', demands=['NDEFReader'], returns='EventHandler'),
        FieldCall(field='onreading', demands=['NDEFReader', 'EventHandler'], returns='EventHandler'),
    ],
    "SensorErrorEvent": [
        NewCall(constructor='SensorErrorEvent', demands=['str', 'dict'], returns='SensorErrorEvent'),
    ],
    "listener": [
        FieldCall(field='listener', demands=['BaseAudioContext'], returns='AudioListener'),
    ],
    "renderQuantumSize": [
        FieldCall(field='renderQuantumSize', demands=['BaseAudioContext'], returns='int'),
        FieldCall(field='renderQuantumSize', demands=['AudioWorkletGlobalScope'], returns='int'),
    ],
    "audioWorklet": [
        FieldCall(field='audioWorklet', demands=['BaseAudioContext'], returns='AudioWorklet'),
    ],
    "createAnalyser": [
        PrototypeCall(constructor='BaseAudioContext', fn='createAnalyser', demands=['BaseAudioContext'], returns='AnalyserNode'),
    ],
    "createBiquadFilter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createBiquadFilter', demands=['BaseAudioContext'], returns='BiquadFilterNode'),
    ],
    "createBufferSource": [
        PrototypeCall(constructor='BaseAudioContext', fn='createBufferSource', demands=['BaseAudioContext'], returns='AudioBufferSourceNode'),
    ],
    "createChannelMerger": [
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelMerger', demands=['BaseAudioContext'], returns='ChannelMergerNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelMerger', demands=['BaseAudioContext', 'int'], returns='ChannelMergerNode'),
    ],
    "createChannelSplitter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelSplitter', demands=['BaseAudioContext'], returns='ChannelSplitterNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createChannelSplitter', demands=['BaseAudioContext', 'int'], returns='ChannelSplitterNode'),
    ],
    "createConstantSource": [
        PrototypeCall(constructor='BaseAudioContext', fn='createConstantSource', demands=['BaseAudioContext'], returns='ConstantSourceNode'),
    ],
    "createConvolver": [
        PrototypeCall(constructor='BaseAudioContext', fn='createConvolver', demands=['BaseAudioContext'], returns='ConvolverNode'),
    ],
    "createDelay": [
        PrototypeCall(constructor='BaseAudioContext', fn='createDelay', demands=['BaseAudioContext'], returns='DelayNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createDelay', demands=['BaseAudioContext', 'float'], returns='DelayNode'),
    ],
    "createDynamicsCompressor": [
        PrototypeCall(constructor='BaseAudioContext', fn='createDynamicsCompressor', demands=['BaseAudioContext'], returns='DynamicsCompressorNode'),
    ],
    "createGain": [
        PrototypeCall(constructor='BaseAudioContext', fn='createGain', demands=['BaseAudioContext'], returns='GainNode'),
    ],
    "createIIRFilter": [
        PrototypeCall(constructor='BaseAudioContext', fn='createIIRFilter', demands=['BaseAudioContext', 'float', 'float'], returns='IIRFilterNode'),
    ],
    "createOscillator": [
        PrototypeCall(constructor='BaseAudioContext', fn='createOscillator', demands=['BaseAudioContext'], returns='OscillatorNode'),
    ],
    "createPanner": [
        PrototypeCall(constructor='BaseAudioContext', fn='createPanner', demands=['BaseAudioContext'], returns='PannerNode'),
    ],
    "createPeriodicWave": [
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'float', 'float'], returns='PeriodicWave'),
        PrototypeCall(constructor='BaseAudioContext', fn='createPeriodicWave', demands=['BaseAudioContext', 'float', 'float', 'dict'], returns='PeriodicWave'),
    ],
    "createScriptProcessor": [
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'int'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'int', 'int'], returns='ScriptProcessorNode'),
        PrototypeCall(constructor='BaseAudioContext', fn='createScriptProcessor', demands=['BaseAudioContext', 'int', 'int', 'int'], returns='ScriptProcessorNode'),
    ],
    "createStereoPanner": [
        PrototypeCall(constructor='BaseAudioContext', fn='createStereoPanner', demands=['BaseAudioContext'], returns='StereoPannerNode'),
    ],
    "createWaveShaper": [
        PrototypeCall(constructor='BaseAudioContext', fn='createWaveShaper', demands=['BaseAudioContext'], returns='WaveShaperNode'),
    ],
    "decodeAudioData": [
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer'], returns='AudioBuffer'),
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback'], returns='AudioBuffer'),
        PrototypeCall(constructor='BaseAudioContext', fn='decodeAudioData', demands=['BaseAudioContext', 'ArrayBuffer', 'DecodeSuccessCallback', 'DecodeErrorCallback'], returns='AudioBuffer'),
    ],
    "AudioContext": [
        NewCall(constructor='AudioContext', demands=[], returns='AudioContext'),
        NewCall(constructor='AudioContext', demands=['dict'], returns='AudioContext'),
    ],
    "baseLatency": [
        FieldCall(field='baseLatency', demands=['AudioContext'], returns='float'),
    ],
    "outputLatency": [
        FieldCall(field='outputLatency', demands=['AudioContext'], returns='float'),
    ],
    "sinkId": [
        FieldCall(field='sinkId', demands=['AudioContext'], returns='str'),
    ],
    "onsinkchange": [
        FieldCall(field='onsinkchange', demands=['AudioContext'], returns='EventHandler'),
        FieldCall(field='onsinkchange', demands=['AudioContext', 'EventHandler'], returns='EventHandler'),
    ],
    "getOutputTimestamp": [
        PrototypeCall(constructor='AudioContext', fn='getOutputTimestamp', demands=['AudioContext'], returns='dict'),
    ],
    "resume": [
        PrototypeCall(constructor='AudioContext', fn='resume', demands=['AudioContext'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='resume', demands=['OfflineAudioContext'], returns='None'),
        PrototypeCall(constructor='SpeechSynthesis', fn='resume', demands=['SpeechSynthesis'], returns='None'),
        PrototypeCall(constructor='MediaRecorder', fn='resume', demands=['MediaRecorder'], returns='None'),
    ],
    "suspend": [
        PrototypeCall(constructor='AudioContext', fn='suspend', demands=['AudioContext'], returns='None'),
        PrototypeCall(constructor='OfflineAudioContext', fn='suspend', demands=['OfflineAudioContext', 'float'], returns='None'),
    ],
    "setSinkId": [
        PrototypeCall(constructor='AudioContext', fn='setSinkId', demands=['AudioContext', 'str'], returns='None'),
        PrototypeCall(constructor='AudioContext', fn='setSinkId', demands=['AudioContext', 'dict'], returns='None'),
    ],
    "createMediaElementSource": [
        PrototypeCall(constructor='AudioContext', fn='createMediaElementSource', demands=['AudioContext', 'HTMLMediaElement'], returns='MediaElementAudioSourceNode'),
    ],
    "createMediaStreamSource": [
        PrototypeCall(constructor='AudioContext', fn='createMediaStreamSource', demands=['AudioContext', 'MediaStream'], returns='MediaStreamAudioSourceNode'),
    ],
    "createMediaStreamTrackSource": [
        PrototypeCall(constructor='AudioContext', fn='createMediaStreamTrackSource', demands=['AudioContext', 'MediaStreamTrack'], returns='MediaStreamTrackAudioSourceNode'),
    ],
    "createMediaStreamDestination": [
        PrototypeCall(constructor='AudioContext', fn='createMediaStreamDestination', demands=['AudioContext'], returns='MediaStreamAudioDestinationNode'),
    ],
    "OfflineAudioContext": [
        NewCall(constructor='OfflineAudioContext', demands=['dict'], returns='OfflineAudioContext'),
        NewCall(constructor='OfflineAudioContext', demands=['int', 'int', 'float'], returns='OfflineAudioContext'),
    ],
    "startRendering": [
        PrototypeCall(constructor='OfflineAudioContext', fn='startRendering', demands=['OfflineAudioContext'], returns='AudioBuffer'),
    ],
    "OfflineAudioCompletionEvent": [
        NewCall(constructor='OfflineAudioCompletionEvent', demands=['str', 'dict'], returns='OfflineAudioCompletionEvent'),
    ],
    "renderedBuffer": [
        FieldCall(field='renderedBuffer', demands=['OfflineAudioCompletionEvent'], returns='AudioBuffer'),
    ],
    "AudioBuffer": [
        NewCall(constructor='AudioBuffer', demands=['dict'], returns='AudioBuffer'),
    ],
    "getChannelData": [
        PrototypeCall(constructor='AudioBuffer', fn='getChannelData', demands=['AudioBuffer', 'int'], returns='Float32Array'),
    ],
    "copyFromChannel": [
        PrototypeCall(constructor='AudioBuffer', fn='copyFromChannel', demands=['AudioBuffer', 'Float32Array', 'int'], returns='None'),
        PrototypeCall(constructor='AudioBuffer', fn='copyFromChannel', demands=['AudioBuffer', 'Float32Array', 'int', 'int'], returns='None'),
    ],
    "copyToChannel": [
        PrototypeCall(constructor='AudioBuffer', fn='copyToChannel', demands=['AudioBuffer', 'Float32Array', 'int'], returns='None'),
        PrototypeCall(constructor='AudioBuffer', fn='copyToChannel', demands=['AudioBuffer', 'Float32Array', 'int', 'int'], returns='None'),
    ],
    "context": [
        FieldCall(field='context', demands=['AudioNode'], returns='BaseAudioContext'),
    ],
    "numberOfInputs": [
        FieldCall(field='numberOfInputs', demands=['AudioNode'], returns='int'),
    ],
    "numberOfOutputs": [
        FieldCall(field='numberOfOutputs', demands=['AudioNode'], returns='int'),
    ],
    "channelCount": [
        FieldCall(field='channelCount', demands=['AudioNode'], returns='int'),
        FieldCall(field='channelCount', demands=['AudioNode', 'int'], returns='int'),
    ],
    "channelCountMode": [
        FieldCall(field='channelCountMode', demands=['AudioNode'], returns='ChannelCountMode'),
        FieldCall(field='channelCountMode', demands=['AudioNode', 'ChannelCountMode'], returns='ChannelCountMode'),
    ],
    "channelInterpretation": [
        FieldCall(field='channelInterpretation', demands=['AudioNode'], returns='ChannelInterpretation'),
        FieldCall(field='channelInterpretation', demands=['AudioNode', 'ChannelInterpretation'], returns='ChannelInterpretation'),
    ],
    "automationRate": [
        FieldCall(field='automationRate', demands=['AudioParam'], returns='AutomationRate'),
        FieldCall(field='automationRate', demands=['AudioParam', 'AutomationRate'], returns='AutomationRate'),
    ],
    "minValue": [
        FieldCall(field='minValue', demands=['AudioParam'], returns='float'),
    ],
    "maxValue": [
        FieldCall(field='maxValue', demands=['AudioParam'], returns='float'),
    ],
    "setValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "linearRampToValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='linearRampToValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "exponentialRampToValueAtTime": [
        PrototypeCall(constructor='AudioParam', fn='exponentialRampToValueAtTime', demands=['AudioParam', 'float', 'float'], returns='AudioParam'),
    ],
    "setTargetAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setTargetAtTime', demands=['AudioParam', 'float', 'float', 'float'], returns='AudioParam'),
    ],
    "setValueCurveAtTime": [
        PrototypeCall(constructor='AudioParam', fn='setValueCurveAtTime', demands=['AudioParam', 'float', 'float', 'float'], returns='AudioParam'),
    ],
    "cancelScheduledValues": [
        PrototypeCall(constructor='AudioParam', fn='cancelScheduledValues', demands=['AudioParam', 'float'], returns='AudioParam'),
    ],
    "cancelAndHoldAtTime": [
        PrototypeCall(constructor='AudioParam', fn='cancelAndHoldAtTime', demands=['AudioParam', 'float'], returns='AudioParam'),
    ],
    "AnalyserNode": [
        NewCall(constructor='AnalyserNode', demands=['BaseAudioContext'], returns='AnalyserNode'),
        NewCall(constructor='AnalyserNode', demands=['BaseAudioContext', 'dict'], returns='AnalyserNode'),
    ],
    "getFloatFrequencyData": [
        PrototypeCall(constructor='AnalyserNode', fn='getFloatFrequencyData', demands=['AnalyserNode', 'Float32Array'], returns='None'),
    ],
    "getByteFrequencyData": [
        PrototypeCall(constructor='AnalyserNode', fn='getByteFrequencyData', demands=['AnalyserNode', 'Uint8Array'], returns='None'),
    ],
    "getFloatTimeDomainData": [
        PrototypeCall(constructor='AnalyserNode', fn='getFloatTimeDomainData', demands=['AnalyserNode', 'Float32Array'], returns='None'),
    ],
    "getByteTimeDomainData": [
        PrototypeCall(constructor='AnalyserNode', fn='getByteTimeDomainData', demands=['AnalyserNode', 'Uint8Array'], returns='None'),
    ],
    "fftSize": [
        FieldCall(field='fftSize', demands=['AnalyserNode'], returns='int'),
        FieldCall(field='fftSize', demands=['AnalyserNode', 'int'], returns='int'),
    ],
    "frequencyBinCount": [
        FieldCall(field='frequencyBinCount', demands=['AnalyserNode'], returns='int'),
    ],
    "minDecibels": [
        FieldCall(field='minDecibels', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='minDecibels', demands=['AnalyserNode', 'float'], returns='float'),
    ],
    "maxDecibels": [
        FieldCall(field='maxDecibels', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='maxDecibels', demands=['AnalyserNode', 'float'], returns='float'),
    ],
    "smoothingTimeConstant": [
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserNode'], returns='float'),
        FieldCall(field='smoothingTimeConstant', demands=['AnalyserNode', 'float'], returns='float'),
    ],
    "AudioBufferSourceNode": [
        NewCall(constructor='AudioBufferSourceNode', demands=['BaseAudioContext'], returns='AudioBufferSourceNode'),
        NewCall(constructor='AudioBufferSourceNode', demands=['BaseAudioContext', 'dict'], returns='AudioBufferSourceNode'),
    ],
    "detune": [
        FieldCall(field='detune', demands=['AudioBufferSourceNode'], returns='AudioParam'),
        FieldCall(field='detune', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='detune', demands=['OscillatorNode'], returns='AudioParam'),
    ],
    "loopStart": [
        FieldCall(field='loopStart', demands=['AudioBufferSourceNode'], returns='float'),
        FieldCall(field='loopStart', demands=['AudioBufferSourceNode', 'float'], returns='float'),
    ],
    "loopEnd": [
        FieldCall(field='loopEnd', demands=['AudioBufferSourceNode'], returns='float'),
        FieldCall(field='loopEnd', demands=['AudioBufferSourceNode', 'float'], returns='float'),
    ],
    "maxChannelCount": [
        FieldCall(field='maxChannelCount', demands=['AudioDestinationNode'], returns='int'),
    ],
    "positionX": [
        FieldCall(field='positionX', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionX', demands=['PannerNode'], returns='AudioParam'),
    ],
    "positionY": [
        FieldCall(field='positionY', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionY', demands=['PannerNode'], returns='AudioParam'),
    ],
    "positionZ": [
        FieldCall(field='positionZ', demands=['AudioListener'], returns='AudioParam'),
        FieldCall(field='positionZ', demands=['PannerNode'], returns='AudioParam'),
    ],
    "forwardX": [
        FieldCall(field='forwardX', demands=['AudioListener'], returns='AudioParam'),
    ],
    "forwardY": [
        FieldCall(field='forwardY', demands=['AudioListener'], returns='AudioParam'),
    ],
    "forwardZ": [
        FieldCall(field='forwardZ', demands=['AudioListener'], returns='AudioParam'),
    ],
    "upX": [
        FieldCall(field='upX', demands=['AudioListener'], returns='AudioParam'),
    ],
    "upY": [
        FieldCall(field='upY', demands=['AudioListener'], returns='AudioParam'),
    ],
    "upZ": [
        FieldCall(field='upZ', demands=['AudioListener'], returns='AudioParam'),
    ],
    "setPosition": [
        PrototypeCall(constructor='AudioListener', fn='setPosition', demands=['AudioListener', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='setPosition', demands=['PannerNode', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='Selection', fn='setPosition', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='setPosition', demands=['Selection', 'Node', 'int'], returns='None'),
    ],
    "setOrientation": [
        PrototypeCall(constructor='AudioListener', fn='setOrientation', demands=['AudioListener', 'float', 'float', 'float', 'float', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='PannerNode', fn='setOrientation', demands=['PannerNode', 'float', 'float', 'float'], returns='None'),
    ],
    "AudioProcessingEvent": [
        NewCall(constructor='AudioProcessingEvent', demands=['str', 'dict'], returns='AudioProcessingEvent'),
    ],
    "playbackTime": [
        FieldCall(field='playbackTime', demands=['AudioProcessingEvent'], returns='float'),
    ],
    "inputBuffer": [
        FieldCall(field='inputBuffer', demands=['AudioProcessingEvent'], returns='AudioBuffer'),
    ],
    "outputBuffer": [
        FieldCall(field='outputBuffer', demands=['AudioProcessingEvent'], returns='AudioBuffer'),
    ],
    "BiquadFilterNode": [
        NewCall(constructor='BiquadFilterNode', demands=['BaseAudioContext'], returns='BiquadFilterNode'),
        NewCall(constructor='BiquadFilterNode', demands=['BaseAudioContext', 'dict'], returns='BiquadFilterNode'),
    ],
    "frequency": [
        FieldCall(field='frequency', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='frequency', demands=['OscillatorNode'], returns='AudioParam'),
    ],
    "Q": [
        FieldCall(field='Q', demands=['BiquadFilterNode'], returns='AudioParam'),
    ],
    "gain": [
        FieldCall(field='gain', demands=['BiquadFilterNode'], returns='AudioParam'),
        FieldCall(field='gain', demands=['GainNode'], returns='AudioParam'),
    ],
    "getFrequencyResponse": [
        PrototypeCall(constructor='BiquadFilterNode', fn='getFrequencyResponse', demands=['BiquadFilterNode', 'Float32Array', 'Float32Array', 'Float32Array'], returns='None'),
        PrototypeCall(constructor='IIRFilterNode', fn='getFrequencyResponse', demands=['IIRFilterNode', 'Float32Array', 'Float32Array', 'Float32Array'], returns='None'),
    ],
    "ChannelMergerNode": [
        NewCall(constructor='ChannelMergerNode', demands=['BaseAudioContext'], returns='ChannelMergerNode'),
        NewCall(constructor='ChannelMergerNode', demands=['BaseAudioContext', 'dict'], returns='ChannelMergerNode'),
    ],
    "ChannelSplitterNode": [
        NewCall(constructor='ChannelSplitterNode', demands=['BaseAudioContext'], returns='ChannelSplitterNode'),
        NewCall(constructor='ChannelSplitterNode', demands=['BaseAudioContext', 'dict'], returns='ChannelSplitterNode'),
    ],
    "ConstantSourceNode": [
        NewCall(constructor='ConstantSourceNode', demands=['BaseAudioContext'], returns='ConstantSourceNode'),
        NewCall(constructor='ConstantSourceNode', demands=['BaseAudioContext', 'dict'], returns='ConstantSourceNode'),
    ],
    "ConvolverNode": [
        NewCall(constructor='ConvolverNode', demands=['BaseAudioContext'], returns='ConvolverNode'),
        NewCall(constructor='ConvolverNode', demands=['BaseAudioContext', 'dict'], returns='ConvolverNode'),
    ],
    "normalize": [
        FieldCall(field='normalize', demands=['ConvolverNode'], returns='bool'),
        FieldCall(field='normalize', demands=['ConvolverNode', 'bool'], returns='bool'),
        PrototypeCall(constructor='Node', fn='normalize', demands=['Node'], returns='None'),
    ],
    "DelayNode": [
        NewCall(constructor='DelayNode', demands=['BaseAudioContext'], returns='DelayNode'),
        NewCall(constructor='DelayNode', demands=['BaseAudioContext', 'dict'], returns='DelayNode'),
    ],
    "delayTime": [
        FieldCall(field='delayTime', demands=['DelayNode'], returns='AudioParam'),
    ],
    "DynamicsCompressorNode": [
        NewCall(constructor='DynamicsCompressorNode', demands=['BaseAudioContext'], returns='DynamicsCompressorNode'),
        NewCall(constructor='DynamicsCompressorNode', demands=['BaseAudioContext', 'dict'], returns='DynamicsCompressorNode'),
    ],
    "threshold": [
        FieldCall(field='threshold', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "knee": [
        FieldCall(field='knee', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "ratio": [
        FieldCall(field='ratio', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "reduction": [
        FieldCall(field='reduction', demands=['DynamicsCompressorNode'], returns='float'),
    ],
    "attack": [
        FieldCall(field='attack', demands=['DynamicsCompressorNode'], returns='AudioParam'),
    ],
    "GainNode": [
        NewCall(constructor='GainNode', demands=['BaseAudioContext'], returns='GainNode'),
        NewCall(constructor='GainNode', demands=['BaseAudioContext', 'dict'], returns='GainNode'),
    ],
    "IIRFilterNode": [
        NewCall(constructor='IIRFilterNode', demands=['BaseAudioContext', 'dict'], returns='IIRFilterNode'),
    ],
    "MediaElementAudioSourceNode": [
        NewCall(constructor='MediaElementAudioSourceNode', demands=['AudioContext', 'dict'], returns='MediaElementAudioSourceNode'),
    ],
    "mediaElement": [
        FieldCall(field='mediaElement', demands=['MediaElementAudioSourceNode'], returns='HTMLMediaElement'),
    ],
    "MediaStreamAudioDestinationNode": [
        NewCall(constructor='MediaStreamAudioDestinationNode', demands=['AudioContext'], returns='MediaStreamAudioDestinationNode'),
        NewCall(constructor='MediaStreamAudioDestinationNode', demands=['AudioContext', 'dict'], returns='MediaStreamAudioDestinationNode'),
    ],
    "stream": [
        FieldCall(field='stream', demands=['MediaStreamAudioDestinationNode'], returns='MediaStream'),
        PrototypeCall(constructor='Blob', fn='stream', demands=['Blob'], returns='ReadableStream'),
        FieldCall(field='stream', demands=['MediaRecorder'], returns='MediaStream'),
    ],
    "MediaStreamAudioSourceNode": [
        NewCall(constructor='MediaStreamAudioSourceNode', demands=['AudioContext', 'dict'], returns='MediaStreamAudioSourceNode'),
    ],
    "mediaStream": [
        FieldCall(field='mediaStream', demands=['MediaStreamAudioSourceNode'], returns='MediaStream'),
    ],
    "MediaStreamTrackAudioSourceNode": [
        NewCall(constructor='MediaStreamTrackAudioSourceNode', demands=['AudioContext', 'dict'], returns='MediaStreamTrackAudioSourceNode'),
    ],
    "OscillatorNode": [
        NewCall(constructor='OscillatorNode', demands=['BaseAudioContext'], returns='OscillatorNode'),
        NewCall(constructor='OscillatorNode', demands=['BaseAudioContext', 'dict'], returns='OscillatorNode'),
    ],
    "setPeriodicWave": [
        PrototypeCall(constructor='OscillatorNode', fn='setPeriodicWave', demands=['OscillatorNode', 'PeriodicWave'], returns='None'),
    ],
    "PannerNode": [
        NewCall(constructor='PannerNode', demands=['BaseAudioContext'], returns='PannerNode'),
        NewCall(constructor='PannerNode', demands=['BaseAudioContext', 'dict'], returns='PannerNode'),
    ],
    "panningModel": [
        FieldCall(field='panningModel', demands=['PannerNode'], returns='PanningModelType'),
        FieldCall(field='panningModel', demands=['PannerNode', 'PanningModelType'], returns='PanningModelType'),
    ],
    "orientationX": [
        FieldCall(field='orientationX', demands=['PannerNode'], returns='AudioParam'),
    ],
    "orientationY": [
        FieldCall(field='orientationY', demands=['PannerNode'], returns='AudioParam'),
    ],
    "orientationZ": [
        FieldCall(field='orientationZ', demands=['PannerNode'], returns='AudioParam'),
    ],
    "distanceModel": [
        FieldCall(field='distanceModel', demands=['PannerNode'], returns='DistanceModelType'),
        FieldCall(field='distanceModel', demands=['PannerNode', 'DistanceModelType'], returns='DistanceModelType'),
    ],
    "refDistance": [
        FieldCall(field='refDistance', demands=['PannerNode'], returns='float'),
        FieldCall(field='refDistance', demands=['PannerNode', 'float'], returns='float'),
    ],
    "maxDistance": [
        FieldCall(field='maxDistance', demands=['PannerNode'], returns='float'),
        FieldCall(field='maxDistance', demands=['PannerNode', 'float'], returns='float'),
    ],
    "rolloffFactor": [
        FieldCall(field='rolloffFactor', demands=['PannerNode'], returns='float'),
        FieldCall(field='rolloffFactor', demands=['PannerNode', 'float'], returns='float'),
    ],
    "coneInnerAngle": [
        FieldCall(field='coneInnerAngle', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneInnerAngle', demands=['PannerNode', 'float'], returns='float'),
    ],
    "coneOuterAngle": [
        FieldCall(field='coneOuterAngle', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneOuterAngle', demands=['PannerNode', 'float'], returns='float'),
    ],
    "coneOuterGain": [
        FieldCall(field='coneOuterGain', demands=['PannerNode'], returns='float'),
        FieldCall(field='coneOuterGain', demands=['PannerNode', 'float'], returns='float'),
    ],
    "PeriodicWave": [
        NewCall(constructor='PeriodicWave', demands=['BaseAudioContext'], returns='PeriodicWave'),
        NewCall(constructor='PeriodicWave', demands=['BaseAudioContext', 'dict'], returns='PeriodicWave'),
    ],
    "onaudioprocess": [
        FieldCall(field='onaudioprocess', demands=['ScriptProcessorNode'], returns='EventHandler'),
        FieldCall(field='onaudioprocess', demands=['ScriptProcessorNode', 'EventHandler'], returns='EventHandler'),
    ],
    "bufferSize": [
        FieldCall(field='bufferSize', demands=['ScriptProcessorNode'], returns='int'),
    ],
    "StereoPannerNode": [
        NewCall(constructor='StereoPannerNode', demands=['BaseAudioContext'], returns='StereoPannerNode'),
        NewCall(constructor='StereoPannerNode', demands=['BaseAudioContext', 'dict'], returns='StereoPannerNode'),
    ],
    "pan": [
        FieldCall(field='pan', demands=['StereoPannerNode'], returns='AudioParam'),
    ],
    "WaveShaperNode": [
        NewCall(constructor='WaveShaperNode', demands=['BaseAudioContext'], returns='WaveShaperNode'),
        NewCall(constructor='WaveShaperNode', demands=['BaseAudioContext', 'dict'], returns='WaveShaperNode'),
    ],
    "curve": [
        FieldCall(field='curve', demands=['WaveShaperNode'], returns='Float32Array'),
        FieldCall(field='curve', demands=['WaveShaperNode', 'Float32Array'], returns='Float32Array'),
    ],
    "oversample": [
        FieldCall(field='oversample', demands=['WaveShaperNode'], returns='OverSampleType'),
        FieldCall(field='oversample', demands=['WaveShaperNode', 'OverSampleType'], returns='OverSampleType'),
    ],
    "registerProcessor": [
        PrototypeCall(constructor='AudioWorkletGlobalScope', fn='registerProcessor', demands=['AudioWorkletGlobalScope', 'str', 'AudioWorkletProcessorConstructor'], returns='None'),
    ],
    "currentFrame": [
        FieldCall(field='currentFrame', demands=['AudioWorkletGlobalScope'], returns='int'),
    ],
    "AudioWorkletNode": [
        NewCall(constructor='AudioWorkletNode', demands=['BaseAudioContext', 'str'], returns='AudioWorkletNode'),
        NewCall(constructor='AudioWorkletNode', demands=['BaseAudioContext', 'str', 'dict'], returns='AudioWorkletNode'),
    ],
    "parameters": [
        FieldCall(field='parameters', demands=['AudioWorkletNode'], returns='AudioParamMap'),
    ],
    "onprocessorerror": [
        FieldCall(field='onprocessorerror', demands=['AudioWorkletNode'], returns='EventHandler'),
        FieldCall(field='onprocessorerror', demands=['AudioWorkletNode', 'EventHandler'], returns='EventHandler'),
    ],
    "AudioWorkletProcessor": [
        NewCall(constructor='AudioWorkletProcessor', demands=[], returns='AudioWorkletProcessor'),
    ],
    "drawBuffersWEBGL": [
        PrototypeCall(constructor='WEBGL_draw_buffers', fn='drawBuffersWEBGL', demands=['WEBGL_draw_buffers', 'GLenum'], returns='None'),
    ],
    "getPorts": [
        PrototypeCall(constructor='Serial', fn='getPorts', demands=['Serial'], returns='SerialPort'),
    ],
    "requestPort": [
        PrototypeCall(constructor='Serial', fn='requestPort', demands=['Serial'], returns='SerialPort'),
        PrototypeCall(constructor='Serial', fn='requestPort', demands=['Serial', 'dict'], returns='SerialPort'),
    ],
    "getInfo": [
        PrototypeCall(constructor='SerialPort', fn='getInfo', demands=['SerialPort'], returns='dict'),
    ],
    "setSignals": [
        PrototypeCall(constructor='SerialPort', fn='setSignals', demands=['SerialPort'], returns='None'),
        PrototypeCall(constructor='SerialPort', fn='setSignals', demands=['SerialPort', 'dict'], returns='None'),
    ],
    "getSignals": [
        PrototypeCall(constructor='SerialPort', fn='getSignals', demands=['SerialPort'], returns='dict'),
    ],
    "GroupEffect": [
        NewCall(constructor='GroupEffect', demands=['AnimationEffect'], returns='GroupEffect'),
        NewCall(constructor='GroupEffect', demands=['AnimationEffect', 'float'], returns='GroupEffect'),
    ],
    "firstChild": [
        FieldCall(field='firstChild', demands=['GroupEffect'], returns='AnimationEffect'),
        FieldCall(field='firstChild', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='firstChild', demands=['TreeWalker'], returns='Node'),
    ],
    "lastChild": [
        FieldCall(field='lastChild', demands=['GroupEffect'], returns='AnimationEffect'),
        FieldCall(field='lastChild', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='lastChild', demands=['TreeWalker'], returns='Node'),
    ],
    "prepend": [
        PrototypeCall(constructor='GroupEffect', fn='prepend', demands=['GroupEffect', 'AnimationEffect'], returns='None'),
        PrototypeCall(constructor='Document', fn='prepend', demands=['Document', 'Node'], returns='None'),
        PrototypeCall(constructor='Document', fn='prepend', demands=['Document', 'str'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='prepend', demands=['DocumentFragment', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='prepend', demands=['DocumentFragment', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='prepend', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='prepend', demands=['Element', 'str'], returns='None'),
    ],
    "SequenceEffect": [
        NewCall(constructor='SequenceEffect', demands=['AnimationEffect'], returns='SequenceEffect'),
        NewCall(constructor='SequenceEffect', demands=['AnimationEffect', 'float'], returns='SequenceEffect'),
    ],
    "AnimationPlaybackEvent": [
        NewCall(constructor='AnimationPlaybackEvent', demands=['str'], returns='AnimationPlaybackEvent'),
        NewCall(constructor='AnimationPlaybackEvent', demands=['str', 'dict'], returns='AnimationPlaybackEvent'),
    ],
    "timelineTime": [
        FieldCall(field='timelineTime', demands=['AnimationPlaybackEvent'], returns='CSSNumberish'),
    ],
    "AnimationTrigger": [
        NewCall(constructor='AnimationTrigger', demands=[], returns='AnimationTrigger'),
        NewCall(constructor='AnimationTrigger', demands=['dict'], returns='AnimationTrigger'),
    ],
    "exitRangeStart": [
        FieldCall(field='exitRangeStart', demands=['AnimationTrigger'], returns='*'),
        FieldCall(field='exitRangeStart', demands=['AnimationTrigger', '*'], returns='*'),
    ],
    "exitRangeEnd": [
        FieldCall(field='exitRangeEnd', demands=['AnimationTrigger'], returns='*'),
        FieldCall(field='exitRangeEnd', demands=['AnimationTrigger', '*'], returns='*'),
    ],
    "decodingInfo": [
        PrototypeCall(constructor='MediaCapabilities', fn='decodingInfo', demands=['MediaCapabilities', 'dict'], returns='dict'),
    ],
    "encodingInfo": [
        PrototypeCall(constructor='MediaCapabilities', fn='encodingInfo', demands=['MediaCapabilities', 'dict'], returns='dict'),
    ],
    "PaymentRequest": [
        NewCall(constructor='PaymentRequest', demands=['dict', 'dict'], returns='PaymentRequest'),
        NewCall(constructor='PaymentRequest', demands=['dict', 'dict', 'dict'], returns='PaymentRequest'),
    ],
    "canMakePayment": [
        PrototypeCall(constructor='PaymentRequest', fn='canMakePayment', demands=['PaymentRequest'], returns='bool'),
    ],
    "shippingAddress": [
        FieldCall(field='shippingAddress', demands=['PaymentRequest'], returns='ContactAddress'),
        FieldCall(field='shippingAddress', demands=['PaymentResponse'], returns='ContactAddress'),
    ],
    "shippingOption": [
        FieldCall(field='shippingOption', demands=['PaymentRequest'], returns='str'),
        FieldCall(field='shippingOption', demands=['PaymentResponse'], returns='str'),
    ],
    "shippingType": [
        FieldCall(field='shippingType', demands=['PaymentRequest'], returns='PaymentShippingType'),
    ],
    "onshippingaddresschange": [
        FieldCall(field='onshippingaddresschange', demands=['PaymentRequest'], returns='EventHandler'),
        FieldCall(field='onshippingaddresschange', demands=['PaymentRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "onshippingoptionchange": [
        FieldCall(field='onshippingoptionchange', demands=['PaymentRequest'], returns='EventHandler'),
        FieldCall(field='onshippingoptionchange', demands=['PaymentRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "onpaymentmethodchange": [
        FieldCall(field='onpaymentmethodchange', demands=['PaymentRequest'], returns='EventHandler'),
        FieldCall(field='onpaymentmethodchange', demands=['PaymentRequest', 'EventHandler'], returns='EventHandler'),
    ],
    "requestId": [
        FieldCall(field='requestId', demands=['PaymentResponse'], returns='str'),
    ],
    "methodName": [
        FieldCall(field='methodName', demands=['PaymentResponse'], returns='str'),
        FieldCall(field='methodName', demands=['PaymentMethodChangeEvent'], returns='str'),
    ],
    "details": [
        FieldCall(field='details', demands=['PaymentResponse'], returns='object'),
    ],
    "payerName": [
        FieldCall(field='payerName', demands=['PaymentResponse'], returns='str'),
    ],
    "payerEmail": [
        FieldCall(field='payerEmail', demands=['PaymentResponse'], returns='str'),
    ],
    "payerPhone": [
        FieldCall(field='payerPhone', demands=['PaymentResponse'], returns='str'),
    ],
    "retry": [
        PrototypeCall(constructor='PaymentResponse', fn='retry', demands=['PaymentResponse'], returns='None'),
        PrototypeCall(constructor='PaymentResponse', fn='retry', demands=['PaymentResponse', 'dict'], returns='None'),
    ],
    "onpayerdetailchange": [
        FieldCall(field='onpayerdetailchange', demands=['PaymentResponse'], returns='EventHandler'),
        FieldCall(field='onpayerdetailchange', demands=['PaymentResponse', 'EventHandler'], returns='EventHandler'),
    ],
    "PaymentMethodChangeEvent": [
        NewCall(constructor='PaymentMethodChangeEvent', demands=['str'], returns='PaymentMethodChangeEvent'),
        NewCall(constructor='PaymentMethodChangeEvent', demands=['str', 'dict'], returns='PaymentMethodChangeEvent'),
    ],
    "methodDetails": [
        FieldCall(field='methodDetails', demands=['PaymentMethodChangeEvent'], returns='object'),
    ],
    "PaymentRequestUpdateEvent": [
        NewCall(constructor='PaymentRequestUpdateEvent', demands=['str'], returns='PaymentRequestUpdateEvent'),
        NewCall(constructor='PaymentRequestUpdateEvent', demands=['str', 'dict'], returns='PaymentRequestUpdateEvent'),
    ],
    "updateWith": [
        PrototypeCall(constructor='PaymentRequestUpdateEvent', fn='updateWith', demands=['PaymentRequestUpdateEvent', 'dict'], returns='None'),
    ],
    "Notification": [
        NewCall(constructor='Notification', demands=['str'], returns='Notification'),
        NewCall(constructor='Notification', demands=['str', 'dict'], returns='Notification'),
    ],
    "permission": [
        FieldCall(field='permission', demands=['Notification'], returns='NotificationPermission'),
    ],
    "maxActions": [
        FieldCall(field='maxActions', demands=['Notification'], returns='int'),
    ],
    "onclick": [
        FieldCall(field='onclick', demands=['Notification'], returns='EventHandler'),
        FieldCall(field='onclick', demands=['Notification', 'EventHandler'], returns='EventHandler'),
    ],
    "onshow": [
        FieldCall(field='onshow', demands=['Notification'], returns='EventHandler'),
        FieldCall(field='onshow', demands=['Notification', 'EventHandler'], returns='EventHandler'),
    ],
    "body": [
        FieldCall(field='body', demands=['Notification'], returns='str'),
        FieldCall(field='body', demands=['CSSParserAtRule'], returns='CSSParserRule'),
        FieldCall(field='body', demands=['CSSParserQualifiedRule'], returns='CSSParserRule'),
        FieldCall(field='body', demands=['CSSParserDeclaration'], returns='CSSParserValue'),
        FieldCall(field='body', demands=['CSSParserBlock'], returns='CSSParserValue'),
    ],
    "image": [
        FieldCall(field='image', demands=['Notification'], returns='str'),
    ],
    "icon": [
        FieldCall(field='icon', demands=['Notification'], returns='str'),
    ],
    "badge": [
        FieldCall(field='badge', demands=['Notification'], returns='str'),
    ],
    "vibrate": [
        FieldCall(field='vibrate', demands=['Notification'], returns='int'),
    ],
    "renotify": [
        FieldCall(field='renotify', demands=['Notification'], returns='bool'),
    ],
    "silent": [
        FieldCall(field='silent', demands=['Notification'], returns='bool'),
    ],
    "requireInteraction": [
        FieldCall(field='requireInteraction', demands=['Notification'], returns='bool'),
    ],
    "actions": [
        FieldCall(field='actions', demands=['Notification'], returns='dict'),
    ],
    "NotificationEvent": [
        NewCall(constructor='NotificationEvent', demands=['str', 'dict'], returns='NotificationEvent'),
    ],
    "renderStart": [
        FieldCall(field='renderStart', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
    ],
    "styleAndLayoutStart": [
        FieldCall(field='styleAndLayoutStart', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
    ],
    "blockingDuration": [
        FieldCall(field='blockingDuration', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
    ],
    "firstUIEventTimestamp": [
        FieldCall(field='firstUIEventTimestamp', demands=['PerformanceLongAnimationFrameTiming'], returns='float'),
    ],
    "scripts": [
        FieldCall(field='scripts', demands=['PerformanceLongAnimationFrameTiming'], returns='PerformanceScriptTiming'),
    ],
    "invokerType": [
        FieldCall(field='invokerType', demands=['PerformanceScriptTiming'], returns='ScriptInvokerType'),
    ],
    "invoker": [
        FieldCall(field='invoker', demands=['PerformanceScriptTiming'], returns='str'),
    ],
    "executionStart": [
        FieldCall(field='executionStart', demands=['PerformanceScriptTiming'], returns='float'),
    ],
    "sourceURL": [
        FieldCall(field='sourceURL', demands=['PerformanceScriptTiming'], returns='str'),
    ],
    "sourceFunctionName": [
        FieldCall(field='sourceFunctionName', demands=['PerformanceScriptTiming'], returns='str'),
    ],
    "sourceCharPosition": [
        FieldCall(field='sourceCharPosition', demands=['PerformanceScriptTiming'], returns='long long'),
    ],
    "pauseDuration": [
        FieldCall(field='pauseDuration', demands=['PerformanceScriptTiming'], returns='float'),
    ],
    "forcedStyleAndLayoutDuration": [
        FieldCall(field='forcedStyleAndLayoutDuration', demands=['PerformanceScriptTiming'], returns='float'),
    ],
    "windowAttribution": [
        FieldCall(field='windowAttribution', demands=['PerformanceScriptTiming'], returns='ScriptWindowAttribution'),
    ],
    "margin": [
        FieldCall(field='margin', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='margin', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginTop": [
        FieldCall(field='marginTop', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginTop', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='marginTop', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginTop', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginRight": [
        FieldCall(field='marginRight', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginRight', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='marginRight', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginRight', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginBottom": [
        FieldCall(field='marginBottom', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginBottom', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='marginBottom', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginBottom', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginLeft": [
        FieldCall(field='marginLeft', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginLeft', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='marginLeft', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginLeft', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginBlock": [
        FieldCall(field='marginBlock', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginBlock', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginBlockStart": [
        FieldCall(field='marginBlockStart', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginBlockStart', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginBlockEnd": [
        FieldCall(field='marginBlockEnd', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginBlockEnd', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginInline": [
        FieldCall(field='marginInline', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginInline', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginInlineStart": [
        FieldCall(field='marginInlineStart', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginInlineStart', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marginInlineEnd": [
        FieldCall(field='marginInlineEnd', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='marginInlineEnd', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-top": [
        FieldCall(field='margin-top', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-top', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='margin-top', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-top', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-right": [
        FieldCall(field='margin-right', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-right', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='margin-right', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-right', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-bottom": [
        FieldCall(field='margin-bottom', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-bottom', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='margin-bottom', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-bottom', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-left": [
        FieldCall(field='margin-left', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-left', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='margin-left', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-left', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-block": [
        FieldCall(field='margin-block', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-block', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-block-start": [
        FieldCall(field='margin-block-start', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-block-start', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-block-end": [
        FieldCall(field='margin-block-end', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-block-end', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-inline": [
        FieldCall(field='margin-inline', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-inline', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-inline-start": [
        FieldCall(field='margin-inline-start', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-inline-start', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "margin-inline-end": [
        FieldCall(field='margin-inline-end', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='margin-inline-end', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset": [
        FieldCall(field='inset', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetBlock": [
        FieldCall(field='insetBlock', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetBlock', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetBlockStart": [
        FieldCall(field='insetBlockStart', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetBlockStart', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetBlockEnd": [
        FieldCall(field='insetBlockEnd', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetBlockEnd', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetInline": [
        FieldCall(field='insetInline', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetInline', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetInlineStart": [
        FieldCall(field='insetInlineStart', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetInlineStart', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "insetInlineEnd": [
        FieldCall(field='insetInlineEnd', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='insetInlineEnd', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-block": [
        FieldCall(field='inset-block', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-block', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-block-start": [
        FieldCall(field='inset-block-start', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-block-start', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-block-end": [
        FieldCall(field='inset-block-end', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-block-end', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-inline": [
        FieldCall(field='inset-inline', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-inline', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-inline-start": [
        FieldCall(field='inset-inline-start', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-inline-start', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inset-inline-end": [
        FieldCall(field='inset-inline-end', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inset-inline-end', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "minWidth": [
        FieldCall(field='minWidth', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='minWidth', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "maxWidth": [
        FieldCall(field='maxWidth', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='maxWidth', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "minHeight": [
        FieldCall(field='minHeight', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='minHeight', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "maxHeight": [
        FieldCall(field='maxHeight', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='maxHeight', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "minBlockSize": [
        FieldCall(field='minBlockSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='minBlockSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "maxBlockSize": [
        FieldCall(field='maxBlockSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='maxBlockSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "minInlineSize": [
        FieldCall(field='minInlineSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='minInlineSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "maxInlineSize": [
        FieldCall(field='maxInlineSize', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='maxInlineSize', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "min-width": [
        FieldCall(field='min-width', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='min-width', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "max-width": [
        FieldCall(field='max-width', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='max-width', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "min-height": [
        FieldCall(field='min-height', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='min-height', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "max-height": [
        FieldCall(field='max-height', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='max-height', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "block-size": [
        FieldCall(field='block-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='block-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "min-block-size": [
        FieldCall(field='min-block-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='min-block-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "max-block-size": [
        FieldCall(field='max-block-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='max-block-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inline-size": [
        FieldCall(field='inline-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='inline-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "min-inline-size": [
        FieldCall(field='min-inline-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='min-inline-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "max-inline-size": [
        FieldCall(field='max-inline-size', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='max-inline-size', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "placeSelf": [
        FieldCall(field='placeSelf', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='placeSelf', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "alignSelf": [
        FieldCall(field='alignSelf', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='alignSelf', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "justifySelf": [
        FieldCall(field='justifySelf', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='justifySelf', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "place-self": [
        FieldCall(field='place-self', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='place-self', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "align-self": [
        FieldCall(field='align-self', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='align-self', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "justify-self": [
        FieldCall(field='justify-self', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='justify-self', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "positionAnchor": [
        FieldCall(field='positionAnchor', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='positionAnchor', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "position-anchor": [
        FieldCall(field='position-anchor', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='position-anchor', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "positionArea": [
        FieldCall(field='positionArea', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='positionArea', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "position-area": [
        FieldCall(field='position-area', demands=['CSSPositionTryDescriptors'], returns='CSSOMString'),
        FieldCall(field='position-area', demands=['CSSPositionTryDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "inputs": [
        FieldCall(field='inputs', demands=['MIDIAccess'], returns='MIDIInputMap'),
    ],
    "outputs": [
        FieldCall(field='outputs', demands=['MIDIAccess'], returns='MIDIOutputMap'),
    ],
    "sysexEnabled": [
        FieldCall(field='sysexEnabled', demands=['MIDIAccess'], returns='bool'),
    ],
    "manufacturer": [
        FieldCall(field='manufacturer', demands=['MIDIPort'], returns='str'),
    ],
    "connection": [
        FieldCall(field='connection', demands=['MIDIPort'], returns='MIDIPortConnectionState'),
        FieldCall(field='connection', demands=['PresentationConnectionAvailableEvent'], returns='PresentationConnection'),
    ],
    "onmidimessage": [
        FieldCall(field='onmidimessage', demands=['MIDIInput'], returns='EventHandler'),
        FieldCall(field='onmidimessage', demands=['MIDIInput', 'EventHandler'], returns='EventHandler'),
    ],
    "MIDIMessageEvent": [
        NewCall(constructor='MIDIMessageEvent', demands=['str'], returns='MIDIMessageEvent'),
        NewCall(constructor='MIDIMessageEvent', demands=['str', 'dict'], returns='MIDIMessageEvent'),
    ],
    "MIDIConnectionEvent": [
        NewCall(constructor='MIDIConnectionEvent', demands=['str'], returns='MIDIConnectionEvent'),
        NewCall(constructor='MIDIConnectionEvent', demands=['str', 'dict'], returns='MIDIConnectionEvent'),
    ],
    "DataCue": [
        NewCall(constructor='DataCue', demands=['float', 'float', '*'], returns='DataCue'),
        NewCall(constructor='DataCue', demands=['float', 'float', '*', 'str'], returns='DataCue'),
    ],
    "CSSParserAtRule": [
        NewCall(constructor='CSSParserAtRule', demands=['str', 'CSSToken'], returns='CSSParserAtRule'),
        NewCall(constructor='CSSParserAtRule', demands=['str', 'CSSToken', 'CSSParserRule'], returns='CSSParserAtRule'),
    ],
    "prelude": [
        FieldCall(field='prelude', demands=['CSSParserAtRule'], returns='CSSParserValue'),
        FieldCall(field='prelude', demands=['CSSParserQualifiedRule'], returns='CSSParserValue'),
    ],
    "CSSParserQualifiedRule": [
        NewCall(constructor='CSSParserQualifiedRule', demands=['CSSToken'], returns='CSSParserQualifiedRule'),
        NewCall(constructor='CSSParserQualifiedRule', demands=['CSSToken', 'CSSParserRule'], returns='CSSParserQualifiedRule'),
    ],
    "CSSParserDeclaration": [
        NewCall(constructor='CSSParserDeclaration', demands=['str'], returns='CSSParserDeclaration'),
        NewCall(constructor='CSSParserDeclaration', demands=['str', 'CSSParserRule'], returns='CSSParserDeclaration'),
    ],
    "CSSParserBlock": [
        NewCall(constructor='CSSParserBlock', demands=['str', 'CSSParserValue'], returns='CSSParserBlock'),
    ],
    "CSSParserFunction": [
        NewCall(constructor='CSSParserFunction', demands=['str', 'CSSParserValue'], returns='CSSParserFunction'),
    ],
    "args": [
        FieldCall(field='args', demands=['CSSParserFunction'], returns='CSSParserValue'),
    ],
    "hadRecentInput": [
        FieldCall(field='hadRecentInput', demands=['LayoutShift'], returns='bool'),
    ],
    "lastInputTime": [
        FieldCall(field='lastInputTime', demands=['LayoutShift'], returns='float'),
    ],
    "sources": [
        FieldCall(field='sources', demands=['LayoutShift'], returns='LayoutShiftAttribution'),
    ],
    "node": [
        FieldCall(field='node', demands=['LayoutShiftAttribution'], returns='Node'),
    ],
    "previousRect": [
        FieldCall(field='previousRect', demands=['LayoutShiftAttribution'], returns='DOMRectReadOnly'),
    ],
    "currentRect": [
        FieldCall(field='currentRect', demands=['LayoutShiftAttribution'], returns='DOMRectReadOnly'),
    ],
    "SecurityPolicyViolationEvent": [
        NewCall(constructor='SecurityPolicyViolationEvent', demands=['str'], returns='SecurityPolicyViolationEvent'),
        NewCall(constructor='SecurityPolicyViolationEvent', demands=['str', 'dict'], returns='SecurityPolicyViolationEvent'),
    ],
    "documentURI": [
        FieldCall(field='documentURI', demands=['SecurityPolicyViolationEvent'], returns='str'),
        FieldCall(field='documentURI', demands=['Document'], returns='str'),
    ],
    "blockedURI": [
        FieldCall(field='blockedURI', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "effectiveDirective": [
        FieldCall(field='effectiveDirective', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "violatedDirective": [
        FieldCall(field='violatedDirective', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "originalPolicy": [
        FieldCall(field='originalPolicy', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "sourceFile": [
        FieldCall(field='sourceFile', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "sample": [
        FieldCall(field='sample', demands=['SecurityPolicyViolationEvent'], returns='str'),
    ],
    "disposition": [
        FieldCall(field='disposition', demands=['SecurityPolicyViolationEvent'], returns='SecurityPolicyViolationEventDisposition'),
    ],
    "statusCode": [
        FieldCall(field='statusCode', demands=['SecurityPolicyViolationEvent'], returns='unsigned short'),
    ],
    "lineNumber": [
        FieldCall(field='lineNumber', demands=['SecurityPolicyViolationEvent'], returns='int'),
    ],
    "columnNumber": [
        FieldCall(field='columnNumber', demands=['SecurityPolicyViolationEvent'], returns='int'),
    ],
    "FontFace": [
        NewCall(constructor='FontFace', demands=['CSSOMString', 'CSSOMString'], returns='FontFace'),
        NewCall(constructor='FontFace', demands=['CSSOMString', 'CSSOMString', 'dict'], returns='FontFace'),
    ],
    "weight": [
        FieldCall(field='weight', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='weight', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='weight', demands=['SpeechGrammar'], returns='float'),
        FieldCall(field='weight', demands=['SpeechGrammar', 'float'], returns='float'),
    ],
    "stretch": [
        FieldCall(field='stretch', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='stretch', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "featureSettings": [
        FieldCall(field='featureSettings', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='featureSettings', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "variationSettings": [
        FieldCall(field='variationSettings', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='variationSettings', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "display": [
        FieldCall(field='display', demands=['FontFace'], returns='CSSOMString'),
        FieldCall(field='display', demands=['FontFace', 'CSSOMString'], returns='CSSOMString'),
    ],
    "axisTag": [
        FieldCall(field='axisTag', demands=['FontFaceVariationAxis'], returns='str'),
    ],
    "minimumValue": [
        FieldCall(field='minimumValue', demands=['FontFaceVariationAxis'], returns='float'),
    ],
    "maximumValue": [
        FieldCall(field='maximumValue', demands=['FontFaceVariationAxis'], returns='float'),
    ],
    "usableWithLightBackground": [
        FieldCall(field='usableWithLightBackground', demands=['FontFacePalette'], returns='bool'),
    ],
    "usableWithDarkBackground": [
        FieldCall(field='usableWithDarkBackground', demands=['FontFacePalette'], returns='bool'),
    ],
    "FontFaceSetLoadEvent": [
        NewCall(constructor='FontFaceSetLoadEvent', demands=['CSSOMString'], returns='FontFaceSetLoadEvent'),
        NewCall(constructor='FontFaceSetLoadEvent', demands=['CSSOMString', 'dict'], returns='FontFaceSetLoadEvent'),
    ],
    "fontfaces": [
        FieldCall(field='fontfaces', demands=['FontFaceSetLoadEvent'], returns='FontFace'),
    ],
    "onloading": [
        FieldCall(field='onloading', demands=['FontFaceSet'], returns='EventHandler'),
        FieldCall(field='onloading', demands=['FontFaceSet', 'EventHandler'], returns='EventHandler'),
    ],
    "onloadingdone": [
        FieldCall(field='onloadingdone', demands=['FontFaceSet'], returns='EventHandler'),
        FieldCall(field='onloadingdone', demands=['FontFaceSet', 'EventHandler'], returns='EventHandler'),
    ],
    "onloadingerror": [
        FieldCall(field='onloadingerror', demands=['FontFaceSet'], returns='EventHandler'),
        FieldCall(field='onloadingerror', demands=['FontFaceSet', 'EventHandler'], returns='EventHandler'),
    ],
    "check": [
        PrototypeCall(constructor='FontFaceSet', fn='check', demands=['FontFaceSet', 'CSSOMString'], returns='bool'),
        PrototypeCall(constructor='FontFaceSet', fn='check', demands=['FontFaceSet', 'CSSOMString', 'CSSOMString'], returns='bool'),
    ],
    "NavigationEvent": [
        NewCall(constructor='NavigationEvent', demands=['str'], returns='NavigationEvent'),
        NewCall(constructor='NavigationEvent', demands=['str', 'dict'], returns='NavigationEvent'),
    ],
    "CompressionStream": [
        NewCall(constructor='CompressionStream', demands=['CompressionFormat'], returns='CompressionStream'),
    ],
    "DecompressionStream": [
        NewCall(constructor='DecompressionStream', demands=['CompressionFormat'], returns='DecompressionStream'),
    ],
    "createPolicy": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='createPolicy', demands=['TrustedTypePolicyFactory', 'str'], returns='TrustedTypePolicy'),
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='createPolicy', demands=['TrustedTypePolicyFactory', 'str', 'dict'], returns='TrustedTypePolicy'),
    ],
    "isHTML": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='isHTML', demands=['TrustedTypePolicyFactory', '*'], returns='bool'),
    ],
    "isScript": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='isScript', demands=['TrustedTypePolicyFactory', '*'], returns='bool'),
    ],
    "isScriptURL": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='isScriptURL', demands=['TrustedTypePolicyFactory', '*'], returns='bool'),
    ],
    "emptyHTML": [
        FieldCall(field='emptyHTML', demands=['TrustedTypePolicyFactory'], returns='TrustedHTML'),
    ],
    "emptyScript": [
        FieldCall(field='emptyScript', demands=['TrustedTypePolicyFactory'], returns='TrustedScript'),
    ],
    "getAttributeType": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='getAttributeType', demands=['TrustedTypePolicyFactory', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='getAttributeType', demands=['TrustedTypePolicyFactory', 'str', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='getAttributeType', demands=['TrustedTypePolicyFactory', 'str', 'str', 'str', 'str'], returns='str'),
    ],
    "getPropertyType": [
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='getPropertyType', demands=['TrustedTypePolicyFactory', 'str', 'str'], returns='str'),
        PrototypeCall(constructor='TrustedTypePolicyFactory', fn='getPropertyType', demands=['TrustedTypePolicyFactory', 'str', 'str', 'str'], returns='str'),
    ],
    "defaultPolicy": [
        FieldCall(field='defaultPolicy', demands=['TrustedTypePolicyFactory'], returns='TrustedTypePolicy'),
    ],
    "createHTML": [
        PrototypeCall(constructor='TrustedTypePolicy', fn='createHTML', demands=['TrustedTypePolicy', 'str', '*'], returns='TrustedHTML'),
    ],
    "createScript": [
        PrototypeCall(constructor='TrustedTypePolicy', fn='createScript', demands=['TrustedTypePolicy', 'str', '*'], returns='TrustedScript'),
    ],
    "createScriptURL": [
        PrototypeCall(constructor='TrustedTypePolicy', fn='createScriptURL', demands=['TrustedTypePolicy', 'str', '*'], returns='TrustedScriptURL'),
    ],
    "sampleInterval": [
        FieldCall(field='sampleInterval', demands=['Profiler'], returns='float'),
    ],
    "stopped": [
        FieldCall(field='stopped', demands=['Profiler'], returns='bool'),
    ],
    "Profiler": [
        NewCall(constructor='Profiler', demands=['dict'], returns='Profiler'),
    ],
    "Touch": [
        NewCall(constructor='Touch', demands=['dict'], returns='Touch'),
    ],
    "identifier": [
        FieldCall(field='identifier', demands=['Touch'], returns='int'),
        FieldCall(field='identifier', demands=['PerformanceElementTiming'], returns='str'),
    ],
    "pageX": [
        FieldCall(field='pageX', demands=['Touch'], returns='float'),
    ],
    "pageY": [
        FieldCall(field='pageY', demands=['Touch'], returns='float'),
    ],
    "radiusX": [
        FieldCall(field='radiusX', demands=['Touch'], returns='float'),
        FieldCall(field='radiusX', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedNumber'),
    ],
    "radiusY": [
        FieldCall(field='radiusY', demands=['Touch'], returns='float'),
        FieldCall(field='radiusY', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedNumber'),
    ],
    "rotationAngle": [
        FieldCall(field='rotationAngle', demands=['Touch'], returns='float'),
    ],
    "force": [
        FieldCall(field='force', demands=['Touch'], returns='float'),
    ],
    "touchType": [
        FieldCall(field='touchType', demands=['Touch'], returns='TouchType'),
    ],
    "TouchEvent": [
        NewCall(constructor='TouchEvent', demands=['str'], returns='TouchEvent'),
        NewCall(constructor='TouchEvent', demands=['str', 'dict'], returns='TouchEvent'),
    ],
    "targetTouches": [
        FieldCall(field='targetTouches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "changedTouches": [
        FieldCall(field='changedTouches', demands=['TouchEvent'], returns='TouchList'),
    ],
    "SpeechRecognition": [
        NewCall(constructor='SpeechRecognition', demands=[], returns='SpeechRecognition'),
    ],
    "grammars": [
        FieldCall(field='grammars', demands=['SpeechRecognition'], returns='SpeechGrammarList'),
        FieldCall(field='grammars', demands=['SpeechRecognition', 'SpeechGrammarList'], returns='SpeechGrammarList'),
    ],
    "continuous": [
        FieldCall(field='continuous', demands=['SpeechRecognition'], returns='bool'),
        FieldCall(field='continuous', demands=['SpeechRecognition', 'bool'], returns='bool'),
    ],
    "interimResults": [
        FieldCall(field='interimResults', demands=['SpeechRecognition'], returns='bool'),
        FieldCall(field='interimResults', demands=['SpeechRecognition', 'bool'], returns='bool'),
    ],
    "maxAlternatives": [
        FieldCall(field='maxAlternatives', demands=['SpeechRecognition'], returns='int'),
        FieldCall(field='maxAlternatives', demands=['SpeechRecognition', 'int'], returns='int'),
    ],
    "processLocally": [
        FieldCall(field='processLocally', demands=['SpeechRecognition'], returns='bool'),
        FieldCall(field='processLocally', demands=['SpeechRecognition', 'bool'], returns='bool'),
    ],
    "phrases": [
        FieldCall(field='phrases', demands=['SpeechRecognition'], returns='SpeechRecognitionPhrase'),
        FieldCall(field='phrases', demands=['SpeechRecognition', 'SpeechRecognitionPhrase'], returns='SpeechRecognitionPhrase'),
    ],
    "available": [
        DirectCall(fn='available', receiver='SpeechRecognition', demands=['dict'], returns='AvailabilityStatus'),
    ],
    "install": [
        DirectCall(fn='install', receiver='SpeechRecognition', demands=['dict'], returns='bool'),
    ],
    "onaudiostart": [
        FieldCall(field='onaudiostart', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onaudiostart', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onsoundstart": [
        FieldCall(field='onsoundstart', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onsoundstart', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onspeechstart": [
        FieldCall(field='onspeechstart', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onspeechstart', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onspeechend": [
        FieldCall(field='onspeechend', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onspeechend', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onsoundend": [
        FieldCall(field='onsoundend', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onsoundend', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onaudioend": [
        FieldCall(field='onaudioend', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onaudioend', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onresult": [
        FieldCall(field='onresult', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onresult', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onnomatch": [
        FieldCall(field='onnomatch', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onnomatch', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
    ],
    "onstart": [
        FieldCall(field='onstart', demands=['SpeechRecognition'], returns='EventHandler'),
        FieldCall(field='onstart', demands=['SpeechRecognition', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstart', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onstart', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onstart', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='onstart', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
    ],
    "SpeechRecognitionErrorEvent": [
        NewCall(constructor='SpeechRecognitionErrorEvent', demands=['str', 'dict'], returns='SpeechRecognitionErrorEvent'),
    ],
    "transcript": [
        FieldCall(field='transcript', demands=['SpeechRecognitionAlternative'], returns='str'),
    ],
    "confidence": [
        FieldCall(field='confidence', demands=['SpeechRecognitionAlternative'], returns='float'),
    ],
    "isFinal": [
        FieldCall(field='isFinal', demands=['SpeechRecognitionResult'], returns='bool'),
    ],
    "SpeechRecognitionEvent": [
        NewCall(constructor='SpeechRecognitionEvent', demands=['str', 'dict'], returns='SpeechRecognitionEvent'),
    ],
    "resultIndex": [
        FieldCall(field='resultIndex', demands=['SpeechRecognitionEvent'], returns='int'),
    ],
    "results": [
        FieldCall(field='results', demands=['SpeechRecognitionEvent'], returns='SpeechRecognitionResultList'),
        FieldCall(field='results', demands=['XRTransientInputHitTestResult'], returns='XRHitTestResult'),
    ],
    "SpeechGrammarList": [
        NewCall(constructor='SpeechGrammarList', demands=[], returns='SpeechGrammarList'),
    ],
    "addFromURI": [
        PrototypeCall(constructor='SpeechGrammarList', fn='addFromURI', demands=['SpeechGrammarList', 'str'], returns='None'),
        PrototypeCall(constructor='SpeechGrammarList', fn='addFromURI', demands=['SpeechGrammarList', 'str', 'float'], returns='None'),
    ],
    "addFromString": [
        PrototypeCall(constructor='SpeechGrammarList', fn='addFromString', demands=['SpeechGrammarList', 'str'], returns='None'),
        PrototypeCall(constructor='SpeechGrammarList', fn='addFromString', demands=['SpeechGrammarList', 'str', 'float'], returns='None'),
    ],
    "SpeechRecognitionPhrase": [
        NewCall(constructor='SpeechRecognitionPhrase', demands=['str'], returns='SpeechRecognitionPhrase'),
        NewCall(constructor='SpeechRecognitionPhrase', demands=['str', 'float'], returns='SpeechRecognitionPhrase'),
    ],
    "phrase": [
        FieldCall(field='phrase', demands=['SpeechRecognitionPhrase'], returns='str'),
    ],
    "boost": [
        FieldCall(field='boost', demands=['SpeechRecognitionPhrase'], returns='float'),
    ],
    "speaking": [
        FieldCall(field='speaking', demands=['SpeechSynthesis'], returns='bool'),
    ],
    "onvoiceschanged": [
        FieldCall(field='onvoiceschanged', demands=['SpeechSynthesis'], returns='EventHandler'),
        FieldCall(field='onvoiceschanged', demands=['SpeechSynthesis', 'EventHandler'], returns='EventHandler'),
    ],
    "speak": [
        PrototypeCall(constructor='SpeechSynthesis', fn='speak', demands=['SpeechSynthesis', 'SpeechSynthesisUtterance'], returns='None'),
    ],
    "getVoices": [
        PrototypeCall(constructor='SpeechSynthesis', fn='getVoices', demands=['SpeechSynthesis'], returns='SpeechSynthesisVoice'),
    ],
    "SpeechSynthesisUtterance": [
        NewCall(constructor='SpeechSynthesisUtterance', demands=[], returns='SpeechSynthesisUtterance'),
        NewCall(constructor='SpeechSynthesisUtterance', demands=['str'], returns='SpeechSynthesisUtterance'),
    ],
    "voice": [
        FieldCall(field='voice', demands=['SpeechSynthesisUtterance'], returns='SpeechSynthesisVoice'),
        FieldCall(field='voice', demands=['SpeechSynthesisUtterance', 'SpeechSynthesisVoice'], returns='SpeechSynthesisVoice'),
    ],
    "rate": [
        FieldCall(field='rate', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='rate', demands=['SpeechSynthesisUtterance', 'float'], returns='float'),
    ],
    "pitch": [
        FieldCall(field='pitch', demands=['SpeechSynthesisUtterance'], returns='float'),
        FieldCall(field='pitch', demands=['SpeechSynthesisUtterance', 'float'], returns='float'),
    ],
    "onpause": [
        FieldCall(field='onpause', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onpause', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onpause', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='onpause', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
    ],
    "onresume": [
        FieldCall(field='onresume', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onresume', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onresume', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='onresume', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
    ],
    "onmark": [
        FieldCall(field='onmark', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onmark', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
    ],
    "onboundary": [
        FieldCall(field='onboundary', demands=['SpeechSynthesisUtterance'], returns='EventHandler'),
        FieldCall(field='onboundary', demands=['SpeechSynthesisUtterance', 'EventHandler'], returns='EventHandler'),
    ],
    "SpeechSynthesisEvent": [
        NewCall(constructor='SpeechSynthesisEvent', demands=['str', 'dict'], returns='SpeechSynthesisEvent'),
    ],
    "utterance": [
        FieldCall(field='utterance', demands=['SpeechSynthesisEvent'], returns='SpeechSynthesisUtterance'),
    ],
    "charIndex": [
        FieldCall(field='charIndex', demands=['SpeechSynthesisEvent'], returns='int'),
    ],
    "charLength": [
        FieldCall(field='charLength', demands=['SpeechSynthesisEvent'], returns='int'),
    ],
    "SpeechSynthesisErrorEvent": [
        NewCall(constructor='SpeechSynthesisErrorEvent', demands=['str', 'dict'], returns='SpeechSynthesisErrorEvent'),
    ],
    "voiceURI": [
        FieldCall(field='voiceURI', demands=['SpeechSynthesisVoice'], returns='str'),
    ],
    "localService": [
        FieldCall(field='localService', demands=['SpeechSynthesisVoice'], returns='bool'),
    ],
    "USBConnectionEvent": [
        NewCall(constructor='USBConnectionEvent', demands=['str', 'dict'], returns='USBConnectionEvent'),
    ],
    "USBInTransferResult": [
        NewCall(constructor='USBInTransferResult', demands=['USBTransferStatus'], returns='USBInTransferResult'),
        NewCall(constructor='USBInTransferResult', demands=['USBTransferStatus', 'DataView'], returns='USBInTransferResult'),
    ],
    "USBOutTransferResult": [
        NewCall(constructor='USBOutTransferResult', demands=['USBTransferStatus'], returns='USBOutTransferResult'),
        NewCall(constructor='USBOutTransferResult', demands=['USBTransferStatus', 'int'], returns='USBOutTransferResult'),
    ],
    "bytesWritten": [
        FieldCall(field='bytesWritten', demands=['USBOutTransferResult'], returns='int'),
        FieldCall(field='bytesWritten', demands=['USBIsochronousOutTransferPacket'], returns='int'),
    ],
    "USBIsochronousInTransferPacket": [
        NewCall(constructor='USBIsochronousInTransferPacket', demands=['USBTransferStatus'], returns='USBIsochronousInTransferPacket'),
        NewCall(constructor='USBIsochronousInTransferPacket', demands=['USBTransferStatus', 'DataView'], returns='USBIsochronousInTransferPacket'),
    ],
    "USBIsochronousInTransferResult": [
        NewCall(constructor='USBIsochronousInTransferResult', demands=['USBIsochronousInTransferPacket'], returns='USBIsochronousInTransferResult'),
        NewCall(constructor='USBIsochronousInTransferResult', demands=['USBIsochronousInTransferPacket', 'DataView'], returns='USBIsochronousInTransferResult'),
    ],
    "packets": [
        FieldCall(field='packets', demands=['USBIsochronousInTransferResult'], returns='USBIsochronousInTransferPacket'),
        FieldCall(field='packets', demands=['USBIsochronousOutTransferResult'], returns='USBIsochronousOutTransferPacket'),
    ],
    "USBIsochronousOutTransferPacket": [
        NewCall(constructor='USBIsochronousOutTransferPacket', demands=['USBTransferStatus'], returns='USBIsochronousOutTransferPacket'),
        NewCall(constructor='USBIsochronousOutTransferPacket', demands=['USBTransferStatus', 'int'], returns='USBIsochronousOutTransferPacket'),
    ],
    "USBIsochronousOutTransferResult": [
        NewCall(constructor='USBIsochronousOutTransferResult', demands=['USBIsochronousOutTransferPacket'], returns='USBIsochronousOutTransferResult'),
    ],
    "usbVersionMajor": [
        FieldCall(field='usbVersionMajor', demands=['USBDevice'], returns='int'),
    ],
    "usbVersionMinor": [
        FieldCall(field='usbVersionMinor', demands=['USBDevice'], returns='int'),
    ],
    "usbVersionSubminor": [
        FieldCall(field='usbVersionSubminor', demands=['USBDevice'], returns='int'),
    ],
    "deviceClass": [
        FieldCall(field='deviceClass', demands=['USBDevice'], returns='int'),
    ],
    "deviceSubclass": [
        FieldCall(field='deviceSubclass', demands=['USBDevice'], returns='int'),
    ],
    "deviceProtocol": [
        FieldCall(field='deviceProtocol', demands=['USBDevice'], returns='int'),
    ],
    "deviceVersionMajor": [
        FieldCall(field='deviceVersionMajor', demands=['USBDevice'], returns='int'),
    ],
    "deviceVersionMinor": [
        FieldCall(field='deviceVersionMinor', demands=['USBDevice'], returns='int'),
    ],
    "deviceVersionSubminor": [
        FieldCall(field='deviceVersionSubminor', demands=['USBDevice'], returns='int'),
    ],
    "manufacturerName": [
        FieldCall(field='manufacturerName', demands=['USBDevice'], returns='str'),
    ],
    "serialNumber": [
        FieldCall(field='serialNumber', demands=['USBDevice'], returns='str'),
        FieldCall(field='serialNumber', demands=['NDEFReadingEvent'], returns='str'),
    ],
    "configuration": [
        FieldCall(field='configuration', demands=['USBDevice'], returns='USBConfiguration'),
    ],
    "configurations": [
        FieldCall(field='configurations', demands=['USBDevice'], returns='USBConfiguration'),
    ],
    "selectConfiguration": [
        PrototypeCall(constructor='USBDevice', fn='selectConfiguration', demands=['USBDevice', 'int'], returns='None'),
    ],
    "claimInterface": [
        PrototypeCall(constructor='USBDevice', fn='claimInterface', demands=['USBDevice', 'int'], returns='None'),
    ],
    "releaseInterface": [
        PrototypeCall(constructor='USBDevice', fn='releaseInterface', demands=['USBDevice', 'int'], returns='None'),
    ],
    "selectAlternateInterface": [
        PrototypeCall(constructor='USBDevice', fn='selectAlternateInterface', demands=['USBDevice', 'int', 'int'], returns='None'),
    ],
    "controlTransferIn": [
        PrototypeCall(constructor='USBDevice', fn='controlTransferIn', demands=['USBDevice', 'dict', 'unsigned short'], returns='USBInTransferResult'),
    ],
    "controlTransferOut": [
        PrototypeCall(constructor='USBDevice', fn='controlTransferOut', demands=['USBDevice', 'dict'], returns='USBOutTransferResult'),
        PrototypeCall(constructor='USBDevice', fn='controlTransferOut', demands=['USBDevice', 'dict', 'BufferSource'], returns='USBOutTransferResult'),
    ],
    "clearHalt": [
        PrototypeCall(constructor='USBDevice', fn='clearHalt', demands=['USBDevice', 'USBDirection', 'int'], returns='None'),
    ],
    "transferIn": [
        PrototypeCall(constructor='USBDevice', fn='transferIn', demands=['USBDevice', 'int', 'int'], returns='USBInTransferResult'),
    ],
    "transferOut": [
        PrototypeCall(constructor='USBDevice', fn='transferOut', demands=['USBDevice', 'int', 'BufferSource'], returns='USBOutTransferResult'),
    ],
    "isochronousTransferIn": [
        PrototypeCall(constructor='USBDevice', fn='isochronousTransferIn', demands=['USBDevice', 'int', 'int'], returns='USBIsochronousInTransferResult'),
    ],
    "isochronousTransferOut": [
        PrototypeCall(constructor='USBDevice', fn='isochronousTransferOut', demands=['USBDevice', 'int', 'BufferSource', 'int'], returns='USBIsochronousOutTransferResult'),
    ],
    "USBConfiguration": [
        NewCall(constructor='USBConfiguration', demands=['USBDevice', 'int'], returns='USBConfiguration'),
    ],
    "configurationValue": [
        FieldCall(field='configurationValue', demands=['USBConfiguration'], returns='int'),
    ],
    "configurationName": [
        FieldCall(field='configurationName', demands=['USBConfiguration'], returns='str'),
    ],
    "interfaces": [
        FieldCall(field='interfaces', demands=['USBConfiguration'], returns='USBInterface'),
    ],
    "USBInterface": [
        NewCall(constructor='USBInterface', demands=['USBConfiguration', 'int'], returns='USBInterface'),
    ],
    "interfaceNumber": [
        FieldCall(field='interfaceNumber', demands=['USBInterface'], returns='int'),
    ],
    "alternate": [
        FieldCall(field='alternate', demands=['USBInterface'], returns='USBAlternateInterface'),
    ],
    "alternates": [
        FieldCall(field='alternates', demands=['USBInterface'], returns='USBAlternateInterface'),
    ],
    "claimed": [
        FieldCall(field='claimed', demands=['USBInterface'], returns='bool'),
    ],
    "USBAlternateInterface": [
        NewCall(constructor='USBAlternateInterface', demands=['USBInterface', 'int'], returns='USBAlternateInterface'),
    ],
    "alternateSetting": [
        FieldCall(field='alternateSetting', demands=['USBAlternateInterface'], returns='int'),
    ],
    "interfaceClass": [
        FieldCall(field='interfaceClass', demands=['USBAlternateInterface'], returns='int'),
    ],
    "interfaceSubclass": [
        FieldCall(field='interfaceSubclass', demands=['USBAlternateInterface'], returns='int'),
    ],
    "interfaceProtocol": [
        FieldCall(field='interfaceProtocol', demands=['USBAlternateInterface'], returns='int'),
    ],
    "interfaceName": [
        FieldCall(field='interfaceName', demands=['USBAlternateInterface'], returns='str'),
    ],
    "endpoints": [
        FieldCall(field='endpoints', demands=['USBAlternateInterface'], returns='USBEndpoint'),
    ],
    "USBEndpoint": [
        NewCall(constructor='USBEndpoint', demands=['USBAlternateInterface', 'int', 'USBDirection'], returns='USBEndpoint'),
    ],
    "endpointNumber": [
        FieldCall(field='endpointNumber', demands=['USBEndpoint'], returns='int'),
    ],
    "packetSize": [
        FieldCall(field='packetSize', demands=['USBEndpoint'], returns='int'),
    ],
    "registerPaint": [
        PrototypeCall(constructor='PaintWorkletGlobalScope', fn='registerPaint', demands=['PaintWorkletGlobalScope', 'str', 'VoidFunction'], returns='None'),
    ],
    "devicePixelRatio": [
        FieldCall(field='devicePixelRatio', demands=['PaintWorkletGlobalScope'], returns='float'),
        FieldCall(field='devicePixelRatio', demands=['ScreenDetailed'], returns='float'),
    ],
    "PeriodicSyncEvent": [
        NewCall(constructor='PeriodicSyncEvent', demands=['str', 'dict'], returns='PeriodicSyncEvent'),
    ],
    "getTitlebarAreaRect": [
        PrototypeCall(constructor='WindowControlsOverlay', fn='getTitlebarAreaRect', demands=['WindowControlsOverlay'], returns='DOMRect'),
    ],
    "WindowControlsOverlayGeometryChangeEvent": [
        NewCall(constructor='WindowControlsOverlayGeometryChangeEvent', demands=['str', 'dict'], returns='WindowControlsOverlayGeometryChangeEvent'),
    ],
    "titlebarAreaRect": [
        FieldCall(field='titlebarAreaRect', demands=['WindowControlsOverlayGeometryChangeEvent'], returns='DOMRect'),
    ],
    "WebSocket": [
        NewCall(constructor='WebSocket', demands=['str'], returns='WebSocket'),
        NewCall(constructor='WebSocket', demands=['str', 'str'], returns='WebSocket'),
    ],
    "extensions": [
        FieldCall(field='extensions', demands=['WebSocket'], returns='str'),
    ],
    "CloseEvent": [
        NewCall(constructor='CloseEvent', demands=['str'], returns='CloseEvent'),
        NewCall(constructor='CloseEvent', demands=['str', 'dict'], returns='CloseEvent'),
    ],
    "wasClean": [
        FieldCall(field='wasClean', demands=['CloseEvent'], returns='bool'),
    ],
    "screens": [
        FieldCall(field='screens', demands=['ScreenDetails'], returns='ScreenDetailed'),
    ],
    "currentScreen": [
        FieldCall(field='currentScreen', demands=['ScreenDetails'], returns='ScreenDetailed'),
    ],
    "onscreenschange": [
        FieldCall(field='onscreenschange', demands=['ScreenDetails'], returns='EventHandler'),
        FieldCall(field='onscreenschange', demands=['ScreenDetails', 'EventHandler'], returns='EventHandler'),
    ],
    "oncurrentscreenchange": [
        FieldCall(field='oncurrentscreenchange', demands=['ScreenDetails'], returns='EventHandler'),
        FieldCall(field='oncurrentscreenchange', demands=['ScreenDetails', 'EventHandler'], returns='EventHandler'),
    ],
    "availLeft": [
        FieldCall(field='availLeft', demands=['ScreenDetailed'], returns='int'),
    ],
    "availTop": [
        FieldCall(field='availTop', demands=['ScreenDetailed'], returns='int'),
    ],
    "isInternal": [
        FieldCall(field='isInternal', demands=['ScreenDetailed'], returns='bool'),
    ],
    "targetURL": [
        FieldCall(field='targetURL', demands=['LaunchParams'], returns='str'),
    ],
    "setConsumer": [
        PrototypeCall(constructor='LaunchQueue', fn='setConsumer', demands=['LaunchQueue', 'LaunchConsumer'], returns='None'),
    ],
    "postTask": [
        PrototypeCall(constructor='Scheduler', fn='postTask', demands=['Scheduler', 'SchedulerPostTaskCallback'], returns='*'),
        PrototypeCall(constructor='Scheduler', fn='postTask', demands=['Scheduler', 'SchedulerPostTaskCallback', 'dict'], returns='*'),
    ],
    "yield": [
        PrototypeCall(constructor='Scheduler', fn='yield', demands=['Scheduler'], returns='None'),
    ],
    "TaskPriorityChangeEvent": [
        NewCall(constructor='TaskPriorityChangeEvent', demands=['str', 'dict'], returns='TaskPriorityChangeEvent'),
    ],
    "previousPriority": [
        FieldCall(field='previousPriority', demands=['TaskPriorityChangeEvent'], returns='TaskPriority'),
    ],
    "TaskController": [
        NewCall(constructor='TaskController', demands=[], returns='TaskController'),
        NewCall(constructor='TaskController', demands=['dict'], returns='TaskController'),
    ],
    "any": [
        DirectCall(fn='any', receiver='TaskSignal', demands=['AbortSignal'], returns='TaskSignal'),
        DirectCall(fn='any', receiver='TaskSignal', demands=['AbortSignal', 'dict'], returns='TaskSignal'),
        DirectCall(fn='any', receiver='AbortSignal', demands=['AbortSignal'], returns='AbortSignal'),
    ],
    "onprioritychange": [
        FieldCall(field='onprioritychange', demands=['TaskSignal'], returns='EventHandler'),
        FieldCall(field='onprioritychange', demands=['TaskSignal', 'EventHandler'], returns='EventHandler'),
    ],
    "getSupportedProfiles": [
        PrototypeCall(constructor='WEBGL_compressed_texture_astc', fn='getSupportedProfiles', demands=['WEBGL_compressed_texture_astc'], returns='str'),
    ],
    "ClipboardEvent": [
        NewCall(constructor='ClipboardEvent', demands=['str'], returns='ClipboardEvent'),
        NewCall(constructor='ClipboardEvent', demands=['str', 'dict'], returns='ClipboardEvent'),
    ],
    "clipboardData": [
        FieldCall(field='clipboardData', demands=['ClipboardEvent'], returns='DataTransfer'),
    ],
    "ClipboardItem": [
        NewCall(constructor='ClipboardItem', demands=['str'], returns='ClipboardItem'),
        NewCall(constructor='ClipboardItem', demands=['str', 'dict'], returns='ClipboardItem'),
    ],
    "presentationStyle": [
        FieldCall(field='presentationStyle', demands=['ClipboardItem'], returns='PresentationStyle'),
    ],
    "getType": [
        PrototypeCall(constructor='ClipboardItem', fn='getType', demands=['ClipboardItem', 'str'], returns='Blob'),
    ],
    "readText": [
        PrototypeCall(constructor='Clipboard', fn='readText', demands=['Clipboard'], returns='str'),
    ],
    "writeText": [
        PrototypeCall(constructor='Clipboard', fn='writeText', demands=['Clipboard', 'str'], returns='None'),
    ],
    "requestFrame": [
        PrototypeCall(constructor='CanvasCaptureMediaStreamTrack', fn='requestFrame', demands=['CanvasCaptureMediaStreamTrack'], returns='None'),
    ],
    "HTMLFencedFrameElement": [
        NewCall(constructor='HTMLFencedFrameElement', demands=[], returns='HTMLFencedFrameElement'),
    ],
    "config": [
        FieldCall(field='config', demands=['HTMLFencedFrameElement'], returns='FencedFrameConfig'),
        FieldCall(field='config', demands=['HTMLFencedFrameElement', 'FencedFrameConfig'], returns='FencedFrameConfig'),
    ],
    "FencedFrameConfig": [
        NewCall(constructor='FencedFrameConfig', demands=['str'], returns='FencedFrameConfig'),
    ],
    "setSharedStorageContext": [
        PrototypeCall(constructor='FencedFrameConfig', fn='setSharedStorageContext', demands=['FencedFrameConfig', 'str'], returns='None'),
    ],
    "reportEvent": [
        PrototypeCall(constructor='Fence', fn='reportEvent', demands=['Fence'], returns='None'),
        PrototypeCall(constructor='Fence', fn='reportEvent', demands=['Fence', 'ReportEventType'], returns='None'),
    ],
    "setReportEventDataForAutomaticBeacons": [
        PrototypeCall(constructor='Fence', fn='setReportEventDataForAutomaticBeacons', demands=['Fence'], returns='None'),
        PrototypeCall(constructor='Fence', fn='setReportEventDataForAutomaticBeacons', demands=['Fence', 'dict'], returns='None'),
    ],
    "getNestedConfigs": [
        PrototypeCall(constructor='Fence', fn='getNestedConfigs', demands=['Fence'], returns='FencedFrameConfig'),
    ],
    "disableUntrustedNetwork": [
        PrototypeCall(constructor='Fence', fn='disableUntrustedNetwork', demands=['Fence'], returns='None'),
    ],
    "notifyEvent": [
        PrototypeCall(constructor='Fence', fn='notifyEvent', demands=['Fence', 'Event'], returns='None'),
    ],
    "className": [
        FieldCall(field='className', demands=['SVGElement'], returns='SVGAnimatedString'),
        FieldCall(field='className', demands=['Element'], returns='str'),
        FieldCall(field='className', demands=['Element', 'str'], returns='str'),
    ],
    "ownerSVGElement": [
        FieldCall(field='ownerSVGElement', demands=['SVGElement'], returns='SVGSVGElement'),
    ],
    "viewportElement": [
        FieldCall(field='viewportElement', demands=['SVGElement'], returns='SVGElement'),
    ],
    "getBBox": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getBBox', demands=['SVGGraphicsElement'], returns='DOMRect'),
        PrototypeCall(constructor='SVGGraphicsElement', fn='getBBox', demands=['SVGGraphicsElement', 'dict'], returns='DOMRect'),
    ],
    "getCTM": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getCTM', demands=['SVGGraphicsElement'], returns='DOMMatrix'),
    ],
    "getScreenCTM": [
        PrototypeCall(constructor='SVGGraphicsElement', fn='getScreenCTM', demands=['SVGGraphicsElement'], returns='DOMMatrix'),
    ],
    "pathLength": [
        FieldCall(field='pathLength', demands=['SVGGeometryElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='pathLength', demands=['SVGPathElement'], returns='SVGAnimatedNumber'),
    ],
    "isPointInFill": [
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInFill', demands=['SVGGeometryElement'], returns='bool'),
        PrototypeCall(constructor='SVGGeometryElement', fn='isPointInFill', demands=['SVGGeometryElement', 'dict'], returns='bool'),
    ],
    "getTotalLength": [
        PrototypeCall(constructor='SVGGeometryElement', fn='getTotalLength', demands=['SVGGeometryElement'], returns='float'),
        PrototypeCall(constructor='SVGPathElement', fn='getTotalLength', demands=['SVGPathElement'], returns='float'),
    ],
    "getPointAtLength": [
        PrototypeCall(constructor='SVGGeometryElement', fn='getPointAtLength', demands=['SVGGeometryElement', 'float'], returns='DOMPoint'),
        PrototypeCall(constructor='SVGPathElement', fn='getPointAtLength', demands=['SVGPathElement', 'float'], returns='DOMPoint'),
    ],
    "unitType": [
        FieldCall(field='unitType', demands=['SVGLength'], returns='unsigned short'),
        FieldCall(field='unitType', demands=['SVGAngle'], returns='unsigned short'),
    ],
    "valueInSpecifiedUnits": [
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGLength'], returns='float'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGLength', 'float'], returns='float'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGAngle'], returns='float'),
        FieldCall(field='valueInSpecifiedUnits', demands=['SVGAngle', 'float'], returns='float'),
    ],
    "valueAsString": [
        FieldCall(field='valueAsString', demands=['SVGLength'], returns='str'),
        FieldCall(field='valueAsString', demands=['SVGLength', 'str'], returns='str'),
        FieldCall(field='valueAsString', demands=['SVGAngle'], returns='str'),
        FieldCall(field='valueAsString', demands=['SVGAngle', 'str'], returns='str'),
    ],
    "newValueSpecifiedUnits": [
        PrototypeCall(constructor='SVGLength', fn='newValueSpecifiedUnits', demands=['SVGLength', 'unsigned short', 'float'], returns='None'),
        PrototypeCall(constructor='SVGAngle', fn='newValueSpecifiedUnits', demands=['SVGAngle', 'unsigned short', 'float'], returns='None'),
    ],
    "convertToSpecifiedUnits": [
        PrototypeCall(constructor='SVGLength', fn='convertToSpecifiedUnits', demands=['SVGLength', 'unsigned short'], returns='None'),
        PrototypeCall(constructor='SVGAngle', fn='convertToSpecifiedUnits', demands=['SVGAngle', 'unsigned short'], returns='None'),
    ],
    "numberOfItems": [
        FieldCall(field='numberOfItems', demands=['SVGNumberList'], returns='int'),
        FieldCall(field='numberOfItems', demands=['SVGLengthList'], returns='int'),
        FieldCall(field='numberOfItems', demands=['SVGStringList'], returns='int'),
        FieldCall(field='numberOfItems', demands=['SVGTransformList'], returns='int'),
        FieldCall(field='numberOfItems', demands=['SVGPointList'], returns='int'),
    ],
    "insertItemBefore": [
        PrototypeCall(constructor='SVGNumberList', fn='insertItemBefore', demands=['SVGNumberList', 'SVGNumber', 'int'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='insertItemBefore', demands=['SVGLengthList', 'SVGLength', 'int'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='insertItemBefore', demands=['SVGStringList', 'str', 'int'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='insertItemBefore', demands=['SVGTransformList', 'SVGTransform', 'int'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='insertItemBefore', demands=['SVGPointList', 'DOMPoint', 'int'], returns='DOMPoint'),
    ],
    "replaceItem": [
        PrototypeCall(constructor='SVGNumberList', fn='replaceItem', demands=['SVGNumberList', 'SVGNumber', 'int'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='replaceItem', demands=['SVGLengthList', 'SVGLength', 'int'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='replaceItem', demands=['SVGStringList', 'str', 'int'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='replaceItem', demands=['SVGTransformList', 'SVGTransform', 'int'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='replaceItem', demands=['SVGPointList', 'DOMPoint', 'int'], returns='DOMPoint'),
    ],
    "appendItem": [
        PrototypeCall(constructor='SVGNumberList', fn='appendItem', demands=['SVGNumberList', 'SVGNumber'], returns='SVGNumber'),
        PrototypeCall(constructor='SVGLengthList', fn='appendItem', demands=['SVGLengthList', 'SVGLength'], returns='SVGLength'),
        PrototypeCall(constructor='SVGStringList', fn='appendItem', demands=['SVGStringList', 'str'], returns='str'),
        PrototypeCall(constructor='SVGTransformList', fn='appendItem', demands=['SVGTransformList', 'SVGTransform'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGPointList', fn='appendItem', demands=['SVGPointList', 'DOMPoint'], returns='DOMPoint'),
    ],
    "baseVal": [
        FieldCall(field='baseVal', demands=['SVGAnimatedBoolean'], returns='bool'),
        FieldCall(field='baseVal', demands=['SVGAnimatedBoolean', 'bool'], returns='bool'),
        FieldCall(field='baseVal', demands=['SVGAnimatedEnumeration'], returns='unsigned short'),
        FieldCall(field='baseVal', demands=['SVGAnimatedEnumeration', 'unsigned short'], returns='unsigned short'),
        FieldCall(field='baseVal', demands=['SVGAnimatedInteger'], returns='int'),
        FieldCall(field='baseVal', demands=['SVGAnimatedInteger', 'int'], returns='int'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumber'], returns='float'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumber', 'float'], returns='float'),
        FieldCall(field='baseVal', demands=['SVGAnimatedLength'], returns='SVGLength'),
        FieldCall(field='baseVal', demands=['SVGAnimatedAngle'], returns='SVGAngle'),
        FieldCall(field='baseVal', demands=['SVGAnimatedString'], returns='str'),
        FieldCall(field='baseVal', demands=['SVGAnimatedString', 'str'], returns='str'),
        FieldCall(field='baseVal', demands=['SVGAnimatedRect'], returns='DOMRect'),
        FieldCall(field='baseVal', demands=['SVGAnimatedNumberList'], returns='SVGNumberList'),
        FieldCall(field='baseVal', demands=['SVGAnimatedLengthList'], returns='SVGLengthList'),
        FieldCall(field='baseVal', demands=['SVGAnimatedTransformList'], returns='SVGTransformList'),
        FieldCall(field='baseVal', demands=['SVGAnimatedPreserveAspectRatio'], returns='SVGPreserveAspectRatio'),
    ],
    "animVal": [
        FieldCall(field='animVal', demands=['SVGAnimatedBoolean'], returns='bool'),
        FieldCall(field='animVal', demands=['SVGAnimatedEnumeration'], returns='unsigned short'),
        FieldCall(field='animVal', demands=['SVGAnimatedInteger'], returns='int'),
        FieldCall(field='animVal', demands=['SVGAnimatedNumber'], returns='float'),
        FieldCall(field='animVal', demands=['SVGAnimatedLength'], returns='SVGLength'),
        FieldCall(field='animVal', demands=['SVGAnimatedAngle'], returns='SVGAngle'),
        FieldCall(field='animVal', demands=['SVGAnimatedString'], returns='str'),
        FieldCall(field='animVal', demands=['SVGAnimatedRect'], returns='DOMRectReadOnly'),
        FieldCall(field='animVal', demands=['SVGAnimatedNumberList'], returns='SVGNumberList'),
        FieldCall(field='animVal', demands=['SVGAnimatedLengthList'], returns='SVGLengthList'),
        FieldCall(field='animVal', demands=['SVGAnimatedTransformList'], returns='SVGTransformList'),
        FieldCall(field='animVal', demands=['SVGAnimatedPreserveAspectRatio'], returns='SVGPreserveAspectRatio'),
    ],
    "currentScale": [
        FieldCall(field='currentScale', demands=['SVGSVGElement'], returns='float'),
        FieldCall(field='currentScale', demands=['SVGSVGElement', 'float'], returns='float'),
    ],
    "currentTranslate": [
        FieldCall(field='currentTranslate', demands=['SVGSVGElement'], returns='DOMPointReadOnly'),
    ],
    "getIntersectionList": [
        PrototypeCall(constructor='SVGSVGElement', fn='getIntersectionList', demands=['SVGSVGElement', 'DOMRectReadOnly', 'SVGElement'], returns='NodeList'),
    ],
    "getEnclosureList": [
        PrototypeCall(constructor='SVGSVGElement', fn='getEnclosureList', demands=['SVGSVGElement', 'DOMRectReadOnly', 'SVGElement'], returns='NodeList'),
    ],
    "checkIntersection": [
        PrototypeCall(constructor='SVGSVGElement', fn='checkIntersection', demands=['SVGSVGElement', 'SVGElement', 'DOMRectReadOnly'], returns='bool'),
    ],
    "checkEnclosure": [
        PrototypeCall(constructor='SVGSVGElement', fn='checkEnclosure', demands=['SVGSVGElement', 'SVGElement', 'DOMRectReadOnly'], returns='bool'),
    ],
    "deselectAll": [
        PrototypeCall(constructor='SVGSVGElement', fn='deselectAll', demands=['SVGSVGElement'], returns='None'),
    ],
    "createSVGNumber": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGNumber', demands=['SVGSVGElement'], returns='SVGNumber'),
    ],
    "createSVGLength": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGLength', demands=['SVGSVGElement'], returns='SVGLength'),
    ],
    "createSVGAngle": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGAngle', demands=['SVGSVGElement'], returns='SVGAngle'),
    ],
    "createSVGPoint": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGPoint', demands=['SVGSVGElement'], returns='DOMPoint'),
    ],
    "createSVGMatrix": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGMatrix', demands=['SVGSVGElement'], returns='DOMMatrix'),
    ],
    "createSVGRect": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGRect', demands=['SVGSVGElement'], returns='DOMRect'),
    ],
    "createSVGTransform": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransform', demands=['SVGSVGElement'], returns='SVGTransform'),
    ],
    "createSVGTransformFromMatrix": [
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransformFromMatrix', demands=['SVGSVGElement'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGSVGElement', fn='createSVGTransformFromMatrix', demands=['SVGSVGElement', 'dict'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGTransformList', fn='createSVGTransformFromMatrix', demands=['SVGTransformList'], returns='SVGTransform'),
        PrototypeCall(constructor='SVGTransformList', fn='createSVGTransformFromMatrix', demands=['SVGTransformList', 'dict'], returns='SVGTransform'),
    ],
    "getElementById": [
        PrototypeCall(constructor='SVGSVGElement', fn='getElementById', demands=['SVGSVGElement', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='getElementById', demands=['Document', 'str'], returns='Element'),
        PrototypeCall(constructor='DocumentFragment', fn='getElementById', demands=['DocumentFragment', 'str'], returns='Element'),
    ],
    "suspendRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='suspendRedraw', demands=['SVGSVGElement', 'int'], returns='int'),
    ],
    "unsuspendRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='unsuspendRedraw', demands=['SVGSVGElement', 'int'], returns='None'),
    ],
    "unsuspendRedrawAll": [
        PrototypeCall(constructor='SVGSVGElement', fn='unsuspendRedrawAll', demands=['SVGSVGElement'], returns='None'),
    ],
    "forceRedraw": [
        PrototypeCall(constructor='SVGSVGElement', fn='forceRedraw', demands=['SVGSVGElement'], returns='None'),
    ],
    "instanceRoot": [
        FieldCall(field='instanceRoot', demands=['SVGUseElement'], returns='SVGElement'),
    ],
    "animatedInstanceRoot": [
        FieldCall(field='animatedInstanceRoot', demands=['SVGUseElement'], returns='SVGElement'),
    ],
    "ShadowAnimation": [
        NewCall(constructor='ShadowAnimation', demands=['Animation', 'Element'], returns='ShadowAnimation'),
    ],
    "sourceAnimation": [
        FieldCall(field='sourceAnimation', demands=['ShadowAnimation'], returns='Animation'),
    ],
    "setMatrix": [
        PrototypeCall(constructor='SVGTransform', fn='setMatrix', demands=['SVGTransform'], returns='None'),
        PrototypeCall(constructor='SVGTransform', fn='setMatrix', demands=['SVGTransform', 'dict'], returns='None'),
    ],
    "setTranslate": [
        PrototypeCall(constructor='SVGTransform', fn='setTranslate', demands=['SVGTransform', 'float', 'float'], returns='None'),
    ],
    "setScale": [
        PrototypeCall(constructor='SVGTransform', fn='setScale', demands=['SVGTransform', 'float', 'float'], returns='None'),
    ],
    "setRotate": [
        PrototypeCall(constructor='SVGTransform', fn='setRotate', demands=['SVGTransform', 'float', 'float', 'float'], returns='None'),
    ],
    "setSkewX": [
        PrototypeCall(constructor='SVGTransform', fn='setSkewX', demands=['SVGTransform', 'float'], returns='None'),
    ],
    "setSkewY": [
        PrototypeCall(constructor='SVGTransform', fn='setSkewY', demands=['SVGTransform', 'float'], returns='None'),
    ],
    "consolidate": [
        PrototypeCall(constructor='SVGTransformList', fn='consolidate', demands=['SVGTransformList'], returns='SVGTransform'),
    ],
    "align": [
        FieldCall(field='align', demands=['SVGPreserveAspectRatio'], returns='unsigned short'),
        FieldCall(field='align', demands=['SVGPreserveAspectRatio', 'unsigned short'], returns='unsigned short'),
        FieldCall(field='align', demands=['VTTCue'], returns='AlignSetting'),
        FieldCall(field='align', demands=['VTTCue', 'AlignSetting'], returns='AlignSetting'),
    ],
    "meetOrSlice": [
        FieldCall(field='meetOrSlice', demands=['SVGPreserveAspectRatio'], returns='unsigned short'),
        FieldCall(field='meetOrSlice', demands=['SVGPreserveAspectRatio', 'unsigned short'], returns='unsigned short'),
    ],
    "rx": [
        FieldCall(field='rx', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='rx', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
    ],
    "ry": [
        FieldCall(field='ry', demands=['SVGRectElement'], returns='SVGAnimatedLength'),
        FieldCall(field='ry', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
    ],
    "cx": [
        FieldCall(field='cx', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cx', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cx', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "cy": [
        FieldCall(field='cy', demands=['SVGCircleElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cy', demands=['SVGEllipseElement'], returns='SVGAnimatedLength'),
        FieldCall(field='cy', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "x1": [
        FieldCall(field='x1', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x1', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "y1": [
        FieldCall(field='y1', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y1', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "x2": [
        FieldCall(field='x2', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='x2', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "y2": [
        FieldCall(field='y2', demands=['SVGLineElement'], returns='SVGAnimatedLength'),
        FieldCall(field='y2', demands=['SVGLinearGradientElement'], returns='SVGAnimatedLength'),
    ],
    "lengthAdjust": [
        FieldCall(field='lengthAdjust', demands=['SVGTextContentElement'], returns='SVGAnimatedEnumeration'),
    ],
    "getNumberOfChars": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getNumberOfChars', demands=['SVGTextContentElement'], returns='int'),
    ],
    "getComputedTextLength": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getComputedTextLength', demands=['SVGTextContentElement'], returns='float'),
    ],
    "getSubStringLength": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getSubStringLength', demands=['SVGTextContentElement', 'int', 'int'], returns='float'),
    ],
    "getStartPositionOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getStartPositionOfChar', demands=['SVGTextContentElement', 'int'], returns='DOMPoint'),
    ],
    "getEndPositionOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getEndPositionOfChar', demands=['SVGTextContentElement', 'int'], returns='DOMPoint'),
    ],
    "getExtentOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getExtentOfChar', demands=['SVGTextContentElement', 'int'], returns='DOMRect'),
    ],
    "getRotationOfChar": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getRotationOfChar', demands=['SVGTextContentElement', 'int'], returns='float'),
    ],
    "getCharNumAtPosition": [
        PrototypeCall(constructor='SVGTextContentElement', fn='getCharNumAtPosition', demands=['SVGTextContentElement'], returns='int'),
        PrototypeCall(constructor='SVGTextContentElement', fn='getCharNumAtPosition', demands=['SVGTextContentElement', 'dict'], returns='int'),
    ],
    "selectSubString": [
        PrototypeCall(constructor='SVGTextContentElement', fn='selectSubString', demands=['SVGTextContentElement', 'int', 'int'], returns='None'),
    ],
    "dx": [
        FieldCall(field='dx', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='dx', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dx', demands=['SVGFEOffsetElement'], returns='SVGAnimatedNumber'),
    ],
    "dy": [
        FieldCall(field='dy', demands=['SVGTextPositioningElement'], returns='SVGAnimatedLengthList'),
        FieldCall(field='dy', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='dy', demands=['SVGFEOffsetElement'], returns='SVGAnimatedNumber'),
    ],
    "spacing": [
        FieldCall(field='spacing', demands=['SVGTextPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "preserveAspectRatio": [
        FieldCall(field='preserveAspectRatio', demands=['SVGImageElement'], returns='SVGAnimatedPreserveAspectRatio'),
        FieldCall(field='preserveAspectRatio', demands=['SVGFEImageElement'], returns='SVGAnimatedPreserveAspectRatio'),
    ],
    "refX": [
        FieldCall(field='refX', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "refY": [
        FieldCall(field='refY', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "markerUnits": [
        FieldCall(field='markerUnits', demands=['SVGMarkerElement'], returns='SVGAnimatedEnumeration'),
    ],
    "markerWidth": [
        FieldCall(field='markerWidth', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "markerHeight": [
        FieldCall(field='markerHeight', demands=['SVGMarkerElement'], returns='SVGAnimatedLength'),
    ],
    "orientType": [
        FieldCall(field='orientType', demands=['SVGMarkerElement'], returns='SVGAnimatedEnumeration'),
    ],
    "orientAngle": [
        FieldCall(field='orientAngle', demands=['SVGMarkerElement'], returns='SVGAnimatedAngle'),
    ],
    "orient": [
        FieldCall(field='orient', demands=['SVGMarkerElement'], returns='str'),
        FieldCall(field='orient', demands=['SVGMarkerElement', 'str'], returns='str'),
    ],
    "setOrientToAuto": [
        PrototypeCall(constructor='SVGMarkerElement', fn='setOrientToAuto', demands=['SVGMarkerElement'], returns='None'),
    ],
    "setOrientToAngle": [
        PrototypeCall(constructor='SVGMarkerElement', fn='setOrientToAngle', demands=['SVGMarkerElement', 'SVGAngle'], returns='None'),
    ],
    "gradientUnits": [
        FieldCall(field='gradientUnits', demands=['SVGGradientElement'], returns='SVGAnimatedEnumeration'),
    ],
    "gradientTransform": [
        FieldCall(field='gradientTransform', demands=['SVGGradientElement'], returns='SVGAnimatedTransformList'),
    ],
    "spreadMethod": [
        FieldCall(field='spreadMethod', demands=['SVGGradientElement'], returns='SVGAnimatedEnumeration'),
    ],
    "fx": [
        FieldCall(field='fx', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "fy": [
        FieldCall(field='fy', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "fr": [
        FieldCall(field='fr', demands=['SVGRadialGradientElement'], returns='SVGAnimatedLength'),
    ],
    "patternUnits": [
        FieldCall(field='patternUnits', demands=['SVGPatternElement'], returns='SVGAnimatedEnumeration'),
    ],
    "patternContentUnits": [
        FieldCall(field='patternContentUnits', demands=['SVGPatternElement'], returns='SVGAnimatedEnumeration'),
    ],
    "patternTransform": [
        FieldCall(field='patternTransform', demands=['SVGPatternElement'], returns='SVGAnimatedTransformList'),
    ],
    "ReadableStream": [
        NewCall(constructor='ReadableStream', demands=[], returns='ReadableStream'),
        NewCall(constructor='ReadableStream', demands=['object'], returns='ReadableStream'),
        NewCall(constructor='ReadableStream', demands=['object', 'dict'], returns='ReadableStream'),
    ],
    "locked": [
        FieldCall(field='locked', demands=['ReadableStream'], returns='bool'),
        FieldCall(field='locked', demands=['WritableStream'], returns='bool'),
    ],
    "getReader": [
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream'], returns='ReadableStreamReader'),
        PrototypeCall(constructor='ReadableStream', fn='getReader', demands=['ReadableStream', 'dict'], returns='ReadableStreamReader'),
    ],
    "pipeThrough": [
        PrototypeCall(constructor='ReadableStream', fn='pipeThrough', demands=['ReadableStream', 'dict'], returns='ReadableStream'),
        PrototypeCall(constructor='ReadableStream', fn='pipeThrough', demands=['ReadableStream', 'dict', 'dict'], returns='ReadableStream'),
    ],
    "pipeTo": [
        PrototypeCall(constructor='ReadableStream', fn='pipeTo', demands=['ReadableStream', 'WritableStream'], returns='None'),
        PrototypeCall(constructor='ReadableStream', fn='pipeTo', demands=['ReadableStream', 'WritableStream', 'dict'], returns='None'),
    ],
    "tee": [
        PrototypeCall(constructor='ReadableStream', fn='tee', demands=['ReadableStream'], returns='ReadableStream'),
    ],
    "ReadableStreamDefaultReader": [
        NewCall(constructor='ReadableStreamDefaultReader', demands=['ReadableStream'], returns='ReadableStreamDefaultReader'),
    ],
    "releaseLock": [
        PrototypeCall(constructor='ReadableStreamDefaultReader', fn='releaseLock', demands=['ReadableStreamDefaultReader'], returns='None'),
        PrototypeCall(constructor='ReadableStreamBYOBReader', fn='releaseLock', demands=['ReadableStreamBYOBReader'], returns='None'),
        PrototypeCall(constructor='WritableStreamDefaultWriter', fn='releaseLock', demands=['WritableStreamDefaultWriter'], returns='None'),
    ],
    "ReadableStreamBYOBReader": [
        NewCall(constructor='ReadableStreamBYOBReader', demands=['ReadableStream'], returns='ReadableStreamBYOBReader'),
    ],
    "desiredSize": [
        FieldCall(field='desiredSize', demands=['ReadableStreamDefaultController'], returns='float'),
        FieldCall(field='desiredSize', demands=['ReadableByteStreamController'], returns='float'),
        FieldCall(field='desiredSize', demands=['WritableStreamDefaultWriter'], returns='float'),
        FieldCall(field='desiredSize', demands=['TransformStreamDefaultController'], returns='float'),
    ],
    "enqueue": [
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='enqueue', demands=['ReadableStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='ReadableStreamDefaultController', fn='enqueue', demands=['ReadableStreamDefaultController', '*'], returns='None'),
        PrototypeCall(constructor='ReadableByteStreamController', fn='enqueue', demands=['ReadableByteStreamController', 'ArrayBufferView'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='enqueue', demands=['TransformStreamDefaultController'], returns='None'),
        PrototypeCall(constructor='TransformStreamDefaultController', fn='enqueue', demands=['TransformStreamDefaultController', '*'], returns='None'),
    ],
    "byobRequest": [
        FieldCall(field='byobRequest', demands=['ReadableByteStreamController'], returns='ReadableStreamBYOBRequest'),
    ],
    "respond": [
        PrototypeCall(constructor='ReadableStreamBYOBRequest', fn='respond', demands=['ReadableStreamBYOBRequest', 'int'], returns='None'),
    ],
    "respondWithNewView": [
        PrototypeCall(constructor='ReadableStreamBYOBRequest', fn='respondWithNewView', demands=['ReadableStreamBYOBRequest', 'ArrayBufferView'], returns='None'),
    ],
    "WritableStream": [
        NewCall(constructor='WritableStream', demands=[], returns='WritableStream'),
        NewCall(constructor='WritableStream', demands=['object'], returns='WritableStream'),
        NewCall(constructor='WritableStream', demands=['object', 'dict'], returns='WritableStream'),
    ],
    "WritableStreamDefaultWriter": [
        NewCall(constructor='WritableStreamDefaultWriter', demands=['WritableStream'], returns='WritableStreamDefaultWriter'),
    ],
    "TransformStream": [
        NewCall(constructor='TransformStream', demands=[], returns='TransformStream'),
        NewCall(constructor='TransformStream', demands=['object'], returns='TransformStream'),
        NewCall(constructor='TransformStream', demands=['object', 'dict'], returns='TransformStream'),
        NewCall(constructor='TransformStream', demands=['object', 'dict', 'dict'], returns='TransformStream'),
    ],
    "ByteLengthQueuingStrategy": [
        NewCall(constructor='ByteLengthQueuingStrategy', demands=['dict'], returns='ByteLengthQueuingStrategy'),
    ],
    "highWaterMark": [
        FieldCall(field='highWaterMark', demands=['ByteLengthQueuingStrategy'], returns='float'),
        FieldCall(field='highWaterMark', demands=['CountQueuingStrategy'], returns='float'),
    ],
    "CountQueuingStrategy": [
        NewCall(constructor='CountQueuingStrategy', demands=['dict'], returns='CountQueuingStrategy'),
    ],
    "TransitionEvent": [
        NewCall(constructor='TransitionEvent', demands=['CSSOMString'], returns='TransitionEvent'),
        NewCall(constructor='TransitionEvent', demands=['CSSOMString', 'dict'], returns='TransitionEvent'),
    ],
    "propertyName": [
        FieldCall(field='propertyName', demands=['TransitionEvent'], returns='CSSOMString'),
    ],
    "token": [
        FieldCall(field='token', demands=['IdentityCredential'], returns='*'),
    ],
    "isAutoSelected": [
        FieldCall(field='isAutoSelected', demands=['IdentityCredential'], returns='bool'),
    ],
    "configURL": [
        FieldCall(field='configURL', demands=['IdentityCredential'], returns='str'),
    ],
    "IdentityCredentialError": [
        NewCall(constructor='IdentityCredentialError', demands=[], returns='IdentityCredentialError'),
        NewCall(constructor='IdentityCredentialError', demands=['str'], returns='IdentityCredentialError'),
        NewCall(constructor='IdentityCredentialError', demands=['str', 'dict'], returns='IdentityCredentialError'),
    ],
    "resolve": [
        DirectCall(fn='resolve', receiver='IdentityProvider', demands=['*'], returns='None'),
        DirectCall(fn='resolve', receiver='IdentityProvider', demands=['*', 'dict'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='resolve', demands=['FileSystemDirectoryHandle', 'FileSystemHandle'], returns='str'),
    ],
    "getUserInfo": [
        DirectCall(fn='getUserInfo', receiver='IdentityProvider', demands=['dict'], returns='dict'),
    ],
    "PointerTimeline": [
        NewCall(constructor='PointerTimeline', demands=[], returns='PointerTimeline'),
        NewCall(constructor='PointerTimeline', demands=['dict'], returns='PointerTimeline'),
    ],
    "getSubscriptions": [
        PrototypeCall(constructor='CookieStoreManager', fn='getSubscriptions', demands=['CookieStoreManager'], returns='dict'),
    ],
    "CookieChangeEvent": [
        NewCall(constructor='CookieChangeEvent', demands=['str'], returns='CookieChangeEvent'),
        NewCall(constructor='CookieChangeEvent', demands=['str', 'dict'], returns='CookieChangeEvent'),
    ],
    "changed": [
        FieldCall(field='changed', demands=['CookieChangeEvent'], returns='dict'),
        FieldCall(field='changed', demands=['ExtendableCookieChangeEvent'], returns='dict'),
    ],
    "deleted": [
        FieldCall(field='deleted', demands=['CookieChangeEvent'], returns='dict'),
        FieldCall(field='deleted', demands=['ExtendableCookieChangeEvent'], returns='dict'),
    ],
    "ExtendableCookieChangeEvent": [
        NewCall(constructor='ExtendableCookieChangeEvent', demands=['str'], returns='ExtendableCookieChangeEvent'),
        NewCall(constructor='ExtendableCookieChangeEvent', demands=['str', 'dict'], returns='ExtendableCookieChangeEvent'),
    ],
    "EyeDropper": [
        NewCall(constructor='EyeDropper', demands=[], returns='EyeDropper'),
    ],
    "createQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='createQueryEXT', demands=['EXT_disjoint_timer_query'], returns='WebGLTimerQueryEXT'),
    ],
    "deleteQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='deleteQueryEXT', demands=['EXT_disjoint_timer_query', 'WebGLTimerQueryEXT'], returns='None'),
    ],
    "isQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='isQueryEXT', demands=['EXT_disjoint_timer_query', 'WebGLTimerQueryEXT'], returns='bool'),
    ],
    "beginQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='beginQueryEXT', demands=['EXT_disjoint_timer_query', 'GLenum', 'WebGLTimerQueryEXT'], returns='None'),
    ],
    "endQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='endQueryEXT', demands=['EXT_disjoint_timer_query', 'GLenum'], returns='None'),
    ],
    "getQueryEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='getQueryEXT', demands=['EXT_disjoint_timer_query', 'GLenum', 'GLenum'], returns='*'),
    ],
    "getQueryObjectEXT": [
        PrototypeCall(constructor='EXT_disjoint_timer_query', fn='getQueryObjectEXT', demands=['EXT_disjoint_timer_query', 'WebGLTimerQueryEXT', 'GLenum'], returns='*'),
    ],
    "selectURL": [
        PrototypeCall(constructor='SharedStorageWorklet', fn='selectURL', demands=['SharedStorageWorklet', 'str', 'dict'], returns='SharedStorageResponse'),
        PrototypeCall(constructor='SharedStorageWorklet', fn='selectURL', demands=['SharedStorageWorklet', 'str', 'dict', 'dict'], returns='SharedStorageResponse'),
        PrototypeCall(constructor='SharedStorage', fn='selectURL', demands=['SharedStorage', 'str', 'dict'], returns='SharedStorageResponse'),
        PrototypeCall(constructor='SharedStorage', fn='selectURL', demands=['SharedStorage', 'str', 'dict', 'dict'], returns='SharedStorageResponse'),
    ],
    "run": [
        PrototypeCall(constructor='SharedStorageWorklet', fn='run', demands=['SharedStorageWorklet', 'str'], returns='*'),
        PrototypeCall(constructor='SharedStorageWorklet', fn='run', demands=['SharedStorageWorklet', 'str', 'dict'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='run', demands=['SharedStorage', 'str'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='run', demands=['SharedStorage', 'str', 'dict'], returns='*'),
    ],
    "sharedStorage": [
        FieldCall(field='sharedStorage', demands=['SharedStorageWorkletGlobalScope'], returns='SharedStorage'),
    ],
    "interestGroups": [
        PrototypeCall(constructor='SharedStorageWorkletGlobalScope', fn='interestGroups', demands=['SharedStorageWorkletGlobalScope'], returns='dict'),
    ],
    "SharedStorageSetMethod": [
        NewCall(constructor='SharedStorageSetMethod', demands=['str', 'str'], returns='SharedStorageSetMethod'),
        NewCall(constructor='SharedStorageSetMethod', demands=['str', 'str', 'dict'], returns='SharedStorageSetMethod'),
    ],
    "SharedStorageAppendMethod": [
        NewCall(constructor='SharedStorageAppendMethod', demands=['str', 'str'], returns='SharedStorageAppendMethod'),
        NewCall(constructor='SharedStorageAppendMethod', demands=['str', 'str', 'dict'], returns='SharedStorageAppendMethod'),
    ],
    "SharedStorageDeleteMethod": [
        NewCall(constructor='SharedStorageDeleteMethod', demands=['str'], returns='SharedStorageDeleteMethod'),
        NewCall(constructor='SharedStorageDeleteMethod', demands=['str', 'dict'], returns='SharedStorageDeleteMethod'),
    ],
    "SharedStorageClearMethod": [
        NewCall(constructor='SharedStorageClearMethod', demands=[], returns='SharedStorageClearMethod'),
        NewCall(constructor='SharedStorageClearMethod', demands=['dict'], returns='SharedStorageClearMethod'),
    ],
    "batchUpdate": [
        PrototypeCall(constructor='SharedStorage', fn='batchUpdate', demands=['SharedStorage', 'SharedStorageModifierMethod'], returns='*'),
        PrototypeCall(constructor='SharedStorage', fn='batchUpdate', demands=['SharedStorage', 'SharedStorageModifierMethod', 'dict'], returns='*'),
    ],
    "createWorklet": [
        PrototypeCall(constructor='SharedStorage', fn='createWorklet', demands=['SharedStorage', 'str'], returns='SharedStorageWorklet'),
        PrototypeCall(constructor='SharedStorage', fn='createWorklet', demands=['SharedStorage', 'str', 'dict'], returns='SharedStorageWorklet'),
    ],
    "worklet": [
        FieldCall(field='worklet', demands=['SharedStorage'], returns='SharedStorageWorklet'),
    ],
    "remainingBudget": [
        PrototypeCall(constructor='SharedStorage', fn='remainingBudget', demands=['SharedStorage'], returns='float'),
    ],
    "VTTCue": [
        NewCall(constructor='VTTCue', demands=['float', 'float', 'str'], returns='VTTCue'),
    ],
    "vertical": [
        FieldCall(field='vertical', demands=['VTTCue'], returns='DirectionSetting'),
        FieldCall(field='vertical', demands=['VTTCue', 'DirectionSetting'], returns='DirectionSetting'),
    ],
    "snapToLines": [
        FieldCall(field='snapToLines', demands=['VTTCue'], returns='bool'),
        FieldCall(field='snapToLines', demands=['VTTCue', 'bool'], returns='bool'),
    ],
    "line": [
        FieldCall(field='line', demands=['VTTCue'], returns='LineAndPositionSetting'),
        FieldCall(field='line', demands=['VTTCue', 'LineAndPositionSetting'], returns='LineAndPositionSetting'),
    ],
    "lineAlign": [
        FieldCall(field='lineAlign', demands=['VTTCue'], returns='LineAlignSetting'),
        FieldCall(field='lineAlign', demands=['VTTCue', 'LineAlignSetting'], returns='LineAlignSetting'),
    ],
    "positionAlign": [
        FieldCall(field='positionAlign', demands=['VTTCue'], returns='PositionAlignSetting'),
        FieldCall(field='positionAlign', demands=['VTTCue', 'PositionAlignSetting'], returns='PositionAlignSetting'),
    ],
    "getCueAsHTML": [
        PrototypeCall(constructor='VTTCue', fn='getCueAsHTML', demands=['VTTCue'], returns='DocumentFragment'),
    ],
    "VTTRegion": [
        NewCall(constructor='VTTRegion', demands=[], returns='VTTRegion'),
    ],
    "lines": [
        FieldCall(field='lines', demands=['VTTRegion'], returns='int'),
        FieldCall(field='lines', demands=['VTTRegion', 'int'], returns='int'),
    ],
    "regionAnchorX": [
        FieldCall(field='regionAnchorX', demands=['VTTRegion'], returns='float'),
        FieldCall(field='regionAnchorX', demands=['VTTRegion', 'float'], returns='float'),
    ],
    "regionAnchorY": [
        FieldCall(field='regionAnchorY', demands=['VTTRegion'], returns='float'),
        FieldCall(field='regionAnchorY', demands=['VTTRegion', 'float'], returns='float'),
    ],
    "viewportAnchorX": [
        FieldCall(field='viewportAnchorX', demands=['VTTRegion'], returns='float'),
        FieldCall(field='viewportAnchorX', demands=['VTTRegion', 'float'], returns='float'),
    ],
    "viewportAnchorY": [
        FieldCall(field='viewportAnchorY', demands=['VTTRegion'], returns='float'),
        FieldCall(field='viewportAnchorY', demands=['VTTRegion', 'float'], returns='float'),
    ],
    "getDetails": [
        PrototypeCall(constructor='DigitalGoodsService', fn='getDetails', demands=['DigitalGoodsService', 'str'], returns='dict'),
    ],
    "listPurchases": [
        PrototypeCall(constructor='DigitalGoodsService', fn='listPurchases', demands=['DigitalGoodsService'], returns='dict'),
    ],
    "listPurchaseHistory": [
        PrototypeCall(constructor='DigitalGoodsService', fn='listPurchaseHistory', demands=['DigitalGoodsService'], returns='dict'),
    ],
    "consume": [
        PrototypeCall(constructor='DigitalGoodsService', fn='consume', demands=['DigitalGoodsService', 'str'], returns='None'),
    ],
    "ResizeObserver": [
        NewCall(constructor='ResizeObserver', demands=['ResizeObserverCallback'], returns='ResizeObserver'),
    ],
    "contentRect": [
        FieldCall(field='contentRect', demands=['ResizeObserverEntry'], returns='DOMRectReadOnly'),
    ],
    "borderBoxSize": [
        FieldCall(field='borderBoxSize', demands=['ResizeObserverEntry'], returns='ResizeObserverSize'),
    ],
    "contentBoxSize": [
        FieldCall(field='contentBoxSize', demands=['ResizeObserverEntry'], returns='ResizeObserverSize'),
    ],
    "devicePixelContentBoxSize": [
        FieldCall(field='devicePixelContentBoxSize', demands=['ResizeObserverEntry'], returns='ResizeObserverSize'),
    ],
    "PressureObserver": [
        NewCall(constructor='PressureObserver', demands=['PressureUpdateCallback'], returns='PressureObserver'),
    ],
    "knownSources": [
        FieldCall(field='knownSources', demands=['PressureObserver'], returns='PressureSource'),
    ],
    "mediaText": [
        FieldCall(field='mediaText', demands=['MediaList'], returns='CSSOMString'),
        FieldCall(field='mediaText', demands=['MediaList', 'CSSOMString'], returns='CSSOMString'),
    ],
    "appendMedium": [
        PrototypeCall(constructor='MediaList', fn='appendMedium', demands=['MediaList', 'CSSOMString'], returns='None'),
    ],
    "deleteMedium": [
        PrototypeCall(constructor='MediaList', fn='deleteMedium', demands=['MediaList', 'CSSOMString'], returns='None'),
    ],
    "ownerNode": [
        FieldCall(field='ownerNode', demands=['StyleSheet'], returns='Element'),
    ],
    "parentStyleSheet": [
        FieldCall(field='parentStyleSheet', demands=['StyleSheet'], returns='CSSStyleSheet'),
        FieldCall(field='parentStyleSheet', demands=['CSSRule'], returns='CSSStyleSheet'),
    ],
    "CSSStyleSheet": [
        NewCall(constructor='CSSStyleSheet', demands=[], returns='CSSStyleSheet'),
        NewCall(constructor='CSSStyleSheet', demands=['dict'], returns='CSSStyleSheet'),
    ],
    "ownerRule": [
        FieldCall(field='ownerRule', demands=['CSSStyleSheet'], returns='CSSRule'),
    ],
    "insertRule": [
        PrototypeCall(constructor='CSSStyleSheet', fn='insertRule', demands=['CSSStyleSheet', 'CSSOMString'], returns='int'),
        PrototypeCall(constructor='CSSStyleSheet', fn='insertRule', demands=['CSSStyleSheet', 'CSSOMString', 'int'], returns='int'),
        PrototypeCall(constructor='CSSGroupingRule', fn='insertRule', demands=['CSSGroupingRule', 'CSSOMString'], returns='int'),
        PrototypeCall(constructor='CSSGroupingRule', fn='insertRule', demands=['CSSGroupingRule', 'CSSOMString', 'int'], returns='int'),
    ],
    "replaceSync": [
        PrototypeCall(constructor='CSSStyleSheet', fn='replaceSync', demands=['CSSStyleSheet', 'str'], returns='None'),
    ],
    "cssText": [
        FieldCall(field='cssText', demands=['CSSRule'], returns='CSSOMString'),
        FieldCall(field='cssText', demands=['CSSRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='cssText', demands=['CSSStyleDeclaration'], returns='CSSOMString'),
        FieldCall(field='cssText', demands=['CSSStyleDeclaration', 'CSSOMString'], returns='CSSOMString'),
    ],
    "parentRule": [
        FieldCall(field='parentRule', demands=['CSSRule'], returns='CSSRule'),
        FieldCall(field='parentRule', demands=['CSSStyleDeclaration'], returns='CSSRule'),
    ],
    "selectorText": [
        FieldCall(field='selectorText', demands=['CSSStyleRule'], returns='CSSOMString'),
        FieldCall(field='selectorText', demands=['CSSStyleRule', 'CSSOMString'], returns='CSSOMString'),
        FieldCall(field='selectorText', demands=['CSSPageRule'], returns='CSSOMString'),
        FieldCall(field='selectorText', demands=['CSSPageRule', 'CSSOMString'], returns='CSSOMString'),
    ],
    "styleSheet": [
        FieldCall(field='styleSheet', demands=['CSSImportRule'], returns='CSSStyleSheet'),
    ],
    "layerName": [
        FieldCall(field='layerName', demands=['CSSImportRule'], returns='CSSOMString'),
    ],
    "supportsText": [
        FieldCall(field='supportsText', demands=['CSSImportRule'], returns='CSSOMString'),
    ],
    "pageOrientation": [
        FieldCall(field='pageOrientation', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='pageOrientation', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "page-orientation": [
        FieldCall(field='page-orientation', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='page-orientation', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "marks": [
        FieldCall(field='marks', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='marks', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "bleed": [
        FieldCall(field='bleed', demands=['CSSPageDescriptors'], returns='CSSOMString'),
        FieldCall(field='bleed', demands=['CSSPageDescriptors', 'CSSOMString'], returns='CSSOMString'),
    ],
    "namespaceURI": [
        FieldCall(field='namespaceURI', demands=['CSSNamespaceRule'], returns='CSSOMString'),
        FieldCall(field='namespaceURI', demands=['Element'], returns='str'),
        FieldCall(field='namespaceURI', demands=['Attr'], returns='str'),
    ],
    "getPropertyValue": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='getPropertyValue', demands=['CSSStyleDeclaration', 'CSSOMString'], returns='CSSOMString'),
    ],
    "getPropertyPriority": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='getPropertyPriority', demands=['CSSStyleDeclaration', 'CSSOMString'], returns='CSSOMString'),
    ],
    "setProperty": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='setProperty', demands=['CSSStyleDeclaration', 'CSSOMString', 'CSSOMString'], returns='None'),
        PrototypeCall(constructor='CSSStyleDeclaration', fn='setProperty', demands=['CSSStyleDeclaration', 'CSSOMString', 'CSSOMString', 'CSSOMString'], returns='None'),
    ],
    "removeProperty": [
        PrototypeCall(constructor='CSSStyleDeclaration', fn='removeProperty', demands=['CSSStyleDeclaration', 'CSSOMString'], returns='CSSOMString'),
    ],
    "cssFloat": [
        FieldCall(field='cssFloat', demands=['CSSStyleProperties'], returns='CSSOMString'),
        FieldCall(field='cssFloat', demands=['CSSStyleProperties', 'CSSOMString'], returns='CSSOMString'),
    ],
    "pseudo": [
        PrototypeCall(constructor='CSSPseudoElement', fn='pseudo', demands=['CSSPseudoElement', 'CSSOMString'], returns='CSSPseudoElement'),
    ],
    "getBoxQuads": [
        PrototypeCall(constructor='CSSPseudoElement', fn='getBoxQuads', demands=['CSSPseudoElement'], returns='DOMQuad'),
        PrototypeCall(constructor='CSSPseudoElement', fn='getBoxQuads', demands=['CSSPseudoElement', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='getBoxQuads', demands=['Document'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='getBoxQuads', demands=['Document', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='getBoxQuads', demands=['Element'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='getBoxQuads', demands=['Element', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='getBoxQuads', demands=['Text'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='getBoxQuads', demands=['Text', 'dict'], returns='DOMQuad'),
    ],
    "convertQuadFromNode": [
        PrototypeCall(constructor='CSSPseudoElement', fn='convertQuadFromNode', demands=['CSSPseudoElement', 'dict', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='CSSPseudoElement', fn='convertQuadFromNode', demands=['CSSPseudoElement', 'dict', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='convertQuadFromNode', demands=['Document', 'dict', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='convertQuadFromNode', demands=['Document', 'dict', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='convertQuadFromNode', demands=['Element', 'dict', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='convertQuadFromNode', demands=['Element', 'dict', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='convertQuadFromNode', demands=['Text', 'dict', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='convertQuadFromNode', demands=['Text', 'dict', 'GeometryNode', 'dict'], returns='DOMQuad'),
    ],
    "convertRectFromNode": [
        PrototypeCall(constructor='CSSPseudoElement', fn='convertRectFromNode', demands=['CSSPseudoElement', 'DOMRectReadOnly', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='CSSPseudoElement', fn='convertRectFromNode', demands=['CSSPseudoElement', 'DOMRectReadOnly', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='convertRectFromNode', demands=['Document', 'DOMRectReadOnly', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Document', fn='convertRectFromNode', demands=['Document', 'DOMRectReadOnly', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='convertRectFromNode', demands=['Element', 'DOMRectReadOnly', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Element', fn='convertRectFromNode', demands=['Element', 'DOMRectReadOnly', 'GeometryNode', 'dict'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='convertRectFromNode', demands=['Text', 'DOMRectReadOnly', 'GeometryNode'], returns='DOMQuad'),
        PrototypeCall(constructor='Text', fn='convertRectFromNode', demands=['Text', 'DOMRectReadOnly', 'GeometryNode', 'dict'], returns='DOMQuad'),
    ],
    "convertPointFromNode": [
        PrototypeCall(constructor='CSSPseudoElement', fn='convertPointFromNode', demands=['CSSPseudoElement', 'dict', 'GeometryNode'], returns='DOMPoint'),
        PrototypeCall(constructor='CSSPseudoElement', fn='convertPointFromNode', demands=['CSSPseudoElement', 'dict', 'GeometryNode', 'dict'], returns='DOMPoint'),
        PrototypeCall(constructor='Document', fn='convertPointFromNode', demands=['Document', 'dict', 'GeometryNode'], returns='DOMPoint'),
        PrototypeCall(constructor='Document', fn='convertPointFromNode', demands=['Document', 'dict', 'GeometryNode', 'dict'], returns='DOMPoint'),
        PrototypeCall(constructor='Element', fn='convertPointFromNode', demands=['Element', 'dict', 'GeometryNode'], returns='DOMPoint'),
        PrototypeCall(constructor='Element', fn='convertPointFromNode', demands=['Element', 'dict', 'GeometryNode', 'dict'], returns='DOMPoint'),
        PrototypeCall(constructor='Text', fn='convertPointFromNode', demands=['Text', 'dict', 'GeometryNode'], returns='DOMPoint'),
        PrototypeCall(constructor='Text', fn='convertPointFromNode', demands=['Text', 'dict', 'GeometryNode', 'dict'], returns='DOMPoint'),
    ],
    "NDEFMessage": [
        NewCall(constructor='NDEFMessage', demands=['dict'], returns='NDEFMessage'),
    ],
    "records": [
        FieldCall(field='records', demands=['NDEFMessage'], returns='NDEFRecord'),
    ],
    "NDEFRecord": [
        NewCall(constructor='NDEFRecord', demands=['dict'], returns='NDEFRecord'),
    ],
    "recordType": [
        FieldCall(field='recordType', demands=['NDEFRecord'], returns='str'),
    ],
    "mediaType": [
        FieldCall(field='mediaType', demands=['NDEFRecord'], returns='str'),
    ],
    "toRecords": [
        PrototypeCall(constructor='NDEFRecord', fn='toRecords', demands=['NDEFRecord'], returns='NDEFRecord'),
    ],
    "NDEFReader": [
        NewCall(constructor='NDEFReader', demands=[], returns='NDEFReader'),
    ],
    "onreadingerror": [
        FieldCall(field='onreadingerror', demands=['NDEFReader'], returns='EventHandler'),
        FieldCall(field='onreadingerror', demands=['NDEFReader', 'EventHandler'], returns='EventHandler'),
    ],
    "scan": [
        PrototypeCall(constructor='NDEFReader', fn='scan', demands=['NDEFReader'], returns='None'),
        PrototypeCall(constructor='NDEFReader', fn='scan', demands=['NDEFReader', 'dict'], returns='None'),
    ],
    "makeReadOnly": [
        PrototypeCall(constructor='NDEFReader', fn='makeReadOnly', demands=['NDEFReader'], returns='None'),
        PrototypeCall(constructor='NDEFReader', fn='makeReadOnly', demands=['NDEFReader', 'dict'], returns='None'),
    ],
    "NDEFReadingEvent": [
        NewCall(constructor='NDEFReadingEvent', demands=['str', 'dict'], returns='NDEFReadingEvent'),
    ],
    "contributeToHistogramOnEvent": [
        PrototypeCall(constructor='PrivateAggregation', fn='contributeToHistogramOnEvent', demands=['PrivateAggregation', 'str', 'str'], returns='None'),
    ],
    "enableDebugMode": [
        PrototypeCall(constructor='PrivateAggregation', fn='enableDebugMode', demands=['PrivateAggregation'], returns='None'),
        PrototypeCall(constructor='PrivateAggregation', fn='enableDebugMode', demands=['PrivateAggregation', 'dict'], returns='None'),
    ],
    "PresentationRequest": [
        NewCall(constructor='PresentationRequest', demands=['str'], returns='PresentationRequest'),
    ],
    "reconnect": [
        PrototypeCall(constructor='PresentationRequest', fn='reconnect', demands=['PresentationRequest', 'str'], returns='PresentationConnection'),
    ],
    "onconnectionavailable": [
        FieldCall(field='onconnectionavailable', demands=['PresentationRequest'], returns='EventHandler'),
        FieldCall(field='onconnectionavailable', demands=['PresentationRequest', 'EventHandler'], returns='EventHandler'),
        FieldCall(field='onconnectionavailable', demands=['PresentationConnectionList'], returns='EventHandler'),
        FieldCall(field='onconnectionavailable', demands=['PresentationConnectionList', 'EventHandler'], returns='EventHandler'),
    ],
    "PresentationConnectionAvailableEvent": [
        NewCall(constructor='PresentationConnectionAvailableEvent', demands=['str', 'dict'], returns='PresentationConnectionAvailableEvent'),
    ],
    "onterminate": [
        FieldCall(field='onterminate', demands=['PresentationConnection'], returns='EventHandler'),
        FieldCall(field='onterminate', demands=['PresentationConnection', 'EventHandler'], returns='EventHandler'),
    ],
    "PresentationConnectionCloseEvent": [
        NewCall(constructor='PresentationConnectionCloseEvent', demands=['str', 'dict'], returns='PresentationConnectionCloseEvent'),
    ],
    "connectionList": [
        FieldCall(field='connectionList', demands=['PresentationReceiver'], returns='PresentationConnectionList'),
    ],
    "connections": [
        FieldCall(field='connections', demands=['PresentationConnectionList'], returns='PresentationConnection'),
    ],
    "userHint": [
        FieldCall(field='userHint', demands=['PaymentManager'], returns='str'),
        FieldCall(field='userHint', demands=['PaymentManager', 'str'], returns='str'),
    ],
    "enableDelegations": [
        PrototypeCall(constructor='PaymentManager', fn='enableDelegations', demands=['PaymentManager', 'PaymentDelegation'], returns='None'),
    ],
    "CanMakePaymentEvent": [
        NewCall(constructor='CanMakePaymentEvent', demands=['str'], returns='CanMakePaymentEvent'),
    ],
    "PaymentRequestEvent": [
        NewCall(constructor='PaymentRequestEvent', demands=['str'], returns='PaymentRequestEvent'),
        NewCall(constructor='PaymentRequestEvent', demands=['str', 'dict'], returns='PaymentRequestEvent'),
    ],
    "topOrigin": [
        FieldCall(field='topOrigin', demands=['PaymentRequestEvent'], returns='str'),
    ],
    "paymentRequestOrigin": [
        FieldCall(field='paymentRequestOrigin', demands=['PaymentRequestEvent'], returns='str'),
    ],
    "paymentRequestId": [
        FieldCall(field='paymentRequestId', demands=['PaymentRequestEvent'], returns='str'),
    ],
    "methodData": [
        FieldCall(field='methodData', demands=['PaymentRequestEvent'], returns='dict'),
    ],
    "modifiers": [
        FieldCall(field='modifiers', demands=['PaymentRequestEvent'], returns='dict'),
    ],
    "paymentOptions": [
        FieldCall(field='paymentOptions', demands=['PaymentRequestEvent'], returns='object'),
    ],
    "shippingOptions": [
        FieldCall(field='shippingOptions', demands=['PaymentRequestEvent'], returns='dict'),
    ],
    "changePaymentMethod": [
        PrototypeCall(constructor='PaymentRequestEvent', fn='changePaymentMethod', demands=['PaymentRequestEvent', 'str'], returns='dict'),
        PrototypeCall(constructor='PaymentRequestEvent', fn='changePaymentMethod', demands=['PaymentRequestEvent', 'str', 'object'], returns='dict'),
    ],
    "changeShippingAddress": [
        PrototypeCall(constructor='PaymentRequestEvent', fn='changeShippingAddress', demands=['PaymentRequestEvent'], returns='dict'),
        PrototypeCall(constructor='PaymentRequestEvent', fn='changeShippingAddress', demands=['PaymentRequestEvent', 'dict'], returns='dict'),
    ],
    "changeShippingOption": [
        PrototypeCall(constructor='PaymentRequestEvent', fn='changeShippingOption', demands=['PaymentRequestEvent', 'str'], returns='dict'),
    ],
    "isSessionSupported": [
        PrototypeCall(constructor='XRSystem', fn='isSessionSupported', demands=['XRSystem', 'XRSessionMode'], returns='bool'),
    ],
    "requestSession": [
        PrototypeCall(constructor='XRSystem', fn='requestSession', demands=['XRSystem', 'XRSessionMode'], returns='XRSession'),
        PrototypeCall(constructor='XRSystem', fn='requestSession', demands=['XRSystem', 'XRSessionMode', 'dict'], returns='XRSession'),
    ],
    "frameRate": [
        FieldCall(field='frameRate', demands=['XRSession'], returns='float'),
    ],
    "supportedFrameRates": [
        FieldCall(field='supportedFrameRates', demands=['XRSession'], returns='Float32Array'),
    ],
    "renderState": [
        FieldCall(field='renderState', demands=['XRSession'], returns='XRRenderState'),
    ],
    "inputSources": [
        FieldCall(field='inputSources', demands=['XRSession'], returns='XRInputSourceArray'),
    ],
    "trackedSources": [
        FieldCall(field='trackedSources', demands=['XRSession'], returns='XRInputSourceArray'),
    ],
    "enabledFeatures": [
        FieldCall(field='enabledFeatures', demands=['XRSession'], returns='str'),
    ],
    "isSystemKeyboardSupported": [
        FieldCall(field='isSystemKeyboardSupported', demands=['XRSession'], returns='bool'),
    ],
    "updateRenderState": [
        PrototypeCall(constructor='XRSession', fn='updateRenderState', demands=['XRSession'], returns='None'),
        PrototypeCall(constructor='XRSession', fn='updateRenderState', demands=['XRSession', 'dict'], returns='None'),
    ],
    "updateTargetFrameRate": [
        PrototypeCall(constructor='XRSession', fn='updateTargetFrameRate', demands=['XRSession', 'float'], returns='None'),
    ],
    "requestReferenceSpace": [
        PrototypeCall(constructor='XRSession', fn='requestReferenceSpace', demands=['XRSession', 'XRReferenceSpaceType'], returns='XRReferenceSpace'),
    ],
    "oninputsourceschange": [
        FieldCall(field='oninputsourceschange', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='oninputsourceschange', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onselect": [
        FieldCall(field='onselect', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onselect', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onselectstart": [
        FieldCall(field='onselectstart', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onselectstart', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onselectend": [
        FieldCall(field='onselectend', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onselectend', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onsqueeze": [
        FieldCall(field='onsqueeze', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onsqueeze', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onsqueezestart": [
        FieldCall(field='onsqueezestart', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onsqueezestart', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onsqueezeend": [
        FieldCall(field='onsqueezeend', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onsqueezeend', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onvisibilitychange": [
        FieldCall(field='onvisibilitychange', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onvisibilitychange', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "onframeratechange": [
        FieldCall(field='onframeratechange', demands=['XRSession'], returns='EventHandler'),
        FieldCall(field='onframeratechange', demands=['XRSession', 'EventHandler'], returns='EventHandler'),
    ],
    "depthNear": [
        FieldCall(field='depthNear', demands=['XRRenderState'], returns='float'),
    ],
    "depthFar": [
        FieldCall(field='depthFar', demands=['XRRenderState'], returns='float'),
    ],
    "passthroughFullyObscured": [
        FieldCall(field='passthroughFullyObscured', demands=['XRRenderState'], returns='bool'),
    ],
    "inlineVerticalFieldOfView": [
        FieldCall(field='inlineVerticalFieldOfView', demands=['XRRenderState'], returns='float'),
    ],
    "baseLayer": [
        FieldCall(field='baseLayer', demands=['XRRenderState'], returns='XRWebGLLayer'),
    ],
    "session": [
        FieldCall(field='session', demands=['XRFrame'], returns='XRSession'),
        FieldCall(field='session', demands=['XRSessionEvent'], returns='XRSession'),
        FieldCall(field='session', demands=['XRInputSourcesChangeEvent'], returns='XRSession'),
    ],
    "predictedDisplayTime": [
        FieldCall(field='predictedDisplayTime', demands=['XRFrame'], returns='float'),
    ],
    "getViewerPose": [
        PrototypeCall(constructor='XRFrame', fn='getViewerPose', demands=['XRFrame', 'XRReferenceSpace'], returns='XRViewerPose'),
    ],
    "getPose": [
        PrototypeCall(constructor='XRFrame', fn='getPose', demands=['XRFrame', 'XRSpace', 'XRSpace'], returns='XRPose'),
        PrototypeCall(constructor='XRHitTestResult', fn='getPose', demands=['XRHitTestResult', 'XRSpace'], returns='XRPose'),
    ],
    "getOffsetReferenceSpace": [
        PrototypeCall(constructor='XRReferenceSpace', fn='getOffsetReferenceSpace', demands=['XRReferenceSpace', 'XRRigidTransform'], returns='XRReferenceSpace'),
    ],
    "onreset": [
        FieldCall(field='onreset', demands=['XRReferenceSpace'], returns='EventHandler'),
        FieldCall(field='onreset', demands=['XRReferenceSpace', 'EventHandler'], returns='EventHandler'),
    ],
    "boundsGeometry": [
        FieldCall(field='boundsGeometry', demands=['XRBoundedReferenceSpace'], returns='DOMPointReadOnly'),
    ],
    "eye": [
        FieldCall(field='eye', demands=['XRView'], returns='XREye'),
    ],
    "recommendedViewportScale": [
        FieldCall(field='recommendedViewportScale', demands=['XRView'], returns='float'),
    ],
    "requestViewportScale": [
        PrototypeCall(constructor='XRView', fn='requestViewportScale', demands=['XRView', 'float'], returns='None'),
    ],
    "XRRigidTransform": [
        NewCall(constructor='XRRigidTransform', demands=[], returns='XRRigidTransform'),
        NewCall(constructor='XRRigidTransform', demands=['dict'], returns='XRRigidTransform'),
        NewCall(constructor='XRRigidTransform', demands=['dict', 'dict'], returns='XRRigidTransform'),
    ],
    "emulatedPosition": [
        FieldCall(field='emulatedPosition', demands=['XRPose'], returns='bool'),
    ],
    "views": [
        FieldCall(field='views', demands=['XRViewerPose'], returns='XRView'),
    ],
    "handedness": [
        FieldCall(field='handedness', demands=['XRInputSource'], returns='XRHandedness'),
    ],
    "targetRayMode": [
        FieldCall(field='targetRayMode', demands=['XRInputSource'], returns='XRTargetRayMode'),
    ],
    "targetRaySpace": [
        FieldCall(field='targetRaySpace', demands=['XRInputSource'], returns='XRSpace'),
    ],
    "gripSpace": [
        FieldCall(field='gripSpace', demands=['XRInputSource'], returns='XRSpace'),
    ],
    "profiles": [
        FieldCall(field='profiles', demands=['XRInputSource'], returns='str'),
    ],
    "skipRendering": [
        FieldCall(field='skipRendering', demands=['XRInputSource'], returns='bool'),
    ],
    "XRWebGLLayer": [
        NewCall(constructor='XRWebGLLayer', demands=['XRSession', 'XRWebGLRenderingContext'], returns='XRWebGLLayer'),
        NewCall(constructor='XRWebGLLayer', demands=['XRSession', 'XRWebGLRenderingContext', 'dict'], returns='XRWebGLLayer'),
    ],
    "antialias": [
        FieldCall(field='antialias', demands=['XRWebGLLayer'], returns='bool'),
    ],
    "framebuffer": [
        FieldCall(field='framebuffer', demands=['XRWebGLLayer'], returns='WebGLFramebuffer'),
    ],
    "framebufferWidth": [
        FieldCall(field='framebufferWidth', demands=['XRWebGLLayer'], returns='int'),
    ],
    "framebufferHeight": [
        FieldCall(field='framebufferHeight', demands=['XRWebGLLayer'], returns='int'),
    ],
    "getViewport": [
        PrototypeCall(constructor='XRWebGLLayer', fn='getViewport', demands=['XRWebGLLayer', 'XRView'], returns='XRViewport'),
    ],
    "getNativeFramebufferScaleFactor": [
        DirectCall(fn='getNativeFramebufferScaleFactor', receiver='XRWebGLLayer', demands=['XRSession'], returns='float'),
    ],
    "XRSessionEvent": [
        NewCall(constructor='XRSessionEvent', demands=['str', 'dict'], returns='XRSessionEvent'),
    ],
    "XRInputSourceEvent": [
        NewCall(constructor='XRInputSourceEvent', demands=['str', 'dict'], returns='XRInputSourceEvent'),
    ],
    "inputSource": [
        FieldCall(field='inputSource', demands=['XRInputSourceEvent'], returns='XRInputSource'),
        FieldCall(field='inputSource', demands=['XRTransientInputHitTestResult'], returns='XRInputSource'),
    ],
    "XRInputSourcesChangeEvent": [
        NewCall(constructor='XRInputSourcesChangeEvent', demands=['str', 'dict'], returns='XRInputSourcesChangeEvent'),
    ],
    "added": [
        FieldCall(field='added', demands=['XRInputSourcesChangeEvent'], returns='XRInputSource'),
    ],
    "removed": [
        FieldCall(field='removed', demands=['XRInputSourcesChangeEvent'], returns='XRInputSource'),
    ],
    "XRReferenceSpaceEvent": [
        NewCall(constructor='XRReferenceSpaceEvent', demands=['str', 'dict'], returns='XRReferenceSpaceEvent'),
    ],
    "referenceSpace": [
        FieldCall(field='referenceSpace', demands=['XRReferenceSpaceEvent'], returns='XRReferenceSpace'),
    ],
    "granted": [
        FieldCall(field='granted', demands=['XRPermissionStatus'], returns='str'),
        FieldCall(field='granted', demands=['XRPermissionStatus', 'str'], returns='str'),
    ],
    "multiDrawArraysInstancedBaseInstanceWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'Int32Array', 'int', 'GLsizei', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawArraysInstancedBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLint', 'int', 'GLsizei', 'int', 'GLsizei', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
    ],
    "multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL": [
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'Int32Array', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'Int32Array', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'Int32Array', 'int', 'GLsizei', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'Int32Array', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'Int32Array', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLint', 'int', 'Uint32Array', 'int', 'GLsizei'], returns='None'),
        PrototypeCall(constructor='WEBGL_multi_draw_instanced_base_vertex_base_instance', fn='multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL', demands=['WEBGL_multi_draw_instanced_base_vertex_base_instance', 'GLenum', 'GLsizei', 'int', 'GLenum', 'GLsizei', 'int', 'GLsizei', 'int', 'GLint', 'int', 'GLuint', 'int', 'GLsizei'], returns='None'),
    ],
    "probeSpace": [
        FieldCall(field='probeSpace', demands=['XRLightProbe'], returns='XRSpace'),
    ],
    "onreflectionchange": [
        FieldCall(field='onreflectionchange', demands=['XRLightProbe'], returns='EventHandler'),
        FieldCall(field='onreflectionchange', demands=['XRLightProbe', 'EventHandler'], returns='EventHandler'),
    ],
    "sphericalHarmonicsCoefficients": [
        FieldCall(field='sphericalHarmonicsCoefficients', demands=['XRLightEstimate'], returns='Float32Array'),
    ],
    "primaryLightDirection": [
        FieldCall(field='primaryLightDirection', demands=['XRLightEstimate'], returns='DOMPointReadOnly'),
    ],
    "primaryLightIntensity": [
        FieldCall(field='primaryLightIntensity', demands=['XRLightEstimate'], returns='DOMPointReadOnly'),
    ],
    "Blob": [
        NewCall(constructor='Blob', demands=[], returns='Blob'),
        NewCall(constructor='Blob', demands=['BlobPart'], returns='Blob'),
        NewCall(constructor='Blob', demands=['BlobPart', 'dict'], returns='Blob'),
    ],
    "slice": [
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'long long'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'long long', 'long long'], returns='Blob'),
        PrototypeCall(constructor='Blob', fn='slice', demands=['Blob', 'long long', 'long long', 'str'], returns='Blob'),
    ],
    "File": [
        NewCall(constructor='File', demands=['BlobPart', 'str'], returns='File'),
        NewCall(constructor='File', demands=['BlobPart', 'str', 'dict'], returns='File'),
    ],
    "lastModified": [
        FieldCall(field='lastModified', demands=['File'], returns='long long'),
    ],
    "FileReader": [
        NewCall(constructor='FileReader', demands=[], returns='FileReader'),
    ],
    "readAsArrayBuffer": [
        PrototypeCall(constructor='FileReader', fn='readAsArrayBuffer', demands=['FileReader', 'Blob'], returns='None'),
        PrototypeCall(constructor='FileReaderSync', fn='readAsArrayBuffer', demands=['FileReaderSync', 'Blob'], returns='ArrayBuffer'),
    ],
    "readAsBinaryString": [
        PrototypeCall(constructor='FileReader', fn='readAsBinaryString', demands=['FileReader', 'Blob'], returns='None'),
        PrototypeCall(constructor='FileReaderSync', fn='readAsBinaryString', demands=['FileReaderSync', 'Blob'], returns='str'),
    ],
    "readAsText": [
        PrototypeCall(constructor='FileReader', fn='readAsText', demands=['FileReader', 'Blob'], returns='None'),
        PrototypeCall(constructor='FileReader', fn='readAsText', demands=['FileReader', 'Blob', 'str'], returns='None'),
        PrototypeCall(constructor='FileReaderSync', fn='readAsText', demands=['FileReaderSync', 'Blob'], returns='str'),
        PrototypeCall(constructor='FileReaderSync', fn='readAsText', demands=['FileReaderSync', 'Blob', 'str'], returns='str'),
    ],
    "readAsDataURL": [
        PrototypeCall(constructor='FileReader', fn='readAsDataURL', demands=['FileReader', 'Blob'], returns='None'),
        PrototypeCall(constructor='FileReaderSync', fn='readAsDataURL', demands=['FileReaderSync', 'Blob'], returns='str'),
    ],
    "FileReaderSync": [
        NewCall(constructor='FileReaderSync', demands=[], returns='FileReaderSync'),
    ],
    "Accelerometer": [
        NewCall(constructor='Accelerometer', demands=[], returns='Accelerometer'),
        NewCall(constructor='Accelerometer', demands=['dict'], returns='Accelerometer'),
    ],
    "LinearAccelerationSensor": [
        NewCall(constructor='LinearAccelerationSensor', demands=[], returns='LinearAccelerationSensor'),
        NewCall(constructor='LinearAccelerationSensor', demands=['dict'], returns='LinearAccelerationSensor'),
    ],
    "GravitySensor": [
        NewCall(constructor='GravitySensor', demands=[], returns='GravitySensor'),
        NewCall(constructor='GravitySensor', demands=['dict'], returns='GravitySensor'),
    ],
    "enableiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='enableiOES', demands=['OES_draw_buffers_indexed', 'GLenum', 'GLuint'], returns='None'),
    ],
    "disableiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='disableiOES', demands=['OES_draw_buffers_indexed', 'GLenum', 'GLuint'], returns='None'),
    ],
    "blendEquationiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendEquationiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum'], returns='None'),
    ],
    "blendEquationSeparateiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendEquationSeparateiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFunciOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendFunciOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum'], returns='None'),
    ],
    "blendFuncSeparateiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='blendFuncSeparateiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLenum', 'GLenum', 'GLenum', 'GLenum'], returns='None'),
    ],
    "colorMaskiOES": [
        PrototypeCall(constructor='OES_draw_buffers_indexed', fn='colorMaskiOES', demands=['OES_draw_buffers_indexed', 'GLuint', 'GLboolean', 'GLboolean', 'GLboolean', 'GLboolean'], returns='None'),
    ],
    "willRequestConditionalCreation": [
        DirectCall(fn='willRequestConditionalCreation', receiver='Credential', demands=[], returns='None'),
    ],
    "store": [
        PrototypeCall(constructor='CredentialsContainer', fn='store', demands=['CredentialsContainer', 'Credential'], returns='None'),
    ],
    "preventSilentAccess": [
        PrototypeCall(constructor='CredentialsContainer', fn='preventSilentAccess', demands=['CredentialsContainer'], returns='None'),
    ],
    "PasswordCredential": [
        NewCall(constructor='PasswordCredential', demands=['HTMLFormElement'], returns='PasswordCredential'),
        NewCall(constructor='PasswordCredential', demands=['dict'], returns='PasswordCredential'),
    ],
    "FederatedCredential": [
        NewCall(constructor='FederatedCredential', demands=['dict'], returns='FederatedCredential'),
    ],
    "provider": [
        FieldCall(field='provider', demands=['FederatedCredential'], returns='str'),
    ],
    "clipPathUnits": [
        FieldCall(field='clipPathUnits', demands=['SVGClipPathElement'], returns='SVGAnimatedEnumeration'),
    ],
    "maskUnits": [
        FieldCall(field='maskUnits', demands=['SVGMaskElement'], returns='SVGAnimatedEnumeration'),
    ],
    "maskContentUnits": [
        FieldCall(field='maskContentUnits', demands=['SVGMaskElement'], returns='SVGAnimatedEnumeration'),
    ],
    "updateCallbackDone": [
        FieldCall(field='updateCallbackDone', demands=['ViewTransition'], returns='None'),
    ],
    "skipTransition": [
        PrototypeCall(constructor='ViewTransition', fn='skipTransition', demands=['ViewTransition'], returns='None'),
    ],
    "effectiveType": [
        FieldCall(field='effectiveType', demands=['NetworkInformation'], returns='EffectiveConnectionType'),
    ],
    "downlinkMax": [
        FieldCall(field='downlinkMax', demands=['NetworkInformation'], returns='Megabit'),
    ],
    "downlink": [
        FieldCall(field='downlink', demands=['NetworkInformation'], returns='Megabit'),
    ],
    "rtt": [
        FieldCall(field='rtt', demands=['NetworkInformation'], returns='Millisecond'),
    ],
    "XRRay": [
        NewCall(constructor='XRRay', demands=[], returns='XRRay'),
        NewCall(constructor='XRRay', demands=['dict'], returns='XRRay'),
        NewCall(constructor='XRRay', demands=['dict', 'dict'], returns='XRRay'),
        NewCall(constructor='XRRay', demands=['XRRigidTransform'], returns='XRRay'),
    ],
    "filterUnits": [
        FieldCall(field='filterUnits', demands=['SVGFilterElement'], returns='SVGAnimatedEnumeration'),
    ],
    "primitiveUnits": [
        FieldCall(field='primitiveUnits', demands=['SVGFilterElement'], returns='SVGAnimatedEnumeration'),
    ],
    "in1": [
        FieldCall(field='in1', demands=['SVGFEBlendElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEColorMatrixElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEComponentTransferElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFECompositeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEMergeNodeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEMorphologyElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFEOffsetElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedString'),
        FieldCall(field='in1', demands=['SVGFETileElement'], returns='SVGAnimatedString'),
    ],
    "in2": [
        FieldCall(field='in2', demands=['SVGFEBlendElement'], returns='SVGAnimatedString'),
        FieldCall(field='in2', demands=['SVGFECompositeElement'], returns='SVGAnimatedString'),
        FieldCall(field='in2', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedString'),
    ],
    "tableValues": [
        FieldCall(field='tableValues', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumberList'),
    ],
    "slope": [
        FieldCall(field='slope', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "amplitude": [
        FieldCall(field='amplitude', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "exponent": [
        FieldCall(field='exponent', demands=['SVGComponentTransferFunctionElement'], returns='SVGAnimatedNumber'),
    ],
    "k1": [
        FieldCall(field='k1', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k2": [
        FieldCall(field='k2', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k3": [
        FieldCall(field='k3', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "k4": [
        FieldCall(field='k4', demands=['SVGFECompositeElement'], returns='SVGAnimatedNumber'),
    ],
    "orderX": [
        FieldCall(field='orderX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "orderY": [
        FieldCall(field='orderY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "kernelMatrix": [
        FieldCall(field='kernelMatrix', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumberList'),
    ],
    "divisor": [
        FieldCall(field='divisor', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
    ],
    "bias": [
        FieldCall(field='bias', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
    ],
    "targetX": [
        FieldCall(field='targetX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "targetY": [
        FieldCall(field='targetY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedInteger'),
    ],
    "edgeMode": [
        FieldCall(field='edgeMode', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedEnumeration'),
        FieldCall(field='edgeMode', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedEnumeration'),
    ],
    "kernelUnitLengthX": [
        FieldCall(field='kernelUnitLengthX', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthX', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthX', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "kernelUnitLengthY": [
        FieldCall(field='kernelUnitLengthY', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthY', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='kernelUnitLengthY', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "preserveAlpha": [
        FieldCall(field='preserveAlpha', demands=['SVGFEConvolveMatrixElement'], returns='SVGAnimatedBoolean'),
    ],
    "surfaceScale": [
        FieldCall(field='surfaceScale', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='surfaceScale', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "diffuseConstant": [
        FieldCall(field='diffuseConstant', demands=['SVGFEDiffuseLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "azimuth": [
        FieldCall(field='azimuth', demands=['SVGFEDistantLightElement'], returns='SVGAnimatedNumber'),
    ],
    "elevation": [
        FieldCall(field='elevation', demands=['SVGFEDistantLightElement'], returns='SVGAnimatedNumber'),
    ],
    "pointsAtX": [
        FieldCall(field='pointsAtX', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "pointsAtY": [
        FieldCall(field='pointsAtY', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "pointsAtZ": [
        FieldCall(field='pointsAtZ', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "specularExponent": [
        FieldCall(field='specularExponent', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='specularExponent', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "limitingConeAngle": [
        FieldCall(field='limitingConeAngle', demands=['SVGFESpotLightElement'], returns='SVGAnimatedNumber'),
    ],
    "xChannelSelector": [
        FieldCall(field='xChannelSelector', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedEnumeration'),
    ],
    "yChannelSelector": [
        FieldCall(field='yChannelSelector', demands=['SVGFEDisplacementMapElement'], returns='SVGAnimatedEnumeration'),
    ],
    "stdDeviationX": [
        FieldCall(field='stdDeviationX', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='stdDeviationX', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedNumber'),
    ],
    "stdDeviationY": [
        FieldCall(field='stdDeviationY', demands=['SVGFEDropShadowElement'], returns='SVGAnimatedNumber'),
        FieldCall(field='stdDeviationY', demands=['SVGFEGaussianBlurElement'], returns='SVGAnimatedNumber'),
    ],
    "setStdDeviation": [
        PrototypeCall(constructor='SVGFEDropShadowElement', fn='setStdDeviation', demands=['SVGFEDropShadowElement', 'float', 'float'], returns='None'),
        PrototypeCall(constructor='SVGFEGaussianBlurElement', fn='setStdDeviation', demands=['SVGFEGaussianBlurElement', 'float', 'float'], returns='None'),
    ],
    "specularConstant": [
        FieldCall(field='specularConstant', demands=['SVGFESpecularLightingElement'], returns='SVGAnimatedNumber'),
    ],
    "baseFrequencyX": [
        FieldCall(field='baseFrequencyX', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "baseFrequencyY": [
        FieldCall(field='baseFrequencyY', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "numOctaves": [
        FieldCall(field='numOctaves', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedInteger'),
    ],
    "seed": [
        FieldCall(field='seed', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedNumber'),
    ],
    "stitchTiles": [
        FieldCall(field='stitchTiles', demands=['SVGFETurbulenceElement'], returns='SVGAnimatedEnumeration'),
    ],
    "startDrawing": [
        PrototypeCall(constructor='HandwritingRecognizer', fn='startDrawing', demands=['HandwritingRecognizer'], returns='HandwritingDrawing'),
        PrototypeCall(constructor='HandwritingRecognizer', fn='startDrawing', demands=['HandwritingRecognizer', 'dict'], returns='HandwritingDrawing'),
    ],
    "addStroke": [
        PrototypeCall(constructor='HandwritingDrawing', fn='addStroke', demands=['HandwritingDrawing', 'HandwritingStroke'], returns='None'),
    ],
    "removeStroke": [
        PrototypeCall(constructor='HandwritingDrawing', fn='removeStroke', demands=['HandwritingDrawing', 'HandwritingStroke'], returns='None'),
    ],
    "getStrokes": [
        PrototypeCall(constructor='HandwritingDrawing', fn='getStrokes', demands=['HandwritingDrawing'], returns='HandwritingStroke'),
    ],
    "getPrediction": [
        PrototypeCall(constructor='HandwritingDrawing', fn='getPrediction', demands=['HandwritingDrawing'], returns='dict'),
    ],
    "HandwritingStroke": [
        NewCall(constructor='HandwritingStroke', demands=[], returns='HandwritingStroke'),
    ],
    "addPoint": [
        PrototypeCall(constructor='HandwritingStroke', fn='addPoint', demands=['HandwritingStroke', 'dict'], returns='None'),
    ],
    "getPoints": [
        PrototypeCall(constructor='HandwritingStroke', fn='getPoints', demands=['HandwritingStroke'], returns='dict'),
    ],
    "nameList": [
        FieldCall(field='nameList', demands=['CSSLayerStatementRule'], returns='CSSOMString'),
    ],
    "colorScheme": [
        FieldCall(field='colorScheme', demands=['PreferenceManager'], returns='PreferenceObject'),
    ],
    "contrast": [
        FieldCall(field='contrast', demands=['PreferenceManager'], returns='PreferenceObject'),
    ],
    "reducedMotion": [
        FieldCall(field='reducedMotion', demands=['PreferenceManager'], returns='PreferenceObject'),
    ],
    "reducedTransparency": [
        FieldCall(field='reducedTransparency', demands=['PreferenceManager'], returns='PreferenceObject'),
    ],
    "reducedData": [
        FieldCall(field='reducedData', demands=['PreferenceManager'], returns='PreferenceObject'),
    ],
    "override": [
        FieldCall(field='override', demands=['PreferenceObject'], returns='str'),
    ],
    "validValues": [
        FieldCall(field='validValues', demands=['PreferenceObject'], returns='str'),
    ],
    "clearOverride": [
        PrototypeCall(constructor='PreferenceObject', fn='clearOverride', demands=['PreferenceObject'], returns='None'),
    ],
    "requestOverride": [
        PrototypeCall(constructor='PreferenceObject', fn='requestOverride', demands=['PreferenceObject', 'str'], returns='None'),
    ],
    "DeviceOrientationEvent": [
        NewCall(constructor='DeviceOrientationEvent', demands=['str'], returns='DeviceOrientationEvent'),
        NewCall(constructor='DeviceOrientationEvent', demands=['str', 'dict'], returns='DeviceOrientationEvent'),
    ],
    "beta": [
        FieldCall(field='beta', demands=['DeviceOrientationEvent'], returns='float'),
        FieldCall(field='beta', demands=['DeviceMotionEventRotationRate'], returns='float'),
    ],
    "gamma": [
        FieldCall(field='gamma', demands=['DeviceOrientationEvent'], returns='float'),
        FieldCall(field='gamma', demands=['DeviceMotionEventRotationRate'], returns='float'),
    ],
    "absolute": [
        FieldCall(field='absolute', demands=['DeviceOrientationEvent'], returns='bool'),
    ],
    "DeviceMotionEvent": [
        NewCall(constructor='DeviceMotionEvent', demands=['str'], returns='DeviceMotionEvent'),
        NewCall(constructor='DeviceMotionEvent', demands=['str', 'dict'], returns='DeviceMotionEvent'),
    ],
    "acceleration": [
        FieldCall(field='acceleration', demands=['DeviceMotionEvent'], returns='DeviceMotionEventAcceleration'),
    ],
    "accelerationIncludingGravity": [
        FieldCall(field='accelerationIncludingGravity', demands=['DeviceMotionEvent'], returns='DeviceMotionEventAcceleration'),
    ],
    "rotationRate": [
        FieldCall(field='rotationRate', demands=['DeviceMotionEvent'], returns='DeviceMotionEventRotationRate'),
    ],
    "interval": [
        FieldCall(field='interval', demands=['DeviceMotionEvent'], returns='float'),
    ],
    "ReportingObserver": [
        NewCall(constructor='ReportingObserver', demands=['ReportingObserverCallback'], returns='ReportingObserver'),
        NewCall(constructor='ReportingObserver', demands=['ReportingObserverCallback', 'dict'], returns='ReportingObserver'),
    ],
    "ProximitySensor": [
        NewCall(constructor='ProximitySensor', demands=[], returns='ProximitySensor'),
        NewCall(constructor='ProximitySensor', demands=['dict'], returns='ProximitySensor'),
    ],
    "distance": [
        FieldCall(field='distance', demands=['ProximitySensor'], returns='float'),
    ],
    "near": [
        FieldCall(field='near', demands=['ProximitySensor'], returns='bool'),
    ],
    "MediaRecorder": [
        NewCall(constructor='MediaRecorder', demands=['MediaStream'], returns='MediaRecorder'),
        NewCall(constructor='MediaRecorder', demands=['MediaStream', 'dict'], returns='MediaRecorder'),
    ],
    "mimeType": [
        FieldCall(field='mimeType', demands=['MediaRecorder'], returns='str'),
    ],
    "onstop": [
        FieldCall(field='onstop', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='onstop', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
    ],
    "ondataavailable": [
        FieldCall(field='ondataavailable', demands=['MediaRecorder'], returns='EventHandler'),
        FieldCall(field='ondataavailable', demands=['MediaRecorder', 'EventHandler'], returns='EventHandler'),
    ],
    "videoBitsPerSecond": [
        FieldCall(field='videoBitsPerSecond', demands=['MediaRecorder'], returns='int'),
    ],
    "audioBitsPerSecond": [
        FieldCall(field='audioBitsPerSecond', demands=['MediaRecorder'], returns='int'),
    ],
    "audioBitrateMode": [
        FieldCall(field='audioBitrateMode', demands=['MediaRecorder'], returns='BitrateMode'),
    ],
    "requestData": [
        PrototypeCall(constructor='MediaRecorder', fn='requestData', demands=['MediaRecorder'], returns='None'),
    ],
    "BlobEvent": [
        NewCall(constructor='BlobEvent', demands=['str', 'dict'], returns='BlobEvent'),
    ],
    "timecode": [
        FieldCall(field='timecode', demands=['BlobEvent'], returns='float'),
    ],
    "anchorNode": [
        FieldCall(field='anchorNode', demands=['Selection'], returns='Node'),
    ],
    "anchorOffset": [
        FieldCall(field='anchorOffset', demands=['Selection'], returns='int'),
    ],
    "focusNode": [
        FieldCall(field='focusNode', demands=['Selection'], returns='Node'),
    ],
    "focusOffset": [
        FieldCall(field='focusOffset', demands=['Selection'], returns='int'),
    ],
    "isCollapsed": [
        FieldCall(field='isCollapsed', demands=['Selection'], returns='bool'),
    ],
    "rangeCount": [
        FieldCall(field='rangeCount', demands=['Selection'], returns='int'),
    ],
    "getRangeAt": [
        PrototypeCall(constructor='Selection', fn='getRangeAt', demands=['Selection', 'int'], returns='Range'),
    ],
    "addRange": [
        PrototypeCall(constructor='Selection', fn='addRange', demands=['Selection', 'Range'], returns='None'),
    ],
    "removeRange": [
        PrototypeCall(constructor='Selection', fn='removeRange', demands=['Selection', 'Range'], returns='None'),
    ],
    "removeAllRanges": [
        PrototypeCall(constructor='Selection', fn='removeAllRanges', demands=['Selection'], returns='None'),
    ],
    "empty": [
        PrototypeCall(constructor='Selection', fn='empty', demands=['Selection'], returns='None'),
    ],
    "getComposedRanges": [
        PrototypeCall(constructor='Selection', fn='getComposedRanges', demands=['Selection'], returns='StaticRange'),
        PrototypeCall(constructor='Selection', fn='getComposedRanges', demands=['Selection', 'dict'], returns='StaticRange'),
    ],
    "collapse": [
        PrototypeCall(constructor='Selection', fn='collapse', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='collapse', demands=['Selection', 'Node', 'int'], returns='None'),
        PrototypeCall(constructor='Range', fn='collapse', demands=['Range'], returns='None'),
        PrototypeCall(constructor='Range', fn='collapse', demands=['Range', 'bool'], returns='None'),
    ],
    "collapseToStart": [
        PrototypeCall(constructor='Selection', fn='collapseToStart', demands=['Selection'], returns='None'),
    ],
    "collapseToEnd": [
        PrototypeCall(constructor='Selection', fn='collapseToEnd', demands=['Selection'], returns='None'),
    ],
    "extend": [
        PrototypeCall(constructor='Selection', fn='extend', demands=['Selection', 'Node'], returns='None'),
        PrototypeCall(constructor='Selection', fn='extend', demands=['Selection', 'Node', 'int'], returns='None'),
    ],
    "setBaseAndExtent": [
        PrototypeCall(constructor='Selection', fn='setBaseAndExtent', demands=['Selection', 'Node', 'int', 'Node', 'int'], returns='None'),
    ],
    "selectAllChildren": [
        PrototypeCall(constructor='Selection', fn='selectAllChildren', demands=['Selection', 'Node'], returns='None'),
    ],
    "modify": [
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str', 'str'], returns='None'),
        PrototypeCall(constructor='Selection', fn='modify', demands=['Selection', 'str', 'str', 'str'], returns='None'),
    ],
    "deleteFromDocument": [
        PrototypeCall(constructor='Selection', fn='deleteFromDocument', demands=['Selection'], returns='None'),
    ],
    "containsNode": [
        PrototypeCall(constructor='Selection', fn='containsNode', demands=['Selection', 'Node'], returns='bool'),
        PrototypeCall(constructor='Selection', fn='containsNode', demands=['Selection', 'Node', 'bool'], returns='bool'),
    ],
    "Highlight": [
        NewCall(constructor='Highlight', demands=['AbstractRange'], returns='Highlight'),
    ],
    "getManagedConfiguration": [
        PrototypeCall(constructor='NavigatorManagedData', fn='getManagedConfiguration', demands=['NavigatorManagedData', 'str'], returns='str'),
    ],
    "onmanagedconfigurationchange": [
        FieldCall(field='onmanagedconfigurationchange', demands=['NavigatorManagedData'], returns='EventHandler'),
        FieldCall(field='onmanagedconfigurationchange', demands=['NavigatorManagedData', 'EventHandler'], returns='EventHandler'),
    ],
    "isSameEntry": [
        PrototypeCall(constructor='FileSystemHandle', fn='isSameEntry', demands=['FileSystemHandle', 'FileSystemHandle'], returns='bool'),
    ],
    "createSyncAccessHandle": [
        PrototypeCall(constructor='FileSystemFileHandle', fn='createSyncAccessHandle', demands=['FileSystemFileHandle'], returns='FileSystemSyncAccessHandle'),
    ],
    "getFileHandle": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getFileHandle', demands=['FileSystemDirectoryHandle', 'str'], returns='FileSystemFileHandle'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getFileHandle', demands=['FileSystemDirectoryHandle', 'str', 'dict'], returns='FileSystemFileHandle'),
    ],
    "getDirectoryHandle": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getDirectoryHandle', demands=['FileSystemDirectoryHandle', 'str'], returns='FileSystemDirectoryHandle'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='getDirectoryHandle', demands=['FileSystemDirectoryHandle', 'str', 'dict'], returns='FileSystemDirectoryHandle'),
    ],
    "removeEntry": [
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='removeEntry', demands=['FileSystemDirectoryHandle', 'str'], returns='None'),
        PrototypeCall(constructor='FileSystemDirectoryHandle', fn='removeEntry', demands=['FileSystemDirectoryHandle', 'str', 'dict'], returns='None'),
    ],
    "seek": [
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='seek', demands=['FileSystemWritableFileStream', 'int'], returns='None'),
    ],
    "truncate": [
        PrototypeCall(constructor='FileSystemWritableFileStream', fn='truncate', demands=['FileSystemWritableFileStream', 'int'], returns='None'),
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='truncate', demands=['FileSystemSyncAccessHandle', 'int'], returns='None'),
    ],
    "getSize": [
        PrototypeCall(constructor='FileSystemSyncAccessHandle', fn='getSize', demands=['FileSystemSyncAccessHandle'], returns='int'),
    ],
    "Event": [
        NewCall(constructor='Event', demands=['str'], returns='Event'),
        NewCall(constructor='Event', demands=['str', 'dict'], returns='Event'),
    ],
    "srcElement": [
        FieldCall(field='srcElement', demands=['Event'], returns='EventTarget'),
    ],
    "currentTarget": [
        FieldCall(field='currentTarget', demands=['Event'], returns='EventTarget'),
    ],
    "composedPath": [
        PrototypeCall(constructor='Event', fn='composedPath', demands=['Event'], returns='EventTarget'),
    ],
    "eventPhase": [
        FieldCall(field='eventPhase', demands=['Event'], returns='unsigned short'),
    ],
    "stopPropagation": [
        PrototypeCall(constructor='Event', fn='stopPropagation', demands=['Event'], returns='None'),
    ],
    "cancelBubble": [
        FieldCall(field='cancelBubble', demands=['Event'], returns='bool'),
        FieldCall(field='cancelBubble', demands=['Event', 'bool'], returns='bool'),
    ],
    "stopImmediatePropagation": [
        PrototypeCall(constructor='Event', fn='stopImmediatePropagation', demands=['Event'], returns='None'),
    ],
    "bubbles": [
        FieldCall(field='bubbles', demands=['Event'], returns='bool'),
    ],
    "preventDefault": [
        PrototypeCall(constructor='Event', fn='preventDefault', demands=['Event'], returns='None'),
    ],
    "defaultPrevented": [
        FieldCall(field='defaultPrevented', demands=['Event'], returns='bool'),
    ],
    "composed": [
        FieldCall(field='composed', demands=['Event'], returns='bool'),
    ],
    "isTrusted": [
        FieldCall(field='isTrusted', demands=['Event'], returns='bool'),
    ],
    "timeStamp": [
        FieldCall(field='timeStamp', demands=['Event'], returns='float'),
    ],
    "initEvent": [
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str'], returns='None'),
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='Event', fn='initEvent', demands=['Event', 'str', 'bool', 'bool'], returns='None'),
    ],
    "CustomEvent": [
        NewCall(constructor='CustomEvent', demands=['str'], returns='CustomEvent'),
        NewCall(constructor='CustomEvent', demands=['str', 'dict'], returns='CustomEvent'),
    ],
    "initCustomEvent": [
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool', 'bool'], returns='None'),
        PrototypeCall(constructor='CustomEvent', fn='initCustomEvent', demands=['CustomEvent', 'str', 'bool', 'bool', '*'], returns='None'),
    ],
    "EventTarget": [
        NewCall(constructor='EventTarget', demands=[], returns='EventTarget'),
    ],
    "addEventListener": [
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListener'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListener', 'dict'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='addEventListener', demands=['EventTarget', 'str', 'EventListener', 'bool'], returns='None'),
    ],
    "removeEventListener": [
        PrototypeCall(constructor='EventTarget', fn='removeEventListener', demands=['EventTarget', 'str', 'EventListener'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='removeEventListener', demands=['EventTarget', 'str', 'EventListener', 'dict'], returns='None'),
        PrototypeCall(constructor='EventTarget', fn='removeEventListener', demands=['EventTarget', 'str', 'EventListener', 'bool'], returns='None'),
    ],
    "dispatchEvent": [
        PrototypeCall(constructor='EventTarget', fn='dispatchEvent', demands=['EventTarget', 'Event'], returns='bool'),
    ],
    "AbortController": [
        NewCall(constructor='AbortController', demands=[], returns='AbortController'),
    ],
    "aborted": [
        FieldCall(field='aborted', demands=['AbortSignal'], returns='bool'),
    ],
    "throwIfAborted": [
        PrototypeCall(constructor='AbortSignal', fn='throwIfAborted', demands=['AbortSignal'], returns='None'),
    ],
    "MutationObserver": [
        NewCall(constructor='MutationObserver', demands=['MutationCallback'], returns='MutationObserver'),
    ],
    "addedNodes": [
        FieldCall(field='addedNodes', demands=['MutationRecord'], returns='NodeList'),
    ],
    "removedNodes": [
        FieldCall(field='removedNodes', demands=['MutationRecord'], returns='NodeList'),
    ],
    "previousSibling": [
        FieldCall(field='previousSibling', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='previousSibling', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='previousSibling', demands=['TreeWalker'], returns='Node'),
    ],
    "nextSibling": [
        FieldCall(field='nextSibling', demands=['MutationRecord'], returns='Node'),
        FieldCall(field='nextSibling', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='nextSibling', demands=['TreeWalker'], returns='Node'),
    ],
    "attributeName": [
        FieldCall(field='attributeName', demands=['MutationRecord'], returns='str'),
    ],
    "attributeNamespace": [
        FieldCall(field='attributeNamespace', demands=['MutationRecord'], returns='str'),
    ],
    "nodeType": [
        FieldCall(field='nodeType', demands=['Node'], returns='unsigned short'),
    ],
    "nodeName": [
        FieldCall(field='nodeName', demands=['Node'], returns='str'),
    ],
    "baseURI": [
        FieldCall(field='baseURI', demands=['Node'], returns='str'),
    ],
    "isConnected": [
        FieldCall(field='isConnected', demands=['Node'], returns='bool'),
    ],
    "ownerDocument": [
        FieldCall(field='ownerDocument', demands=['Node'], returns='Document'),
    ],
    "getRootNode": [
        PrototypeCall(constructor='Node', fn='getRootNode', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='Node', fn='getRootNode', demands=['Node', 'dict'], returns='Node'),
    ],
    "parentNode": [
        FieldCall(field='parentNode', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='parentNode', demands=['TreeWalker'], returns='Node'),
    ],
    "parentElement": [
        FieldCall(field='parentElement', demands=['Node'], returns='Element'),
    ],
    "hasChildNodes": [
        PrototypeCall(constructor='Node', fn='hasChildNodes', demands=['Node'], returns='bool'),
    ],
    "childNodes": [
        FieldCall(field='childNodes', demands=['Node'], returns='NodeList'),
    ],
    "nodeValue": [
        FieldCall(field='nodeValue', demands=['Node'], returns='str'),
        FieldCall(field='nodeValue', demands=['Node', 'str'], returns='str'),
    ],
    "textContent": [
        FieldCall(field='textContent', demands=['Node'], returns='str'),
        FieldCall(field='textContent', demands=['Node', 'str'], returns='str'),
    ],
    "cloneNode": [
        PrototypeCall(constructor='Node', fn='cloneNode', demands=['Node'], returns='Node'),
        PrototypeCall(constructor='Node', fn='cloneNode', demands=['Node', 'bool'], returns='Node'),
    ],
    "isEqualNode": [
        PrototypeCall(constructor='Node', fn='isEqualNode', demands=['Node', 'Node'], returns='bool'),
    ],
    "isSameNode": [
        PrototypeCall(constructor='Node', fn='isSameNode', demands=['Node', 'Node'], returns='bool'),
    ],
    "compareDocumentPosition": [
        PrototypeCall(constructor='Node', fn='compareDocumentPosition', demands=['Node', 'Node'], returns='unsigned short'),
    ],
    "lookupPrefix": [
        PrototypeCall(constructor='Node', fn='lookupPrefix', demands=['Node', 'str'], returns='str'),
    ],
    "lookupNamespaceURI": [
        PrototypeCall(constructor='Node', fn='lookupNamespaceURI', demands=['Node', 'str'], returns='str'),
    ],
    "isDefaultNamespace": [
        PrototypeCall(constructor='Node', fn='isDefaultNamespace', demands=['Node', 'str'], returns='bool'),
    ],
    "insertBefore": [
        PrototypeCall(constructor='Node', fn='insertBefore', demands=['Node', 'Node', 'Node'], returns='Node'),
    ],
    "appendChild": [
        PrototypeCall(constructor='Node', fn='appendChild', demands=['Node', 'Node'], returns='Node'),
    ],
    "replaceChild": [
        PrototypeCall(constructor='Node', fn='replaceChild', demands=['Node', 'Node', 'Node'], returns='Node'),
    ],
    "removeChild": [
        PrototypeCall(constructor='Node', fn='removeChild', demands=['Node', 'Node'], returns='Node'),
    ],
    "Document": [
        NewCall(constructor='Document', demands=[], returns='Document'),
    ],
    "implementation": [
        FieldCall(field='implementation', demands=['Document'], returns='DOMImplementation'),
    ],
    "compatMode": [
        FieldCall(field='compatMode', demands=['Document'], returns='str'),
    ],
    "characterSet": [
        FieldCall(field='characterSet', demands=['Document'], returns='str'),
    ],
    "charset": [
        FieldCall(field='charset', demands=['Document'], returns='str'),
    ],
    "inputEncoding": [
        FieldCall(field='inputEncoding', demands=['Document'], returns='str'),
    ],
    "doctype": [
        FieldCall(field='doctype', demands=['Document'], returns='DocumentType'),
    ],
    "documentElement": [
        FieldCall(field='documentElement', demands=['Document'], returns='Element'),
    ],
    "getElementsByTagName": [
        PrototypeCall(constructor='Document', fn='getElementsByTagName', demands=['Document', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='Element', fn='getElementsByTagName', demands=['Element', 'str'], returns='HTMLCollection'),
    ],
    "getElementsByTagNameNS": [
        PrototypeCall(constructor='Document', fn='getElementsByTagNameNS', demands=['Document', 'str', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='Element', fn='getElementsByTagNameNS', demands=['Element', 'str', 'str'], returns='HTMLCollection'),
    ],
    "getElementsByClassName": [
        PrototypeCall(constructor='Document', fn='getElementsByClassName', demands=['Document', 'str'], returns='HTMLCollection'),
        PrototypeCall(constructor='Element', fn='getElementsByClassName', demands=['Element', 'str'], returns='HTMLCollection'),
    ],
    "createElement": [
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElement', demands=['Document', 'str', 'dict'], returns='Element'),
    ],
    "createElementNS": [
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str', 'str'], returns='Element'),
        PrototypeCall(constructor='Document', fn='createElementNS', demands=['Document', 'str', 'str', 'dict'], returns='Element'),
    ],
    "createDocumentFragment": [
        PrototypeCall(constructor='Document', fn='createDocumentFragment', demands=['Document'], returns='DocumentFragment'),
    ],
    "createTextNode": [
        PrototypeCall(constructor='Document', fn='createTextNode', demands=['Document', 'str'], returns='Text'),
    ],
    "createCDATASection": [
        PrototypeCall(constructor='Document', fn='createCDATASection', demands=['Document', 'str'], returns='CDATASection'),
    ],
    "createComment": [
        PrototypeCall(constructor='Document', fn='createComment', demands=['Document', 'str'], returns='Comment'),
    ],
    "createProcessingInstruction": [
        PrototypeCall(constructor='Document', fn='createProcessingInstruction', demands=['Document', 'str', 'str'], returns='ProcessingInstruction'),
    ],
    "importNode": [
        PrototypeCall(constructor='Document', fn='importNode', demands=['Document', 'Node'], returns='Node'),
        PrototypeCall(constructor='Document', fn='importNode', demands=['Document', 'Node', 'bool'], returns='Node'),
        PrototypeCall(constructor='Document', fn='importNode', demands=['Document', 'Node', 'dict'], returns='Node'),
    ],
    "adoptNode": [
        PrototypeCall(constructor='Document', fn='adoptNode', demands=['Document', 'Node'], returns='Node'),
    ],
    "createAttribute": [
        PrototypeCall(constructor='Document', fn='createAttribute', demands=['Document', 'str'], returns='Attr'),
    ],
    "createAttributeNS": [
        PrototypeCall(constructor='Document', fn='createAttributeNS', demands=['Document', 'str', 'str'], returns='Attr'),
    ],
    "createEvent": [
        PrototypeCall(constructor='Document', fn='createEvent', demands=['Document', 'str'], returns='Event'),
    ],
    "createRange": [
        PrototypeCall(constructor='Document', fn='createRange', demands=['Document'], returns='Range'),
    ],
    "createNodeIterator": [
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node'], returns='NodeIterator'),
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node', 'int'], returns='NodeIterator'),
        PrototypeCall(constructor='Document', fn='createNodeIterator', demands=['Document', 'Node', 'int', 'NodeFilter'], returns='NodeIterator'),
    ],
    "createTreeWalker": [
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node'], returns='TreeWalker'),
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node', 'int'], returns='TreeWalker'),
        PrototypeCall(constructor='Document', fn='createTreeWalker', demands=['Document', 'Node', 'int', 'NodeFilter'], returns='TreeWalker'),
    ],
    "getAnimations": [
        PrototypeCall(constructor='Document', fn='getAnimations', demands=['Document'], returns='Animation'),
        PrototypeCall(constructor='ShadowRoot', fn='getAnimations', demands=['ShadowRoot'], returns='Animation'),
        PrototypeCall(constructor='Element', fn='getAnimations', demands=['Element'], returns='Animation'),
        PrototypeCall(constructor='Element', fn='getAnimations', demands=['Element', 'dict'], returns='Animation'),
    ],
    "replaceChildren": [
        PrototypeCall(constructor='Document', fn='replaceChildren', demands=['Document', 'Node'], returns='None'),
        PrototypeCall(constructor='Document', fn='replaceChildren', demands=['Document', 'str'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='replaceChildren', demands=['DocumentFragment', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='replaceChildren', demands=['DocumentFragment', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='replaceChildren', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='replaceChildren', demands=['Element', 'str'], returns='None'),
    ],
    "moveBefore": [
        PrototypeCall(constructor='Document', fn='moveBefore', demands=['Document', 'Node', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentFragment', fn='moveBefore', demands=['DocumentFragment', 'Node', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='moveBefore', demands=['Element', 'Node', 'Node'], returns='None'),
    ],
    "querySelector": [
        PrototypeCall(constructor='Document', fn='querySelector', demands=['Document', 'str'], returns='Element'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelector', demands=['DocumentFragment', 'str'], returns='Element'),
        PrototypeCall(constructor='Element', fn='querySelector', demands=['Element', 'str'], returns='Element'),
    ],
    "querySelectorAll": [
        PrototypeCall(constructor='Document', fn='querySelectorAll', demands=['Document', 'str'], returns='NodeList'),
        PrototypeCall(constructor='DocumentFragment', fn='querySelectorAll', demands=['DocumentFragment', 'str'], returns='NodeList'),
        PrototypeCall(constructor='Element', fn='querySelectorAll', demands=['Element', 'str'], returns='NodeList'),
    ],
    "createExpression": [
        PrototypeCall(constructor='Document', fn='createExpression', demands=['Document', 'str'], returns='XPathExpression'),
        PrototypeCall(constructor='Document', fn='createExpression', demands=['Document', 'str', 'XPathNSResolver'], returns='XPathExpression'),
        PrototypeCall(constructor='XPathEvaluator', fn='createExpression', demands=['XPathEvaluator', 'str'], returns='XPathExpression'),
        PrototypeCall(constructor='XPathEvaluator', fn='createExpression', demands=['XPathEvaluator', 'str', 'XPathNSResolver'], returns='XPathExpression'),
    ],
    "createNSResolver": [
        PrototypeCall(constructor='Document', fn='createNSResolver', demands=['Document', 'Node'], returns='Node'),
        PrototypeCall(constructor='XPathEvaluator', fn='createNSResolver', demands=['XPathEvaluator', 'Node'], returns='Node'),
    ],
    "evaluate": [
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver', 'unsigned short'], returns='XPathResult'),
        PrototypeCall(constructor='Document', fn='evaluate', demands=['Document', 'str', 'Node', 'XPathNSResolver', 'unsigned short', 'XPathResult'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node', 'unsigned short'], returns='XPathResult'),
        PrototypeCall(constructor='XPathExpression', fn='evaluate', demands=['XPathExpression', 'Node', 'unsigned short', 'XPathResult'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver', 'unsigned short'], returns='XPathResult'),
        PrototypeCall(constructor='XPathEvaluator', fn='evaluate', demands=['XPathEvaluator', 'str', 'Node', 'XPathNSResolver', 'unsigned short', 'XPathResult'], returns='XPathResult'),
    ],
    "createDocumentType": [
        PrototypeCall(constructor='DOMImplementation', fn='createDocumentType', demands=['DOMImplementation', 'str', 'str', 'str'], returns='DocumentType'),
    ],
    "createDocument": [
        PrototypeCall(constructor='DOMImplementation', fn='createDocument', demands=['DOMImplementation', 'str', 'str'], returns='XMLDocument'),
        PrototypeCall(constructor='DOMImplementation', fn='createDocument', demands=['DOMImplementation', 'str', 'str', 'DocumentType'], returns='XMLDocument'),
    ],
    "createHTMLDocument": [
        PrototypeCall(constructor='DOMImplementation', fn='createHTMLDocument', demands=['DOMImplementation'], returns='Document'),
        PrototypeCall(constructor='DOMImplementation', fn='createHTMLDocument', demands=['DOMImplementation', 'str'], returns='Document'),
    ],
    "publicId": [
        FieldCall(field='publicId', demands=['DocumentType'], returns='str'),
    ],
    "systemId": [
        FieldCall(field='systemId', demands=['DocumentType'], returns='str'),
    ],
    "before": [
        PrototypeCall(constructor='DocumentType', fn='before', demands=['DocumentType', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='before', demands=['DocumentType', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='before', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='before', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='before', demands=['CharacterData', 'Node'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='before', demands=['CharacterData', 'str'], returns='None'),
    ],
    "after": [
        PrototypeCall(constructor='DocumentType', fn='after', demands=['DocumentType', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='after', demands=['DocumentType', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='after', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='after', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='after', demands=['CharacterData', 'Node'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='after', demands=['CharacterData', 'str'], returns='None'),
    ],
    "replaceWith": [
        PrototypeCall(constructor='DocumentType', fn='replaceWith', demands=['DocumentType', 'Node'], returns='None'),
        PrototypeCall(constructor='DocumentType', fn='replaceWith', demands=['DocumentType', 'str'], returns='None'),
        PrototypeCall(constructor='Element', fn='replaceWith', demands=['Element', 'Node'], returns='None'),
        PrototypeCall(constructor='Element', fn='replaceWith', demands=['Element', 'str'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='replaceWith', demands=['CharacterData', 'Node'], returns='None'),
        PrototypeCall(constructor='CharacterData', fn='replaceWith', demands=['CharacterData', 'str'], returns='None'),
    ],
    "DocumentFragment": [
        NewCall(constructor='DocumentFragment', demands=[], returns='DocumentFragment'),
    ],
    "delegatesFocus": [
        FieldCall(field='delegatesFocus', demands=['ShadowRoot'], returns='bool'),
    ],
    "slotAssignment": [
        FieldCall(field='slotAssignment', demands=['ShadowRoot'], returns='SlotAssignmentMode'),
    ],
    "clonable": [
        FieldCall(field='clonable', demands=['ShadowRoot'], returns='bool'),
    ],
    "serializable": [
        FieldCall(field='serializable', demands=['ShadowRoot'], returns='bool'),
    ],
    "onslotchange": [
        FieldCall(field='onslotchange', demands=['ShadowRoot'], returns='EventHandler'),
        FieldCall(field='onslotchange', demands=['ShadowRoot', 'EventHandler'], returns='EventHandler'),
    ],
    "localName": [
        FieldCall(field='localName', demands=['Element'], returns='str'),
        FieldCall(field='localName', demands=['Attr'], returns='str'),
    ],
    "tagName": [
        FieldCall(field='tagName', demands=['Element'], returns='str'),
    ],
    "classList": [
        FieldCall(field='classList', demands=['Element'], returns='DOMTokenList'),
    ],
    "slot": [
        FieldCall(field='slot', demands=['Element'], returns='str'),
        FieldCall(field='slot', demands=['Element', 'str'], returns='str'),
    ],
    "hasAttributes": [
        PrototypeCall(constructor='Element', fn='hasAttributes', demands=['Element'], returns='bool'),
    ],
    "attributes": [
        FieldCall(field='attributes', demands=['Element'], returns='NamedNodeMap'),
    ],
    "getAttributeNames": [
        PrototypeCall(constructor='Element', fn='getAttributeNames', demands=['Element'], returns='str'),
    ],
    "getAttribute": [
        PrototypeCall(constructor='Element', fn='getAttribute', demands=['Element', 'str'], returns='str'),
    ],
    "getAttributeNS": [
        PrototypeCall(constructor='Element', fn='getAttributeNS', demands=['Element', 'str', 'str'], returns='str'),
    ],
    "setAttribute": [
        PrototypeCall(constructor='Element', fn='setAttribute', demands=['Element', 'str', 'str'], returns='None'),
    ],
    "setAttributeNS": [
        PrototypeCall(constructor='Element', fn='setAttributeNS', demands=['Element', 'str', 'str', 'str'], returns='None'),
    ],
    "removeAttributeNS": [
        PrototypeCall(constructor='Element', fn='removeAttributeNS', demands=['Element', 'str', 'str'], returns='None'),
    ],
    "toggleAttribute": [
        PrototypeCall(constructor='Element', fn='toggleAttribute', demands=['Element', 'str'], returns='bool'),
        PrototypeCall(constructor='Element', fn='toggleAttribute', demands=['Element', 'str', 'bool'], returns='bool'),
    ],
    "hasAttribute": [
        PrototypeCall(constructor='Element', fn='hasAttribute', demands=['Element', 'str'], returns='bool'),
    ],
    "hasAttributeNS": [
        PrototypeCall(constructor='Element', fn='hasAttributeNS', demands=['Element', 'str', 'str'], returns='bool'),
    ],
    "getAttributeNode": [
        PrototypeCall(constructor='Element', fn='getAttributeNode', demands=['Element', 'str'], returns='Attr'),
    ],
    "getAttributeNodeNS": [
        PrototypeCall(constructor='Element', fn='getAttributeNodeNS', demands=['Element', 'str', 'str'], returns='Attr'),
    ],
    "setAttributeNode": [
        PrototypeCall(constructor='Element', fn='setAttributeNode', demands=['Element', 'Attr'], returns='Attr'),
    ],
    "setAttributeNodeNS": [
        PrototypeCall(constructor='Element', fn='setAttributeNodeNS', demands=['Element', 'Attr'], returns='Attr'),
    ],
    "removeAttributeNode": [
        PrototypeCall(constructor='Element', fn='removeAttributeNode', demands=['Element', 'Attr'], returns='Attr'),
    ],
    "attachShadow": [
        PrototypeCall(constructor='Element', fn='attachShadow', demands=['Element', 'dict'], returns='ShadowRoot'),
    ],
    "customElementRegistry": [
        FieldCall(field='customElementRegistry', demands=['Element'], returns='CustomElementRegistry'),
    ],
    "closest": [
        PrototypeCall(constructor='Element', fn='closest', demands=['Element', 'str'], returns='Element'),
    ],
    "webkitMatchesSelector": [
        PrototypeCall(constructor='Element', fn='webkitMatchesSelector', demands=['Element', 'str'], returns='bool'),
    ],
    "insertAdjacentElement": [
        PrototypeCall(constructor='Element', fn='insertAdjacentElement', demands=['Element', 'str', 'Element'], returns='Element'),
    ],
    "insertAdjacentText": [
        PrototypeCall(constructor='Element', fn='insertAdjacentText', demands=['Element', 'str', 'str'], returns='None'),
    ],
    "animate": [
        PrototypeCall(constructor='Element', fn='animate', demands=['Element', 'object'], returns='Animation'),
        PrototypeCall(constructor='Element', fn='animate', demands=['Element', 'object', 'float'], returns='Animation'),
        PrototypeCall(constructor='Element', fn='animate', demands=['Element', 'object', 'dict'], returns='Animation'),
    ],
    "getRegionFlowRanges": [
        PrototypeCall(constructor='Element', fn='getRegionFlowRanges', demands=['Element'], returns='Range'),
    ],
    "getNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='getNamedItem', demands=['NamedNodeMap', 'str'], returns='Attr'),
    ],
    "getNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='getNamedItemNS', demands=['NamedNodeMap', 'str', 'str'], returns='Attr'),
    ],
    "setNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='setNamedItem', demands=['NamedNodeMap', 'Attr'], returns='Attr'),
    ],
    "setNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='setNamedItemNS', demands=['NamedNodeMap', 'Attr'], returns='Attr'),
    ],
    "removeNamedItem": [
        PrototypeCall(constructor='NamedNodeMap', fn='removeNamedItem', demands=['NamedNodeMap', 'str'], returns='Attr'),
    ],
    "removeNamedItemNS": [
        PrototypeCall(constructor='NamedNodeMap', fn='removeNamedItemNS', demands=['NamedNodeMap', 'str', 'str'], returns='Attr'),
    ],
    "ownerElement": [
        FieldCall(field='ownerElement', demands=['Attr'], returns='Element'),
    ],
    "specified": [
        FieldCall(field='specified', demands=['Attr'], returns='bool'),
    ],
    "substringData": [
        PrototypeCall(constructor='CharacterData', fn='substringData', demands=['CharacterData', 'int', 'int'], returns='str'),
    ],
    "appendData": [
        PrototypeCall(constructor='CharacterData', fn='appendData', demands=['CharacterData', 'str'], returns='None'),
    ],
    "insertData": [
        PrototypeCall(constructor='CharacterData', fn='insertData', demands=['CharacterData', 'int', 'str'], returns='None'),
    ],
    "deleteData": [
        PrototypeCall(constructor='CharacterData', fn='deleteData', demands=['CharacterData', 'int', 'int'], returns='None'),
    ],
    "replaceData": [
        PrototypeCall(constructor='CharacterData', fn='replaceData', demands=['CharacterData', 'int', 'int', 'str'], returns='None'),
    ],
    "Text": [
        NewCall(constructor='Text', demands=[], returns='Text'),
        NewCall(constructor='Text', demands=['str'], returns='Text'),
    ],
    "splitText": [
        PrototypeCall(constructor='Text', fn='splitText', demands=['Text', 'int'], returns='Text'),
    ],
    "wholeText": [
        FieldCall(field='wholeText', demands=['Text'], returns='str'),
    ],
    "Comment": [
        NewCall(constructor='Comment', demands=[], returns='Comment'),
        NewCall(constructor='Comment', demands=['str'], returns='Comment'),
    ],
    "startContainer": [
        FieldCall(field='startContainer', demands=['AbstractRange'], returns='Node'),
    ],
    "endContainer": [
        FieldCall(field='endContainer', demands=['AbstractRange'], returns='Node'),
    ],
    "collapsed": [
        FieldCall(field='collapsed', demands=['AbstractRange'], returns='bool'),
    ],
    "StaticRange": [
        NewCall(constructor='StaticRange', demands=['dict'], returns='StaticRange'),
    ],
    "Range": [
        NewCall(constructor='Range', demands=[], returns='Range'),
    ],
    "commonAncestorContainer": [
        FieldCall(field='commonAncestorContainer', demands=['Range'], returns='Node'),
    ],
    "setStart": [
        PrototypeCall(constructor='Range', fn='setStart', demands=['Range', 'Node', 'int'], returns='None'),
    ],
    "setEnd": [
        PrototypeCall(constructor='Range', fn='setEnd', demands=['Range', 'Node', 'int'], returns='None'),
    ],
    "setStartBefore": [
        PrototypeCall(constructor='Range', fn='setStartBefore', demands=['Range', 'Node'], returns='None'),
    ],
    "setStartAfter": [
        PrototypeCall(constructor='Range', fn='setStartAfter', demands=['Range', 'Node'], returns='None'),
    ],
    "setEndBefore": [
        PrototypeCall(constructor='Range', fn='setEndBefore', demands=['Range', 'Node'], returns='None'),
    ],
    "setEndAfter": [
        PrototypeCall(constructor='Range', fn='setEndAfter', demands=['Range', 'Node'], returns='None'),
    ],
    "selectNode": [
        PrototypeCall(constructor='Range', fn='selectNode', demands=['Range', 'Node'], returns='None'),
    ],
    "selectNodeContents": [
        PrototypeCall(constructor='Range', fn='selectNodeContents', demands=['Range', 'Node'], returns='None'),
    ],
    "compareBoundaryPoints": [
        PrototypeCall(constructor='Range', fn='compareBoundaryPoints', demands=['Range', 'unsigned short', 'Range'], returns='short'),
    ],
    "deleteContents": [
        PrototypeCall(constructor='Range', fn='deleteContents', demands=['Range'], returns='None'),
    ],
    "extractContents": [
        PrototypeCall(constructor='Range', fn='extractContents', demands=['Range'], returns='DocumentFragment'),
    ],
    "cloneContents": [
        PrototypeCall(constructor='Range', fn='cloneContents', demands=['Range'], returns='DocumentFragment'),
    ],
    "insertNode": [
        PrototypeCall(constructor='Range', fn='insertNode', demands=['Range', 'Node'], returns='None'),
    ],
    "surroundContents": [
        PrototypeCall(constructor='Range', fn='surroundContents', demands=['Range', 'Node'], returns='None'),
    ],
    "cloneRange": [
        PrototypeCall(constructor='Range', fn='cloneRange', demands=['Range'], returns='Range'),
    ],
    "detach": [
        PrototypeCall(constructor='Range', fn='detach', demands=['Range'], returns='None'),
        PrototypeCall(constructor='NodeIterator', fn='detach', demands=['NodeIterator'], returns='None'),
    ],
    "isPointInRange": [
        PrototypeCall(constructor='Range', fn='isPointInRange', demands=['Range', 'Node', 'int'], returns='bool'),
    ],
    "comparePoint": [
        PrototypeCall(constructor='Range', fn='comparePoint', demands=['Range', 'Node', 'int'], returns='short'),
    ],
    "intersectsNode": [
        PrototypeCall(constructor='Range', fn='intersectsNode', demands=['Range', 'Node'], returns='bool'),
    ],
    "referenceNode": [
        FieldCall(field='referenceNode', demands=['NodeIterator'], returns='Node'),
    ],
    "pointerBeforeReferenceNode": [
        FieldCall(field='pointerBeforeReferenceNode', demands=['NodeIterator'], returns='bool'),
    ],
    "whatToShow": [
        FieldCall(field='whatToShow', demands=['NodeIterator'], returns='int'),
        FieldCall(field='whatToShow', demands=['TreeWalker'], returns='int'),
    ],
    "nextNode": [
        PrototypeCall(constructor='NodeIterator', fn='nextNode', demands=['NodeIterator'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='nextNode', demands=['TreeWalker'], returns='Node'),
    ],
    "previousNode": [
        PrototypeCall(constructor='NodeIterator', fn='previousNode', demands=['NodeIterator'], returns='Node'),
        PrototypeCall(constructor='TreeWalker', fn='previousNode', demands=['TreeWalker'], returns='Node'),
    ],
    "currentNode": [
        FieldCall(field='currentNode', demands=['TreeWalker'], returns='Node'),
        FieldCall(field='currentNode', demands=['TreeWalker', 'Node'], returns='Node'),
    ],
    "toggle": [
        PrototypeCall(constructor='DOMTokenList', fn='toggle', demands=['DOMTokenList', 'str'], returns='bool'),
        PrototypeCall(constructor='DOMTokenList', fn='toggle', demands=['DOMTokenList', 'str', 'bool'], returns='bool'),
    ],
    "resultType": [
        FieldCall(field='resultType', demands=['XPathResult'], returns='unsigned short'),
    ],
    "numberValue": [
        FieldCall(field='numberValue', demands=['XPathResult'], returns='float'),
    ],
    "stringValue": [
        FieldCall(field='stringValue', demands=['XPathResult'], returns='str'),
    ],
    "booleanValue": [
        FieldCall(field='booleanValue', demands=['XPathResult'], returns='bool'),
    ],
    "singleNodeValue": [
        FieldCall(field='singleNodeValue', demands=['XPathResult'], returns='Node'),
    ],
    "invalidIteratorState": [
        FieldCall(field='invalidIteratorState', demands=['XPathResult'], returns='bool'),
    ],
    "snapshotLength": [
        FieldCall(field='snapshotLength', demands=['XPathResult'], returns='int'),
    ],
    "iterateNext": [
        PrototypeCall(constructor='XPathResult', fn='iterateNext', demands=['XPathResult'], returns='Node'),
    ],
    "snapshotItem": [
        PrototypeCall(constructor='XPathResult', fn='snapshotItem', demands=['XPathResult', 'int'], returns='Node'),
    ],
    "XPathEvaluator": [
        NewCall(constructor='XPathEvaluator', demands=[], returns='XPathEvaluator'),
    ],
    "XSLTProcessor": [
        NewCall(constructor='XSLTProcessor', demands=[], returns='XSLTProcessor'),
    ],
    "importStylesheet": [
        PrototypeCall(constructor='XSLTProcessor', fn='importStylesheet', demands=['XSLTProcessor', 'Node'], returns='None'),
    ],
    "transformToFragment": [
        PrototypeCall(constructor='XSLTProcessor', fn='transformToFragment', demands=['XSLTProcessor', 'Node', 'Document'], returns='DocumentFragment'),
    ],
    "transformToDocument": [
        PrototypeCall(constructor='XSLTProcessor', fn='transformToDocument', demands=['XSLTProcessor', 'Node'], returns='Document'),
    ],
    "setParameter": [
        PrototypeCall(constructor='XSLTProcessor', fn='setParameter', demands=['XSLTProcessor', 'str', 'str', '*'], returns='None'),
    ],
    "removeParameter": [
        PrototypeCall(constructor='XSLTProcessor', fn='removeParameter', demands=['XSLTProcessor', 'str', 'str'], returns='None'),
    ],
    "clearParameters": [
        PrototypeCall(constructor='XSLTProcessor', fn='clearParameters', demands=['XSLTProcessor'], returns='None'),
    ],
    "QuotaExceededError": [
        NewCall(constructor='QuotaExceededError', demands=[], returns='QuotaExceededError'),
        NewCall(constructor='QuotaExceededError', demands=['str'], returns='QuotaExceededError'),
        NewCall(constructor='QuotaExceededError', demands=['str', 'dict'], returns='QuotaExceededError'),
    ],
    "quota": [
        FieldCall(field='quota', demands=['QuotaExceededError'], returns='float'),
    ],
    "requested": [
        FieldCall(field='requested', demands=['QuotaExceededError'], returns='float'),
    ],
    "DOMException": [
        NewCall(constructor='DOMException', demands=[], returns='DOMException'),
        NewCall(constructor='DOMException', demands=['str'], returns='DOMException'),
        NewCall(constructor='DOMException', demands=['str', 'str'], returns='DOMException'),
    ],
    "getIds": [
        PrototypeCall(constructor='BackgroundFetchManager', fn='getIds', demands=['BackgroundFetchManager'], returns='str'),
    ],
    "uploadTotal": [
        FieldCall(field='uploadTotal', demands=['BackgroundFetchRegistration'], returns='int'),
    ],
    "uploaded": [
        FieldCall(field='uploaded', demands=['BackgroundFetchRegistration'], returns='int'),
    ],
    "downloadTotal": [
        FieldCall(field='downloadTotal', demands=['BackgroundFetchRegistration'], returns='int'),
    ],
    "downloaded": [
        FieldCall(field='downloaded', demands=['BackgroundFetchRegistration'], returns='int'),
    ],
    "failureReason": [
        FieldCall(field='failureReason', demands=['BackgroundFetchRegistration'], returns='BackgroundFetchFailureReason'),
    ],
    "recordsAvailable": [
        FieldCall(field='recordsAvailable', demands=['BackgroundFetchRegistration'], returns='bool'),
    ],
    "responseReady": [
        FieldCall(field='responseReady', demands=['BackgroundFetchRecord'], returns='Response'),
    ],
    "BackgroundFetchEvent": [
        NewCall(constructor='BackgroundFetchEvent', demands=['str', 'dict'], returns='BackgroundFetchEvent'),
    ],
    "BackgroundFetchUpdateUIEvent": [
        NewCall(constructor='BackgroundFetchUpdateUIEvent', demands=['str', 'dict'], returns='BackgroundFetchUpdateUIEvent'),
    ],
    "updateUI": [
        PrototypeCall(constructor='BackgroundFetchUpdateUIEvent', fn='updateUI', demands=['BackgroundFetchUpdateUIEvent'], returns='None'),
        PrototypeCall(constructor='BackgroundFetchUpdateUIEvent', fn='updateUI', demands=['BackgroundFetchUpdateUIEvent', 'dict'], returns='None'),
    ],
    "MediaSource": [
        NewCall(constructor='MediaSource', demands=[], returns='MediaSource'),
    ],
    "handle": [
        FieldCall(field='handle', demands=['MediaSource'], returns='MediaSourceHandle'),
    ],
    "sourceBuffers": [
        FieldCall(field='sourceBuffers', demands=['MediaSource'], returns='SourceBufferList'),
    ],
    "activeSourceBuffers": [
        FieldCall(field='activeSourceBuffers', demands=['MediaSource'], returns='SourceBufferList'),
    ],
    "onsourceopen": [
        FieldCall(field='onsourceopen', demands=['MediaSource'], returns='EventHandler'),
        FieldCall(field='onsourceopen', demands=['MediaSource', 'EventHandler'], returns='EventHandler'),
    ],
    "onsourceended": [
        FieldCall(field='onsourceended', demands=['MediaSource'], returns='EventHandler'),
        FieldCall(field='onsourceended', demands=['MediaSource', 'EventHandler'], returns='EventHandler'),
    ],
    "onsourceclose": [
        FieldCall(field='onsourceclose', demands=['MediaSource'], returns='EventHandler'),
        FieldCall(field='onsourceclose', demands=['MediaSource', 'EventHandler'], returns='EventHandler'),
    ],
    "canConstructInDedicatedWorker": [
        FieldCall(field='canConstructInDedicatedWorker', demands=['MediaSource'], returns='bool'),
    ],
    "addSourceBuffer": [
        PrototypeCall(constructor='MediaSource', fn='addSourceBuffer', demands=['MediaSource', 'str'], returns='SourceBuffer'),
    ],
    "removeSourceBuffer": [
        PrototypeCall(constructor='MediaSource', fn='removeSourceBuffer', demands=['MediaSource', 'SourceBuffer'], returns='None'),
    ],
    "endOfStream": [
        PrototypeCall(constructor='MediaSource', fn='endOfStream', demands=['MediaSource'], returns='None'),
        PrototypeCall(constructor='MediaSource', fn='endOfStream', demands=['MediaSource', 'EndOfStreamError'], returns='None'),
    ],
    "setLiveSeekableRange": [
        PrototypeCall(constructor='MediaSource', fn='setLiveSeekableRange', demands=['MediaSource', 'float', 'float'], returns='None'),
    ],
    "clearLiveSeekableRange": [
        PrototypeCall(constructor='MediaSource', fn='clearLiveSeekableRange', demands=['MediaSource'], returns='None'),
    ],
    "updating": [
        FieldCall(field='updating', demands=['SourceBuffer'], returns='bool'),
    ],
    "timestampOffset": [
        FieldCall(field='timestampOffset', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='timestampOffset', demands=['SourceBuffer', 'float'], returns='float'),
    ],
    "appendWindowStart": [
        FieldCall(field='appendWindowStart', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='appendWindowStart', demands=['SourceBuffer', 'float'], returns='float'),
    ],
    "appendWindowEnd": [
        FieldCall(field='appendWindowEnd', demands=['SourceBuffer'], returns='float'),
        FieldCall(field='appendWindowEnd', demands=['SourceBuffer', 'float'], returns='float'),
    ],
    "onupdatestart": [
        FieldCall(field='onupdatestart', demands=['SourceBuffer'], returns='EventHandler'),
        FieldCall(field='onupdatestart', demands=['SourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "onupdate": [
        FieldCall(field='onupdate', demands=['SourceBuffer'], returns='EventHandler'),
        FieldCall(field='onupdate', demands=['SourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "onupdateend": [
        FieldCall(field='onupdateend', demands=['SourceBuffer'], returns='EventHandler'),
        FieldCall(field='onupdateend', demands=['SourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "appendBuffer": [
        PrototypeCall(constructor='SourceBuffer', fn='appendBuffer', demands=['SourceBuffer', 'BufferSource'], returns='None'),
    ],
    "changeType": [
        PrototypeCall(constructor='SourceBuffer', fn='changeType', demands=['SourceBuffer', 'str'], returns='None'),
    ],
    "onaddsourcebuffer": [
        FieldCall(field='onaddsourcebuffer', demands=['SourceBufferList'], returns='EventHandler'),
        FieldCall(field='onaddsourcebuffer', demands=['SourceBufferList', 'EventHandler'], returns='EventHandler'),
    ],
    "onremovesourcebuffer": [
        FieldCall(field='onremovesourcebuffer', demands=['SourceBufferList'], returns='EventHandler'),
        FieldCall(field='onremovesourcebuffer', demands=['SourceBufferList', 'EventHandler'], returns='EventHandler'),
    ],
    "ManagedMediaSource": [
        NewCall(constructor='ManagedMediaSource', demands=[], returns='ManagedMediaSource'),
    ],
    "streaming": [
        FieldCall(field='streaming', demands=['ManagedMediaSource'], returns='bool'),
    ],
    "onstartstreaming": [
        FieldCall(field='onstartstreaming', demands=['ManagedMediaSource'], returns='EventHandler'),
        FieldCall(field='onstartstreaming', demands=['ManagedMediaSource', 'EventHandler'], returns='EventHandler'),
    ],
    "onendstreaming": [
        FieldCall(field='onendstreaming', demands=['ManagedMediaSource'], returns='EventHandler'),
        FieldCall(field='onendstreaming', demands=['ManagedMediaSource', 'EventHandler'], returns='EventHandler'),
    ],
    "BufferedChangeEvent": [
        NewCall(constructor='BufferedChangeEvent', demands=['str'], returns='BufferedChangeEvent'),
        NewCall(constructor='BufferedChangeEvent', demands=['str', 'dict'], returns='BufferedChangeEvent'),
    ],
    "addedRanges": [
        FieldCall(field='addedRanges', demands=['BufferedChangeEvent'], returns='TimeRanges'),
    ],
    "removedRanges": [
        FieldCall(field='removedRanges', demands=['BufferedChangeEvent'], returns='TimeRanges'),
    ],
    "onbufferedchange": [
        FieldCall(field='onbufferedchange', demands=['ManagedSourceBuffer'], returns='EventHandler'),
        FieldCall(field='onbufferedchange', demands=['ManagedSourceBuffer', 'EventHandler'], returns='EventHandler'),
    ],
    "transitionProperty": [
        FieldCall(field='transitionProperty', demands=['CSSTransition'], returns='CSSOMString'),
    ],
    "syntax": [
        FieldCall(field='syntax', demands=['CSSPropertyRule'], returns='CSSOMString'),
    ],
    "inherits": [
        FieldCall(field='inherits', demands=['CSSPropertyRule'], returns='bool'),
    ],
    "initialValue": [
        FieldCall(field='initialValue', demands=['CSSPropertyRule'], returns='CSSOMString'),
    ],
    "playbackState": [
        FieldCall(field='playbackState', demands=['MediaSession'], returns='MediaSessionPlaybackState'),
        FieldCall(field='playbackState', demands=['MediaSession', 'MediaSessionPlaybackState'], returns='MediaSessionPlaybackState'),
    ],
    "setActionHandler": [
        PrototypeCall(constructor='MediaSession', fn='setActionHandler', demands=['MediaSession', 'MediaSessionAction', 'MediaSessionActionHandler'], returns='None'),
    ],
    "setPositionState": [
        PrototypeCall(constructor='MediaSession', fn='setPositionState', demands=['MediaSession'], returns='None'),
        PrototypeCall(constructor='MediaSession', fn='setPositionState', demands=['MediaSession', 'dict'], returns='None'),
    ],
    "setMicrophoneActive": [
        PrototypeCall(constructor='MediaSession', fn='setMicrophoneActive', demands=['MediaSession', 'bool'], returns='None'),
    ],
    "setCameraActive": [
        PrototypeCall(constructor='MediaSession', fn='setCameraActive', demands=['MediaSession', 'bool'], returns='None'),
    ],
    "setScreenshareActive": [
        PrototypeCall(constructor='MediaSession', fn='setScreenshareActive', demands=['MediaSession', 'bool'], returns='None'),
    ],
    "MediaMetadata": [
        NewCall(constructor='MediaMetadata', demands=[], returns='MediaMetadata'),
        NewCall(constructor='MediaMetadata', demands=['dict'], returns='MediaMetadata'),
    ],
    "artist": [
        FieldCall(field='artist', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='artist', demands=['MediaMetadata', 'str'], returns='str'),
    ],
    "album": [
        FieldCall(field='album', demands=['MediaMetadata'], returns='str'),
        FieldCall(field='album', demands=['MediaMetadata', 'str'], returns='str'),
    ],
    "artwork": [
        FieldCall(field='artwork', demands=['MediaMetadata'], returns='object'),
        FieldCall(field='artwork', demands=['MediaMetadata', 'object'], returns='object'),
        FieldCall(field='artwork', demands=['ChapterInformation'], returns='dict'),
    ],
    "chapterInfo": [
        FieldCall(field='chapterInfo', demands=['MediaMetadata'], returns='ChapterInformation'),
    ],
    "getPathSegmentAtLength": [
        PrototypeCall(constructor='SVGPathElement', fn='getPathSegmentAtLength', demands=['SVGPathElement', 'float'], returns='SVGPathSegment'),
    ],
    "getPathData": [
        PrototypeCall(constructor='SVGPathElement', fn='getPathData', demands=['SVGPathElement'], returns='SVGPathSegment'),
        PrototypeCall(constructor='SVGPathElement', fn='getPathData', demands=['SVGPathElement', 'dict'], returns='SVGPathSegment'),
    ],
    "setPathData": [
        PrototypeCall(constructor='SVGPathElement', fn='setPathData', demands=['SVGPathElement', 'SVGPathSegment'], returns='None'),
    ],
}
