PIL:file
	local input
		stdin

	local words
		noscope
			local _0x0__input
				PIL:access_local input

		local _0x1__split
			PIL:call split
				PIL:access_local _0x0__input

				string "\n"

	local groups
		dict

	for word in
		local _0x2__words
			PIL:access_local words

		do
			local key
				noscope
					local _0x3__word
						PIL:access_local word

					local _0x4__split
						PIL:call split
							PIL:access_local _0x3__word

							string ""

					local _0x5__sort
						PIL:call sort
							PIL:access_local _0x4__split

				local _0x6__join
					PIL:call join
						PIL:access_local _0x5__sort

						string ""

			# TODO this really ought to be a macro. with(a groups key)do(if(self eq null)then(self(list))) or something?

			#  well, that is still too verbose. perhaps something more like a groups key (executing if (self eq null); list)

			#  which would be hilariously similar to a Python comprehension. lmfao. WHAT THE FUCK AM I COOKING ?!

			if
				none
					exists
						local _0x7__key
							PIL:access_local key

				then
					noscope
						local _0x9__groups
							PIL:access_local groups

					local _0xa__key
						PIL:access_index _0x9__groups
							local _0xb__key
								PIL:access_local key

							list

			noscope
				local _0xd__groups
					PIL:access_local groups

				local _0xe__key
					PIL:access_index _0xd__groups
						local _0xf__key
							PIL:access_local key

			local _0x10__push
				PIL:call push
					PIL:access_local _0xe__key

					local _0xc__word
						PIL:access_local word

	for group in
		values
			local _0x11__groups
				PIL:access_local groups

		do
			print
				noscope
					local _0x12__group
						PIL:access_local group

				local _0x13__join
					PIL:call join
						PIL:access_local _0x12__group

						string " "


